<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“有用之用”还是“无用之用” -#4</title>
    <link href="/2022/07/10/%E2%80%9C%E6%9C%89%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D%E8%BF%98%E6%98%AF%E2%80%9C%E6%97%A0%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D-4/"/>
    <url>/2022/07/10/%E2%80%9C%E6%9C%89%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D%E8%BF%98%E6%98%AF%E2%80%9C%E6%97%A0%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D-4/</url>
    
    <content type="html"><![CDATA[<p>这是 Suncle Lab 第 4 期，我会在这里更新区块链、技术、金融、旅行和个人成长相关的内容。每期都会同步发布在我<a href="https://suncle.me/">博客</a>，欢迎你<a href="https://suncle.zhubai.love/">邮箱订阅</a>，这样就可以第一时间收到更新推送。</p><p>读书时代，我们经常会听到老师和家长告诫我们，学习一定要能学以致用，不能产生价值的不要浪费时间。</p><p>比如在高中，老师会说，一切对高考没有用处的杂事，都应该舍弃，不要看没办法直接增加分数的杂志，甚至《读者》、《意林》、《青年文摘》这类杂志都不建议看。</p><p>但是庄子在《人间世》中又这样说道：</p><blockquote><p>山木自寇也，膏火自煎也。桂可食，故伐之；漆可用，故割之。人皆知有用之用，而莫知无用之用也。</p></blockquote><p>讲人话就是：树木、油脂、桂树皮、树漆这些具有使用价值的物品，都会因使用而毁灭。反而森林中那种不能用于造船而且容易腐烂，百无一用的树种，最终能长成参天大树。</p><p>所以，本期内容主要会围绕无用之用讨论以下内容：</p><ul><li>“有用之用”还是“无用之用”？</li><li>比特币和以太坊谁更有价值？</li></ul><h2 id="“有用之用”还是“无用之用”"><a href="#“有用之用”还是“无用之用”" class="headerlink" title="“有用之用”还是“无用之用”"></a>“有用之用”还是“无用之用”</h2><p>首先，我们判断一个东西是有用还是无用，更多的是在讨论一个东西是否具有使用价值。 </p><p>生活中有使用价值的东西有很多，比如说，石油，除了作为燃油，还可以练出各种化学产品。</p><p>最常见的有塑料 、沥青、衣服、合成橡胶、制药、清洁用品等等，可以说现代文明把石油比作“工业的血液”一点也不为过。</p><p>但是，生活中很多东西是没有使用价值但又很有价值的。</p><p>阅读有没有用呢？你可能会说看书又不会立刻提升工资，也没办法让你买得起今晚上要吃的面包。</p><p>旅游有没有用呢？你去旅游领导也不会给你升职，还可能会说你不务正业，当然也不只是领导了，你的父母大概率也都会这样说的。</p><p>还记得我毕业之后的几年里面，几乎每个周末都到周边看看，差不多走遍了整个江浙沪，也被我爸妈劝诫了无数次：整天就知道出去玩，工作不好好干，以后怎么娶媳妇？怎么买房？</p><p>如果毕业的时候只是着眼于当前的生活，所有的努力都只是为了谋生，就很容易陷入绝大多数毕业生都无法逃脱的迷茫。</p><p>我们要跳出局部空间，从更长远的时间维度去思考，做自己的主人，将业余时间放在提升认知上，多去研究数学，多去深入哲学，尽可能的摒弃重复工作，多一些高屋建瓴，少一些原地打转。</p><p><strong>无用之用，是为大用。</strong></p><p>除了阅读、旅游、数学、哲学，还有一个很典型的没有使用价值但很有价值的东西就是法币。</p><p>如果说纸制的法币还能用来燃烧，那么数字化的法币就完全丢失了使用价值，只剩下和面值相等的数额价值了。</p><p>那在加密世界里面的比特币和以太坊又都有什么价值呢？</p><h2 id="比特币和以太坊谁更有价值"><a href="#比特币和以太坊谁更有价值" class="headerlink" title="比特币和以太坊谁更有价值"></a>比特币和以太坊谁更有价值</h2><p>有人说比特币是空气，除了炒作，没有任何用处。</p><p>如果从使用价值的角度看，比特币和数字化的法币确实很像，除了用于交换，你并不能用比特币干任何事情。</p><p>但是从时间和空间两个角度去考虑，比特币有两个实实在在的价值。</p><p>一个是在相同时间下，实现不同空间的价值交换。你可以从地球一端将价值传输到另一端，而不需要任何第三方中心化结算机构。</p><p>另一个是在不同时间之间，实现价值的传承。你可以将你现在的收入存储到比特币中，在将来的某一天从比特币中取出价值。</p><p>而且比特币的总量有限，一个比特币永远等于一个比特币。在法币超发的大背景下，便携、低手续费、去中心化的比特币是远胜黄金的价值存储手段。</p><p>法币越贬值，比特币币价就越高，但是币价越高，并不会给比特币系统造成任何的负面影响。</p><p>以太坊呢？以太坊诞生的目的就是为了给比特币增加使用价值，只是这个理念，和比特币是相悖的。</p><p>作为世界上最大的使用率最高的智能合约平台，以太坊生态上蓬勃发展的去中心化金融和非同质化代币项目数不胜数。比如常见的去中心化交易所uniswap，去中心化借贷aave，加密朋克NFT，无聊猿猴NFT。</p><p>以太币的价格想要上涨，就需要其内在价值越高，而内在价值取决于以太坊生态的繁荣程度。</p><p>但是以太币又是以太坊生态系统中的燃气（gas），再加上以太坊的竞价打包机制，以太币价格的升高，gas就会越高，会反过来抑制用户对以太坊的使用。</p><p>记得在去年加密货币牛市期间，以太坊的一笔交易费用高达千元人民币，几乎到了无法使用的地步，这也间接的催生了各种高性能低费率公链和侧链的诞生。</p><p>在这之后，一些项目的协议和代币发行迁移到了这些低费率的公链或者侧链上，比如Polygon，这也意味着过高的币价导致了以太坊生态的外溢。</p><p>这样的负反馈也就导致了以太坊具有与生俱来的自限性。</p><p>在我看来，随着加密行业快速发展，行业快速扩张，越来越多的用户加入，在价值存储方面，拥有自限性的以太坊自然无法和比特币相提并论。</p><h2 id="最近看了什么"><a href="#最近看了什么" class="headerlink" title="最近看了什么"></a>最近看了什么</h2><ul><li><a href="%5Bhttps://addyosmani.com/blog/software-engineering-soft-parts/%5D(https://mirror.xyz/rolex1.eth/_ruqwO5vvrZiNxr_MZBtOYgTo-gpjhaijQ7yeELPKBs)">2022上半年回顾与展望</a> - 大姨妈对2022上半年暴跌的复盘，记得顺势而为，永远不要逆周期</li><li><a href="https://www.btcstudy.org/2022/06/16/proof-of-stake-is-not-objective/"># 以太坊今天过审的可租赁NFT ERC-4907为什么这么重要？</a> - 将NFT使用权与所有权进行分离的协议</li><li><a href="%5Bhttps://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek%5D(https://ri.firesbox.com/#/cn/)">定投改变命运</a> - 李笑来文集，定投才是投资中的正派武功，改变的不仅仅是你一个人的命运，也是与你有关的几代人的命运</li></ul><hr><blockquote><p>往期推荐：</p></blockquote><ul><li><a href="https://suncle.zhubai.love/posts/2155790361623166976">打破信息茧房-我主动获取信息的方法 -#3</a></li><li><a href="https://suncle.zhubai.love/posts/2152510668208181248">如何筹备一场感人的婚礼 -#2</a></li><li><a href="https://suncle.zhubai.love/posts/2114096491819589632">追求不舒适的地方，直到整个世界都是我的家 -#1</a></li></ul><p>声明：本文出自作者，不代表任何机构或公司，亦不构成投资建议。</p><p>你可以在这里找到我：</p><ul><li><a href="https://suncle.me/">Blog</a></li><li><a href="http://twitter.com/suncle_chen">Twitter</a> @suncle_chen</li><li>公众号：<strong>职场亮哥</strong></li></ul><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a> <em>，欢迎</em> <a href="https://suncle.zhubai.love/"><em>订阅</em></a> <em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>newsletter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>newletter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打破信息茧房-我主动获取信息的方法 -#3</title>
    <link href="/2022/07/02/%E6%89%93%E7%A0%B4%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF-%E6%88%91%E4%B8%BB%E5%8A%A8%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E6%B3%95-3/"/>
    <url>/2022/07/02/%E6%89%93%E7%A0%B4%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF-%E6%88%91%E4%B8%BB%E5%8A%A8%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E6%B3%95-3/</url>
    
    <content type="html"><![CDATA[<p>这是 Suncle Lab 第 3 期，我会在这里更新区块链、技术、金融、旅行和个人成长相关的内容。每期都会同步发布在我<a href="https://suncle.me/">博客</a>，欢迎你<a href="https://suncle.zhubai.love/">邮箱订阅</a>，这样就可以第一时间收到更新推送。</p><p>我在之前写过两篇 blog 介绍我推荐的 mac alfred 工作流和 google chrome 插件，都是用于提高效率的。</p><p>Alfred 工作流的阅读量有 3600+，而 chrome 插件的阅读量只有 100+，这个比例和我在工作中实际的使用频率也是相符合的。</p><ul><li><a href="https://suncle.me/2020/12/09/tool-recommendation-useful-alfred-workflow/">神兵利器推荐——你一定不能错过的mac alfred工作流</a></li><li><a href="https://suncle.me/2020/12/09/tool-recommendation-chrome-browser-extension/">神兵利器推荐——你一定不能错过的chrome插件</a></li></ul><p>但是除了提高工作效率之外，我的生活中还有很大一部分是处理信息的输入，所以本期会分享一下我在繁忙的工作中，保持信息高效率获取的方法。</p><p>首先说一点，我不反对通过算法推荐来获取信息，但是我不看快速冲击的并且只有爽点的短视频，比如抖音，快手和微信短视频。</p><p>生活中除了推荐之外，应该还有一些自己去主动搜寻的信息，而这些主动获得的信息，才会对你的生活现状有指导作用，才可能对你的生活有长远的帮助。</p><p>所以，本期内容主要有这些：</p><ul><li>获取信息的渠道</li><li>分享我的信息源</li><li>主动扩展信息源的方法</li><li>获取信息的工具</li></ul><h2 id="获取信息的渠道"><a href="#获取信息的渠道" class="headerlink" title="获取信息的渠道"></a>获取信息的渠道</h2><p>目前我获取信息的渠道主要有以下 6 种：</p><ol><li>RSS 简易信息聚合 </li><li>Newsletter 通讯周刊</li><li>YouTube 最大的视频网站 </li><li>Column 专栏</li><li>Podcast 播客</li><li>EBook 电子书</li></ol><p>6 种渠道的使用频率依次递减，但是这个频率不是一成不变的，而是动态变化的。</p><p>比如之前在欢聚-Hago 工作的时候，坐地铁单程上班时间是 40 分钟左右，但是 newsletter 和 rss 我习惯是用电脑 App 阅读。因此那段时间，使用频率最高的是在手机上看 <code>得到</code> 和 <code>极客时间</code> 的专栏。</p><p>今年开始的远程工作，没有了路上的通勤时间，就可以按照自己的喜好来决定阅读顺序。</p><p>下面我会对 RSS, Newsletter, Youtube 这 3 种渠道分别做些简单的阐述。</p><p><strong>RSS 简易信息聚合</strong></p><p>RSS 是起源于互联网早期一种很基础的协议，可以轻松获取网站的文章，通过 RSS 阅读器，也很清楚的知道这些文章从哪里来的。</p><p>而且一旦发现文章对自己没有用了，就可以随时取消订阅。</p><p>简单的说，RSS 有 4 个优点。</p><p><strong>即时性</strong>，对于 RSS 的订阅者而言，可以最快的得到最新讯息以及头条新闻。而不用被动式的打开每个网站上去搜索。</p><p><strong>统一的标准</strong>，RSS 有一套统一的标准，每个有提供 RSS 的网站都会依循此标准，方便阅读器解析和迁移。</p><p><strong>隐私性</strong>，对于订阅者而言，基于拉取模式的 RSS 并不需要提供自己的电子信箱；而发行者并不能利用电子邮件重复不断的寄广告信或是垃圾信件。因此 RSS 意味着真正的隐私。</p><p>最近兴起的 RSS3，在 RSS 的基础上，实现了去中心化的内容分发协议。</p><p>基于 RSS3，用户在各种去中心化的网络中创作的数字内容，也可以实现聚合，比如以太坊和 solana 上的内容。</p><p>信息聚合在一起之后，可以作为自己的个人主页或者个人博客。</p><p><strong>Newsletter 通讯周刊</strong></p><p>这个我是今年（2022 年）才开始重点使用的信息渠道。有一次在刷推特的时候，偶然发现一篇关于加密货币的文章，文章的最后就有提醒订阅的邮箱输入框，从此打开了我的 newsletter 大门。</p><p>到现在我已经订阅了不少领域的 newsletter，而且几乎都是周刊性质的。我很少看日刊，是因为信息频率太高，就意味着质量不会那么高。</p><p>想象一下，你在工作之余，写出了一篇高质量的文章，但是日复一日的去写，绝对不可能每篇都是精品。</p><p>比如我知道的那些在公众号做到日更的作者，除了极少数高产，其他的都是接受读者投稿，或者掺杂水文和广告。</p><p>因此我觉得写作的频率，周更是最合适的，多数 newsletter 都是周更的，非常契合我的日常节奏。</p><p>而且，newsletter 读起来并不会很枯燥，除了本周的主题之外，作者还会介绍一下自己的近况以及本周读过并且推荐的文章链接。</p><p>因此从一篇 newsletter 里面获取到的信息远远不止文章本身，相当于得到了一个同频的人为你筛选好了精华文章。</p><p>随着订阅的 newsletter 数量越来越多，也不可能每一篇都精读，很多 newsletter 我都只读标题，和开篇的粗略介绍，觉得有意思才会精读。</p><p>此外订阅的 newsletter 也不仅限于技术和 crypto 领域的，也会主动订阅一些金融，音乐相关的，永远都不要把自己局限在某一个小圈子里面，很有可能在别的领域，你能得到意想不到的收获。</p><p><strong>YouTube 最大的视频网站</strong></p><p>Youtube 创作者的广告收入是所有平台里面最高的，国内没有一个平台可以与之相比，收入高，生态好，持续正循环。</p><p>而想要玩转youtube，只要学好英语就够了，教程&#x2F;测评&#x2F;全世界旅游vlog&#x2F;大学课程等各种各样的英语资源等着你去发掘。</p><p>还记得我大一时搭建的个人网站，就是在 youtube 上搜到的基于 wordpress 的搭建教程，通俗易懂，还能练习英语。</p><h2 id="我的信息源"><a href="#我的信息源" class="headerlink" title="我的信息源"></a>我的信息源</h2><ul><li>我订阅的 <a href="https://github.com/suncle1993/share/blob/main/rss/RSS-Subscriptions.opml">RSS 列表</a>  - 技术部分读的比较多，其他几乎都是 crypto 相关的（集成过<a href="https://twitter.com/nake13">潘老师</a>的一部分列表）</li><li>我订阅的 <a href="https://github.com/suncle1993/share/blob/main/newsletter/suncle-newsletter-subscription-list.md">newsletter 列表</a> - 只列了常看的，会持续更新 </li><li>我订阅的 <a href="https://github.com/suncle1993/share/blob/main/youtube/suncle-youtube-subscription-list.md">YouTube列表</a> - 全部列表都在这里了，写了个简单的 python 脚本解析的。如果只能推荐一个频道那就是 <a href="https://youtube.com//channel/UCMUnInmOkrWN4gof9KlhNmQ">老高與小茉 Mr &amp; Mrs Gao</a></li></ul><p>专栏列表和播客列表后续会继续在这篇 newsletter 更新，欢迎收藏并且订阅我的 newsletter。</p><h2 id="主动扩展信息源的方法"><a href="#主动扩展信息源的方法" class="headerlink" title="主动扩展信息源的方法"></a>主动扩展信息源的方法</h2><p>思考一下，互联网的本质是什么？</p><p>互联网本质是一个图状的网络，这个网络的节点是各个网站，而这个网络中一个节点到另一个节点的边，就是一个网站到另一个网站的外链。</p><p>因此，我们需要做的就是 2 步，第一步根据喜好找到你的种子网站，第二步通过种子网站的外链一层一层的找到那些你感兴趣的站点。</p><p>此外，现在很多的 newsletter 都会互相推荐，比如在文章最后会推荐一些其他文章，还有其他的 newsletter 作者，从这些外链可以找到一些高质量的作者，比如在上文，我分享的信息源里面就有很多优质作者。</p><p>博客同样也是如此，如果你想找到一些活跃的作者，有一个电报频道 <a href="https://t.me/FindBlog">Find Blogs</a>，是专门做优质博客推荐的，可以作为参考。</p><p>当然除了拓展新的信息源，也要时常更新已有的，那些质量降低的就直接取消订阅就好了。</p><h2 id="获取信息的工具"><a href="#获取信息的工具" class="headerlink" title="获取信息的工具"></a>获取信息的工具</h2><p>下面到了我最喜欢的推荐环节，按照信息渠道依次推荐对应的工具。</p><p><strong>RSS：NetNewsWire</strong></p><p>对比使用了 Reeder, InoReader, Feedly 和 NetNewsWire 之后，只推荐你使用 NetNewsWire 作为阅读器，最看重它的 3 大优势：完全开源，零广告，免费。</p><p><strong>Newsletter： Spark 邮箱客户端</strong></p><p>用了 Spark 之后再也不想用 Apple Mail。优异的速度，隐式的自动重连，阅后即归档的理念，彻底告别信息焦虑，这个世界上信息不是太少，而是太多，阅读完了就不要继续挂念了。</p><p><strong>专栏：得到 App ｜ 极客时间</strong></p><p>中文世界里，通识教育专栏就去得到 App，技术提升专栏就选极客时间。</p><p><strong>播客：Apple Podcast ｜ 小宇宙</strong></p><p>很多大佬不愿意写文章，但是愿意接受访谈。国外的大佬基本都在 Apple Podcast 或者是 Spotify，国内的大佬基本都在小宇宙。</p><p>所以，我的睡前时间，经常是贡献给播客的。</p><h2 id="最近看了什么"><a href="#最近看了什么" class="headerlink" title="最近看了什么"></a>最近看了什么</h2><ul><li><a href="https://addyosmani.com/blog/software-engineering-soft-parts/">Software Engineering - The Soft Parts</a> - Addy 在 Google Chrome 10 年软件开发工作的软技能总结</li><li><a href="https://www.btcstudy.org/2022/06/16/proof-of-stake-is-not-objective/">PoS 不具备客观性</a> - 这也是我不看好以太坊转 POS 的原因之一，还有一个原因是 POS 存在的循环证明问题</li><li><a href="https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek">Web3 DApp 最佳编程实践指南</a> - @guoyu DApp 开发全周期的经验分享，twitter上也有答疑的Space，非常推荐有意向转 Web3 的同学精读</li></ul><hr><blockquote><p>往期推荐：</p></blockquote><ul><li><a href="https://suncle.zhubai.love/posts/2152510668208181248">如何筹备一场感人的婚礼 -#2</a></li><li><a href="https://suncle.zhubai.love/posts/2114096491819589632">追求不舒适的地方，直到整个世界都是我的家 -#1</a></li></ul><p>声明：本文出自作者，不代表任何机构或公司，亦不构成投资建议。</p><p>你可以在这里找到我：</p><ul><li><a href="https://suncle.me/">Blog</a></li><li><a href="http://twitter.com/suncle_chen">Twitter</a> @suncle_chen</li><li>公众号：<strong>职场亮哥</strong></li></ul><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a> <em>，欢迎</em> <a href="https://suncle.zhubai.love/"><em>订阅</em></a> <em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>newsletter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>newletter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何筹备一场感人的婚礼 -#2</title>
    <link href="/2022/06/24/%E5%A6%82%E4%BD%95%E7%AD%B9%E5%A4%87%E4%B8%80%E5%9C%BA%E6%84%9F%E4%BA%BA%E7%9A%84%E5%A9%9A%E7%A4%BC-2/"/>
    <url>/2022/06/24/%E5%A6%82%E4%BD%95%E7%AD%B9%E5%A4%87%E4%B8%80%E5%9C%BA%E6%84%9F%E4%BA%BA%E7%9A%84%E5%A9%9A%E7%A4%BC-2/</url>
    
    <content type="html"><![CDATA[<p>3月底拍婚纱照，然后开始正式筹备，5月1号开始陆续接待客人，5月2号婚前双方亲人的晚宴，5月3号婚礼最重要的日子。</p><p>一直到今天（6月25号），才完成婚礼视频的上传，整个婚礼圆满结束。</p><p>我问了参加婚礼的亲戚朋友对这场婚礼的评价，他们的回答都是“这是一场非常感人的婚礼”。</p><p>从结婚当天他们眼睛的泪水，我也能知道，这不是客套话。</p><p>今天刚好是周末，记录一下这场婚礼的过程，和我们的筹备细节。</p><p>这也意味着拖更了很久的第二期newsletter终于动笔了。（婚礼结束，后续还是会尽力保证更新了）</p><h2 id="克服恐婚心理"><a href="#克服恐婚心理" class="headerlink" title="克服恐婚心理"></a>克服恐婚心理</h2><p>讲细节之前，先谈一下我认为很重要的一点：克服你内心的恐婚情绪。</p><p>要做到这一点，你需要想明白两个问题。</p><p><strong>第一个问题她是不是你认为最适合的伴侣</strong>。</p><p>这个问题每个人有自己的判断，你是否足够喜欢她，你能否欣赏她的优点，你能否接受她的缺点，她是不是一个践行终生学习的人。</p><p>除了这些之外，对我来说还有一点很重要，她是否支持你内心最深处的梦想。</p><p>如果有一天你要去追梦了，她是否愿意陪着你一起东奔西跑，爱和不爱，只有在这种时刻才会展现的淋漓尽致。</p><p><strong>第二个问题是你对你们的未来是否有足够的信心</strong>。</p><p>倘若在五年前，甚至是三年前，如果说我不恐婚，我自己都不相信。</p><p>刚出社会的时候，是很迷茫的，不只是你我，绝大多数大学生都是如此。</p><p>就算过了很多年，很多人也没办法找到迷茫的根治方法。</p><p>前两年公众号改名为<strong>职场亮哥</strong>，其实就是想写写我是怎么一步一步破除迷茫的。</p><p>后来因缘际会接触了加密行业，便全力投入到这个行业，帮大学生破除迷茫的大理想就搁下了。</p><p>如果你单身的时候就是内心迷茫的，信心不足的，对未来不坚定的。</p><p>再加上一个伴侣，再以后可能加上一个孩子，又怎么可能会有充足信心呢？</p><p>信心来源于什么呢？来源于你的人生阅历。</p><p>至于怎么增进对未来的信心，老实说，我也没什么好的解决方法给你。</p><p>只能劝你多出去走走，多看看世界，了解不同人的生活方式，认识到自己的普通，也多参加几场婚礼。</p><p>趁早想明白这辈子自己想成为什么样的人，想做什么。</p><p>王阳明临终时指着心说的“此心光明，亦复何言”，我希望你现在就可以说。</p><p>但我又知道，从普鲁士教育诞生的我们，本质上是很难想透彻这些问题的。</p><p>你看，我就是很矛盾的，既很理想，又很现实。但我并不觉得有什么不适应。</p><p>从我的亲身经历来看，想明白这些的最快捷的方法是去仙本那玩一次“潜水”。</p><p>清澈见底水深20米的碧绿海平面上，从小船自由落体直下，如果你不会游泳就更有效了，能更快的想明白。</p><p>当然这是我自己经历的有生命危险的馊主意了。简单的方法是假设自己在生命的尽头，想明白有什么是你觉得这这辈子必须要实现的。</p><p>人啊，一旦大彻大悟，真的无敌。</p><h2 id="感人婚礼的筹备"><a href="#感人婚礼的筹备" class="headerlink" title="感人婚礼的筹备"></a>感人婚礼的筹备</h2><p>如果你很确定，你不恐婚了，然后遇到对的人想结婚了，那就开始筹备吧。</p><p>多预留点时间，最少最少2个月，半年应该比较合适。</p><p>但是筹备婚礼也是讲究方法论的，整个筹备过程的时间比较长，很多事情需要反复确认，反复比较。</p><p>清晰有条理的记录和追踪是很重要的。</p><p>下面展示下我用notion做的完整的婚礼计划，相应的模板再notion模板库里面是可以找到的，按需定制即可。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625213315736-1656164003485.png" alt="wedding-planning"></p><p><strong>名单类的信息</strong>，天然是可以用表格来记录的，比如晚宴名单，宾客名单等。</p><p>以宾客名单为例，大概会包含的信息有这些：姓名，是否参加，大人数量，小孩数量，到达日期，是否住酒店，房型，备注。</p><p>大概数了下，至少9个字段，用notion制作成表，就可以看到下面的记录了（截图不全）。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625214656158-1656164821614.png" alt="The guest list"></p><p>记录清楚之后，就很方便统计酒席的桌数，以及预定住宿房间的数量和房型。</p><p>如果有些人不能立马确定怎么办呢？只能一遍一遍的去问去催了。</p><p>但是有清晰的记录，就不用每次家里几个人坐在一起掰着手指头数数了。</p><p>晚宴酒店的选择，这个没有太多好说的，多打听多去现场考察。</p><p>想知道酒席的饭好不好吃很简单，亲自去吃一顿就好了。</p><p>如果你确实想知道，又没时间去，就让朋友去，或者花钱请人去试吃也都是可以的。</p><p>婚礼酒店，看的时候一定要带上另一半，只是自己决定了是没有用的，必须要两个人都满意才可以。</p><p>以我为例，我妈选的婚礼酒店，最后就被我和小太阳一起临时换掉了，但也只是因为疫情期间，酒店闲置较多，婚礼场地还是建议提前半年选定。</p><p>此外，整个婚礼过程中，每个地方都是需要花钱的。对一些主要花费做一些记录，知道钱大概花哪里去了。</p><p>过于零碎的记录可以直接忽略。初步统计，我的整个婚礼花费11万左右。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625215414312-1656171334514.png" alt="bills"></p><p>婚礼上的一些细节，比如音乐，仪式流程，仪式细节，都是可以自行设计，自行添加，自行修改的。</p><p>再加上一些小灵感，亲手设计的婚礼才会感动自己，感动了自己才有可能感动别人。</p><p>特别提醒一下，如果有灵感，一定要立刻记录下来，然后尽自己努力让这些灵感出现在你的婚礼上。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625222851114-1656167334972.png" alt="inspiration"></p><p>有朋友国庆结婚，就贴一下我们婚礼当天的大概流程供参考。</p><blockquote><ol><li>主持人登场</li><li>大姑爹唱歌暖场</li><li>新郎登场</li><li>新娘出场（父亲陪伴)</li><li>新郎迎接新娘（和父亲交接）</li><li>父亲退场休息</li><li>新人一起登场</li><li>新郎新娘誓言环节（伴娘送誓词卡）</li><li>婚戒（伴娘送戒指）</li><li>拥吻</li><li>主婚证婚（只要一个人，小舅）</li><li>父母登场</li><li>新郎感言（自己提前想一段）</li><li>改口茶</li><li>男方父亲致辞（用主持人的）</li><li>女方父亲致辞（自己写的）</li><li>抛捧花</li><li>同伴郎伴娘互动</li><li>礼成</li><li>纸飞机</li></ol></blockquote><h2 id="留住回忆"><a href="#留住回忆" class="headerlink" title="留住回忆"></a>留住回忆</h2><p>我参加过的婚礼不多，应该不超过五次。</p><p>除了我自己的婚礼之外，最打动我的就是2017年国庆在河南商丘参加<strong>大个</strong>的婚礼。</p><p>除了亲自布置的精美现场，就是他们的结婚誓词了，当时作为伴郎的我，站在新郎的旁边，第一次感觉到，爱情的结局原来也可以如此美妙。</p><p>在这里，记录一下我认为最重要的，也是最能打动人的誓词。</p><p>当初我和小太阳一致决定要亲自写婚礼现场的誓词，绝对不使用主持人提供的模板照着读。</p><p>最终，婚礼现场亲人们的泪水，小太阳的泪水以及我的泪水都让我们觉得，写这两份誓词熬夜的几个晚上，没有白费。</p><p>贴一下我的誓词</p><blockquote><p>致我的爱人朋友小太阳：</p><p>在正式的场合，我还是喜欢叫你小太阳。</p><p>前天晚上，我还在为这篇誓词苦思冥想，写了删，删了写。</p><p>如果婚姻是一场考试，第一道题就把我难倒了。</p><p>可明明是我给你写的第一封信，那封有九页纸的信，你才答应和我在一起。</p><p>但是一想到要在众人面前讲话我像是丧失了语言功能，怎么写都觉得很矫情。</p><p>和给外界的印象截然相反的是，在我们在一起的快三年的时间里，我都是吐露心声比较多的那个。</p><p>而你总是听的很认真，当然也不总是我说你听。</p><p>我们之间能聊的可太多了，旅行，文学、职业，还有那些关乎人生底色的议题，我们都有幸达成共识。</p><p>希望往后的日子里我们可以一直这么坦诚的沟通。</p><p>以前常常会想象我未来的另一半是什么样的人。</p><p>小太阳，你是一个善良敏锐，有正义感，有同情心，充满阳光的人</p><p>就像你的昵称小太阳一样，你会关怀身边，甚至于社会上的人，还常常听别人的遭遇愤愤不平。</p><p>看到拉萨山区里啃着冻土豆的老奶奶，会心里难过很久很久，然后捐款捐物。</p><p>我喜欢你的优点也常常被你所感染，希望我们能一直保持初心，一直生活下去。</p><p>我们有一只11斤的肥猫，旺财，他已经陪伴利们两年半了，俨然成为我们生命中的一部分。</p><p>今天在这里，我答应你，无论以后我们是去迪拜，去日本是去泰国，无论在哪里工作，我都会带上它，让它永远陪着你。</p><p>因为我知道在你心底里除了爸爸妈妈，最舍不得的就是它。</p><p>不管是什么事情，也无论有多么麻烦，只要你愿意，我都会努力去实现。</p><p>你和我说过有一段时间特别不喜欢特别害怕谈恋爱，因为你害怕两个人在一起就会很容易迷失了自己。</p><p>希望这几年过来你有感受到我对你的尊重。</p><p>就算今天我们更进一步走进婚姻，关系变得更密切，你还是能保持备你的尊严。</p><p>虽然这么说，其实我知道你也为了我们的相处付出了很多，改变了很多。</p><p>也谢谢小太阳的家人，因为你们的支持和包容，我们每一步都走得很坚定。</p><p>人生路上虽有暗夜，但有你亦如清晨！</p><p>如果明天看不见太阳，在最后一刻我会紧紧抱住你。</p><p>我们是爱侣一般的朋友，朋友一般的爱侣。</p><p>你是爱人，是馈赠</p><p>谢谢！ </p></blockquote><p>suncle誓词手稿链接：</p><ul><li><p><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204005_edit_24228973680677-1656169017810.jpg">suncle誓词手稿第一页</a></p></li><li><p><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204015_edit_24386830716590-1656169555877.jpg">suncle誓词手稿第二页</a></p></li></ul><p>再贴一下小太阳的誓词</p><blockquote><p>嗨～亲爱的陈先生</p><p>到今天为止，我们已经在一起度过了926天。</p><p>我觉得我是一个很幸运的人。</p><p>老天让我们共赴一场山海时，成为无话不谈的挚友。</p><p>在拉萨雪埋，死神叩问时，你几乎一夜未眠给我打了无数电话。</p><p>在过去两年里你陪伴在我身边，经历了我最无助的时刻。</p><p>我很感谢你看懂了我，却还一直陪伴在我身边度过这些挑战。</p><p>谢谢你总是迁就我，迁就我的工作和生活，从上海来到广州。</p><p>迁就我的小脾气，包容我的任性。</p><p>在遇到你之前我总觉得结婚这件事离我很遥远。</p><p>可是你的努力担当，你的善良果敢让我想要与你共度余生。</p><p>有幸与你相爱，</p><p>朝暮与年岁并往，</p><p>与你一起共至光年。</p><p>未来的路我们一起打卡金世界。</p><p>你好！我的老公。</p><p>周雨佳</p><p>2022.5.1</p></blockquote><p>小太阳誓词手稿链接：</p><ul><li><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204037_edit_24404787491067-1656169033781.jpg">小太阳誓词手稿第一页</a></li><li><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204041_edit_24413694007211-1656169442416.jpg">小太阳誓词手稿第二页</a></li></ul><p>除了誓词之外，还有由摄像师剪辑的婚礼视频，已经上传到西瓜视频，可以点击下方链接观看。</p><ul><li><a href="https://www.ixigua.com/7112067348714291742">婚礼花絮</a></li><li><a href="https://www.ixigua.com/7112457460094337544">接亲视频</a></li><li><a href="https://www.ixigua.com/7112217835320902158">婚礼现场视频</a></li></ul><p>如果你对筹备婚礼不知所措，或者对婚礼的一些细节不清楚，可以随时找我聊聊。</p><hr><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a><em>，欢迎</em><a href="https://suncle.zhubai.love/"><em>订阅</em></a><em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>newsletter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>newletter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>追求不舒适的地方，直到整个世界都是我的家 -#1</title>
    <link href="/2022/03/11/%E8%BF%BD%E6%B1%82%E4%B8%8D%E8%88%92%E9%80%82%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E9%83%BD%E6%98%AF%E6%88%91%E7%9A%84%E5%AE%B6-1/"/>
    <url>/2022/03/11/%E8%BF%BD%E6%B1%82%E4%B8%8D%E8%88%92%E9%80%82%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E9%83%BD%E6%98%AF%E6%88%91%E7%9A%84%E5%AE%B6-1/</url>
    
    <content type="html"><![CDATA[<p>这是 Suncle Lab 第一期，我会在这里更新 区块链、技术、金融、旅行相关的内容。每期都会同步发布在我<a href="https://suncle.me/">博客</a>，欢迎你<a href="https://suncle.zhubai.love/">邮箱订阅</a>，这样就可以第一时间收到更新推送。</p><p>我有个独立<a href="https://suncle.me/">博客</a>（可能需要科学上网），已经维护了五年了，但是更新频率并不高，不过陆陆续续还是有人在看，阅读数也在缓慢增长，这个博客主要是用来记录技术知识点，偶尔也会有一些所思所想。</p><p>对我自己来说，也会看一些独立博客，优质博客的rss也都有订阅，比如<a href="https://lxkaka.wang/">拉总的博客</a>，<a href="https://liriansu.com/">子岳的博客</a>。除了博客，日常会逛逛<strong>得到</strong>，<strong>极客时间</strong>这种知识付费型的app，学学专业知识，增长增长见识。</p><p>最近一年沉迷于区块链以及数字货币，在分布式内容创作平台<a href="https://mirror.xyz/">mirror</a>上也找到了很多优质的内容。慢慢的也就接触到了海外很火的newletter这种知识分享的方式。</p><p><strong>什么是newletter呢？</strong>先摘录一些维基百科的定义</p><blockquote><p>Newsletter（电子报）是社群或商家根据邮件列表发送给其相关对象的电子通讯刊物。</p></blockquote><p>对我来说，Newsletter 是一封准时抵达的信件，基于自己的兴趣和爱好。</p><h2 id="开始写newletter"><a href="#开始写newletter" class="headerlink" title="开始写newletter"></a>开始写newletter</h2><p>我陆陆续续在微信公众号上写过一些内容，也经常停更半年，甚至停更一年。不是不想更新，只是每写一篇文章都需要先深思熟虑彻底搞懂，然后提炼观点，像写一篇论文一样翻找资料，引经据典。这样的结果就是花费了大量的时间，写的知识都是已经完全内化了的，自己很难有成长，最后难以坚持。</p><p>接触到newsletter的时候，我大受震撼。原来世界上还有这样原始又有效的知识输出方式。我不再需要每一篇只写一个中心思想。我可以写我这一周学了什么，看了什么，听了什么，再从一周的生活里面提炼出一个核心观点，更真实，更时效。</p><p>以一周为单位来划分自己的时间，以一周为单位去总结自己的成长，吸引同频的人，也就够了。</p><p>对比了大量的newsletter平台，最终我选择了国内的一款产品<a href="https://suncle.zhubai.com/">竹白</a>，不需要科学上网，支持邮件和微信订阅。我还是倾向于大家使用邮件订阅的方式，如果哪一天中心化的竹白和微信都挂了，我还可以用最去中心化的邮件给你们发消息。</p><p>介绍一下我的newletter定位。只写自己感兴趣的，可以长期更新下去的内容，比如 <strong>区块链、技术、金融、旅行</strong>。每周一更，周五发布，每篇文章里面会分享最近一周看的一些文章链接还有听的播客链接。</p><p>今天是2022年3月11号，我从hago离职了，我的newsletter从今天开始诞生了，欢迎大家随缘订阅。</p><p>第一篇就结合这几天看的一篇文章写写我无限折腾的原因吧。</p><h2 id="全世界都是我的家"><a href="#全世界都是我的家" class="headerlink" title="全世界都是我的家"></a>全世界都是我的家</h2><blockquote><p>我强迫自己离开美国。离开我的舒适区。我考虑在美国境内寻找新的视角，生活在德克萨斯、路易斯安那、南卡罗来纳、新墨西哥和阿拉斯加。</p><p>但为什么是人为划定的边界？</p><p>为什么不是土耳其、尼日利亚、芬兰、印度尼西亚、以色列、中国和巴西？我想了解这些不同的生活方式。我希望它们也能有家的感觉。 所以我带着这个目标，向世界出发了。</p><p>搬到一个陌生的地方，直到感觉像家一样。不断地学习和成长。然后再做一次，追求不舒适的地方，直到整个世界都是我的家。</p></blockquote><p>这段话摘自于这周刚看的我很喜欢的作者<a href="https://sive.rs/">Derek Sivers</a>d的一篇文章<a href="https://sive.rs/left">Why I left America</a>。看这篇文章的时候，我想了很多。</p><p>我很庆幸高考报志愿的时候选择了计算机行业，工作了五年，虽然还远远没有暴富，但是这五年来，得益于IT行业的较高收入，工薪阶层的同龄人在为生活发愁省吃俭用的时候，我走遍了中国大多数地方。</p><p>很多人会说，你只是出去走马观花式的旅游，又能增长多少见识呢，还不如把钱省下来，留着以后买房买车娶老婆，周末宅在住处打打游戏多开心。这其中也包括我的爸妈。</p><p>同年毕业一起进税友的同事们，五年多的时间里没有出过远门，无论是见识还是视野，我想应该都会局限一些吧。</p><p>很多长辈的思想也和HR一样，劝你不要才干两三年就跳槽。换个角度想想，如果你打算一辈子为别人工作，那就找一个稳定职位待下去吧。</p><p>而我只有一个想法，<strong>找一个自己感兴趣的有高附加值的行业深耕下去</strong>。</p><p>这句话请再仔细逐字读一遍。<strong>找</strong>不是简单的投投简历，是要经过不断试错不断实践的，<strong>感兴趣</strong>不是说随便找一个大厂养老，而是自己想给这个世界创造点什么。<strong>高附加值</strong>意味着在这个行业干下去你会有一个美好的未来，即使你离开了某个特定的公司，但是只要还在行业内，显然再惠和Hago所在的行业并不符合这一条。<strong>深耕</strong>不是浅尝辄止而是专精和深度。</p><p>毕业五年，从西安到杭州，再到上海，之后来了广州，下一段旅程是迪拜。搬到一个陌生的地方，都像家一样的生活。</p><p>半年前（2021年9月5号）进入一个星球会员群的时候，发了一个自我介绍，给自己定了一个短期目标：进入区块链行业。半年之后就实现了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220311233607722-1647012967843-1647013649384.png" alt="image-20220311233607722"></p><p>毕业五年多了，你的未来在哪里？你还迷茫嘛？你该去向何方？</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/bigfish-1647011167822.jpg" alt="电影《大鱼》中的场景"></p><p><em>此图出自电影《<a href="https://en.wikipedia.org/wiki/Big_Fish">大鱼</a>》，主人公的旅程一开始，他找到了一个天堂，所有人都求他留下来，但他说：“对不起，我可能永远没办法再找到这么美好的地方，但我需要走出去到这个世界去冒险。”）</em></p><h1 id="最近看了什么"><a href="#最近看了什么" class="headerlink" title="最近看了什么"></a>最近看了什么</h1><ul><li><a href="https://sive.rs/plaintext">Write plain text files</a>- 用纯文本做效率软件，现在的笔记软件很多，问题也很多，何不回归最原始的方式呢</li><li><a href="https://mirror.xyz/0xc19be75B8B9152d884987e1B58b3F18A94875396/cd7dO7shcNZJmeniaTPoqotkI13mMGCuOCMBrQY-Gew">毁灭的技术｜预言家周报#160</a>- 动荡的世界，crypto才是不可毁灭的</li><li><a href="https://ecn.mirror.xyz/m7p1QQwT_0jRcfud0IY_FKvskFMQ4Hyk8fHXITEo1_E">到底什么是零知识证明 (ZKP)？</a>- 零知识证明在web3的作用</li><li><a href="https://mirror.xyz/jayjiang.eth/yyUkSV1Ih6ffuHTIFlpf6jr-HugGrCRsJq-mjIMWIqU">Web3 社交思考</a></li><li><a href="https://mirror.xyz/paulfinneyx.eth/jFt3EmRcGqNsEGynj5LnTXjo8Fa1epRUoPCD5VSIxrc">How to be an early user of Web3?</a>- 在web3的世界你可以做些什么</li><li><a href="https://www.preethikasireddy.com/post/a-normies-guide-to-rollups">A normie’s guide to rollups</a>- 一直在说以太坊rollup扩容，rollup到底是什么</li><li><a href="https://www.huxiu.com/article/492646.html">互联网为什么让我们越来越不开心？</a>- 一个让世界更好的互联网，不同寻常的创业思想</li><li><a href="https://judyhevenly.com/predictions/">2022 Predictions</a>- 朱迪海文利的2022预测</li><li><a href="https://www.btcstudy.org/2022/02/21/pow-cheapest/">没什么比 PoW 更便宜</a>- 费电吗？省电</li></ul><hr><p>借用方可成的这段 [描述](<a href="https://newslab2020.github.io/Collection/%E5%AA%92%E4%BD%93%E9%A3%9F%E8%B0%B1/[%E6%96%B0%E9%97%BB%E5%AE%9E%E9%AA%8C%E5%AE%A4]">https://newslab2020.github.io/Collection/媒体食谱/[新闻实验室]</a> - 2017-05-10 把你的邮箱调教成最好的新闻阅读器｜媒体食谱07.html)结束本篇：</p><blockquote><p>他们总是准时抵达，安静地躺在我的收件箱里，不搞标题党，不插入影响阅读的表情包，只以最朴素的方式把我需要的内容传递给我。在这个信息过载、垃圾泛滥的年代，最古老的电子邮件成了最好的避难所。</p></blockquote><p>希望<a href="https://suncle.zhubai.com/">Suncle Lab</a>能成为你万千订阅的newsletter之一。</p><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a><em>，欢迎</em><a href="https://suncle.zhubai.love/"><em>订阅</em></a><em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>newsletter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>newletter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能合约案例-众筹</title>
    <link href="/2021/08/21/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A1%88%E4%BE%8B-%E4%BC%97%E7%AD%B9/"/>
    <url>/2021/08/21/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A1%88%E4%BE%8B-%E4%BC%97%E7%AD%B9/</url>
    
    <content type="html"><![CDATA[<p>一个众筹的智能合约示例，来源于 <a href="https://learnxinyminutes.com/docs/solidity/">learnxinyminutes</a></p><p>主要是用来展示智能合约状态机（State machines）和函数修饰器（modifier）的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// CrowdFunder.sol<br>pragma solidity ^0.6.6;<br><br>/// @title CrowdFunder<br>/// @author nemild<br>contract CrowdFunder &#123;<br>    // Variables set on create by creator<br>    address public creator;<br>    address payable public fundRecipient; // creator may be different than recipient, and must be payable<br>    uint public minimumToRaise; // required to tip, else everyone gets refund<br>    string campaignUrl;<br>    byte version = &quot;1&quot;;<br><br>    // Data structures<br>    enum State &#123;<br>        Fundraising,<br>        ExpiredRefund,<br>        Successful<br>    &#125;<br>    struct Contribution &#123;<br>        uint amount;<br>        address payable contributor;<br>    &#125;<br><br>    // State variables<br>    State public state = State.Fundraising; // initialize on create<br>    uint public totalRaised;<br>    uint public raiseBy;<br>    uint public completeAt;<br>    Contribution[] contributions;<br><br>    event LogFundingReceived(address addr, uint amount, uint currentTotal);<br>    event LogWinnerPaid(address winnerAddress);<br><br>    modifier inState(State _state) &#123;<br>        require(state == _state);<br>        _;<br>    &#125;<br><br>    modifier isCreator() &#123;<br>        require(msg.sender == creator);<br>        _;<br>    &#125;<br><br>    // Wait 24 weeks after final contract state before allowing contract destruction<br>    modifier atEndOfLifecycle() &#123;<br>    require(((state == State.ExpiredRefund || state == State.Successful) &amp;&amp;<br>        completeAt + 24 weeks &lt; now));<br>        _;<br>    &#125;<br><br>    function crowdFund(<br>        uint timeInHoursForFundraising,<br>        string memory _campaignUrl,<br>        address payable _fundRecipient,<br>        uint _minimumToRaise)<br>        public<br>    &#123;<br>        creator = msg.sender;<br>        fundRecipient = _fundRecipient;<br>        campaignUrl = _campaignUrl;<br>        minimumToRaise = _minimumToRaise;<br>        raiseBy = now + (timeInHoursForFundraising * 1 hours);<br>    &#125;<br><br>    function contribute()<br>    public<br>    payable<br>    inState(State.Fundraising)<br>    returns(uint256 id)<br>    &#123;<br>        contributions.push(<br>            Contribution(&#123;<br>                amount: msg.value,<br>                contributor: msg.sender<br>            &#125;) // use array, so can iterate<br>        );<br>        totalRaised += msg.value;<br><br>        emit LogFundingReceived(msg.sender, msg.value, totalRaised);<br><br>        checkIfFundingCompleteOrExpired();<br>        return contributions.length - 1; // return id<br>    &#125;<br><br>    function checkIfFundingCompleteOrExpired()<br>    public<br>    &#123;<br>        if (totalRaised &gt; minimumToRaise) &#123;<br>            state = State.Successful;<br>            payOut();<br><br>            // could incentivize sender who initiated state change here<br>        &#125; else if ( now &gt; raiseBy )  &#123;<br>            state = State.ExpiredRefund; // backers can now collect refunds by calling getRefund(id)<br>        &#125;<br>        completeAt = now;<br>    &#125;<br><br>    function payOut()<br>    public<br>    inState(State.Successful)<br>    &#123;<br>        fundRecipient.transfer(address(this).balance);<br>        LogWinnerPaid(fundRecipient);<br>    &#125;<br><br>    function getRefund(uint256 id)<br>    inState(State.ExpiredRefund)<br>    public<br>    returns(bool)<br>    &#123;<br>        require(contributions.length &gt; id &amp;&amp; id &gt;= 0 &amp;&amp; contributions[id].amount != 0 );<br><br>        uint256 amountToRefund = contributions[id].amount;<br>        contributions[id].amount = 0;<br><br>        contributions[id].contributor.transfer(amountToRefund);<br><br>        return true;<br>    &#125;<br><br>    function removeContract()<br>    public<br>    isCreator()<br>    atEndOfLifecycle()<br>    &#123;<br>        selfdestruct(msg.sender);<br>        // creator gets all money that hasn&#x27;t be claimed<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h2><p>函数修饰器(Modifiers)可以用来改变一个函数的行为。比如用于在函数执行前检查某种前置条件。这个和python的修饰器(Decorators)的作用很类似，在python中，我们也经常使用装饰器对函数执行前后增加一些逻辑。下面是solidity修饰器的简单使用，在众筹支付前需要检查合约状态是否已完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function payOut() public inState(State.Successful) &#123;_;&#125;<br></code></pre></td></tr></table></figure><p>python中一个函数可以有多个装饰器，solidity中的函数也是可以有多个修饰器的。</p><p>如果同一个函数有多个修饰器，他们之间以空格隔开，修饰器会依次检查执行。</p><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p>状态State在合约中本质是一个合约的全局变量，在实际合约中，状态会有很多种，各个合约方法也会对State做修改，并且根据State执行不同的逻辑。对于多个State可以通过枚举管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">enum State &#123;<br>    Fundraising,// 筹款中<br>    ExpiredRefund,// 过期退款<br>    Successful// 众筹成功<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang Concurrent Write Problem</title>
    <link href="/2021/08/16/golang-concurrent-write-problem/"/>
    <url>/2021/08/16/golang-concurrent-write-problem/</url>
    
    <content type="html"><![CDATA[<p>分享几个golang并发写入的坑</p><h2 id="并发读写map"><a href="#并发读写map" class="headerlink" title="并发读写map"></a>并发读写map</h2><p>在golang的实际项目中经常需要并发写数据，并且将数据塞到一个map中作为一个整体返回。</p><p>分为2种情况：这两种情况都会造成panic</p><ol><li>并发读写map</li><li>并发写map</li></ol><p>并发读写map的示例代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> util<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行读取</span><br><span class="hljs-keyword">for</span> &#123;<br>_ = m[<span class="hljs-number">1</span>]<br>&#125;<br>&#125;()<br>  <br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码之后会报错：<code>fatal error: concurrent map read and map write</code></p><span id="more"></span><p>错误信息显示，并发的 map 读和 map 写，也就是说使用了两个并发函数不断地对 map 进行读和写而发生了竞态问题，map 内部会对这种并发操作进行检查并提前发现。</p><p>并发写map的示例代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 无限循环, 让并发程序在后台执行</span><br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码之后会报错：<code>fatal error: concurrent map writes</code></p><p>错误信息显示，并发的 map 写，也就是说使用了两个并发函数不断地对 map 进行写而发生了竞态问题</p><p>需要并发读写或者并发写时，一般的做法是加锁，但这样性能并不高，Go语言在 1.9 版本中提供了一种效率较高的并发安全的 sync.Map，sync.Map 和 map 不同，不是以语言原生形态提供，而是在 sync 包下的特殊结构。</p><p>sync.Map 有以下特性：</p><ul><li>无须初始化，直接声明即可。</li><li>sync.Map 不能使用 map 的方式进行取值和设置等操作，而是使用 sync.Map 的方法进行调用，Store 表示存储，Load 表示获取，Delete 表示删除。</li><li>使用 Range 配合一个回调函数进行遍历操作，通过回调函数返回内部遍历出来的值，Range 参数中回调函数的返回值在需要继续迭代遍历时，返回 true，终止迭代遍历时，返回 false。</li></ul><p>并发安全的 sync.Map 演示代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSyncMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> m sync.Map<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m.Store(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行读取</span><br><span class="hljs-keyword">for</span> &#123;<br>_, _ = m.Load(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;()<br><span class="hljs-comment">// 无限循环, 让并发程序在后台执行</span><br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码会无限循环，并且不会有并发读写的错误</p><p>sync.Map 没有提供获取 map 数量的方法，替代方法是在获取 sync.Map 时遍历自行计算数量，sync.Map 为了保证并发安全有一些性能损失，因此在非并发情况下，使用 map 相比使用 sync.Map 会有更好的性能。</p><h2 id="并发写slice"><a href="#并发写slice" class="headerlink" title="并发写slice"></a>并发写slice</h2><p>一般不太会有并发写slice的，因为slice和map不同，对加入的先后顺序是敏感的，因此目前的实际应用场景没有使用到并发读写slice</p><h2 id="并发写string"><a href="#并发写string" class="headerlink" title="并发写string"></a>并发写string</h2><p>string是Go的内建类型，但对它的读写操作并非线程安全的，原因在于它的内部实际上是通过struct存储的，我们可以在runtime&#x2F;string.go里面看到它的内部定义。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> stringStruct <span class="hljs-keyword">struct</span> &#123;<br>str unsafe.Pointer<br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringStructOf</span><span class="hljs-params">(sp *<span class="hljs-type">string</span>)</span></span> *stringStruct &#123;<br><span class="hljs-keyword">return</span> (*stringStruct)(unsafe.Pointer(sp))<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这样一个 struct ，go 无法保证原子性地完成赋值，因此可能会出现goroutine 1 刚修改完指针（str）、还没来得及修改长度（len），goroutine 2 就读取了这个string 的情况。</p><p>我们可以通过一个测试代码发现并发读写string的问题：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>s := <span class="hljs-string">&quot;0&quot;</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>s = <span class="hljs-string">&quot;0&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = <span class="hljs-string">&quot;aa&quot;</span><br>&#125;<br>i++<br>time.Sleep(<span class="hljs-number">1</span> * time.Microsecond)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>b := s<br><span class="hljs-keyword">if</span> b != <span class="hljs-string">&quot;0&quot;</span> &amp;&amp; b != <span class="hljs-string">&quot;aa&quot;</span> &#123;<br>ch &lt;- b<br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;Got strange string: &quot;</span>, &lt;-ch)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行这个代码得到下面的输出结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=== RUN   TestString</span><br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  01<br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  01<br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  a<br><span class="hljs-bullet">--- </span>PASS: TestString (0.01s)<br></code></pre></td></tr></table></figure><p>通过<code>go tool compile -S</code>查看执行的汇编代码，可以发现，string的写入是分为写入长度和写入指针2个部分的。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/htZm5E-1629119549723.png"></p><p>因此在频繁的写入操作中，可能会出现写入了一部分数据就被读取出去了，自然就会读取到脏数据</p><p>仔细看上述示例代码，会发现在写入协程中有一个多余的sleep操作，如果把这个sleep去掉，运行的结果是永远读不到脏数据，这是为什么呢？原因在于编译器的优化。编译器优化之后会直接改写频繁赋值的逻辑，而不是持续写入长度和指针</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20210816212544508-1629120344614-1629120356605.png" alt="image-20210816212544508"></p><h2 id="并发写interface"><a href="#并发写interface" class="headerlink" title="并发写interface"></a>并发写interface</h2><p>将上述并发写string代码中的类型改为interface就可以复现并发写interface的问题。</p><hr><p>了解上面4中并发读写会造成panic或者脏读的情况之后，在后续的日常开发中，需要十分注意这样的情况</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>仿MybatisGenerator：根据sql生成go struct</title>
    <link href="/2021/07/27/%E4%BB%BFmybatisgenerator%EF%BC%9A%E6%A0%B9%E6%8D%AEsql%E7%94%9F%E6%88%90go-struct/"/>
    <url>/2021/07/27/%E4%BB%BFmybatisgenerator%EF%BC%9A%E6%A0%B9%E6%8D%AEsql%E7%94%9F%E6%88%90go-struct/</url>
    
    <content type="html"><![CDATA[<h1 id="genstruct"><a href="#genstruct" class="headerlink" title="genstruct"></a>genstruct</h1><p>项目地址：<a href="https://github.com/suncle1993/genstruct">https://github.com/suncle1993/genstruct</a></p><p>根据mysql schema生成go struct，适用于习惯先写sql后写struct的同学</p><p>根据 <a href="https://github.com/fifsky/genstruct">https://github.com/fifsky/genstruct</a> 项目做了一些修改，更适用于目前的hago项目。在原版的基础上添加了以下功能：</p><ol><li>schema的生成（信奉sql和model放在一起的人喜欢这种方式），便于自动建表之内的操作</li><li>暴露的变量和方法注释的添加</li><li>通过表注释添加为struct的注释</li><li>对于生成的struct字段进行首字母缩写词的转换，总共38种，完全符合golint的检查规则</li></ol><span id="more"></span><h2 id="命令行版本"><a href="#命令行版本" class="headerlink" title="命令行版本"></a>命令行版本</h2><p>安装：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/suncle1993/genstruct<br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">genstruct</span> -h <span class="hljs-number">127.0.0.1</span> -u root -P <span class="hljs-number">123456</span> -p <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><ul><li><code>-h</code> default <code>localhost</code></li><li><code>-u</code> default <code>root</code></li><li><code>-p</code> default <code>3306</code></li></ul><p>演示见下面的 aciinema svg：</p><p><a href="https://asciinema.org/a/X5sk7TqrTTjF8AhN764K0Fc6m"><img src="https://asciinema.org/a/X5sk7TqrTTjF8AhN764K0Fc6m.svg" alt="asciicast"></a></p><h2 id="线上版本"><a href="#线上版本" class="headerlink" title="线上版本"></a>线上版本</h2><p>页面地址：<a href="https://genstruct.suncle.me/">https://genstruct.suncle.me/</a></p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/DV5XD3-1627372059061.png"></p><h2 id="接口版本"><a href="#接口版本" class="headerlink" title="接口版本"></a>接口版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;https://genstructapi.herokuapp.com/api/struct/generate&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \<br>--data-raw <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;tags&quot;: [&quot;db&quot;, &quot;json&quot;],</span><br><span class="hljs-string">    &quot;table&quot;: &quot;create table user_mine_info( id bigint(20) NOT NULL AUTO_INCREMENT, uid bigint(20) NOT NULL DEFAULT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>0<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>用户uid<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, mined_cnt bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>剩余挖矿次数<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, un_exchange_diamond bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>未兑换为挖矿次数的钻石<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, created_at bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>创建时间<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, updated_at bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>更新时间<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, PRIMARY KEY (id), UNIQUE KEY uk_uid (uid) USING BTREE) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COMMENT = &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>用户挖矿剩余次数记录<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;;&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="示例模型"><a href="#示例模型" class="headerlink" title="示例模型"></a>示例模型</h2><p>建表数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user_mine_info(<br>  id bigint(20) NOT NULL AUTO_INCREMENT, <br>  UID bigint(20) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;用户uid&#x27;, <br>  mined_cnt bigint(20) NOT NULL COMMENT &#x27;剩余挖矿次数&#x27;, <br>  un_exchange_diamond bigint(20) NOT NULL COMMENT &#x27;未兑换为挖矿次数的钻石&#x27;, <br>  created_at bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;, <br>  updated_at bigint(20) NOT NULL COMMENT &#x27;更新时间&#x27;, <br>  PRIMARY KEY (id), <br>  UNIQUE KEY uk_uid (UID) USING BTREE<br>) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COMMENT = &#x27;用户挖矿剩余次数记录&#x27;;<br><br></code></pre></td></tr></table></figure><p>生成的模型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> user_mine_info<br><br><span class="hljs-comment">// UserMineInfo 用户挖矿剩余次数记录</span><br><span class="hljs-keyword">type</span> UserMineInfo <span class="hljs-keyword">struct</span> &#123;<br>ID                <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;id&quot; json:&quot;id&quot; `</span><br>UID               <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;uid&quot; json:&quot;uid&quot; `</span>                                 <span class="hljs-comment">// 用户uid</span><br>MinedCnt          <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;mined_cnt&quot; json:&quot;mined_cnt&quot; `</span>                     <span class="hljs-comment">// 剩余挖矿次数</span><br>UnExchangeDiamond <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;un_exchange_diamond&quot; json:&quot;un_exchange_diamond&quot; `</span> <span class="hljs-comment">// 未兑换为挖矿次数的钻石</span><br>CreatedAt         <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;created_at&quot; json:&quot;created_at&quot; `</span>                   <span class="hljs-comment">// 创建时间</span><br>UpdatedAt         <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;updated_at&quot; json:&quot;updated_at&quot; `</span>                   <span class="hljs-comment">// 更新时间</span><br>&#125;<br><br><span class="hljs-comment">// TableName ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserMineInfo)</span></span> TableName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user_mine_info&quot;</span> <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 如果分表需要修改</span><br>&#125;<br><br><span class="hljs-comment">// PK ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserMineInfo)</span></span> PK() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id&quot;</span><br>&#125;<br><br><span class="hljs-comment">// Schema ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserMineInfo)</span></span> Schema() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`(</span><br><span class="hljs-string">  id bigint NOT NULL AUTO_INCREMENT,</span><br><span class="hljs-string">  uid bigint NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;用户uid&#x27;,</span><br><span class="hljs-string">  mined_cnt bigint NOT NULL COMMENT &#x27;剩余挖矿次数&#x27;,</span><br><span class="hljs-string">  un_exchange_diamond bigint NOT NULL COMMENT &#x27;未兑换为挖矿次数的钻石&#x27;,</span><br><span class="hljs-string">  created_at bigint NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="hljs-string">  updated_at bigint NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="hljs-string">  PRIMARY KEY (id),</span><br><span class="hljs-string">  UNIQUE KEY uk_uid (uid) USING BTREE</span><br><span class="hljs-string">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;用户挖矿剩余次数记录&#x27;`</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>genstruct</tag>
      
      <tag>generator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis统计送礼人数</title>
    <link href="/2021/07/27/redis%E7%BB%9F%E8%AE%A1%E9%80%81%E7%A4%BC%E4%BA%BA%E6%95%B0/"/>
    <url>/2021/07/27/redis%E7%BB%9F%E8%AE%A1%E9%80%81%E7%A4%BC%E4%BA%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>在Hago的营收活动中， 我们经常要记录的一个数据是送礼用户数，作为活动对于用户的吸引程度的一个关键指标。</p><p>本文将介绍3种使用 Redis 对用户数量进行记录的方案， 这些方案虽然都可以对送礼用户的数量进行统计， 但每个方案都有一些自己特有的操作， 并且各个方案的性能特征以及资源消耗也各有不同。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/T3LYCH-1627956415425.png"></p><span id="more"></span><h2 id="方案-1-：使用集合"><a href="#方案-1-：使用集合" class="headerlink" title="方案 1 ：使用集合"></a>方案 1 ：使用集合</h2><p>如果产品需求除了需要记录送礼用户数量，还需要记录送礼用户的名单， 那么可以使用集合来达成这个目标。</p><p>可以执行以下 <a href="http://redisdoc.com/set/sadd.html">SADD</a> 命令， 将用户添加到送礼用户名单当中：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">SADD</span> <span class="hljs-string">&quot;users&quot;</span> &lt;uid&gt;<br></code></pre></td></tr></table></figure><p>通过使用 <a href="http://redisdoc.com/set/sismember.html">SISMEMBER</a> 命令， 我们可以检查一个指定的用户是否送过礼：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">SISMEMBER <span class="hljs-string">&quot;users&quot;</span> <span class="hljs-variable">&lt;uid&gt;</span><br></code></pre></td></tr></table></figure><p>而统计送礼用户则可以通过执行 <a href="http://redisdoc.com/set/scard.html">SCARD</a> 命令来完成：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">SCARD </span><span class="hljs-string">&quot;users&quot;</span><br></code></pre></td></tr></table></figure><p>通过集合运算操作， 我们可以像有序集合方案一样， 对不同时间段或者日期的送礼用户名单进行聚合计算。 比如说， 通过 <a href="http://redisdoc.com/set/sinter.html">SINTER</a> 或者 <a href="http://redisdoc.com/set/sinterstore.html">SINTERSTORE</a> 命令， 我们可以计算出一周之内连续送礼的用户：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">SINTER <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;day_7_users&quot;</span><br></code></pre></td></tr></table></figure><p>此外， 通过 <a href="http://redisdoc.com/set/sunion.html">SUNION</a> 命令或者 <a href="http://redisdoc.com/set/sunionstore.html">SUNIONSTORE</a> 命令， 我们可以计算出一周内连续送礼的用户总数量：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">SUNION <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;day_7_users&quot;</span><br></code></pre></td></tr></table></figure><p>而通过执行 <a href="http://redisdoc.com/set/sdiff.html">SDIFF</a> 命令或者 <a href="http://redisdoc.com/set/sdiffstore.html">SDIFFSTORE</a> 命令， 我们可以知道哪些用户今天送礼了， 但是昨天没有送礼：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SDIFF</span> <span class="hljs-string">&quot;today_users&quot;</span> <span class="hljs-string">&quot;yesterday_users&quot;</span><br></code></pre></td></tr></table></figure><p>又或者工作日送礼了， 但是假日没有送礼：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 计算工作日送礼名单</span><br>SINTERSTORE <span class="hljs-string">&quot;weekday_users&quot;</span> <span class="hljs-string">&quot;monday_users&quot;</span> <span class="hljs-string">&quot;tuesday_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;friday_users&quot;</span><br><span class="hljs-comment"># 计算假日送礼名单</span><br>SINTERSTORE <span class="hljs-string">&quot;holiday_users&quot;</span> <span class="hljs-string">&quot;saturday_users&quot;</span> <span class="hljs-string">&quot;sunday_users&quot;</span><br><span class="hljs-comment"># 计算工作日送礼但是假日未送礼的名单</span><br>SDIFF <span class="hljs-string">&quot;weekday_users&quot;</span> <span class="hljs-string">&quot;holiday_users&quot;</span><br></code></pre></td></tr></table></figure><p>etc.</p><h2 id="方案-2-：使用-HyperLogLog"><a href="#方案-2-：使用-HyperLogLog" class="headerlink" title="方案 2 ：使用 HyperLogLog"></a>方案 2 ：使用 HyperLogLog</h2><p>虽然集合能够很好的记录活动人数， 但以上这两个方案都有一个明显的缺点， 那就是， 这两个方案耗费的内存会随着被统计用户数量的增多而增多： 如果你的用户数量比较多， 又或者你需要记录多天&#x2F;多个时段的送礼用户名单并进行聚合计算， 那么这两个方案可能会消耗你大量内存。</p><p>另一方面， 在有些情况下， 我们只想要知道送礼用户的人数， 而不需要知道具体的送礼用户名单， 这时集合储存的信息就会显得多余了。</p><p>在需要尽可能地节约内存并且只需要知道送礼用户数量的情况下， 我们可以使用 HyperLogLog 来对送礼用户进行统计： HyperLogLog 是一个概率算法， 它可以对元素的基数进行估算， 并且每个 HyperLogLog 只需要耗费 12 KB 内存， 对于用户数量非常多但是内存却非常紧张的系统， 这一方案无疑是最佳之选。</p><p>在这一方案下， 我们使用 <a href="http://redisdoc.com/hyperloglog/pfadd.html">PFADD</a> 命令去记录在线的用户：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">PFADD <span class="hljs-string">&quot;users&quot;</span> <span class="hljs-variable">&lt;uid&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <a href="http://redisdoc.com/hyperloglog/pfcount.html">PFCOUNT</a> 命令获取在线人数：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">PFCOUNT</span> <span class="hljs-string">&quot;users&quot;</span><br></code></pre></td></tr></table></figure><p>因为 HyperLogLog 也提供了计算交集的 <a href="http://redisdoc.com/hyperloglog/pfmerge.html">PFMERGE</a> 命令， 所以我们也可以用这个命令计算出多个给定时间段或日期之内， 上线的总人数：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 统计 7 天之内总共有多少人上线了</span><br>PFMERGE <span class="hljs-string">&quot;7_days_both_users&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;day_7_users&quot;</span><br>PFCOUNT <span class="hljs-string">&quot;7_days_both_users&quot;</span><br></code></pre></td></tr></table></figure><h2 id="方案-3-：使用位图（bitmap）"><a href="#方案-3-：使用位图（bitmap）" class="headerlink" title="方案 3 ：使用位图（bitmap）"></a>方案 3 ：使用位图（bitmap）</h2><p>回顾上面介绍的2个方案， 我们可以得出以上结论：</p><ul><li>使用集合能够储存具体的送礼用户名单， 但是却需要消耗大量的内存；</li><li>而使用 HyperLogLog 虽然能够有效地减少统计送礼用户所需的内存， 但是它却没办法准确地记录具体的送礼用户名单。</li></ul><p>那么是否存在一种既能够获得送礼用户名单， 又可以尽量减少内存消耗的方法存在呢？ 这种方法的确存在 —— 使用 Redis 的位图就可以办到。</p><p>Redis 的位图就是一个由二进制位组成的数组， 通过将数组中的每个二进制位与用户 ID 进行一一对应， 我们可以使用位图去记录每个用户是否在线。</p><p>当一个用户上线时， 我们就使用 <a href="http://redisdoc.com/string/setbit.html">SETBIT</a> 命令， 将这个用户对应的二进制位设置为 1 ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 此处的 uid 必须为数字，因为它会被用作索引</span><br><span class="hljs-attribute">SETBIT</span> <span class="hljs-string">&quot;users&quot;</span> &lt;uid&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>通过使用 <a href="http://redisdoc.com/string/getbit.html">GETBIT</a> 命令去检查一个二进制位的值是否为 1 ， 我们可以知道指定的用户是否送过礼：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">GETBIT <span class="hljs-string">&quot;users&quot;</span> <span class="hljs-variable">&lt;uid&gt;</span><br></code></pre></td></tr></table></figure><p>而通过 <a href="http://redisdoc.com/string/bitcount.html">BITCOUNT</a> 命令， 我们可以统计出位图中有多少个二进制位被设置成了 1 ， 也即是有多少个用户送过礼：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BITCOUNT </span><span class="hljs-string">&quot;users&quot;</span><br></code></pre></td></tr></table></figure><p>跟集合一样， 用户也能够对多个位图进行聚合计算 —— 通过 <a href="http://redisdoc.com/string/bitop.html">BITOP</a> 命令， 用户可以对一个或多个位图执行逻辑并、逻辑或、逻辑异或或者逻辑非操作：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 计算出 7 天都送礼的用户</span><br><span class="hljs-keyword">BITOP </span><span class="hljs-string">&quot;AND&quot;</span> <span class="hljs-string">&quot;7_days_both_users&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> ... <span class="hljs-string">&quot;day_7_users&quot;</span><br><br><span class="hljs-comment"># 计算出 7 天的送礼用户总人数</span><br><span class="hljs-keyword">BITOP </span><span class="hljs-string">&quot;OR&quot;</span> <span class="hljs-string">&quot;7_days_total_users&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> ... <span class="hljs-string">&quot;day_7_users&quot;</span><br><br><span class="hljs-comment"># 计算出两天当中只有其中一天送礼的用户</span><br><span class="hljs-keyword">BITOP </span><span class="hljs-string">&quot;XOR&quot;</span> <span class="hljs-string">&quot;only_one_day_sent&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span><br></code></pre></td></tr></table></figure><p>位图方案记录一个用户是否在线需要花费 1 个二进制位， 对于用户数为 100 万的网站来说， 使用这一方案只需要耗费 125 KB 内存， 而对于用户数为 1000 万的网站来说， 使用这一方案也只需要花费 1.25 MB 内存。</p><p>虽然位图节约内存的效果不及 HyperLogLog 那么显著， 但是使用位图可以准确地判断一个用户是否上线， 并且能够像集合和有序集合一样， 对送礼用户名单进行聚合计算。 因此对于想要尽量节约内存， 但又需要准确地知道用户是否在线， 又或者需要对用户的在线名单进行聚合计算的应用来说， 使用位图可以说是最佳之选。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以下表格总结了以上3个方案的特点：</p><table><thead><tr><th align="left">方案</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">集合</td><td align="left">能够储存送礼用户的名单，也能够执行聚合计算，消耗的内存比有序集合少，但是跟有序集合一样，这个方案消耗的内存也会随着用户数量的增多而增多。</td></tr><tr><td align="left">HyperLogLog</td><td align="left">无论需要统计的用户有多少，只需要耗费 12 KB 内存，但由于概率算法的特性，只能给出在线人数的估算值，并且也无法获取准确的送礼用户名单。</td></tr><tr><td align="left">位图</td><td align="left">在尽可能节约内存的情况下，记录送礼用户的名单，并且能够对这些名单执行聚合操作。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>HyperLogLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020 Annual Report</title>
    <link href="/2020/12/14/2020-annual-report/"/>
    <url>/2020/12/14/2020-annual-report/</url>
    
    <content type="html"><![CDATA[<p>先通过一组数据看下2020年我到底都做了写什么：</p><ul><li>公众号写了15篇</li><li>博客写了7篇</li><li>专栏学了10个</li><li>听书13本</li><li>看书2本</li><li>居家隔离70天</li><li>旅行一个半月</li><li>综合投资收益率35%</li></ul><p>今年的总结，我想少聊一些细节，多聊一些关键问题的思考。</p><h2 id="1-又是一年的工作"><a href="#1-又是一年的工作" class="headerlink" title="1. 又是一年的工作"></a>1. 又是一年的工作</h2><p>今年工作了9个月，旅行加休息差不多3个月。</p><p>以辞职为分水岭，  1到4月都在上海再惠，主要做一些数据仓库相关的杂事。8到12月在广州YY，主要做海外营收相关的业务。</p><p>疫情期间在湖北远程工作两个月，算是体验了一下远程办公的快感。不用挤地铁，零通勤时间，幸福感猛增。这样的工作也就成为了我的一个奋斗目标。</p><p>我妈甚至对我说：要不以后就不去上海在家工作得了。</p><p>乍一看，这样的工作节奏似乎很好，但仔细想想并不完美。因为人生不只是工作，人还得有充足又有效的社交活动，也需要竞争激烈的环境，只有这样才能成长的更快，更早的实现人生的意义。</p><p>今年就不聊具体的工作内容了，我们聊一下理想中的工作生活模式。</p><h2 id="2-你喜欢组合式工作法吗？"><a href="#2-你喜欢组合式工作法吗？" class="headerlink" title="2. 你喜欢组合式工作法吗？"></a>2. 你喜欢组合式工作法吗？</h2><p>欧洲一位叫<strong>查尔斯·汉迪</strong>的管理大师发明的<code>组合式工作</code>的方法，是我个人非常喜欢，也非常期待拥有的 。组合式工作有4个组成部分：</p><ol><li>有薪工作：就是能产生收益的工作，可以是为别人的公司工作，也可以是为自己的公司工作</li><li>学习工作：用于提升自己，增长见识，持续升级</li><li>家庭工作：把陪伴家人当成一项工作，并且作为日常提前安排，做到不被其他工作占据</li><li>义务工作：往大了说是反哺社会，往小了说是回馈他人</li></ol><p>4种工作的大致组成是一年中6个月时间上班，3个月时间学习，2个月时间陪家人，剩下的1个月时间从事公益。</p><p>这些时间都是连续的，而不是分散的。连续的时间能保证效率，也能很容易分隔开不同的工作，确保不会互相挤占。</p><p>这样的工作看着很理想，其实也挺常见。比如今年五月份在敦煌旅游的时候，看到疫情逐渐好转，旅游慢慢恢复，差一点就留在那里开客栈了。</p><p>如果我成为了一名住在敦煌的客栈老板，那么从每年的11月份到第二年的4月份，是敦煌的旅游淡季，几乎没有游客，也就不需要工作了。那么6个月时间就可以合理的分配给组合式工作法中的另外3项工作了。</p><h2 id="3-今年你去了哪里？"><a href="#3-今年你去了哪里？" class="headerlink" title="3. 今年你去了哪里？"></a>3. 今年你去了哪里？</h2><p>原以为疫情的一年会收心，禁足在家，结果却比以前绝大多数年份都玩的多，足足玩了一个半月的时间。美中不足的是没法出国去心心念念的伊朗。</p><ol><li><p>元旦在重庆，和大学室友聚会，喝了一年唯一的一次白酒，也给小太阳拍了《少年的你》</p></li><li><p>清明节，提前去看一下未来的城市广州。仔细想想，沙面公园真的很美很时尚。在广州也大半年了，除了上下班路上、沙面公园、白云山之外，也没有去过其他的地方。自从打算把摄影当成一个普通的爱好之后，出门放风对我就没有那么大的吸引力了。果然人的行为受心态的影响是最大的。</p></li><li><p>五一假期，逛了一下杭州，曾经待了两年的城市，后续没机会经常回去看看了。广州不像上海，和杭州离得远，可以三天两头的去耍一圈。</p></li><li><p>5月8号从再惠辞职之后，玩转了上海、乌镇。在乌镇吃了一个星期的东坡肉和酱鸭</p></li><li><p>5月15号-5月22号，从成都走318一路玩到稻城亚丁，天不高，云也不淡。反倒是又浓密又深蓝。</p></li><li><p>5月23，西安一日游，毕业四年第一次回西安，居然是路过。疫情还是很严重，大唐不夜城依旧人山人海。</p></li><li><p>5月24-6月6号，陪小太阳去了一次西北大环线，在敦煌这个我喜欢的城市待了3天，不慌不忙的观赏敦煌古城，风沙扬起，天地昏暗，美的是那么的壮丽。</p></li><li><p>兰州-天水-麦积山石窟，看了莫高窟和龙门石窟再来看麦积山石窟，矗立于麦积山顶，依山而建。最大的大佛俯视着葱葱郁郁的麦积山。危楼高百尺，手可摘星辰，描述的就是这番景象吧。</p></li><li><p>深圳大芬油画村，大鹏古城。第一眼见到洛阳的时候沉迷其静谧古老的城中绿道。第一眼见到深圳的时候，这座城市干净整洁得就像刚被雨洗过一样，满是东南亚风情。车行驶在南山的路上，一瞬间仿佛回到了18年，那一段从岘港到灵姑湾的旅行。</p></li></ol><blockquote><p> 敦煌古城吹起了远古的风沙</p></blockquote><h2 id="4-你真的需要去那么多地方吗？"><a href="#4-你真的需要去那么多地方吗？" class="headerlink" title="4. 你真的需要去那么多地方吗？"></a>4. 你真的需要去那么多地方吗？</h2><p>虽然去了这么多地方，但我还是想告诉你，一个真正的心灵旅行者并不需要每个假期都外出。</p><p>除旅行之外，每个人都可以有一些更高雅的爱好，学习一些专业之外的知识。</p><p>比如说，天文学就是一个很不错的选择。对这个世界了解的越多，对于宇宙，对于个体，对于自己目前的位置就会了解的更清楚，更透彻。</p><p>类似的还有天体物理学，宇宙学。都值得去了解。先认识到自己有多渺小，生活中才能过的有多伟大。假如你没有时间深入研究，也有很多优秀的科普剧科普频道都是可以看的，比如《走近科学》，比如BBC的一些关于科学方面的内容，还有NASA的各种报道。</p><p>这一年，在天文学上话费的大量时间，让我更深刻的认识到人间值得这四个字的含义。更清晰的认识到自己为什么活着，活着的意义是什么，继而内心坚定、有条不紊的向着目标前进。</p><h2 id="5-为什么是广州？"><a href="#5-为什么是广州？" class="headerlink" title="5. 为什么是广州？"></a>5. 为什么是广州？</h2><p>给年轻人的一点忠告，这是人一辈子会有两个家，一个家是自己的老家，另外一个家就是自己的心酱，这个家你到了哪儿就是家。</p><p>有些人在一线城市生活，哪怕过得再苦也不愿意离开；因为他们很清楚，相比在大城市里生活，小地方出身的孩子有一个很难弥补的短板，就是见识不足，目光不够长远，以至于走不出贫困的怪圈。所以为了孩子，自己再苦也要熬下去。这是一个很现实的情况。</p><h2 id="6-你将到哪里去？"><a href="#6-你将到哪里去？" class="headerlink" title="6. 你将到哪里去？"></a>6. 你将到哪里去？</h2><p>年初疫情肆虐，线上办公和知识付费如火如荼。我也一样，趁有空上了几门付费的课程。有写作课，有个体创业课，还有教你做课程的课。</p><p>姑且不论这些付费课程质量是否足够高，对于技能的增长是否足够有效。但是有一点，在不同的社群里面，你能看到各行各业不同的人都在自己的领域深入探索，或者都在寻找一些突破自我的机会。</p><p>如果非要说上了那些课，自己的最大的收获是什么。那么应该是更深刻的认识到自身的优势以及未来的定位。</p><p>你爱独居，有书有花，有笔有茶，生活简单却又自我充盈，这是一种生活方式；你爱工作，详细每一天每小时的工作计划，在文件与沟通中迸发活力，这是一种生活方式；你爱旅行，看远山淡影，桥上的游人，古街的小吃摊，这是一种生活方式；你爱冒险，去三山五岳，去黄沙大漠，登悬崖峭壁，摘星揽月，这也是一种生活方式。</p><p>一百个人有一百种生活方式。我们经历重重尝试后，总能找到最适合自己的那种。但问题是，找到以后，真正的考验也许才刚刚开始，面对种种艰难，你是否能坚持？</p><h2 id="7-20年赚到你需要的钱了吗"><a href="#7-20年赚到你需要的钱了吗" class="headerlink" title="7. 20年赚到你需要的钱了吗"></a>7. 20年赚到你需要的钱了吗</h2><p>投资</p><p>股票和基金的收益率</p><p>、过去的2020惊心动魄又曲折振奋。国家、民族和A股都经历了从“实鼠不易”到“牛转乾坤”的转变。在连续两年的高回报率下，投资管理人更需要的是谨慎自己的表现是否更多源于随机性贡献，而潜伏的风险是否被踊跃的市场低估。在二分法的市场里，投资管理人往往容易将源自于运气、随机、可能、假说、理论、巧合的结果归功于自身的技能、决定、知识、现实、法则。在牛市的环境下，我们也许只是一个通过了生存偏差的幸运傻瓜，却往往将市场的优异表现幻想成自己的专业投资水平。<br>2、我们意识到投资的最大风险不是短期回撤而是长期持有资产不能带来盈利，即损失了时间，也再无法回到过去。”<br>3、通过对上市公司地区风土人情的不断实地拜访，决定了我们的投资从不过山海关到退守长江南，目前则基本限于南宋的地盘。由于基金管理公司的平台优势，我们能够更多的和企业管理人交流，将对单纯对市值充满诉求、对模式涛涛不绝、对各种机会都能把握、对赌性极其坚强的公司小心翼翼而不怀遗憾的划在自身能力圈范围之外。<br>“投资的最大风险不是短期回撤而是长期持有资产不能带来盈利，即损失了时间，也再无法回到过去。”非常欣赏这句话。所有的投资策略和投资风格，最终都还是应该以长期能否带来盈利为评价的核心依据。无论个体差异多大，我们在本质追求是一样的：在合理控制风险前提下获得尽可能高的收益。宁可错过也不犯错的逻辑适用于期货等博弈类工具，但不适用于长期来说螺旋式上升的权益类资产。我们始终强调，在估值合理或偏低的大背景下，拉长周期来看，踏空风险远大于套牢风险。错过就是一种巨大的犯错，不存在不犯错这一说法。<br>毕竟，错过的不仅是收益，还有那再也无法回去的青春时光。</p><h2 id="8-婚姻是什么？"><a href="#8-婚姻是什么？" class="headerlink" title="8. 婚姻是什么？"></a>8. 婚姻是什么？</h2><p>看尽了时间的繁华之后，才发现，婚姻不再恐惧的让人心碎，而是美好的让人心醉</p><hr><p>今年事情太多，忙不过来，连新年音乐会这样的老传统都忘在了脑后<br>罗曼罗兰说：「世界上只有一种英雄主义，就是看清生活的真相之后依然热爱生活」。</p><p>人生只要有一次你发自灵魂深处感觉到快乐和幸福，你的人生就值了，剩下全是痛苦都没关系，只要感受过一次就可以，这样的人生你一定希望再来一次，所以不管 是怎样的人生，你要做的事情并不是在意那些痛苦，而是去寻找内心的快乐和喜悦</p><p>我在《大学之路》中讲，不用担心起跑线上的那一点差距，因为人生的许多事其实是马拉松，跑到后来你会发现，身边的同行的人不会很多，因为更多的人在过程中就已经止步了。</p><p>在河内还剑湖旁边摆地摊卖旅游照片的背包客，我现在也能理解了</p><p>这一年，我看清了世界，也看清了自己。但还需要看清的是众生</p><p>愿你尝遍烟火，依然相信，人间值得</p><p>最后，我从来不觉得霍皮人传说中白色的岛是遥不可及的神仙居所，在我心里，那只是终将路过的一隅。</p><p>乌斯怀亚 世界</p><p>在这个小点上，每个你爱的人、每个你认识的人、每个你曾经听过的人，以及每个曾经存在的人，都在那里过完一生。这里集合了一切的欢喜与苦难，数千个自信的宗教、意识形态以及经济学说，每个猎人和搜寻者、每个英雄和懦夫、每个文明的创造者与毁灭者、每个国王与农夫、每对相恋中的年轻爱侣、每个充满希望的孩子、每对父母、发明家和探险家，每个教授道德的老师、每个贪污政客、每个超级巨星、每个至高无上的领袖、每个人类历史上的圣人与罪人，都住在这里 —— 一粒悬浮在阳光下的微尘。</p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>坚持住啊，还在屎山中爬行的同事们</title>
    <link href="/2020/12/14/%E5%9D%9A%E6%8C%81%E4%BD%8F%E5%95%8A%EF%BC%8C%E8%BF%98%E5%9C%A8%E5%B1%8E%E5%B1%B1%E4%B8%AD%E7%88%AC%E8%A1%8C%E7%9A%84%E5%90%8C%E4%BA%8B%E4%BB%AC/"/>
    <url>/2020/12/14/%E5%9D%9A%E6%8C%81%E4%BD%8F%E5%95%8A%EF%BC%8C%E8%BF%98%E5%9C%A8%E5%B1%8E%E5%B1%B1%E4%B8%AD%E7%88%AC%E8%A1%8C%E7%9A%84%E5%90%8C%E4%BA%8B%E4%BB%AC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>“There are only two hard things in Computer Science: cache invalidation and naming things.”</p><p> — <a href="https://martinfowler.com/bliki/TwoHardThings.html">Phil Karlton</a></p></blockquote><p>在计算机领域只有两件艰难的事情：缓存失效和对象命名。</p><p>这还真不是一个笑话。写代码是比较容易的事情，但是阅读别人的代码，那就因人而异了。</p><p>好的工程师写出来的代码可读性很高，比如我上家公司的同事旭总。一般的工程师写出来的代码就像是一坨屎，比如之前某某几位同事。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/best-practice-shit-code/%E4%BD%A0%E7%8C%9C%E6%88%91%E7%9A%84%E6%9E%AA%E9%87%8C%E6%9C%89%E6%B2%A1%E6%9C%89%E5%AD%90%E5%BC%B9.jpg"></p><p>所以我会经常去格式化他们的代码。如果不幸轮到你继续在屎代码上面开发，那就是屎上堆屎了。心疼你。</p><p>当然有时候工期紧张，我自己也会写一些屎代码<code>shit code</code>，但是每次提交的时候都有一种强烈的愧疚感。希望这些代码最多存活一个月就消失，不要被人踩到了。</p><span id="more"></span><h2 id="屎代码是怎么产生的？"><a href="#屎代码是怎么产生的？" class="headerlink" title="屎代码是怎么产生的？"></a>屎代码是怎么产生的？</h2><p>要说怎么写屎代码，这个我就很拿手了。下面随便列举一些常见的屎代码产生方式：</p><ol><li>看不懂的命名</li><li>过长的类|函数</li><li>大段重复的代码</li><li>没有注释的Magic number</li><li>100多个参数的函数</li><li>一堆没有注释的if-else嵌套</li><li>业务过度耦合：支付订单和点餐订单能耦合在一起？谁重构谁痛苦</li><li>代码和文档分离：几年前的业务完全不知道是个啥</li><li>…</li></ol><p>很不幸，大多数人的项目中，这些常见的屎代码产生方式是随处可见的。</p><p>毕竟，几百个人写屎代码，就像几百个人堆积木。堆得歪歪扭扭，摇摇晃晃，乱七八糟，你千万不能抽里面的积木，指不定抽了一块就塌了。只能看见哪里觉得不牢靠不停的往那边填积木。只要不倒就好了。这也是大部分程序员的追求了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/best-practice-shit-code/%E6%8B%89%E5%B1%8E.jpg"></p><h2 id="不写屎代码从命名规范开始"><a href="#不写屎代码从命名规范开始" class="headerlink" title="不写屎代码从命名规范开始"></a>不写屎代码从命名规范开始</h2><p>如果想解决代码高耦合这坨屎，需要有比较好的顶层解耦设计，划分清楚各自服务的边界。</p><p>如果你一直都只是代码搬运工，传说中的cv工程师，那么到这一步还有一些内功需要你去修炼的。</p><p>但是好的命名规范确实每个人都可以做到的。不同的语言都有各自的规范，如果所有人都能正确理解那些规范，并且严格遵守，同时强制使用ci校验，就可以保证代码外表上是美观的。</p><p>这里就以Go语言的命名规范为例讲一下怎么写出人人都想闻的香代码。</p><p><code>go fmt</code>可以统一不同人的编码规范，却没有办法格式化出一个好的命名。但是在Go社区中其实一直都存在着一些成文的或者不成文的命名规则，比如：</p><ol><li>某个名称在包外是否可见，就取决于其首个字符是否为大写字母</li><li>使用驼峰命名而不是下划线</li><li>单个方法的接口名称应该是<code>InterfaceName = MethodName + er</code></li><li><code>Getter</code>方法的命名不需要包含<code>Get</code>，比如cat.Owner()方法不需要命名成cat.GetOwner()</li><li>首字母缩写词应该保持原有格式：应该使用userID而不是userId，应该使用userAPI而不是userApi</li><li>变量名需要尽可能的简单但是又能描述清楚</li><li>…</li></ol><p>总之，规则是有的。只是很多程序员选择直接忽视。比如前面的五条。</p><p>还有一些规则是被过渡滥用了。比如第6条，很多同事的命名沿用以前的老风格，在一个struct中大量使用单字符的的变量或者随心所欲的缩写。这样的代码是完全没有办法阅读的。所谓有追求的程序员，还是得追求一下代码的品味。</p><p>悲观的说，即使做到了这些也只是你一个人的代码是优雅的，但是你怎么能保证所有人都有这样的追求呢？作为个人，除了提建议之外，其实是没有太多有效的办法的。</p><h2 id="怎么才能根治屎上堆屎？"><a href="#怎么才能根治屎上堆屎？" class="headerlink" title="怎么才能根治屎上堆屎？"></a>怎么才能根治屎上堆屎？</h2><p>想根治这个问题，只靠某个程序员一直保持优雅代码是没什么用的。</p><p>你写10句优雅的代码，其他10个同事每个人都写10句屎代码。这样算起来，优雅代码的比例最多只有十分之一。</p><p>如果一个团队想要彻底解决屎上堆屎这个老大难问题，就需要贯彻执行下面两点方法：</p><ol><li>招高质量的程序员：code sense很重要，每个程序员都需要懂得奥卡姆剃刀原理：若无必要，勿增实体。</li><li>管理层需要有长远的视野而不仅仅是短期目标。</li></ol><p>深度悲观的说，这两个方法真正执行起来的时候也是难度重重，基本不可能完成。</p><p>高质量无论是不是在互联网行业，都意味着价格昂贵，但又有几家公司能给得雇佣的起这么多昂贵的程序员呢？</p><p>而长远的目标在资本的压力之下，也显得一文不值。代码规范提升10%的重要性和“明天上线”这个命令比起来，也是低到尘埃的的。然后日复一日，明天又将是明天，规范性最终消失殆尽，屎山越来越高。</p><p>说到底，这些都是钱的问题，也是最无解的问题，最终在某一天，屎山崩溃，一切回到原点。</p><p>最后，大胆猜测一下，昨天的Google服务崩溃也是因为屎太多了吧。</p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shit code</tag>
      
      <tag>规范性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神兵利器推荐——你一定不能错过的mac alfred工作流</title>
    <link href="/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84mac-alfred%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <url>/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84mac-alfred%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/alfred4.jpg"></p><p>上一篇介绍了我日常高频使用的chrome插件，那就顺便介绍一下mac上最最最能提升效率的Alfred工作流吧。</p><span id="more"></span><p>以下是我常用的 Alfred workflow 列表：（几乎每天都会用到）</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/all-workflow.jpg" alt="自用 Alfred Workfolw"></p><p>不同的插件，可能有不同作者开发的版本，下面会给出我一直在用的版本，但是你完全可以去选择更适合自己的版本。比如像有道翻译，可以找到很多版本，选择自己喜欢的即可。</p><p>下面按照顺序一款一款的介绍下。</p><h2 id="CodeVar"><a href="#CodeVar" class="headerlink" title="CodeVar"></a>CodeVar</h2><blockquote><p>生成变量名，支持大小驼峰、常量、下划线，开发者必备的工作流</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/code-var.jpg"></p><p>下载地址：<a href="https://github.com/xudaolong/CodeVar">https://github.com/xudaolong/CodeVar</a></p><h2 id="Encode-x2F-Decode"><a href="#Encode-x2F-Decode" class="headerlink" title="Encode &#x2F; Decode"></a>Encode &#x2F; Decode</h2><blockquote><p>Base64 编解码</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/encode.jpg"></p><p>下载地址：<a href="https://github.com/willfarrell/alfred-encode-decode-workflow">https://github.com/willfarrell/alfred-encode-decode-workflow</a></p><h2 id="Fakeum"><a href="#Fakeum" class="headerlink" title="Fakeum"></a>Fakeum</h2><blockquote><p>生成各种假数据，比如姓名，城市，银行卡号等等</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/fake.jpg"></p><p>下载地址：<a href="https://github.com/deanishe/alfred-fakeum">https://github.com/deanishe/alfred-fakeum</a></p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><blockquote><p>快速查找项目&#x2F;用户</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/gh.jpg"></p><p>下载地址：<a href="https://github.com/gharlan/alfred-github-workflow">https://github.com/gharlan/alfred-github-workflow</a></p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><blockquote><p>支持各种hash算法的计算</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/hash.jpg"></p><p>下载地址：<a href="https://github.com/willfarrell/alfred-hash-workflow">https://github.com/willfarrell/alfred-hash-workflow</a></p><h2 id="Http-Status-Codes"><a href="#Http-Status-Codes" class="headerlink" title="Http Status Codes"></a>Http Status Codes</h2><blockquote><p>快速显示 http 状态码含义</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/http.jpg"></p><p>下载地址：<a href="https://www.packal.org/workflow/http-status-codes">https://www.packal.org/workflow/http-status-codes</a></p><h2 id="IP-Address"><a href="#IP-Address" class="headerlink" title="IP Address"></a>IP Address</h2><blockquote><p>快速查询本地ip和公网出口ip，再也不用到ipip.net上去查询了</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/ip.jpg"></p><p>下载地址：<a href="https://github.com/zenorocha/alfred-workflows/raw/master/ip-address/ip-address.alfredworkflow">https://github.com/zenorocha/alfred-workflows/raw/master/ip-address/ip-address.alfredworkflow</a></p><h2 id="Kill-Process"><a href="#Kill-Process" class="headerlink" title="Kill Process"></a>Kill Process</h2><blockquote><p>杀进程，不知道怎么处理卡死的程序？那就用kill process吧</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/kill.jpg"></p><p>下载地址：<a href="https://github.com/nathangreenstein/alfred-process-killer">https://github.com/nathangreenstein/alfred-process-killer</a></p><h2 id="Microsoft-ToDo"><a href="#Microsoft-ToDo" class="headerlink" title="Microsoft ToDo"></a>Microsoft ToDo</h2><blockquote><p>奇妙清单的升级版本就是Microsoft ToDo了，这个工作量可以快速记录todo事项</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/ms-todo.jpg"></p><p>下载地址：<a href="https://github.com/johandebeurs/alfred-mstodo-workflow">https://github.com/johandebeurs/alfred-mstodo-workflow</a></p><h2 id="Password-Generator"><a href="#Password-Generator" class="headerlink" title="Password Generator"></a>Password Generator</h2><blockquote><p>快速生成各种复杂度的密码，总有一款密码适合你</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/pwgen.jpg"></p><p>下载地址：<a href="https://github.com/deanishe/alfred-pwgen">https://github.com/deanishe/alfred-pwgen</a></p><h2 id="Terminal-Finder"><a href="#Terminal-Finder" class="headerlink" title="Terminal Finder"></a>Terminal Finder</h2><blockquote><p>mac上终端的目录并不像windows那么好找到，经常使用终端的开发者需要快速打开当前路径所在的finder目录</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/terminal-finder.jpg"></p><p>下载地址：<a href="https://github.com/LeEnno/alfred-terminalfinder">https://github.com/LeEnno/alfred-terminalfinder</a></p><h2 id="Wechat-Plugin"><a href="#Wechat-Plugin" class="headerlink" title="Wechat Plugin"></a>Wechat Plugin</h2><blockquote><p>mac版本的微信客户端插件，支持多种配色方案。支持微信多开以及小程序查看，还有消息防撤回功能。</p><p>微信插件分享就不贴图了，自行探索</p></blockquote><h2 id="Youdao-Translate"><a href="#Youdao-Translate" class="headerlink" title="Youdao Translate"></a>Youdao Translate</h2><blockquote><p>快速有道翻译，再也不用打开网页去查翻译结果了</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/yd.jpg"></p><p>下载地址：<a href="https://github.com/wensonsmith/YoudaoTranslate">https://github.com/wensonsmith/YoudaoTranslate</a></p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><blockquote><p>锁定屏幕，<code>alfred</code> 自带的功能，不需要付费即可使用</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/lock.jpg"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>做一个懒人吧。善于使用各种工具，简化工作流，减少在重复的事情上浪费时间，使效率最大化。</p><p>附上一个Alfred workflow合集：<a href="https://github.com/zenorocha/alfred-workflows">https://github.com/zenorocha/alfred-workflows</a></p>]]></content>
    
    
    <categories>
      
      <category>效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神兵利器推荐——你一定不能错过的chrome插件</title>
    <link href="/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/"/>
    <url>/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>最近有朋友问我，有没有什么可以提升效率的chrome插件推荐一下。我看了一下我的插件库，好用的还真不少。既然要推荐给一个人，还不如整理出来，分享给所有需要的人。毕竟，极致利他才能最终利己嘛。</p><p>话不多说，下面一个一个的推荐，并且附上效果截图。（注意，一定要看完，图中隐藏着很多人梦寐以求的大杀器！！！）</p><h2 id="技术文章一键分发：openWrite助手"><a href="#技术文章一键分发：openWrite助手" class="headerlink" title="技术文章一键分发：openWrite助手"></a>技术文章一键分发：openWrite助手</h2><p>安全认证简书、博客园、知乎、开源中国、掘金、SegmentFault等平台，一键群发文章。</p><p>免费版只有有限的分发次数，但是为了效率，这点费用还是很值得的。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/open-write.jpg"></p><span id="more"></span><h2 id="公众号排版助手：壹伴"><a href="#公众号排版助手：壹伴" class="headerlink" title="公众号排版助手：壹伴"></a>公众号排版助手：壹伴</h2><p>简单好用的公众号效率工具。类似工具有秀米和135编辑器，可以按需使用。</p><p>只要配置好公众号的样式，之后所有的文章都可以一键排版，从而节省大量的时间。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/yiban.jpg"></p><h2 id="去掉烦人的youtube广告：Adblock-for-Youtube"><a href="#去掉烦人的youtube广告：Adblock-for-Youtube" class="headerlink" title="去掉烦人的youtube广告：Adblock for Youtube"></a>去掉烦人的youtube广告：Adblock for Youtube</h2><p>作为youtube重度用户，日常所有的看视频需求都会上youtube。虽然youtube秉承了google的不作恶原则，可以手动跳过大段的广告，观看5秒钟就可以。但是这5秒钟也非常影响观看体验。而这款插件就可以完美的解决这个痛点。</p><p>在下图的红框中可以看到有一段很不显眼的小字：”cleaned by Adblock for Youtube™ “。恭喜你，进入到没有广告的世界。</p><p>顺便推荐一下，我最最最喜欢的youtube频道<code>老高与小沫</code></p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/adblock-for-youtube.jpg"></p><h2 id="一键清除浏览器缓存：Clear-Cache"><a href="#一键清除浏览器缓存：Clear-Cache" class="headerlink" title="一键清除浏览器缓存：Clear Cache"></a>一键清除浏览器缓存：Clear Cache</h2><p>一键清除缓存和浏览器数据，再也不用按照<code>inspect -&gt; Application -&gt; Cache -&gt; delete</code>这样一条路走下来了。</p><p>对于经常需要清空浏览器缓存的前端同学来说，这个简直就是调试的春天。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/clear-cache.jpg"></p><h2 id="chrome标签页增强：Earth-View-from-Google-Earth"><a href="#chrome标签页增强：Earth-View-from-Google-Earth" class="headerlink" title="chrome标签页增强：Earth View from Google Earth"></a>chrome标签页增强：Earth View from Google Earth</h2><p>默认的chrome浏览器标签页实在是太普通，看多了就很腻。如果这时候来一个Google 地球的天空视角背景图，想来也会很开心吧，比如今天无意之间看到的这张图，West Lyons River的河流冲击区。看完之后，立马产生了去澳洲看看的念头。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/google-earth-view.jpeg"></p><h2 id="前端开发助手：FeHelper"><a href="#前端开发助手：FeHelper" class="headerlink" title="前端开发助手：FeHelper"></a>前端开发助手：FeHelper</h2><p>前端开发中使用到的各种工具的大合集，非常实用。比如常见的json美化，编解码，时间相关的等等。大部分后端也是用的上的。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/fe-helper.jpg"></p><h2 id="chrome插件分享利器：Get-CRX"><a href="#chrome插件分享利器：Get-CRX" class="headerlink" title="chrome插件分享利器：Get CRX"></a>chrome插件分享利器：Get CRX</h2><p>chrome插件商店里面安装的插件是很难找到存放位置的。比如上面安装的这些，在页面上没有保存为crx文件的按钮。这时候如果你有个朋友没法访问<code>chrome web store</code>，但是又有需要用的插件找你帮忙。这时候就只能想办法保存为离线的crx文件了。<code>Get CRX</code>这个工具就能解决你的这个问题，对着安装好的插件页面点击右键，就可以下载到你需要的crx文件了，非常好用。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/get-crx.jpg"></p><h2 id="网页Json格式自动美化：JSON-Formatter"><a href="#网页Json格式自动美化：JSON-Formatter" class="headerlink" title="网页Json格式自动美化：JSON Formatter"></a>网页Json格式自动美化：JSON Formatter</h2><p>某些网页或者接口返回的json数据，没有美化，就是扁平的字符串。这样会眼睛看着不是很方便。比如下面这个gist文件。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/json-formatter-example-raw.jpg"></p><p>装了这个插件之后，会自动将原始的json串进行pretty操作，就转换成了美化的，如下图</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/json-formatter-example-pretty.jpg"></p><h2 id="网页版以太坊钱包：MetaMask"><a href="#网页版以太坊钱包：MetaMask" class="headerlink" title="网页版以太坊钱包：MetaMask"></a>网页版以太坊钱包：MetaMask</h2><p>以太坊转账，或者基于以太坊的一些通证转账都是可以通过MetaMask而不需要登上以太坊交易所。此外，MetaMask的界面非常简洁，使用体验很好。</p><p>不过不管用什么工具，请记得保管好你的账号短语phrase。要不然像我一样，攒了很久的以太坊找不回来了。否则按照现在的虚拟货币的价格，可能已经发财了吧</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/metamask.jpg"></p><h2 id="多引擎以图搜图神器：NooBox（二箱）"><a href="#多引擎以图搜图神器：NooBox（二箱）" class="headerlink" title="多引擎以图搜图神器：NooBox（二箱）"></a>多引擎以图搜图神器：NooBox（二箱）</h2><p>以图搜图的功能能做什么就不多说了，从快播的远古时代生存到这个年代的老司机，肯定都是懂的。这款插件支持多种引擎，除了常用的baidu和google识图，还有俄罗斯的yandex和微软的必应。功能无比强大。不过，记得选好关键词<code>for teen</code>，少儿不宜的少看。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/NooBox.jpg"></p><h2 id="一键获取图片文本：One-click-Image-Reader-OCR"><a href="#一键获取图片文本：One-click-Image-Reader-OCR" class="headerlink" title="一键获取图片文本：One-click Image Reader (OCR)"></a>一键获取图片文本：One-click Image Reader (OCR)</h2><p>经常看网页pdf的打工人们，通常有一个困惑，就是很多pdf都不是文件版本的，而是扫描版本的。因此没有办法复制你需要的文字。这个工具就是为了解决这个问题。截取你需要转换成文字的区域，就可以自动转换成文字版本，而且支持一键复制。</p><p>除了网页pdf之外，还支持图片，视频。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/one-click-ocr.jpg"></p><h2 id="截取网页全屏：ScreenShot-Capture-amp-Editor-Tool"><a href="#截取网页全屏：ScreenShot-Capture-amp-Editor-Tool" class="headerlink" title="截取网页全屏：ScreenShot Capture &amp; Editor Tool"></a>截取网页全屏：ScreenShot Capture &amp; Editor Tool</h2><p>找一个短点的截图展示下效果，反正用过的都说好。就不多说了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/screenshot-carbon-now-sh-1607436737137.png"></p><h2 id="增强github浏览体验：Sourcegraph"><a href="#增强github浏览体验：Sourcegraph" class="headerlink" title="增强github浏览体验：Sourcegraph"></a>增强github浏览体验：Sourcegraph</h2><p>经常逛github的肯定有一个体验就是，绝大多数项目我只是看，又不想clone到本地，但是github的浏览体验挺不咋地的，这时候就需要插件辅助了。Sourcegraph就是其中美美的一个。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/sourcegraph.jpg"></p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p>一千个司机眼中有一千个油猴。油🐵的存在给了你的浏览器无限种可能。不过需要去找一些好用的脚本，或者自行折腾。</p><h2 id="键盘代替鼠标的神器：Vimium"><a href="#键盘代替鼠标的神器：Vimium" class="headerlink" title="键盘代替鼠标的神器：Vimium"></a>键盘代替鼠标的神器：Vimium</h2><p>假如我的鼠标坏了，我还是想用浏览器，那怎么办呢？Vimium本着Vim的精神为导航和控制提供键盘快捷键。</p><p>进入vim模式，按f键就可以给每一个按钮加一个键盘快捷键。这样就可以使用键盘进行跳转了。</p><p>除此之外，还有很多导航相关的快捷键可以使用。记住几个常用的，效率就会极大的提升。</p><p>不过，可惜的是，元旦我的成都之旅，大概率要凉凉了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/vimium.jpg"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>还有一些也不错，但是因为我的使用频率并没有那么高，所以没有在上面的列表中列举出来。</p><p>比如<code>Exstension Manager</code>，<code>Evernote Web Clipper</code>，<code>方片收集</code> 等等插件，都是能够提升效率的。</p><p>总之，善于使用浏览器的插件，会极大的提升效率、提升幸福感。希望大家都能享受这些插件带来的快感。</p>]]></content>
    
    
    <categories>
      
      <category>效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元旦去峨眉山吧，人间值得</title>
    <link href="/2020/10/26/%E5%85%83%E6%97%A6%E5%8E%BB%E5%B3%A8%E7%9C%89%E5%B1%B1%E5%90%A7%EF%BC%8C%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/"/>
    <url>/2020/10/26/%E5%85%83%E6%97%A6%E5%8E%BB%E5%B3%A8%E7%9C%89%E5%B1%B1%E5%90%A7%EF%BC%8C%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<p>每年到了10月底11月初的时候，就会开始计划一年一度的大学室友聚会。</p><p>前几年关于目的地是没什么争议的，因为其中一个舍友，人称装逼王的<code>旭云</code>在成都电子科技大学读研究生，所以每年都是在成都以及周边聚聚，比如重庆，都江堰之类的。</p><p>今年比较特殊，装逼王要毕业了，时间很充裕，去哪儿都行。四人小团队第一次遇到在哪个城市聚会的问题。可能很多小伙伴元旦也开始计划元旦出行，但是又不知道去哪儿。那可以看下我们的决策方法，应该有一些借鉴意义。</p><h3 id="定决策方案"><a href="#定决策方案" class="headerlink" title="定决策方案"></a>定决策方案</h3><p>既然不知道干什么那就roll一下</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-1.jpg"></p><span id="more"></span><h3 id="定聚会目的"><a href="#定聚会目的" class="headerlink" title="定聚会目的"></a>定聚会目的</h3><p>一年没见了，检查下大家伙有没有啥变化</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-2.jpg"></p><h3 id="定目的省份"><a href="#定目的省份" class="headerlink" title="定目的省份"></a>定目的省份</h3><p>每人报3个想去的省份，然后从里面再roll。说出每个人的想法之后才知道还可以这么好玩？打猎的都有，牛逼普拉斯。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-3.jpg"></p><p>每个人都报完了之后，就有了以下这些城市了，吉林有两个人说了，所以就算2票</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-4.jpg"></p><p>见证奇迹的时刻到了，什么？是新疆？</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-5.jpg"></p><p>不对啊，喀什不是疫情很严重嘛，哥儿几个作为爱惜生命立志为国家工作50年的N好青年，那肯定不能身陷险境啊。那么就排除掉疫情高风险区，重新roll，这就出结果了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-6.jpg"></p><p>吉林，不对啊，吉林好像也是刚刚结束疫情，再考虑考虑。不过roll出来了还有效力的，得让大家表态了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-7.jpg"></p><p>好，果断决定不去了，又得重新roll。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-8.jpg"></p><p>恩，是四川，一个熟悉的城市，虽然已经去过多次，但还是全票通过。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-9.jpg"></p><p>毕竟，四川吃的好，喝的好，景色也好。确实没啥理由不去。</p><p>到这里，省份就定了，那么接下来需要定城市了。</p><h3 id="定目的城市"><a href="#定目的城市" class="headerlink" title="定目的城市"></a>定目的城市</h3><p>成都和都江堰群之前一次聚会去过，那么剩下可以选的有乐山（峨眉山）、色达、九寨沟，先看下距离</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-10.jpg"></p><p>元旦3天小假，在四川那样的地形情况下，直线距离200公里以上的都不太现实，用在路上的时间太久。那就选了乐山-峨眉山这条线。前段时间看乐山有不少特色美食，峨眉山也可以去爬一爬。</p><p>那就这么愉快的决定了。</p><hr><p>最后，目标真的能决定一切，自从将以后的方向定位成职场方向之后，对于摄影、户外的兴趣就相对应的下降了。来广州的几个月里面，没有去过一次白云山，也就不奇怪了，更多的喜欢休闲的方式。比如这次的聚会目的地也都是自带休闲属性。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅游</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git禁止在master分支push和commit</title>
    <link href="/2020/09/25/git%E7%A6%81%E6%AD%A2%E5%9C%A8master%E5%88%86%E6%94%AFpush%E5%92%8Ccommit/"/>
    <url>/2020/09/25/git%E7%A6%81%E6%AD%A2%E5%9C%A8master%E5%88%86%E6%94%AFpush%E5%92%8Ccommit/</url>
    
    <content type="html"><![CDATA[<p>作为管理者，在远端将master分支设为保护分支，可以从根源上杜绝直接推送到master的问题。dev分支同理。</p><p>作为开发者，在本地的git hook中加配置可以做到在commit和push操作时做对应的检查</p><span id="more"></span><h3 id="禁止在master分支上Commit"><a href="#禁止在master分支上Commit" class="headerlink" title="禁止在master分支上Commit"></a>禁止在master分支上Commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>current_branch=$(git rev-parse --symbolic --abbrev-ref HEAD)<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$current_branch</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.git/hooks: Do not commit to <span class="hljs-variable">$current_branch</span> branch&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="在master分支上Commit时提示"><a href="#在master分支上Commit时提示" class="headerlink" title="在master分支上Commit时提示"></a>在master分支上Commit时提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>current_branch=$(git rev-parse --symbolic --abbrev-ref HEAD)<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$current_branch</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;You&#x27;re about to commit to master, is that what you intended? [y|n] &quot;</span> -n 1 -r &lt;/dev/tty<br>  <span class="hljs-built_in">echo</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$REPLY</span>&quot;</span> | grep -E <span class="hljs-string">&#x27;^[Yy]$&#x27;</span> &gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 0 <span class="hljs-comment"># commit will execute</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">exit</span> 1 <span class="hljs-comment"># commit will not execute</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="禁止推送到master分支"><a href="#禁止推送到master分支" class="headerlink" title="禁止推送到master分支"></a>禁止推送到master分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>remote_branch_prefix=<span class="hljs-string">&quot;refs/heads/&quot;</span><br>protected_remote_branch=$remote_branch_prefix<span class="hljs-variable">$protected_branch</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> local_ref local_sha remote_ref remote_sha<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_remote_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$remote_ref</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.git/hooks: Do not commit to <span class="hljs-variable">$protected_branch</span> branch&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><h3 id="推送到master分支时提示"><a href="#推送到master分支时提示" class="headerlink" title="推送到master分支时提示"></a>推送到master分支时提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>remote_branch_prefix=<span class="hljs-string">&quot;refs/heads/&quot;</span><br>protected_remote_branch=$remote_branch_prefix<span class="hljs-variable">$protected_branch</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> local_ref local_sha remote_ref remote_sha<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_remote_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$remote_ref</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;You&#x27;re about to push master, is that what you intended? [y|n] &quot;</span> -n 1 -r &lt; /dev/tty<br>    <span class="hljs-built_in">echo</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$REPLY</span> | grep -E <span class="hljs-string">&#x27;^[Yy]$&#x27;</span> &gt; /dev/null<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">exit</span> 0 <span class="hljs-comment"># push will execute</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">exit</span> 1 <span class="hljs-comment"># push will not execute</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><blockquote><p>为什么需要循环读取？因为git一次可以push多个分支</p></blockquote><h3 id="推送时如果commit消息包含WIP则禁止推送"><a href="#推送时如果commit消息包含WIP则禁止推送" class="headerlink" title="推送时如果commit消息包含WIP则禁止推送"></a>推送时如果commit消息包含WIP则禁止推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>z40=0000000000000000000000000000000000000000<br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> local_ref local_sha remote_ref remote_sha; <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$local_sha</span>&quot;</span> = <span class="hljs-variable">$z40</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># Handle delete</span><br>    :<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$remote_sha</span>&quot;</span> = <span class="hljs-variable">$z40</span> ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-comment"># New branch, examine all commits</span><br>      range=<span class="hljs-string">&quot;<span class="hljs-variable">$local_sha</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-comment"># Update to existing branch, examine new commits</span><br>      range=<span class="hljs-string">&quot;<span class="hljs-variable">$remote_sha</span>..<span class="hljs-variable">$local_sha</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># Check for WIP commit</span><br>    commit=$(git rev-list -n 1 --grep <span class="hljs-string">&#x27;^feat: WIP&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$range</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$commit</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> &gt;&amp;2 <span class="hljs-string">&quot;Found WIP commit in <span class="hljs-variable">$local_ref</span>, not pushing&quot;</span><br>      <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><p>这时候，你可能会发现，你每一次clone项目之后都需要手动把commit和push的hook文件丢在<code>.git/hooks</code>目录下，是不是觉得不方便？别着急，有办法，我们可以让所有项目的hook操作统一到一个自定义目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/.git-hooks<span class="hljs-comment"># 创建一个存放hook的自定义目录</span><br>git config --global core.hookspath ~/.git-hooks<span class="hljs-comment"># 更改git配置指定hook目录到自定义，先别着急执行，往后看</span><br></code></pre></td></tr></table></figure><p>这样就可以实现统一管理所有项目的hooks操作了</p><blockquote><p>core.hookspath配置需要git版本在v2.9以上才行</p></blockquote><p>然后，你会觉得全局统一管理也太霸道了吧，比如说，公司的项目可以统一一套hooks操作，但是我不想把这一套hooks应用于个人github的项目啊。也就是说你需要在不同的目录下面执行不同的hooks操作，那么该怎么办呢？还是有办法：git配置是可以根据不同目录使用不同配置的</p><p>比如我只想统一管理<code>~/yy</code>目录下的所有项目，那就修改<code>~/.gitconfig</code>文件加入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[includeIf &quot;gitdir:~/yy/&quot;]</span><br>    <span class="hljs-attr">path</span> = .gitconfig-yy<br></code></pre></td></tr></table></figure><p>然后增加一个<code>~/.gitconfig-yy</code>文件，在这个文件中加入yy目录下面的独有配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br>    <span class="hljs-attr">hookspath</span> = ~/.git-hooks<br></code></pre></td></tr></table></figure><hr><p>参考：</p><ol><li><p><a href="https://stackoverflow.com/questions/42455506/in-pre-push-hook-get-git-push-command-full-content">https://stackoverflow.com/questions/42455506/in-pre-push-hook-get-git-push-command-full-content</a></p></li><li><p><a href="https://www.geek-share.com/detail/2776108340.html">https://www.geek-share.com/detail/2776108340.html</a></p></li></ol><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=38qhpnqeksg0g">https://cloud.tencent.com/developer/support-plan?invite_code=38qhpnqeksg0g</a></p>]]></content>
    
    
    <categories>
      
      <category>效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hook</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你压力都这么大了，怎么还睡不好？</title>
    <link href="/2020/09/07/%E4%BD%A0%E5%8E%8B%E5%8A%9B%E9%83%BD%E8%BF%99%E4%B9%88%E5%A4%A7%E4%BA%86%EF%BC%8C%E6%80%8E%E4%B9%88%E8%BF%98%E7%9D%A1%E4%B8%8D%E5%A5%BD%EF%BC%9F/"/>
    <url>/2020/09/07/%E4%BD%A0%E5%8E%8B%E5%8A%9B%E9%83%BD%E8%BF%99%E4%B9%88%E5%A4%A7%E4%BA%86%EF%BC%8C%E6%80%8E%E4%B9%88%E8%BF%98%E7%9D%A1%E4%B8%8D%E5%A5%BD%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>在这个社会里面，每一个人压力都不小。特别是在大城市的小伙伴们，加班是常态。</p><p>面对着高消费和高房价这两座大山，随之而来的，就是焦虑，进而失眠。按照这个逻辑，应该是压力越大才会越容易失眠啊。</p><p>但我却不这么认为。你压力都这么大了，怎么还睡不好？难道不是一回到家倒头就睡的嘛，睡眠效率是100%才对啊，应该是远高于普通人的90%啊。</p><p>可是你为什么还是失眠了呢？</p><span id="more"></span><p>而我只有一种情况会失眠，那就是窗户没关，蚊子进来了，而我却以为关了窗户，但其实我只是拉了窗帘。</p><p>其他所有的时间我都能睡得很香，效率也很高，第二天也不会感觉到困。</p><p>记得今年5月走318线的时候，在新都桥露营营地的小河边扎下帐篷，海拔3300米，被子也不太够，其他人也都没有睡着，我还是睡得很香，即使外面河水哗啦啦的响。</p><h1 id="你越在乎睡眠，反倒越容易失眠"><a href="#你越在乎睡眠，反倒越容易失眠" class="headerlink" title="你越在乎睡眠，反倒越容易失眠"></a>你越在乎睡眠，反倒越容易失眠</h1><p>不要老是想今晚没睡够怎么办，躺下睡不着，我是不是身体出什么问题了？</p><p>别人都能睡八九个小时，我自己只能睡五六个小时，怎么办？</p><p>自己每天都睡不够，影响工作、学习怎么办？今天早上3点就醒过来睡不着了，怎么办？</p><p>这听起来有些反常理： 我对睡眠有要求，反而让我睡不好？</p><p>你仔细想想，是不是这样。</p><p>你心里面顾虑的事情太多， 顾虑工作，顾虑学习，顾虑考试，顾虑和别人的约会。</p><p>每次到了考试前，拼命的让自己睡觉，却失眠了，考试结果一塌糊涂。</p><p>然后就陷入了死循环。越担心睡不好结果越睡不好，越睡不好越担心。</p><p>要解开这个死结，需要降低自己对睡眠的短期预期。</p><p>就好像财富一样，不要老想着去挣钱，要去理解财富创造的规律，做正确的事，财富自然会发生。</p><h1 id="破除3个睡眠误区"><a href="#破除3个睡眠误区" class="headerlink" title="破除3个睡眠误区"></a>破除3个睡眠误区</h1><p><strong>误区一：每天必须睡够8小时。</strong> 高质量的睡眠不需要每晚睡够8小时，很多人觉得自己没睡好，只是没睡到自己设定的8小时而已。</p><p>有时候早上6点多醒了，好像也没有很困，但是算了下时间，离平时起床还有一个小时，这时候就很担心，这提前醒了可咋办啊，今天还有这么多事情要忙，又没睡好，好烦啊。</p><p>不过大可不必有这样的担心，8小时只是人这个物种每天晚上睡眠的一个平均数而已。</p><p>每个人睡眠时间的长短都是不一样的，没必要非得达到8小时，有自己的睡眠节奏就行了。</p><p><strong>误区二：喝酒能改善睡眠。</strong> 酒精虽然能助眠但是并不能提升睡眠效率，即使你喝了酒睡着了，第二天精神就真的会变好？多数情况下也并没有。</p><p>去年有一段时间，晚上下班我经常会去买两瓶RIO，有水蜜桃味白兰地的，也有蓝玫瑰味威士忌的。</p><p>但是我喝酒只是享受微醺的感觉，并不是为了助眠。喝完之后入睡确实很快。</p><p>第二天我并没有觉得精神比不喝酒更好，甚至有一些下降，白天出现了一丝丝困。</p><p>其实酒精会打断你的深度睡眠，酒喝多了，第二天会觉得全身疲乏，精神会更差。</p><p><strong>误区三：晚上没睡好中午还有午睡。</strong> 你越是睡不好越是不能午睡。在互联网公司上班，绝大多数同事都是有睡午觉的习惯的。可能是因为前一晚没睡好，需要午睡补一补。</p><p>也可能是因为下午还要工作，强迫自己休息，进而提高效率。</p><p>如果是为了提高下午的工作效率，那中午可以眯个十分钟。</p><p>但是如果是前一晚没睡好，那么并不建议中午休息。因为中午休息了，晚上又容易睡不着了，这样就进入了恶循环。</p><p>另外午睡不能超过30分钟，超过30分钟就容易进入深度睡眠。这时候被闹铃叫醒，只会觉得更困乏。</p><h1 id="提高睡眠效率的实用方法"><a href="#提高睡眠效率的实用方法" class="headerlink" title="提高睡眠效率的实用方法"></a>提高睡眠效率的实用方法</h1><p><strong>了解自己大概每天需要睡几个小时。</strong> 每个人每天需要的睡眠时长不一样。撒切尔夫人一天只需要睡四五个小时，而网球名将费德勒每天需要睡10个小时。</p><p>那么怎么找到自己的睡眠时长呢？有一个非常简单的方法。</p><blockquote><p>你可以找一个周天，完全不需要工作，按照喜欢的方式安排一定的事情，比如爬山、约会、看电影。到晚上觉得困的时候就睡觉，并且记录一下时间，第二天睡到自然醒，就可以知道自己需要的睡眠时间是几个小时了，也知道了几点开始睡觉，几点起床了。</p></blockquote><p>按照这个方法，我自己每天需要睡6个半小时，第二天就可以精力充沛了。</p><p>知道自己的睡眠时长和规律之后就按照这个节奏去实践吧。</p><p>而且早上一定要在同一时间点起床，不能赖床，立马跳到地上。晚上也是，不困就不上床，困了才去床上，去了就立马睡。</p><p>另外每天工作再忙，都找点时间出去晒晒太阳，整天待在恒温大楼里面，只能接触到人造光，蓝色光的成分太少。</p><p>我的IT同事们，愿意吃完饭去溜一圈的人寥寥无几。</p><p>中午尽量不睡觉，把困意留到晚上，就这样坚持下去，一定能收获好的睡眠。</p><p>当然最最最重要的一点是，睡眠，真的不需要太刻意。</p><p>好吧，到这里，你离好的睡眠应该更近了一步。那就慢慢改善吧，像我一样，到哪儿都能倒头就睡，睡眠效率100%。</p><p>毕竟，人生的失控，始于逐步推迟的睡眠。而人生的进步，始于高效率的睡眠。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职场</tag>
      
      <tag>睡眠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员小哥教你秋招拿大厂offer</title>
    <link href="/2020/08/30/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E5%93%A5%E6%95%99%E4%BD%A0%E7%A7%8B%E6%8B%9B%E6%8B%BF%E5%A4%A7%E5%8E%82offer/"/>
    <url>/2020/08/30/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E5%93%A5%E6%95%99%E4%BD%A0%E7%A7%8B%E6%8B%9B%E6%8B%BF%E5%A4%A7%E5%8E%82offer/</url>
    
    <content type="html"><![CDATA[<p>快要到秋招了，对于应届生来说，秋招是一个特别重要的机会。对于社招同学来说，金九银十也是一个很好的跳槽窗口。</p><p>而我呢，因为是从上海到广州工作，就没有提前先把工作定下来。刚好也趁这个机会出去旅游了两个月。</p><p>旅游结束，等到要开始找工作的时候，发现很多知识点也都忘记的差不多了。说是从0开始准备面试似乎也不是那么过分。</p><p>但最终，大概花了3周时间，最终面试通过找到了一个薪资还不错的工作，入职广州仅有的几家大厂之一的YY欢聚时代，任职高级后端开发工程师。</p><span id="more"></span><h1 id="没有时间规划就没有offer"><a href="#没有时间规划就没有offer" class="headerlink" title="没有时间规划就没有offer"></a>没有时间规划就没有offer</h1><p>时间规划特别重要，前期你需要做的就是需要指定一个时间计划，我给自己定的面试准备时间是两周，充分准备之后才会投递简历。</p><p>一般来说，整个面试准备过程，主要分为4个部分，分别是准备简历，回顾曾经做过的项目，复习各种计算机相关理论和技术栈，还有刷算法题。</p><p>那我是怎么规划时间，将各个部分复习到位的呢？</p><p>首先，你要明白，你这次找工作是面向面试编程的。因此你得有一个意识，你不需要搞明白所有的东西，你只需要从繁杂的技术点里面剥离出面试中最可能被问到的每一个小点。</p><p>比如很多同学会花费大量时间，单独去复习自己日常使用的计算机语言。比如Python或者是Java，也可能是其他的。但其实这样性价比并没有多高。</p><p>一方面是因为你一定会刷算法题的，那么在刷算法题的时候语言相关的就顺带过一下就好了。另一方面是如果你真的要复习语言，那么只需要复习大概率会被问到的知识点就好了，并不需要单独时间。比如只需要复习Python的装饰器应用，Java的并发库实现，还有各个语言的垃圾回收机制等等。</p><p>这一步就是在做减法，给你的面试过程减负，有了这个意识，你就会觉得整个过程很轻松。</p><p>然后你需要合理的分配时间，我采用的是3+4+7的比例来分配这14天时间的。</p><p>3就是3天，用来准备简历还有回顾曾经的项目。简历要写得数据化而不是泛化，数据给面试官的冲击远远比一大堆笼统话语来得更直接。</p><p>4就是4天，用来复习各种计算机相关理论和技术栈。大后端的范畴内，考的知识点很泛，需要熟悉的方方面面很多。</p><p>比如运维开发相关，以docker+k8s为例来复习持续集成自动化部署相关。</p><p>比如大数据相关，搞清楚Hadoop生态圈主要组件的工作原理以及流程，当然也不要仅仅局限在这个圈。</p><p>此外，还有常用消息队列、关系型数据库、非关系型数据库、分布式设计的各种理论，熔断、限流、降级、秒杀，CAP理论等等。</p><p>最后的7就是7天，用来刷算法题。大厂面试必问算法，这是所有技术人员逃不过的关卡，也是大多数同学的最头疼的事情。</p><p>那么怎样才能高效顺利的攻破算法这一关呢？</p><h1 id="高效刷算法题的秘诀"><a href="#高效刷算法题的秘诀" class="headerlink" title="高效刷算法题的秘诀"></a>高效刷算法题的秘诀</h1><p>我上家公司的领导是传说中有着拉之微笑的拉总。毕竟是再惠公司唯一后端专家，技术能力没得说，广度如宇宙，深度似海洋，后端技术栈就没有拉总不知道的。</p><p>但我也经常看到拉总在LeetCode上刷题保持手感，最终拉总凭借自身强大的技术能力，再加上不断刷题保持算法的手感，成功入职哔哩哔哩。</p><p>大牛都需要刷题，更何况普通程序员。</p><p>现在大家基本都是在LeetCode上刷题，我们也只需要用好LeetCode这一个平台就够了。</p><p>开始之前，我们还是厘清我们的目的，我们是为了面试刷算法题，而不是刷着玩，也不会为了刷算法题在LeetCode上打榜争排名。</p><p>那么最高效的刷题方式还是分类刷题最好。你可能会问了，为什么不是把LeetCode一题一题的刷完呢？</p><p>首先，你并没有这么多的时间，LeetCode目前有1700多道算法题，要刷完需要大量的时间，但面试中并不会都问啊，那么我们就需要有针对性的去刷题。</p><p>此外，1700多道题目中有大量重复类型的题目。同类题目中只需要彻底搞清楚一稿题目的，举一反三就能解决这一类型的全部问题。</p><p>你有可能会问，这么多题目，我怎么知道哪些题目是一类的呢？别着急，已经有大牛为我们分门别类的整理好了LeetCode的刷题指南。</p><p>我自己刷过并且感觉有效的是github上的一个LeetCode题解仓库：</p><ul><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md</a></li></ul><p>然后按照分类，我用了一周的时间，针对性的刷了40多道各个类型的题目。这个仓库给出的是Java语言的题解。我最熟悉的是Python，自然用Python刷题了。</p><p>附上我的Python解法：公众号回复【刷算法题】，可以获得Python解法的代码包。</p><h1 id="不会不要慌，大胆给出你的猜测"><a href="#不会不要慌，大胆给出你的猜测" class="headerlink" title="不会不要慌，大胆给出你的猜测"></a>不会不要慌，大胆给出你的猜测</h1><p>分门别类的刷完题目之后，你的心里应该就更有底了，但是面试嘛，总有一些你没有准备到的技术点，总会被问到一些你完全不知道的角落。</p><p>遇到这种情况完全不用慌，大胆的告诉面试官：我不会，但是我猜是xxx这样的。</p><p>而且，只要你大胆的给出自己的猜测，只要是基于你的理解，基于你所掌握的基础理论，我相信你是可以猜到八九不离十的。</p><p>而且即使真的错了，面试官也可以从中看到你的自信，也能了解到你面向未知问题的分析思路。而这些也正是未来职场上真正需要的能力。</p><p>从我以前作为面试官的经历来看，我不喜欢面试者什么问题都能答得很流利，我更喜欢有一些关于未知的探讨，这样才能考察出面试者真正的底层能力。</p><p>从我这次作为面试者的经历来看，显然，我的大胆猜测给了面试官很好的印象。</p><hr><p>最后，这篇文章是从个人号Suncle迁移到职场亮哥这个企业号的第一篇文章，感谢之前的朋友的不离不弃，迁移过程中没有一个人取关，谢谢大家。</p><p>后续会有一篇文章解释为什么会去做这样的迁移，背后究竟经历了怎样的深思熟虑，又是否有职业规划上的方向性改变呢？公众号的定位又是什么呢？尽情期待吧！</p><p>还有新鲜出炉的留言功能，作为即将成长起来的头部大号的第一批用户的你们，请尽情的留言吧，哈哈哈！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年OKR</title>
    <link href="/2019/12/31/2019%E5%B9%B4okr/"/>
    <url>/2019/12/31/2019%E5%B9%B4okr/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/summary/2019-okr/IMG_20170404_055028.jpg"></p><p>2019 年计划</p><ul><li>什么是OKR</li><li>2019年OKR</li><li>个人准备</li></ul><span id="more"></span><h2 id="什么是OKR"><a href="#什么是OKR" class="headerlink" title="什么是OKR"></a>什么是OKR</h2><p>首先介绍一个概念，什么是 OKR？</p><p>OKR (Objectives and Key Results) 和 KPI (Key Performance Indicator) 不同，不属于绩效评估工具，而是一个目标管理工具。KPI是上级交代的任务指标，需要被迫的、顶着压力去完成；OKR是自己（个人或者企业）给自己设定的任务和指标，即便是我自己挖的坑自己也心甘情愿跳。</p><p>关于目标和关键结果的设立，主要有参考以下规则：</p><blockquote><p>Objectives：</p><ul><li>有野心的，较激进的</li><li>令人感觉有点紧张而不舒适的</li></ul><p>Key Results：</p><ul><li>明确的使Objectives可实现</li><li>可量化的</li></ul></blockquote><p>根据这些规则，可以制定出自己2019年的OKR。</p><h2 id="2019年OKR"><a href="#2019年OKR" class="headerlink" title="2019年OKR"></a>2019年OKR</h2><h3 id="目标一：完成2017年未完成的"><a href="#目标一：完成2017年未完成的" class="headerlink" title="目标一：完成2017年未完成的"></a>目标一：完成2017年未完成的</h3><ul><li>关键结果一：学完Google方法论</li></ul><h3 id="目标二：健身锻炼"><a href="#目标二：健身锻炼" class="headerlink" title="目标二：健身锻炼"></a>目标二：健身锻炼</h3><ul><li>关键结果一：每天饮水2000ml，坚持365天</li><li>关键结果二：健身房报名，全年在健身房健身次数达到120次</li><li>关键结果三：学会游泳，能狗爬式</li><li>关键结果四：全年跑步300公里</li></ul><h3 id="目标三：形象气质"><a href="#目标三：形象气质" class="headerlink" title="目标三：形象气质"></a>目标三：形象气质</h3><ul><li>关键结果一：学会化妆，不洗头不化妆参加聚会的次数不能超过2次</li><li>关键结果二：主动结实异性次数达到5次</li><li>关键结果三：被异性夸赞有形象改变的次数达到3次（认识的女生有限）</li><li>关键结果四：<del>开始考虑找个对象，写一篇关于过程的记录文</del></li></ul><h3 id="目标四：财务目标"><a href="#目标四：财务目标" class="headerlink" title="目标四：财务目标"></a>目标四：财务目标</h3><ul><li>关键结果一：第一季度结束前制定完适合自己的投资组合策略，并保持一年</li><li>关键结果二：提升自己的Passive income，目标数量保密</li><li>关键结果三：除工作外，有少量其他收入，具体来源保密</li></ul><h3 id="目标五：学习计划"><a href="#目标五：学习计划" class="headerlink" title="目标五：学习计划"></a>目标五：学习计划</h3><ul><li>关键结果一：在Coursera&#x2F;得到等平台上学习6门经济和艺术类的课程</li><li>关键结果二：看完10本书并写读后感</li><li>关键结果三：通过雅思考试，各项在6.5分以上，或者其他英语级别考试</li><li>关键结果四：使用Python和Java各写一个小项目</li><li>关键结果五：涉猎人工智能，开一个和金融相关的小项目</li></ul><blockquote><p>课程库：</p><ul><li>志玲姐姐的修养课</li><li>香帅的北大金融学课</li><li>薛兆丰的经济学课</li><li>熊逸-唐诗50讲</li><li>摄影-Coursera-透过摄影看世界-Sarah Meister-现代艺术博物馆</li><li>艺术-Coursera-Modern Art &amp; Ideas-现在艺术与思想-Lisa Mazzola-现代艺术博物馆</li><li>法律-Coursera-English Common Law: Structure and Principles-英国普通法：结构与原则-Professor Adam Gearey-伦敦大学</li></ul><p>书籍库：</p><ul><li>《人间失格》 太宰治</li><li>《双城记》狄更斯</li><li>《乞力马扎罗的雪》海明威</li><li>《傲慢与偏见》简·奥斯丁</li><li>《简爱》英文版</li><li>《乡关何处》野夫</li><li>《千年一叹》 余秋雨</li><li>《人生定位》 杰克·特劳特</li><li>《牛津通识读本：简明逻辑学（中文版）》 格雷厄姆•普里斯特 (Priest G.), 史正永, 韩守利</li><li>《了不起的盖茨比》菲茨杰拉德</li></ul></blockquote><h3 id="目标六：写作计划"><a href="#目标六：写作计划" class="headerlink" title="目标六：写作计划"></a>目标六：写作计划</h3><ul><li>关键目标一：完成40篇原创文章发布在博客上，重要的也发布在微信公众号上</li><li>关键目标二：完成20篇翻译</li></ul><h3 id="目标七：旅行和摄影"><a href="#目标七：旅行和摄影" class="headerlink" title="目标七：旅行和摄影"></a>目标七：旅行和摄影</h3><ul><li>关键结果一：去2个没有去过的国家</li><li>关键结果二：国内去2个偏远地区以及8个小一点的地方</li><li>关键结果三：制作3本影集（一本是2018年的欠下的，两本是2019年的）</li></ul><blockquote><p>参考 to go list:</p><ul><li>云南腾冲：热海，银杏村，樱花谷，叠水河</li><li>西藏：拉萨</li><li>泰国：曼谷和thassanawan</li><li>新疆：大西洋最后一滴眼泪，那拉提空中草原</li><li>俄罗斯西伯利亚大铁路：海参崴-贝加尔湖-叶卡捷琳堡-圣彼得堡-莫斯科-摩尔曼斯克</li><li>克罗地亚：扎达尔，杜布罗夫斯克</li><li>西北大环线：敦煌鸣沙山月牙泉</li><li>柬埔寨：暹粒，吴哥窟，西哈努克</li><li>伊朗：伊斯法罕</li></ul></blockquote><h2 id="个人准备"><a href="#个人准备" class="headerlink" title="个人准备"></a>个人准备</h2><p>人最大的命运首先是时代决定的，其次是阶层决定的，最后才是自己的努力决定的。了解自己所处的时代以及时代经济是很有必要的，因为这可以让你看清未来的方向，就像灯塔一样。然后采取适合自己的措施跟上时代步伐，减弱系统性风险。</p><p>芒格说过：</p><blockquote><p>漫长的一生，我都在期待麻烦的到来</p></blockquote><p>也就是说与其遇到麻烦不知所措，还不如准备好期待麻烦的到来。而吴军博士说过：</p><blockquote><p>上帝喜欢主动的人</p></blockquote><p>因此这个部分主要是给自己一个长远的警示，时刻主动准备着，顺便也打打气。</p><h3 id="未来经济"><a href="#未来经济" class="headerlink" title="未来经济"></a>未来经济</h3><p>接下来是一个什么样的时代：从世界范围看，或者从历史上看，中国的经济形势非常好，不会掉入中等收入陷阱。具体表现在：</p><ol><li>全世界不确定的因素基本消除，因为动荡的事情已经经历的太多从而有了预期</li><li>中国会稳定发展，变得更富有而且更加宜居。今后的中国大致还会有20年左右平稳的发展</li><li>接下来的五年中国的公司会更积极的参与全球化</li></ol><p>关于什么是中等收入陷阱以及为什么中国不会掉入中等收入陷阱这些问题可以参考吴军的硅谷来信以及万维钢的一些专栏，其中的部分观点我是比较赞同的。</p><h3 id="个人应对"><a href="#个人应对" class="headerlink" title="个人应对"></a>个人应对</h3><ol><li>主动而且专注的做事情，把握时机。不应该错过利用信息技术改造各种产业的大机会，所以需要捕获好的idea</li><li>如果要进入一个新领域，最好是找到一个能够发挥你特长的切入点，虽然不能确信能走多言，但是这可能是比较省力的方式</li><li>需要注意中国企业参与全球化的机会，可以关注一些中国走向世界的公司的前沿现状</li><li>毕业之后的前三年确实涨了不少见识，接近预期。今后五年的做事参考四条原则：看好未来，大步前进，稳健落脚，坚定信心</li></ol><hr><p>最后放一张毕业前的起飞照片</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/summary/2019-okr/mmexport1490543085073.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2019</tag>
      
      <tag>OKR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次mybatis缓存和事务传播行为导致ut挂的排查过程</title>
    <link href="/2019/12/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1mybatis%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E5%AF%BC%E8%87%B4ut%E6%8C%82%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/"/>
    <url>/2019/12/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1mybatis%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E5%AF%BC%E8%87%B4ut%E6%8C%82%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>记录一次mybatis缓存和事务传播行为导致ut挂的排查过程</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>rhea项目有两个ut一直都是挂的，之前也经过几个同事排查过，但是都没有找到解决办法，慢慢的这个问题就搁置了。因为之前负责rhea项目的同事离职，我临时接手了这个项目，刚好最近来了一个新同事在做新的功能开发的时候遇到了这个问题，于是我就接了一个锅，最终证明这个锅很好玩。</p><p>rhea是一个典型的使用mybatis orm的springboot项目，我们使用h2内存数据库做单元测试，每个单元测试都在一个事务内，都由Transactional进行注解。testGetBGWechatAccountByOpenid这个ut的核心调用链如下</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/troubleshoot-a-problem-caused-by-mybatis-cache/call-chain.jpg" alt="调用链"></p><span id="more"></span><p>调用深度较深，并且有多处使用到了事务，其中<code>BasePlatformUserService.insert</code>这个方法用到了<code>Propagation.REQUIRES_NEW</code>，也就是图中最右边的这个链路中最终插入了一个PlatformUser</p><p>ut代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br><span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBGWechatAccountByOpenid</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">OpenidRo</span> <span class="hljs-variable">openidRo</span> <span class="hljs-operator">=</span> OpenidRo.builder()<br>          .openid(openidZmall)<br>          .appId(appIdZmall)<br>          .unionid(unionid)<br>          .openAppId(openAppId)<br>          .platformCategory(PlatformCategoriesEnum.Zmall.getValue())<br>          .service(ServicesEnum.Server.getValue())<br>          .serviceBusinessGroupId(serviceBusinessGroup2)<br>          .alived(<span class="hljs-literal">false</span>)<br>          .build();<br>      <span class="hljs-type">RheaAccount</span> <span class="hljs-variable">rheaAccount</span> <span class="hljs-operator">=</span> platformUserService.getAccountByOpenId(openidRo);<br>      Assert.assertEquals(rheaAccount.getPhone(), phone2);<br><br>      <span class="hljs-type">RheaPlatformUser</span> <span class="hljs-variable">platformUser</span> <span class="hljs-operator">=</span> platformUserMapper.getByOpenIdAndBG(<br>          openidZmall, appIdZmall, serviceBusinessGroup2, ServicesEnum.Server.getValue());<br>      Assert.assertEquals(rheaAccount.getId(), platformUser.getAccountId());<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>但是在ut里面使用getByOpenIdAndBG查询platformUser却是null导致最终platformUser.getAccountId()这个方法抛出了NPE。</p><h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>排查这个问题会用到以下两个知识点</p><ul><li>事务传播行为-Propagation</li><li>mybatis缓存</li><li>事务和mybatis Session的关联</li></ul><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><p>Springboot的Transactional的实现包含两部分，一个部分是事务传播行为，一个部分是数据库隔离级别，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Transactional &#123;<br>    <span class="hljs-meta">@AliasFor(&quot;transactionManager&quot;)</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br><br>    Isolation <span class="hljs-title function_">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT;<br>    <br>    ...<br></code></pre></td></tr></table></figure><p>数据库隔离级别默认是Isolation.DEFAULT，也就是使用数据库自身的隔离级别，Mysql的默认隔离级别是REPEATABLE_READ可重复读，Oracle的默认事务隔离级别是读已提交READ_COMMITTED。具体的隔离级别不在此讨论。我们需要关注事务的传播行为，也就是Propagation。Propagation实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Propagation</span> &#123;<br>    REQUIRED(<span class="hljs-number">0</span>),<br>    SUPPORTS(<span class="hljs-number">1</span>),<br>    MANDATORY(<span class="hljs-number">2</span>),<br>    REQUIRES_NEW(<span class="hljs-number">3</span>),<br>    NOT_SUPPORTED(<span class="hljs-number">4</span>),<br>    NEVER(<span class="hljs-number">5</span>),<br>    NESTED(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Propagation</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们只是用到了REQUIRED和REQUIRED_NEW，REQUIRED也是默认的传播行为，这两个传播行为的区别在于：</p><ul><li>REQUIRED：默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。所以这个级别通常<strong>能满足处理大多数的业务场景</strong>。</li><li>REQUIRED_NEW：从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。<ul><li>只有在被调用方法中的数据库操作需要保存到数据库中，而不管覆盖事务的结果如何时，才应该使用 <code>REQUIRES_NEW</code> 事务属性</li><li>举个栗子：假设尝试的所有股票交易都必须被记录在一个审计数据库中。出于验证错误、资金不足或其他原因，不管交易是否失败，这条信息都需要被持久化。如果没有对审计方法使用 <code>REQUIRES_NEW</code> 属性，审计记录就会连同尝试执行的交易一起回滚。使用 <code>REQUIRES_NEW</code> 属性可以确保不管初始事务的结果如何，审计数据都会被保存</li></ul></li></ul><h3 id="mybatis缓存"><a href="#mybatis缓存" class="headerlink" title="mybatis缓存"></a>mybatis缓存</h3><p>Mybatis-config.xml中可以配置mybatis的本地缓存范围localCacheScope。</p><p>mybatis官网解释：MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。</p><p>用白话解释：</p><ul><li>SESSION范围的缓存：在同一个SqlSession中多次查询会缓存的mapper中的方法，经过验证，key是单个查询方法<ul><li>连续查询则后续的查询会使用第一个查询的缓存结果——debug时无法找到查询的sql日志</li><li>间断的查询则会实际执行每个查询操作——可以找到每个查询的sql日志</li><li>连续的定义是：在当前Session中执行DML操作，或者开启了其他Session执行了DML操作，都认为是连续</li></ul></li><li>STATEMENT范围的缓存：本质是不使用缓存</li></ul><p>在新版本的mysql中数据库自身有自己的缓存，我们并不需要Mybatis的缓存，而且Mybatis不是最底层的缓存，因为多个Session的存在，往往导致一些问题。</p><p>修改mybatis的默认缓存范围可以在Mybatis-config.xml中加入以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置缓存作用域，它决定是否使用mybatis的缓存。 系统默认值是SESSION，为了不使用mybatis缓存，设置为STATEMENT --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STATEMENT&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>使用以下配置可以打印出mybatis执行时的操作log和sql语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事务和mybatis-Session的关联"><a href="#事务和mybatis-Session的关联" class="headerlink" title="事务和mybatis Session的关联"></a>事务和mybatis Session的关联</h3><p>开启一个新的事务并且在新的事务中首次执行mybatis操作时会开启新的mybatis Session，因此在<code>REQUIRES_NEW</code>中执行mybatis操作一定会开启新的Session</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol><li>确保mapper方法对应的sql是对的</li><li>将使用<code>REQUIRES_NEW</code>的方法改为默认的<code>REQUIRED</code>，发现能查询到platformUser</li><li>在ut中使用其他方法查询插入的platformUser，发现能查询到</li><li>mybatis配置加上日志，debug发现ut中的查询platformUserMapper.getByOpenIdAndBG发现没有打印sql</li><li>猜测可能是查询是用了mybatis缓存，取消缓存发现可以查询到真实记录</li><li>分析：<code>REQUIRES_NEW</code>开启的新事务中开启的新Session插入的记录并没有打破老Session缓存的查询结果，因此在老Session中使用相同的查询语句是查询不到真实记录的</li></ol><p>具体的debug日志如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/troubleshoot-a-problem-caused-by-mybatis-cache/mybatis-sql-session-log.jpg"></p><p>红框中的就是最外层的事务开启的老session，绿色框是中间<code>REQUIRES_NEW</code>新事务中开启的新Session。所以对于红框这个Session而言，它并不知道已经发生了DML操作，因此在后续继续查询时会使用最开始的查询结果，也就是null。</p><p>这种问题通常发生在getOrCreate操作中。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>去掉Mybatis层面的缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置缓存作用域，它决定是否使用mybatis的缓存。 系统默认值是SESSION，为了不使用mybatis缓存，设置为STATEMENT --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STATEMENT&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>解决这个问题对于<code>REQUIRES_NEW</code>这个传播行为的理解就更深刻了。</p><hr><p>参考：</p><ol><li>了解事务陷阱：<a href="https://www.ibm.com/developerworks/cn/java/j-ts1.html">https://www.ibm.com/developerworks/cn/java/j-ts1.html</a></li><li>Spring五个事务隔离级别和七个事务传播行为：<a href="https://blog.csdn.net/caoxiaohong1005/article/details/79984912">https://blog.csdn.net/caoxiaohong1005/article/details/79984912</a></li><li>Innodb中的事务隔离级别和锁的关系：<a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">https://tech.meituan.com/2014/08/20/innodb-lock.html</a></li><li>Mybatis XML配置：<a href="https://mybatis.org/mybatis-3/zh/configuration.html">https://mybatis.org/mybatis-3/zh/configuration.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
      <tag>事务</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从哈夫曼编码再出发：原理和现实</title>
    <link href="/2019/11/26/%E4%BB%8E%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E5%86%8D%E5%87%BA%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E5%92%8C%E7%8E%B0%E5%AE%9E/"/>
    <url>/2019/11/26/%E4%BB%8E%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E5%86%8D%E5%87%BA%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E5%92%8C%E7%8E%B0%E5%AE%9E/</url>
    
    <content type="html"><![CDATA[<p>对于计算机科班出身的人来说，在大学阶段几乎都学过信息论和算法这两门课，信息论都会讲到香农三大定理以及哈夫曼编码，算法课上会学习二叉树，甚至哈弗曼树。在介绍哈夫曼编码之前，先介绍一下什么是有效编码，以及香农第一定理的内容。</p><p>一个好的有效编码需要遵循两个基本原则：</p><ul><li>易辨识</li><li>有效性</li></ul><p>那么怎样才能做到有效编码呢？下面有一个问题：</p><p><strong>用10根手指头，能表达多少个数字？</strong></p><span id="more"></span><p>常见的回答有以下两种：</p><ol><li>能表达10个数字，因为小孩子数数的时候就是掰着指头数的。</li><li>能表达100个数字，因为我们平时能用一只手就能做出10个形状，也就是能数10个数，将两只手组合起来，一个表示十位，一个表示个位，就能表示从0到99共100个数字</li></ol><p>第一个回答最直观，第二个回答其实就利用了编码的知识。</p><p>但是这依然不是最有效的编码，如果我们考虑采用二进制，而不是十进制进行编码，则能表示1024个不同的数字。</p><p>具体的做法是这样的，把10个手指并排在一起，从左到右依次给手指编号，编码为0~9。每一个手指头都有伸出和收起两种状态。每一种状态对应于一位二进制，十个手指头就能表示10位二进制，也就是2的10次方，也就是1024种数字。</p><p>当然也有人觉得可以让每个手指具有伸开、半伸开、收缩三个状态，表示3的10次方也就是59049中数字。虽然这种想法也是正确的，但是过分强调有效性，而忽视了易辨识这个原则，凡事过犹不及。</p><p>常见的比较有效的编码有阿拉伯数字，莫尔斯电码以及计算机中根据电路状态演化的二进制编码。</p><p>一个有效的编码是否就是最优编码呢，答案当然是不一定。香农第一定理告诉我们编码长度是有理论最小值的，摘录信息论这本书中的公式如下：</p><p><strong>编码长度 ≥ 信息熵(信息量) &#x2F; 每一个码的信息量</strong></p><p>香农对此做出了严格的数学证明，同时还证明，只要编码系统设计得足够巧妙，上面的等号是成立的。</p><p>我们以二进制编码为例来说明这个公式，为了预测世界杯冠军，我们先对世界杯的32只球队编码，那如何编码才能使得编码长度最短呢？对于这样的n选1的问题，根据香农第一定理，32选1的信息熵为log32&#x3D;5比特（以2为底的对数），每个编码的信息量为1比特，根据公式最短编码长度为5。如果编码长度小于5，那么传递出去的信息就一定包含不确定性，也就是有损信息、失真信息。</p><p>至于信息熵的计算为什么是以2为底的对数，可以参考分治思想。</p><p>如果我们对经常出现的字母采用较短的编码，对不常见的字母采用较长的编码，根据常识，这样是能够降低编码的整体长度的。在莫尔斯电码中，我们会发现26个英文字母中的5个元音字母aeiou的编码长度是最短的。如果对英文26个字母采用等长度的编码，比如进行二进制编码，需要log26，就是5比特信息。而采用莫尔斯的编码方式，平均只需要3比特，这样效率就提升了很多。</p><p>在中国，北京和上海等重要城市的长途电话区位码就是两位，小城市就使用3位，比如北京是010，上海是021，而江苏常州是0519（所有都忽略掉前面的0），这样做的目的就是为了减少平均的编码长度。</p><p>那怎样才能找到最有效的二进制编码呢？哈夫曼在<em>《A Method for the Construction of Minimum-Redundancy Codes》</em>这篇论文中发表了基于自底向上的有序频率二叉树的编码方法，并很快证明了这个方法是最有效的。</p><p>关于哈夫曼树的构建过程可以参加文末的参考中的Wikipedia链接，此处只做一个简单描述：</p><p>假设我们要给一个英文单字**”F O R G E T”**进行哈夫曼编码，而每个英文字母出现的频率分别列在下图中。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Huffman-code-and-investment/Huffman-fig-1.jpg"></p><p>进行霍夫曼编码前，我们先创建一个霍夫曼树。</p><ol><li>将每个英文字母依照出现频率由小排到大，最小在左，如上图。</li><li>每个字母都代表一个终端节点（叶节点），比较<strong>F.O.R.G.E.T</strong>六个字母中每个字母的出现频率，将最小的两个字母频率相加合成一个新的节点。</li><li>比较<strong>5.R.G.E.T</strong>，发现<strong>R</strong>与<strong>G</strong>的频率最小，故相加4+4&#x3D;8。</li><li>比较<strong>5.8.E.T</strong>，发现<strong>5</strong>与<strong>E</strong>的频率最小，故相加5+5&#x3D;10。</li><li>比较<strong>8.10.T</strong>，发现<strong>8</strong>与<strong>T</strong>的频率最小，故相加8+7&#x3D;15。</li><li>最后剩<strong>10.15</strong>，没有可以比较的对象，相加10+15&#x3D;25。</li></ol><p>最后产生的树状图就是霍夫曼树，如下图。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Huffman-code-and-investment/Huffman_algorithm.gif"></p><p>给霍夫曼树的所有左节点’0’与右节点’1’，从树根至树叶依序记录所有字母的编码，如下图。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Huffman-code-and-investment/Huffman-fig-3.jpg"></p><p>哈夫曼编码从本质上讲，是将最宝贵的资源（最短的编码）给出现概率最大的信息。我们可以在任何需要分配资源的工作中利用哈夫曼编码的思想。</p><p>在风险投资领域，利用哈夫曼编码原理投资就是一套比较有效的系统方法。假定你有一大笔钱可以用于风险投资，怎样投资效果最好？下面有三种做法：</p><ol><li>平均的投入到100个初创公司</li><li>利用自己的眼光投入到一家最可能的公司中</li><li>利用哈夫曼编码进行投资</li></ol><p>第一种方法，过于平均，基本上只能得到一个市场的平均回报。第二种方法，只投一家，其实这就是赌博，我的一些朋友购买股票时，会只买单只股票并且重仓，这种情况如果碰到了会有几倍收入，但是大多数情况下都是血本无归，这是极为糟糕的投资方式。第三种方法是利用哈夫曼编码的原理，可以先把钱逐级投下去，每一次投资的公司呈指数减少，而金额倍增，这样通常不会错失上市的那家。大部分资金都集中到了最后的上市或被收购的企业中，这种投资回报要远远高于前两种。</p><p>对于个人而言，利用哈夫曼编码进行投资也是适用的。美国有名的私立学校哈克学校的前校长尼克诺夫博士说过，在孩子小时候，要让他们尝试各种不同的爱好，但是最终他们要在一个点上实现突破。他将这比作圆规画圆，一方面有一个扎得很深的中心，另一方面有足够广的很浅的覆盖面。</p><p>在工作中，一方面需要成为某个方面的专家，做到足够的深入，比如在DevOps方面，另一方面也需要有足够的覆盖面，了解各个细分领域的设计思想，基本原理和简单实用。</p><p>对于我而言，我会尝试很多新的事情，不会去排斥，是因为不想失去机会，虽然结果是绝大部分失败了，但是至少也尝试过了，毕竟谋事在人成事在天。另一方面对于我花了一些精力，但是看样子也成不了的事情，我是坚决做减法退场止损。这条同样也适用于感情。</p><hr><p>参考：</p><ol><li>wiki：<a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81">https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81</a></li><li>dahuffman：<a href="https://github.com/soxofaan/dahuffman">https://github.com/soxofaan/dahuffman</a></li><li>哈夫曼树的调整：<a href="https://blog.csdn.net/fx677588/article/details/70767446">https://blog.csdn.net/fx677588/article/details/70767446</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈夫曼</tag>
      
      <tag>编码</tag>
      
      <tag>投资</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grafana Dashboard 配置导入导出</title>
    <link href="/2019/11/15/grafana-dashboard-%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <url>/2019/11/15/grafana-dashboard-%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>我司最近的一件大事是AWS迁移阿里云，因此之前部署在AWS上的Prometheus监控系统需要迁移到Aliyun机器上，组件之一展示面板Grafana有很多自定义好的配置，而这些配置是存在于grafana.db中的，因此需要导出导入配置到新的db中。Grafana提供了丰富的api供用户使用，我们调用api导出</p><h2 id="导出配置"><a href="#导出配置" class="headerlink" title="导出配置"></a>导出配置</h2><p>首先获取Grafana的api_key：menu–configuration–api keys – add API key</p><p>然后安装jq：命令行下处理JSON 数据的工具，可以对json数据进行分片、过滤、映射和转换</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install jq<br></code></pre></td></tr></table></figure><p>导出脚本grafana-dashboard-exporter.sh参考：<a href="https://gist.github.com/crisidev/bd52bdcc7f029be2f295">https://gist.github.com/crisidev/bd52bdcc7f029be2f295</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># add the &quot;-x&quot; option to the shebang line if you want a more verbose output</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># set some colors for status OK, FAIL and titles</span><br>SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[0;32m&quot;</span><br>SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \\033[0;39m&quot;</span><br>SETCOLOR_TITLE_PURPLE=<span class="hljs-string">&quot;echo -en \\033[0;35m&quot;</span> <span class="hljs-comment"># purple</span><br><br><span class="hljs-comment"># usage log &quot;string to log&quot; &quot;color option&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_success</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[<span class="hljs-variable">$&#123;timestamp&#125;</span>] <span class="hljs-variable">$1</span>\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_failure</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[<span class="hljs-variable">$&#123;timestamp&#125;</span>] <span class="hljs-variable">$1</span>\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_title</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       log_failure <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   <span class="hljs-variable">$&#123;SETCOLOR_TITLE_PURPLE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|<span class="hljs-variable">$1</span>|\n&quot;</span>;<br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">init</span></span>() &#123;<br>   <span class="hljs-comment"># Check if hostname and key are provided</span><br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> -lt 2 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       log_failure <span class="hljs-string">&quot;Not enough command line arguments! Expecting two: \$HOSTNAME and \$KEY. Recieved only <span class="hljs-variable">$1</span>.&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   DASH_DIR=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span> | awk -F[/:] <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span>)<br><br>   <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DASH_DIR&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DASH_DIR&#125;</span>&quot;</span><br>   <span class="hljs-keyword">else</span><br>   log_title <span class="hljs-string">&quot;----------------- A <span class="hljs-variable">$DASH_DIR</span> directory already exists! -----------------&quot;</span><br>   <span class="hljs-keyword">fi</span><br>&#125;<br><br><br>HOST=<span class="hljs-variable">$1</span><br>KEY=<span class="hljs-variable">$2</span><br>init <span class="hljs-variable">$#</span> <span class="hljs-variable">$HOST</span> <span class="hljs-variable">$KEY</span><br><br>counter=0<br><br><span class="hljs-keyword">for</span> dashboard_uid <span class="hljs-keyword">in</span> $(curl -sS -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$KEY</span>&quot;</span> <span class="hljs-variable">$HOST</span>/api/search\?query\=\&amp; | jq -r <span class="hljs-string">&#x27;.[] | select( .type | contains(&quot;dash-db&quot;)) | .uid&#x27;</span>); <span class="hljs-keyword">do</span><br><br>   counter=$((counter + <span class="hljs-number">1</span>))<br>   url=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span>/api/dashboards/uid/<span class="hljs-variable">$dashboard_uid</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\r&#x27;</span>`<br>   dashboard_json=$(curl -sS -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$KEY</span>&quot;</span> <span class="hljs-variable">$url</span>)<br>   dashboard_title=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> | jq -r <span class="hljs-string">&#x27;.dashboard | .title&#x27;</span> | sed -r <span class="hljs-string">&#x27;s/[ \/]+/_/g&#x27;</span> )<br>   dashboard_version=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> | jq -r <span class="hljs-string">&#x27;.dashboard | .version&#x27;</span>)<br>   folder_title=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> | jq -r <span class="hljs-string">&#x27;.meta | .folderTitle&#x27;</span>)<br><br>   <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>/<span class="hljs-variable">$folder_title</span>&quot;</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>/<span class="hljs-variable">$folder_title</span>/<span class="hljs-variable">$&#123;dashboard_title&#125;</span>_v<span class="hljs-variable">$&#123;dashboard_version&#125;</span>.json&quot;</span><br><br>   log_success <span class="hljs-string">&quot;Dashboard has been saved\t\t title=\&quot;<span class="hljs-variable">$&#123;dashboard_title&#125;</span>\&quot;, uid=\&quot;<span class="hljs-variable">$&#123;dashboard_uid&#125;</span>\&quot;, path=\&quot;<span class="hljs-variable">$&#123;DASH_DIR&#125;</span>/<span class="hljs-variable">$folder_title</span>/<span class="hljs-variable">$&#123;dashboard_title&#125;</span>_v<span class="hljs-variable">$&#123;dashboard_version&#125;</span>.json\&quot;.&quot;</span><br><span class="hljs-keyword">done</span><br><br>log_title <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;counter&#125;</span> dashboards were saved&quot;</span>;<br><br>log_title <span class="hljs-string">&quot;------------------------------ FINISHED ---------------------------------&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>使用方式（已脱敏）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash grafana-dashboard-exporter.sh http://localhost:3000 eyJrIjoiZkhiQUVDczNFT0QyUVE4YkJwb1RBbHasfaefaefdDVXT1dkVlkiLCJuIjoiemFpaHVpX2FXkiLCJpZCI6MX0=<br></code></pre></td></tr></table></figure><h2 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h2><ul><li>老版本：使用api_key导入</li><li>新版本（v5.0之后）：使用dockprom的setup.sh启动时导入</li></ul><h3 id="使用api导入"><a href="#使用api导入" class="headerlink" title="使用api导入"></a>使用api导入</h3><p>如果在目标机器上的Grafana已经启动并且可以访问Dashboard拿到api_key，则可以按照以下方式导入配置</p><p>导入脚本grafana-dashboard-importer.sh参考：<a href="https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05">https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># add the &quot;-x&quot; option to the shebang line if you want a more verbose output</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br>OPTSPEC=<span class="hljs-string">&quot;:hp:t:k:&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">show_help</span></span>() &#123;<br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">Usage: $0 [-p PATH] [-t TARGET_HOST] [-k API_KEY]</span><br><span class="hljs-string">Script to import dashboards into Grafana</span><br><span class="hljs-string">    -p      Required. Root path containing JSON exports of the dashboards you want imported.</span><br><span class="hljs-string">    -t      Required. The full URL of the target host</span><br><span class="hljs-string">    -k      Required. The API key to use on the target host</span><br><span class="hljs-string"></span><br><span class="hljs-string">    -h      Display this help and exit.</span><br><span class="hljs-string">EOF</span><br>&#125;<br><br><span class="hljs-comment">###### Check script invocation options ######</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;<span class="hljs-variable">$OPTSPEC</span>&quot;</span> optchar; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$optchar</span>&quot;</span> <span class="hljs-keyword">in</span><br>        h)<br>            show_help<br>            <span class="hljs-built_in">exit</span><br>            ;;<br>        p)<br>            DASH_DIR=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        t)<br>            HOST=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        k)<br>            KEY=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        \?)<br>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Invalid option: -<span class="hljs-variable">$OPTARG</span>&quot;</span> &gt;&amp;2<br>          <span class="hljs-built_in">exit</span> 1<br>          ;;<br>        :)<br>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option -<span class="hljs-variable">$OPTARG</span> requires an argument.&quot;</span> &gt;&amp;2<br>          <span class="hljs-built_in">exit</span> 1<br>          ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$HOST</span>&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$KEY</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    show_help<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># set some colors for status OK, FAIL and titles</span><br>SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[0;32m&quot;</span><br>SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \\033[0;39m&quot;</span><br>SETCOLOR_TITLE_PURPLE=<span class="hljs-string">&quot;echo -en \\033[0;35m&quot;</span> <span class="hljs-comment"># purple</span><br><br><span class="hljs-comment"># usage log &quot;string to log&quot; &quot;color option&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_success</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[%s] <span class="hljs-variable">$1</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$timestamp</span>&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_failure</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[%s] <span class="hljs-variable">$1</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$timestamp</span>&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_title</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       log_failure <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   <span class="hljs-variable">$&#123;SETCOLOR_TITLE_PURPLE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|%s|\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>;<br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    DASH_LIST=$(find <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>&quot;</span> -mindepth 1 -name \*.json)<br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_LIST</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        log_title <span class="hljs-string">&quot;----------------- <span class="hljs-variable">$DASH_DIR</span> contains no JSON files! -----------------&quot;</span><br>        log_failure <span class="hljs-string">&quot;Directory <span class="hljs-variable">$DASH_DIR</span> does not appear to contain any JSON files for import. Check your path and try again.&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">else</span><br>        FILESTOTAL=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_LIST</span>&quot;</span> | <span class="hljs-built_in">wc</span> -l)<br>        log_title <span class="hljs-string">&quot;----------------- Starting import of <span class="hljs-variable">$FILESTOTAL</span> dashboards -----------------&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    log_title <span class="hljs-string">&quot;----------------- <span class="hljs-variable">$DASH_DIR</span> directory not found! -----------------&quot;</span><br>    log_failure <span class="hljs-string">&quot;Directory <span class="hljs-variable">$DASH_DIR</span> does not exist. Check your path and try again.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>NUMSUCCESS=0<br>NUMFAILURE=0<br>COUNTER=0<br><br><span class="hljs-keyword">for</span> DASH_FILE <span class="hljs-keyword">in</span> <span class="hljs-variable">$DASH_LIST</span>; <span class="hljs-keyword">do</span><br>    COUNTER=$((COUNTER + <span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Import <span class="hljs-variable">$COUNTER</span>/<span class="hljs-variable">$FILESTOTAL</span>: <span class="hljs-variable">$DASH_FILE</span>...&quot;</span><br>    RESULT=$(<span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_FILE</span>&quot;</span> | jq <span class="hljs-string">&#x27;. * &#123;overwrite: true, dashboard: &#123;id: null&#125;&#125;&#x27;</span> | curl -s -X POST -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$KEY</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOST</span>&quot;</span>/api/dashboards/db -d @-)<br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$RESULT</span>&quot;</span> == *<span class="hljs-string">&quot;success&quot;</span>* ]]; <span class="hljs-keyword">then</span><br>        log_success <span class="hljs-string">&quot;<span class="hljs-variable">$RESULT</span>&quot;</span><br>        NUMSUCCESS=$((NUMSUCCESS + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span><br>        log_failure <span class="hljs-string">&quot;<span class="hljs-variable">$RESULT</span>&quot;</span><br>        NUMFAILURE=$((NUMFAILURE + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br>log_title <span class="hljs-string">&quot;Import complete. <span class="hljs-variable">$NUMSUCCESS</span> dashboards were successfully imported. <span class="hljs-variable">$NUMFAILURE</span> dashboard imports failed.&quot;</span>;<br>log_title <span class="hljs-string">&quot;------------------------------ FINISHED ---------------------------------&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>使用方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash grafana-dashboard-importer.sh -t http:localhost:3000 -k eyJrIjoiZkhiQUVDczNFT0QyUaouefohaoeihoaefhaoiefiomFpaHVpX2FwaV9rZXkiLCJpZCI6MX0= -p ~/grafana-dashboard<br></code></pre></td></tr></table></figure><h3 id="使用grafana-provision"><a href="#使用grafana-provision" class="headerlink" title="使用grafana provision"></a>使用grafana provision</h3><p>新版Grafana支持使用provision的方式通过yaml配置导入 <code>dashboards | datasources | notifiers</code> 这三种资源到Grafana db中。</p><p><code>/etc/grafana/grafana.ini</code>文件中需要配置provisioning的目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[paths]</span><br><span class="hljs-attr">data</span> = /var/lib/grafana/data<br><span class="hljs-attr">logs</span> = /var/log/grafana<br><span class="hljs-attr">plugins</span> = /var/lib/grafana/plugins<br><span class="hljs-attr">provisioning</span> = /etc/grafana/provisioning<br><span class="hljs-section">[smtp]</span><br><span class="hljs-attr">enabled</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">host</span> = smtp.exmail.qq.com:<span class="hljs-number">25</span><br>...<br></code></pre></td></tr></table></figure><p><code>/etc/grafana/provisioning</code>目录中新建<code>dashboards | datasources | notifiers</code> 这三个文件夹。</p><p>在dashboards目录下<code>provisioning/dashboards/dashboard-provider.yaml</code>需要配置好需要导入的dashboard的配置文件的path：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">providers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;default&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/General</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;k8s&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;k8s&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/k8s</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;celery&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;celery&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/celery</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;pulsar&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;pulsar&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/pulsar</span><br></code></pre></td></tr></table></figure><p>在datasources目录<code>provisioning/datasources/datasource.yaml</code>下需要配置好需要导入的datasources的配置文件的path：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">datasources:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Prometheus</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">http://prometheus:9090/</span><br>  <span class="hljs-attr">access:</span> <span class="hljs-string">proxy</span><br>  <span class="hljs-attr">isDefault:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>notifiers配置暂时没有用到，保留一个空目录即可</p><p>注意事项：</p><ol><li><code>/var/lib/grafana/dashboards/General</code>目录grafana默认的目录，因此export之后的General需要导入到default中</li><li>通过export导出的json配置文件需要做处理：<ol><li>只需要json中的dashboard信息，不需要meta信息</li><li>json配置需要保持字典序</li></ol></li></ol><p>grafana-dashboard-exporter.sh导出的代码可以通过一下python代码进行转换得到provision的配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>dirs = [<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/celery&quot;</span>,<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/General&quot;</span>,<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/k8s&quot;</span>,<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/pulsar&quot;</span>,<br>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dirs:<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(d):<br>            filename = <span class="hljs-string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d, f)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.endswith(<span class="hljs-string">&quot;.json&quot;</span>) <span class="hljs-keyword">or</span> f.startswith(<span class="hljs-string">&quot;.&quot;</span>):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;r+&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>                    json_data = fp.read()<br>                    data = json.loads(json_data)<br>                    fp.seek(<span class="hljs-number">0</span>)<br>                    fp.write(json.dumps(data[<span class="hljs-string">&quot;dashboard&quot;</span>], sort_keys=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 字母序</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;: success&quot;</span>.<span class="hljs-built_in">format</span>(filename))<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename, e))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><p>Dockprom: <a href="https://github.com/stefanprodan/dockprom">https://github.com/stefanprodan/dockprom</a></p></li><li><p>Grafana-dashboard-exporter: <a href="https://gist.github.com/crisidev/bd52bdcc7f029be2f295">https://gist.github.com/crisidev/bd52bdcc7f029be2f295</a></p></li><li><p>Grafana-dashboard-import: <a href="https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05">https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05</a></p></li><li><p>Provisioning Grafana: <a href="https://grafana.com/docs/administration/provisioning/">https://grafana.com/docs/administration/provisioning/</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grafana</tag>
      
      <tag>Prometheus</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>陆蓉的行为金融学</title>
    <link href="/2019/11/13/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6/"/>
    <url>/2019/11/13/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>准备好这个思维导图都大半年了，一直没有时间发布一下，总觉得自己会再多写一写感悟，写一写自己的投资经历，但是发现积攒的todo list变得越来越长，有时候想说的其实并没有那么多，一些单纯的分享也挺好，不求每个人都能看懂，但是能给想看的人一个整体结构。</p><p>刚好国庆放假前需要在技术中台的几个后端工程师之间做个分享，但是要准备国庆出游的行程，完全没有时间准备技术分享，因此就选择了两个偏娱乐的主题供同事选择：</p><ol><li>男女间的一些小八卦，一些关于旅游的小趣事</li><li>陆蓉的行为金融学</li></ol><p>本来想划下水，随便分享一个就结束了。出乎意料的结果同事们对这两个主题都很感兴趣，不过也是，一个是感情八卦，一个是关于钱的。这个不管是谁应该都是想听的吧。而且整个分享的过程中气氛都特别好，嗯，自认为是一次成功的分享。</p><p>具体的行为金融学的知识就看下面的思维导图了，需要mindnode源文件的文末的链接。</p><span id="more"></span><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/normal/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE.jpg"></p><hr><p>参考：</p><ol><li>陆蓉的行为金融学课：<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/file/tech/blog/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE.zip">https://flowsnow.oss-cn-shanghai.aliyuncs.com/file/tech/blog/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE.zip</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>行为金融学</tag>
      
      <tag>陆蓉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次奇怪的http状态码改变</title>
    <link href="/2019/11/13/%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81%E6%94%B9%E5%8F%98/"/>
    <url>/2019/11/13/%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81%E6%94%B9%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<p>最近将一个很久没有更新的部署在物理机上的一个老服务迁移到k8s时，发现在gitlab ci跑pytest的过程中出现以下报错：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">__<span class="hljs-emphasis">_ HelloTests.test_</span>redirect __</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">self = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tests.test_hello.HelloTests</span> <span class="hljs-attr">testMethod</span>=<span class="hljs-string">test_redirect</span>&gt;</span></span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">    def test_</span>redirect(self):<br><span class="hljs-code">        resp = self.get(&#x27;/api/hello&#x27;)</span><br><span class="hljs-code">&gt;       self.assertEqual(http.HTTPStatus.MOVED_PERMANENTLY.value, resp.status_code)</span><br><span class="hljs-code">E       AssertionError: 301 != 308</span><br><span class="hljs-code"></span><br>tests/test<span class="hljs-emphasis">_hello.py:18: AssertionError</span><br></code></pre></td></tr></table></figure><p>按照python系的习惯，一般而言，我们习惯在接口最后加上一个slash，因此会将所有不带slash的接口301重定向到带slash。但是这一次提示重定向的状态码是308。</p><span id="more"></span><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>经排查，发现是使用的WSGI服务器WerkZeug的版本发生了升级由<code>Werkzeug-0.12.0</code>升级到<code>Werkzeug-0.16.0</code>，通过查看<code>Werkzeug-0.12.0</code>的重定向确实是301，源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestRedirect</span>(HTTPException, RoutingException):<br><br>    <span class="hljs-string">&quot;&quot;&quot;Raise if the map requests a redirect. This is for example the case if</span><br><span class="hljs-string">    `strict_slashes` are activated and an url that requires a trailing slash.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The attribute `new_url` contains the absolute destination url.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    code = <span class="hljs-number">301</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, new_url</span>):<br>        RoutingException.__init__(self, new_url)<br>        self.new_url = new_url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_response</span>(<span class="hljs-params">self, environ</span>):<br>        <span class="hljs-keyword">return</span> redirect(self.new_url, self.code)<br></code></pre></td></tr></table></figure><p>而<code>Werkzeug-0.16.0</code>的重定向却变成了308，源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestRedirect</span>(HTTPException, RoutingException):<br>    <span class="hljs-string">&quot;&quot;&quot;Raise if the map requests a redirect. This is for example the case if</span><br><span class="hljs-string">    `strict_slashes` are activated and an url that requires a trailing slash.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The attribute `new_url` contains the absolute destination url.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    code = <span class="hljs-number">308</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, new_url</span>):<br>        RoutingException.__init__(self, new_url)<br>        self.new_url = new_url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_response</span>(<span class="hljs-params">self, environ</span>):<br>        <span class="hljs-keyword">return</span> redirect(self.new_url, self.code)<br></code></pre></td></tr></table></figure><p>查阅Werkzeug代码的更新历史，在<a href="https://github.com/pallets/werkzeug/pull/1342/">https://github.com/pallets/werkzeug/pull/1342/</a>这个pr中将301改成了308。pr中的conversation的讨论主要是有以下观点：</p><ul><li>根据MDN，除Windows &lt;&#x3D; 8上的IE之外，所有浏览器均支持308。Windows 8也快完蛋了。 如果仍然有人需要支持非常老的浏览器，则可以修改RequestRedirect.code &#x3D; 301支持301重定向</li><li>由&#x2F;a重定向到&#x2F;a&#x2F;并不会改变method，301和308对于多数人没有什么影响</li></ul><p>相关pr：<a href="https://github.com/pallets/werkzeug/pull/1402/files">https://github.com/pallets/werkzeug/pull/1402/files</a></p><h3 id="http-3xx-介绍"><a href="#http-3xx-介绍" class="headerlink" title="http 3xx 介绍"></a>http 3xx 介绍</h3><p>介绍3xx之前，再大致过一遍目前的状态码复习一遍</p><ul><li>1xx：临时的响应，旨在在服务器继续处理请求时使用。很少被用到</li><li>2xx：成功-事情按预期工作时使用的状态码。 根据请求返回不同的成功代码</li><li>3xx：重定向—用于告诉客户端在其他地方查找所请求资源的状态</li><li>4xx：客户端错误-这些状态码告诉客户端它做错了什么</li><li>5xx：服务端错误-服务器上某些东西无法正常工作时的状态码</li></ul><p>关于3xx的http状态码，简单做一下介绍：</p><h4 id="HTTP-301-Moved-Permanently"><a href="#HTTP-301-Moved-Permanently" class="headerlink" title="HTTP 301 Moved Permanently"></a>HTTP 301 Moved Permanently</h4><p>永久重定向：被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><h4 id="HTTP-302-Found"><a href="#HTTP-302-Found" class="headerlink" title="HTTP 302 Found"></a>HTTP 302 Found</h4><p>临时重定向：请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><h4 id="HTTP-303-See-Other"><a href="#HTTP-303-See-Other" class="headerlink" title="HTTP 303 See Other"></a>HTTP 303 See Other</h4><p>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</p><h4 id="HTTP-304-Not-Modified"><a href="#HTTP-304-Not-Modified" class="headerlink" title="HTTP 304 Not Modified"></a>HTTP 304 Not Modified</h4><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p><h4 id="HTTP-305-Use-Proxy"><a href="#HTTP-305-Use-Proxy" class="headerlink" title="HTTP 305 Use Proxy"></a>HTTP 305 Use Proxy</h4><p>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。</p><h4 id="HTTP-306-Switch-Proxy"><a href="#HTTP-306-Switch-Proxy" class="headerlink" title="HTTP 306 Switch Proxy"></a>HTTP 306 Switch Proxy</h4><p>这个状态最初是指后续请求应使用指定的代理。但是已经被弃用了</p><h4 id="HTTP-307-Temporary-Redirect"><a href="#HTTP-307-Temporary-Redirect" class="headerlink" title="HTTP 307 Temporary Redirect"></a>HTTP 307 Temporary Redirect</h4><p>临时重定向且不能修改之后的请求方法，302的扩充</p><h4 id="HTTP-308-Permanent-Redirect"><a href="#HTTP-308-Permanent-Redirect" class="headerlink" title="HTTP 308 Permanent Redirect"></a>HTTP 308 Permanent Redirect</h4><p>永久重定向且不能修改之后的请求方法，301的扩充</p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>重定向</tag>
      
      <tag>状态码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何看待work from travel</title>
    <link href="/2019/11/13/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85work-from-travel/"/>
    <url>/2019/11/13/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85work-from-travel/</url>
    
    <content type="html"><![CDATA[<p>什么是work from travel？简单说就是边旅行边工作。每时每刻都想体验不一样的生活，想待在不同的地方思考当地人的生活方式，想一直走在路上，想永不停歇，想…</p><p>其实也就是一直在想，虽然也做了一些探索，也尝试做了一些准备，但是终归没有迈出这一步。不知不觉就过了毕业之时给自己设立的前3年：3年内可以随心随意玩任何地方做任何事情，不需要攒钱也不需要考虑任何人的想法。当然，也是为了用3年时间去记住一个人也去忘记一个人。确实，这三年我差不多是这么过来的。</p><p>所以，子龙经常会说，你怎么又出去玩了，下次去哪儿呀？朋友圈底下，红姐又评论了一句”潇洒哥“。说好不失散到后来慢慢没人水群的老同学们明确的表示羡慕。但是我知道，所有的这些不过是我在多年前就规划好的人生路线，我很清楚的知道自己在干什么。从我的规划里面也不难看出，为什么我一直都想谈一谈work from travel这个话题。</p><p>说回work from travel，我大致问了一些不同行业的朋友他们的想法，算是一次简易的线上采访。从中挑了几个算是有代表性又想法略有差异的看法，他们的职业不一，问题也不尽相同，就在这里记录一下，没有做任何改动的原始记录，也不做任何评价。</p><span id="more"></span><h3 id="新媒体运营-女"><a href="#新媒体运营-女" class="headerlink" title="新媒体运营-女"></a>新媒体运营-女</h3><ol><li>新媒体行业主要在做什么，新媒体运营的工作主要内容是啥呢<blockquote><p>通过各种手段把产品推广出去，得到更多的流量，流量即关注人群。配合全平台进行营销</p></blockquote></li><li>视频剪辑最好的入门方式是啥，有什么不错的资料推荐<blockquote><p>premiere，B站有很多入门视频，不需要买书也可以</p></blockquote></li><li>做视频的个人或者公司常见的变现方式都有哪些<blockquote><p>接广告卖产品，或者卖自己的产品</p></blockquote></li><li>你怎么看vlog以及前景<blockquote><p>是趋势，有前景，但是要看作者的人格魅力 技术 话题</p></blockquote></li><li>怎么看待work from travel？<blockquote><p>有很多人在做，他们要么有上述优势，要么有钱有闲</p></blockquote></li></ol><p>PS：有些人他们先自己做，做得很好之后，辞职专职做，并且把运营给公司负责，Papitude就有不少这样的创作者</p><h3 id="服装设计师-女"><a href="#服装设计师-女" class="headerlink" title="服装设计师-女"></a>服装设计师-女</h3><ol><li>怎么看待work from travel？<blockquote><p>感觉旅游工作幸福指数很高，也具有挑战性，也可以看见世间的美好</p></blockquote></li><li>服装设计师是否也可以做到work from travel？<blockquote><p>我觉得可以做到，这样子做出来的产品会更有意境，更有画面感</p></blockquote></li><li>travel的过程中你觉得可能有哪些收入？<blockquote><p>没有收入，有可能当一个走鬼变卖一些东西吧或者自己的一些小设计，或者增加自己的流量增加粉丝数量以后有些其他突破</p></blockquote></li><li>怎么看待短视频、vlog及其变现方式？<blockquote><p>觉得挺好的，用自己的视角思维收获一批志同道合的人交流还可以赚钱</p></blockquote></li><li>怎么看待美团，去哪儿等OTA公司？<blockquote><p>没想法</p></blockquote></li></ol><h3 id="金融从业者-女"><a href="#金融从业者-女" class="headerlink" title="金融从业者-女"></a>金融从业者-女</h3><ol><li>怎么看待work from travel？<blockquote><p>旅游中工作当然是不愿意的，我更倾向旅游和工作分开，不然旅游都变成一种负担，达不到我要的度假效果。</p></blockquote></li><li>金融从业者是否也可以做到work from travel？<blockquote><p>当然可以，现在移动互联网发达。但我不太理解想表达的是金融从业者从事旅游工作，还是一边旅游一边处理工作事宜。如果是前者我不太愿意，任何工作都有它的核心部分；如果是后者那工作未完事项还是必须要做。</p></blockquote></li><li>travel的过程中你觉得可能有哪些收入？<blockquote><p>代购打折差价，商家返点，攻略游记卖给旅游平台等等</p></blockquote></li><li>怎么看待短视频、vlog及其变现方式？<blockquote><p>隐性消费，网上有很多教程如果有心学习人人可拍短视频，可关注喜欢自拍却没有条件的，像滑翔伞一个短视频拍摄可收40元人民币，要有平台支持。</p></blockquote></li><li>怎么看待美团，去哪儿等OTA公司？<blockquote><p>提供更便捷的路径了解资讯，对比各种信息找到更适合自己的消费，是消费升级很好的嫁接工具。使用页面的操作性，美观，客服态度都有利于提高平台竞争力。</p></blockquote></li></ol><h3 id="产品经理-女"><a href="#产品经理-女" class="headerlink" title="产品经理-女"></a>产品经理-女</h3><ol><li>怎么看待work from travel？<blockquote><p>喜欢就可以去尝试，现在也没有啥负担，年轻就应该体验多种生活方式</p></blockquote></li><li>travel的过程中你觉得可能有哪些收入？<blockquote><p>旅游收入分两种咯，正式工作和自由职业者。正式工作：跟公司签约，限制有些大，工作有旅游体验师之类的。自由职业：不限制地点的感觉都可以，比如写作，专业相关的私活啥的。</p></blockquote></li><li>如何稳定的接到性价比不错的私活？<blockquote><p>私活这种都是靠人介绍啊。私活一般性价比高的不多，如果性价比高的话那大家都不上班了。</p></blockquote></li><li>怎么看待IT咨询？<blockquote><p>暂不了解</p></blockquote></li><li>怎么看待短视频、vlog及其变现方式？<blockquote><p>这些方式刚开始的时候比较赚钱，现在也越来越不好变现了。任何来钱快的除了犯法都离不开运营，一个人做这些都太难了。</p></blockquote></li></ol><h3 id="资深程序员-男"><a href="#资深程序员-男" class="headerlink" title="资深程序员-男"></a>资深程序员-男</h3><ol><li>热爱旅游嘛？<blockquote><p>不怎么热爱</p></blockquote></li><li>怎么看待work from travel？<blockquote><p>对人的安全感有一定考验，但是很爽，人生很值得</p></blockquote></li><li>travel的过程中你觉得可能有哪些收入？<blockquote><p>现在的话，自媒体是一方面，还有 remote working 也是可以的，软件的话可以做点小外包，一些咨询工作（随便想的）可能也可以</p></blockquote></li><li>怎么看待短视频、vlog及其变现方式？<blockquote><p>直接收入比较难，要做大了才能靠恰饭获得视频之外的收入</p></blockquote></li><li>怎么看待美团，去哪儿等OTA公司？<blockquote><p>没啥特殊的看法，反正赚钱呗，做啥都差不多，他们不做也有人做。。。</p></blockquote></li></ol><h3 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h3><p>潇洒走一回，精彩过一生。</p><p>且用这10个字来概括我对work from travel的看法。以前一直有一个想法就是如果不能一直走在路上那人生还有什么意义。没时间，那就不工作，没钱，那就在路上赚。</p><p>在我的奇妙清单的Go目录下面的README里面，一直都贮藏着这么一段话：想旅行就别背太多行李，想恋爱就别怕听见心碎声音。做一个身体和心灵都勇敢的人，趁着身体未老，心灵还透明。迎着风，走着，爱着，哪怕这不是你的方向，但别让自己站在原地感叹青春短暂，人生无常。</p><p>到如今我也不记得这段话的出处了。但我知道，旅行是一项终生事业，我会一直坚持走下去。</p><p>只是这不再是唯一的事业了。这三年我逐渐找到了一些适合我的节奏并且自己也喜欢的一些事情，很幸运。</p><p>现在来到了当初规划的中间5年，无论工作还是生活都必然有一些不小的改变，会改变态度会改变方法，同时也决定了明年的基调。至于第四季度的OKR，其实关于我的部分早在10个月之前就已经定下来了，那么就删掉一个8月份才加入的todo吧。我总是习惯用一段不短的时间去总结一些珍贵的往事，即使只是一些插曲，而且我往往都做到了。</p><p>有点写不下去了，就这样。</p><hr><p>参考：</p><ul><li><a href="https://www.backpackers.com.tw/forum/showthread.php?t=1782498">我是怎麼邊工作又邊旅行世界的</a></li><li><a href="https://www.jianshu.com/p/2c6e8fe05836">两年半环球旅行经验｜如何边旅行边赚钱？</a></li><li><a href="https://www.mafengwo.cn/wenda/detail-6947591.html">如何机智地边旅行边赚钱？</a></li><li><a href="http://remotejobs.hobowithalaptop.com/">Digital Nomad Job Site Directory</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感悟</tag>
      
      <tag>旅行</tag>
      
      <tag>采访</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据OLAP系统比较</title>
    <link href="/2019/08/02/%E5%A4%A7%E6%95%B0%E6%8D%AEolap%E7%B3%BB%E7%BB%9F%E6%AF%94%E8%BE%83/"/>
    <url>/2019/08/02/%E5%A4%A7%E6%95%B0%E6%8D%AEolap%E7%B3%BB%E7%BB%9F%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>大数据OLAP系统比较</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>选择presto和clickhouse配合使用</p><ul><li><p>对实时性要求不严格的数据用presto查询</p></li><li><p>对于实时性有要求的数据查询clickhouse</p></li></ul><p>理由：</p><ol><li>核心原因：clickhouse相对于Apache Kylin等预计算方案非常省机器，成本最关键(比较穷，没办法)</li><li>clickhouse的单表查询非常非常快</li><li>目前再惠的数据仍然处于并将长期处于小规模阶段(集群内存少于1T，Cpu少于200vCore)，clickhouse在小规模集群上表现优于Druid和Pinot</li><li>presto的综合性能好，在join操作时表现较好，保持目前数仓的这一套不变</li></ol><span id="more"></span><h1 id="OLAP整体情况"><a href="#OLAP整体情况" class="headerlink" title="OLAP整体情况"></a>OLAP整体情况</h1><ol><li>目前的大数据OLAP系统都是部分优化的，偏向于定制化系统，典型的是Clickhouse的不同表级engine</li><li>建立一个能够cover绝大多数情况的通用的大数据OLAP系统预计还需要100年</li><li>目前所有的OLAP系统都是基于两种思路设计<ol><li>列式数据库加索引，典型是Clickhouse</li><li>预计算空间换时间：典型是Apache Kylin，所有结果预先计算好放在cube</li></ol></li></ol><h1 id="OLAP系统比较"><a href="#OLAP系统比较" class="headerlink" title="OLAP系统比较"></a>OLAP系统比较</h1><p>先大致按照OLAP的设计思路把常用的系统分下类：</p><p><strong>列式数据库加索引</strong></p><ul><li>Clickhouse</li><li>Apache Pinot</li><li>Druid</li></ul><p><strong>预计算空间换时间</strong></p><ul><li>Apache Kylin</li><li>Apache Doris</li><li>Mondrian</li></ul><p>从所有的系统中选出相对符合的再进行深入一点的比较如下：</p><table><thead><tr><th></th><th>Clickhouse</th><th>Druid</th><th>Apache Kylin</th></tr></thead><tbody><tr><td>语言</td><td>C++</td><td>Java</td><td>Java</td></tr><tr><td>Star</td><td>7743</td><td>8405</td><td>2275</td></tr><tr><td>活跃度</td><td>活跃</td><td>活跃</td><td>活跃</td></tr><tr><td>亚秒级响应</td><td>√</td><td>√</td><td>√</td></tr><tr><td>列式数据库</td><td>√</td><td>√</td><td>×</td></tr><tr><td>预计算</td><td>×</td><td>√</td><td>√</td></tr><tr><td>云存储</td><td>×</td><td>√</td><td>√</td></tr><tr><td>机器</td><td>省</td><td>省</td><td>费</td></tr><tr><td>join</td><td>√</td><td>×</td><td>√</td></tr><tr><td>商业公司</td><td>Altinity</td><td>Imply和Hortonworks</td><td>Kyligence</td></tr></tbody></table><p>至于clickhouse&#x2F;druid&#x2F;pinot三者的比较可以参见这篇文章：<a href="https://medium.com/@leventov/comparison-of-the-open-source-olap-systems-for-big-data-clickhouse-druid-and-pinot-8e042a5ed1c7">Comparison of the Open Source OLAP Systems for Big Data: ClickHouse, Druid, and Pinot</a>，整体写的非常好而且有深度，对比表格翻译如下：</p><table><thead><tr><th align="left">ClickHouse</th><th align="left">Druid&#x2F;Pinot</th></tr></thead><tbody><tr><td align="left">具备C++经验的组织</td><td align="left">具备Java经验的组织</td></tr><tr><td align="left">小型集群</td><td align="left">大型集群</td></tr><tr><td align="left">少量表</td><td align="left">大量表</td></tr><tr><td align="left">单一数据集</td><td align="left">多个不相关的数据集（多租户）</td></tr><tr><td align="left">表和数据集永久驻留在集群中</td><td align="left">表和数据集定期出现并从群集中退出</td></tr><tr><td align="left">表格大小（以及它们的查询强度）在时间上是稳定的</td><td align="left">表格随时间热度降低</td></tr><tr><td align="left">查询的同质性（其类型，大小，按时间分布等）</td><td align="left">异质性</td></tr><tr><td align="left">存在可以用于分区的维度，且经过该维度分区后，几乎不会触发跨分区的数据查询</td><td align="left">没有这样的维度，查询经常触及整个集群中的数据</td></tr><tr><td align="left">不使用云，集群部署在特定的物理服务器上</td><td align="left">群集部署在云中</td></tr><tr><td align="left">无需依赖现有的Hadoop或Spark集群</td><td align="left">Hadoop或Spark的集群已经存在并且可以使用</td></tr></tbody></table><p>ClickHouse，Druid和Pinot三个系统都还不成熟。在这三个系统中，ClickHouse与Druid和Pinot略有不同，而后两者几乎完全相同，它们几乎是两个独立开发的完全相同系统的实现。</p><p>与ClickHouse相比，Druid和Pinot更适合优化大型集群的基础架构成本，并且更适合云环境。</p><p>Druid和Pinot之间唯一可持续的区别是，Pinot依赖于Helix框架并将继续依赖ZooKeeper，而德鲁伊可能会远离对ZooKeeper的依赖。另一方面，德鲁伊安装将继续依赖于某些SQL数据库的存在。</p><h1 id="CloudFlare的选择"><a href="#CloudFlare的选择" class="headerlink" title="CloudFlare的选择"></a>CloudFlare的选择</h1><p>在CK和Druid中选择了CK，10个节点的规模CK更好</p><ul><li><a href="https://blog.cloudflare.com/how-cloudflare-analyzes-1m-dns-queries-per-second/">https://blog.cloudflare.com/how-cloudflare-analyzes-1m-dns-queries-per-second/</a></li></ul><p>目前公司最大的单表数据为10B，也就是100亿：门店3公里内的所有门店以及经纬度数据，占用S3空间110G</p><h1 id="各个引擎的概况"><a href="#各个引擎的概况" class="headerlink" title="各个引擎的概况"></a>各个引擎的概况</h1><h2 id="Clickhouse"><a href="#Clickhouse" class="headerlink" title="Clickhouse"></a>Clickhouse</h2><p>项目地址：<a href="https://github.com/yandex/ClickHouse">https://github.com/yandex/ClickHouse</a></p><p>架构概述：<a href="https://clickhouse.yandex/docs/zh/development/architecture/">https://clickhouse.yandex/docs/zh/development/architecture/</a></p><p>支持primary key sorting，不支持inverted indexes</p><p><a href="https://github.com/yandex/ClickHouse/issues/5125">https://github.com/yandex/ClickHouse/issues/5125</a></p><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><p>不支持primary key sorting，支持inverted indexes</p><p>通过编写 Json 文件，以 HTTP 的方式请求 Druid</p><p>支持sql</p><p>国内使用Druid比较多，有赞，美团等</p><p><a href="https://tech.youzan.com/realtime-olap-on-druid/">https://tech.youzan.com/realtime-olap-on-druid/</a></p><p><a href="https://github.com/apache/incubator-druid">https://github.com/apache/incubator-druid</a></p><p>Java star 8405</p><h2 id="Apache-Pinot"><a href="#Apache-Pinot" class="headerlink" title="Apache Pinot"></a>Apache Pinot</h2><p>项目地址：<a href="https://github.com/apache/incubator-pinot/">https://github.com/apache/incubator-pinot/</a></p><p>架构概述：<a href="https://pinot.readthedocs.io/en/latest/architecture.html">https://pinot.readthedocs.io/en/latest/architecture.html</a></p><p>2323 star 活跃</p><p>国内使用Pinot的比较少</p><h2 id="Apache-Doris"><a href="#Apache-Doris" class="headerlink" title="Apache Doris"></a>Apache Doris</h2><p>Doris前身是Palo，Palo是百度自研的基于MPP的交互式SQL数据仓库</p><p>架构概述：<a href="https://doris.incubator.apache.org/Docs/cn/internal/metadata-design.html#id3">https://doris.incubator.apache.org/Docs/cn/internal/metadata-design.html#id3</a></p><p>项目地址：<a href="https://github.com/apache/incubator-doris">https://github.com/apache/incubator-doris</a></p><p>1294 star 活跃</p><p>C++</p><p>来源百度</p><p>国内使用Pinot的比较少</p><h2 id="Apache-Kylin"><a href="#Apache-Kylin" class="headerlink" title="Apache Kylin"></a>Apache Kylin</h2><p><a href="https://github.com/apache/kylin">https://github.com/apache/kylin</a></p><p>来源：eBay</p><p>语言：Java</p><p>2275 star 活跃</p><p>在国内广泛使用</p><p>链家使用Kylin：<a href="https://www.infoq.cn/article/lianjia-data-analysis-apache-kylin">https://www.infoq.cn/article/lianjia-data-analysis-apache-kylin</a></p><p>典型的空间换时间：维度优化，预计算的结果需要存储到 Hbase</p><p>优势：</p><ul><li>都已经预先计算好了，性能啥的都不会有啥问题</li><li>主要针对hive的离线数据做分析，属于hadoop生态圈，可以和目前的hive这一套完美结合起来</li><li>Apache Kylin v1.6.0之后支持了近实时的流计算，后续构建成为离线和实时的一站式解决方案</li><li>Apache Kylin v2.0.0 引入了一个全新的基于 Apache Spark 的构建引擎，替换MR，Cube构件时间缩短一半</li></ul><p>代价：</p><ol><li>需要维护一套hbase集群，空间换时间的操作会极度废机器，但是hbase数据可以存在cloud上</li><li>需要在kylin web维护针对查询提前定义维度构建cube</li><li>运维Kylin对Admin有较高的要求，首先必须了解HBase，Hive，MapReduce，Spark，HDFS，Yarn的原理；其次对MapReduce Job和Spark Job的问题排查和调优经验要丰富；然后必须掌握对Cube复杂调优的方法；最后出现问题时排查的链路较长，复杂度较高。</li></ol><p>Apache kylin中cube的构建过程及原理分析：<a href="https://www.cnblogs.com/shibit/p/7039794.html">https://www.cnblogs.com/shibit/p/7039794.html</a></p><h2 id="Mondrian"><a href="#Mondrian" class="headerlink" title="Mondrian"></a>Mondrian</h2><p><a href="https://github.com/pentaho/mondrian">https://github.com/pentaho/mondrian</a></p><p><a href="https://blog.csdn.net/ZYC88888/article/details/80311014">https://blog.csdn.net/ZYC88888/article/details/80311014</a></p><p>792 star，不活跃，性能一般(曹总说)</p><p>Java</p><p>Mondrian不是一个真正的OLAP数据库，是一个基于关系数据库的分析服务器</p><p>查询瓶颈仍然在底层的存储层的查询效率，只是对于动态多维度分析做了优化</p><p>通过xml而不是sql查询</p><h1 id="OLAP-in-zaihui"><a href="#OLAP-in-zaihui" class="headerlink" title="OLAP in zaihui"></a>OLAP in zaihui</h1><p>现状：</p><ul><li><p>Clickhouse的单表查询速度确实非常非常快，在会员数据这部分的表现非常好</p></li><li><p>通过删表重建的方式处理数据重复不太优雅，对于百亿数据不太现实</p></li><li><p>数据从hive同步到Clickhouse的时间较长，目前是单线程后续可以改成spark等形式</p></li></ul><p>后续可以做的工作：</p><ol><li>开发一套clickhouse集群的管理包括扩容等等的自动化系统</li><li>开发一套从hive&#x2F;spark等同步数据到clickhouse的高效服务</li></ol><hr><p>参考：</p><ul><li><a href="https://medium.com/@leventov/comparison-of-the-open-source-olap-systems-for-big-data-clickhouse-druid-and-pinot-8e042a5ed1c7">Comparison of the Open Source OLAP Systems for Big Data: ClickHouse, Druid, and Pinot</a></li><li><a href="https://www.sspaeti.com/blog/olap-whats-coming-next/">https://www.sspaeti.com/blog/olap-whats-coming-next/</a></li><li><a href="https://cloud.google.com/blog/products/gcp/bigquery-under-the-hood">BigQuery under the hood</a></li><li><a href="https://zhuanlan.zhihu.com/p/38767561">主流OLAP系统对比总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/51555789">https://zhuanlan.zhihu.com/p/51555789</a></li><li><a href="https://github.com/yandex/ClickHouse/issues/1178">https://github.com/yandex/ClickHouse/issues/1178</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Aliyun</tag>
      
      <tag>BigData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云大数据基础组件调研</title>
    <link href="/2019/07/30/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%B0%83%E7%A0%94/"/>
    <url>/2019/07/30/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<p>阿里云大数据基础组件调研</p><h1 id="EMR"><a href="#EMR" class="headerlink" title="EMR"></a>EMR</h1><p>阿里云 Elastic MapReduce（E-MapReduce）是运行在阿里云平台上的一种大数据处理的系统解决方案。</p><ul><li><a href="https://www.aliyun.com/product/emapreduce?spm=5176.12825654.eofdhaal5.146.e9392c4aO4b222">E-MapReduce_大数据处理平台解决方案_集群管理解决方案 – 阿里云</a></li><li><a href="https://help.aliyun.com/product/28066.html?spm=a2c4g.750001.list.183.6c137b13gTnbYq">E-MapReduce-阿里云</a></li><li><a href="https://amazonaws-china.com/cn/emr/pricing/?nc=sn&loc=4">AWS | Amazon EMR | 定价</a></li><li><a href="https://help.aliyun.com/document_detail/34946.html?spm=a2c4g.11186623.6.548.70a440ac4LBjI0">费用组成_产品定价_E-MapReduce-阿里云</a></li></ul><span id="more"></span><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>阿里云EMR包含的组件（以EMR-3.20.0为例）：</p><table><thead><tr><th align="left">版本</th><th align="left">EMR-3.19.1</th><th align="left">EMR-3.20.0</th></tr></thead><tbody><tr><td align="left">发布时间</td><td align="left">2019.4</td><td align="left">2019.5</td></tr><tr><td align="left">Hadoop</td><td align="left">2.8.5</td><td align="left">2.8.5</td></tr><tr><td align="left">Knox</td><td align="left">1.1.0</td><td align="left">1.1.0</td></tr><tr><td align="left">ApacheDS</td><td align="left">2.0.0</td><td align="left">2.0.0</td></tr><tr><td align="left">Spark</td><td align="left">2.4.1</td><td align="left">2.4.2</td></tr><tr><td align="left">Hive</td><td align="left">3.1.1</td><td align="left">3.1.1</td></tr><tr><td align="left">Tez</td><td align="left">0.9.1</td><td align="left">0.9.1</td></tr><tr><td align="left">Pig</td><td align="left">0.14.0</td><td align="left">0.14.0</td></tr><tr><td align="left">Sqoop</td><td align="left">1.4.7</td><td align="left">1.4.7</td></tr><tr><td align="left">YARN</td><td align="left">2.8.5</td><td align="left">2.8.5</td></tr><tr><td align="left">HDFS</td><td align="left">2.8.5</td><td align="left">2.8.5</td></tr><tr><td align="left">Flink</td><td align="left">1.7.2</td><td align="left">1.7.2</td></tr><tr><td align="left">Druid</td><td align="left">0.13.0</td><td align="left">0.13.0</td></tr><tr><td align="left">HBase</td><td align="left">1.4.9</td><td align="left">1.4.9</td></tr><tr><td align="left">Phoenix</td><td align="left">4.14.1</td><td align="left">4.14.1</td></tr><tr><td align="left">Zookeeper</td><td align="left">3.4.13</td><td align="left">3.4.13</td></tr><tr><td align="left">Livy</td><td align="left">0.60.</td><td align="left">0.60.</td></tr><tr><td align="left">Presto</td><td align="left">0.213</td><td align="left">0.213</td></tr><tr><td align="left">Storm</td><td align="left">1.2.2</td><td align="left">1.2.2</td></tr><tr><td align="left">Impala</td><td align="left">2.12.2</td><td align="left">2.12.2</td></tr><tr><td align="left">Flume</td><td align="left">1.8.0</td><td align="left">1.8.0</td></tr><tr><td align="left">Hue</td><td align="left">4.1.0</td><td align="left">4.1.0</td></tr><tr><td align="left">Oozie</td><td align="left">4.2.0</td><td align="left">5.1.0</td></tr><tr><td align="left">Zeppelin</td><td align="left">0.8.0</td><td align="left">0.8.1</td></tr><tr><td align="left">Ranger</td><td align="left">1.2.0</td><td align="left">1.2.0</td></tr><tr><td align="left">Ganglia</td><td align="left">3.7.2</td><td align="left">3.7.2</td></tr><tr><td align="left">OS</td><td align="left">CentOS 7.4</td><td align="left">CentOS 7.4</td></tr><tr><td align="left">Tensorflow</td><td align="left"></td><td align="left">1.8.0</td></tr><tr><td align="left">Kafka</td><td align="left">1.1.1</td><td align="left">2.11</td></tr><tr><td align="left">Superset</td><td align="left">0.28.1</td><td align="left">0.28.1</td></tr><tr><td align="left">Jupyter</td><td align="left"></td><td align="left">4.4.0</td></tr><tr><td align="left">Analytics Zoo</td><td align="left"></td><td align="left">0.2.0</td></tr></tbody></table><p>不清楚的组件说明：</p><ol><li>Oozie：Oozie是一个用于管理Apache Hadoop的任务的工作流调度系统，类似于airflow，都是用DAG</li><li>Livy：Apache Livy是一个通过REST接口和Spark集群交互的服务</li><li>Flink：Apache Flink可以替代MapReduce，并在很多方面对其进行改进。 除了其他功能之外，Flink还提供了更好的性能，并为Java和Scala提供了易用的API</li><li>Zeppelin：Apache Zeppelin是一个让交互式数据分析变得可行的基于网页的notebook。Zeppelin提供了数据可视化的框架</li><li>Ranger：Apache Ranger是一个集中式安全管理框架, 解决细颗粒度的授权和审计等问题</li><li>Ganglia：Ganglia是一种可伸缩的分布式监控系统，广泛用于监控hadoop相关指标</li><li>Impala：Apache Impala是一个开源的大规模并行处理(MPP) SQL查询引擎(数据存储在hadoop上)。但是单表查询速度慢于Presto，可以不用考虑</li><li>Phoenix：Apache Phoenix是一个开源的、大规模并行关系数据库引擎（支持对HBase做OLTP处理）</li><li>Knox：Apache Hadoop生态系统中的REST API和应用程序网关</li><li>Pig：Pig是一个高级语言平台，用于分析和查询存储在HDFS中的大型数据集。 Pig中使用的语言称为PigLatin</li><li>Flume：Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统</li><li>Kerberos认证：E-MapReduce 从 2.7.x&#x2F;3.5.x 版本开始支持创建安全类型的集群，即集群中的开源组件以 Kerberos 的安全模式启动，在这种安全环境下只有经过认证的客户端（Client）才能访问集群的服务（Service，如 HDFS）。</li><li>Druid：Druid 是 Metamarkets 公司（一家为在线媒体或广告公司提供数据分析服务的公司）推出的一个分布式内存实时分析系统，用于解决如何在大规模数据集下进行快速的、交互式的查询和分析。</li><li>Superset：Apache Superset是一个现代的、企业级商业智能web应用程序(by Airbnb)</li><li>Analytics Zoo：在Spark和BigDL上快速构建深度学习应用的端到端的分析+AI平台</li></ol><h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><p>目前使用的AWS的EMR的生产机器配置为</p><ul><li>1 Master 和 4 Slave：1CPU-4Core-8vCore-32G-500G SSD</li></ul><p>因为Master节点主要是存储元数据和一些主要组件的log以及做一些airflow等调度工作，不负责主要的计算任务，因此CPU可以比Slave节点低，但是内存应该比Slave高，因为元数据都是存在内存中。在之前的AWS EMR 32G环境中出现过OOM，同时阿里云也支持不同的节点使用不同的配置，还支持双Master配置。</p><ul><li><strong>在购买创建集群时一定记得勾选高可用选项，勾选后就会有双Master</strong></li></ul><p>最终，以2Master 和 4 Slave的配置进行价格计算：</p><table><thead><tr><th>节点</th><th>机器型号</th><th>Cpu(vCore)</th><th>Mem(GB)</th><th>Disk(SSD GB)</th></tr></thead><tbody><tr><td>Master1</td><td>ecs.g5.2xlarge</td><td>8</td><td>32</td><td>120+500</td></tr><tr><td>Master2</td><td>ecs.g5.2xlarge</td><td>8</td><td>32</td><td>120+500</td></tr><tr><td>Slave1</td><td>ecs.g5.2xlarge</td><td>8</td><td>32</td><td>120+100*4</td></tr><tr><td>Slave2</td><td>ecs.g5.2xlarge</td><td>8</td><td>32</td><td>120+100*4</td></tr><tr><td>Slave3</td><td>ecs.g5.2xlarge</td><td>8</td><td>32</td><td>120+100*4</td></tr><tr><td>Slave4</td><td>ecs.g5.2xlarge</td><td>8</td><td>32</td><td>120+100*4</td></tr></tbody></table><h3 id="付费配置"><a href="#付费配置" class="headerlink" title="付费配置"></a>付费配置</h3><p>包年包月是一次性支付一个长期的费用，价格相对来说会比较便宜，特别是包三年的时候折扣会很大。按量付费是根据实际使用的小时数来支付费用，每个小时计一次费用。适合与短期的测试或者是灵活的动态任务，价格相对来说会贵一些。</p><ul><li>按量付费</li><li>包年包月<ul><li><strong>付费时长</strong>：您可选择购买 1 个月、2 个月、3 个月、6 个月、9 个月、1 年、2 年、3 年。包年包月如果<strong>购买一年则会在原价（12个月）的基础上打 85 折</strong>。</li><li><strong>自动续费</strong>：到期前7天执行自动续费操作，续费时长为一个月。</li></ul></li></ul><h3 id="包年包月"><a href="#包年包月" class="headerlink" title="包年包月"></a>包年包月</h3><p><strong>AWS EMR</strong></p><p>AWS EMR是按年购买的，价格由两部分组成：EC2 + 产品费和流量费</p><p>目前AWS EMR生产5台机器测试3台机器，每台机器一年15000￥</p><p>AMS EMR每个月的产品费账单价格是3600￥，所以生产的5台机器占用2250￥</p><p>所以AWS EMR生产环境5台机器一年的价格是<code>15000 * 5 + 2250 * 12 = 102000</code></p><p><strong>Aliyun EMR</strong></p><p>阿里云EMR 双Master的价格为：</p><ol><li><p>1年：￥88944省: ￥35354.88 (单Master时的价格为73400)</p></li><li><p>2年：￥143904省: ￥104693.76</p></li><li><p>3年：￥158904省: ￥213992.64</p></li></ol><h3 id="按量付费"><a href="#按量付费" class="headerlink" title="按量付费"></a>按量付费</h3><p>现价: ￥15.868&#x2F;小时省: ￥2.124&#x2F;小时</p><ol><li><p>1年<code>365*24*15.868=139003.68</code></p></li><li><p>2年<code>139003.68 * 2 =278007.36 </code></p></li><li><p>3年<code>139003.68 * 3 = 417011.04</code></p></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>选择包年购买的价格比按量购买的价格低很多，相同配置下Aliyun和Aws的价格几乎相同，但是Aliyun支持双Master，因此选用Aliyun支持双Master保证HA</p><h1 id="MaxCompute"><a href="#MaxCompute" class="headerlink" title="MaxCompute"></a>MaxCompute</h1><p>大数据计算服务（MaxCompute，原名ODPS）是一种快速、完全托管的EB级数据仓库一站式解决方案。</p><p>和AWS的RedShift类似</p><ul><li><a href="https://www.aliyun.com/product/odps?spm=5176.12825654.eofdhaal5.143.e9392c4aO4b222">MaxCompute_大数据计算服务_阿里云数加大数据仓库解决方案</a></li><li><a href="https://help.aliyun.com/product/27797.html?spm=a2c4g.750001.list.182.6c137b13gTnbYq">MaxCompute-阿里云</a></li></ul><p>有EMR的情况下意义不大</p><h1 id="实时计算"><a href="#实时计算" class="headerlink" title="实时计算"></a>实时计算</h1><p>阿里云实时计算是一套基于Apache Flink构建的一站式、高性能实时大数据处理平台，广泛适用于流式数据处理、离线数据处理、DataLake计算等场景。(本质是Flink加上一些运维管理和监控报警)</p><ul><li><a href="https://data.aliyun.com/product/sc?spm=5176.12825654.eofdhaal5.144.e9392c4aO4b222">阿里云流计算_实时计算_流式数据分析_流式分析_实时数据分析平台</a></li><li><a href="https://help.aliyun.com/product/45029.html?spm=a2c4g.750001.list.185.6c137b13gTnbYq">实时计算-阿里云</a></li></ul><p>有EMR的情况下意义不大</p><h1 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h1><p>Online analytical processing</p><h2 id="分析型数据库MySQL版"><a href="#分析型数据库MySQL版" class="headerlink" title="分析型数据库MySQL版"></a>分析型数据库MySQL版</h2><ul><li><a href="https://www.aliyun.com/product/ads?spm=5176.10695662.cwnn_jpze.65.6728269bCvBINR">分析型数据库ADB-analyticDB-数据仓库-在线实时数据分析-大数据集群-MySQL-海量数据-阿里云购买</a></li><li><a href="https://help.aliyun.com/product/92664.html?spm=a2c4g.750001.list.42.7ab07b13j72Vzz">分析型数据库MySQL版</a></li></ul><h2 id="分析型数据库PostgreSQL版"><a href="#分析型数据库PostgreSQL版" class="headerlink" title="分析型数据库PostgreSQL版"></a>分析型数据库PostgreSQL版</h2><ul><li><a href="https://www.aliyun.com/product/gpdb?spm=5176.10695662.cwnn_jpze.66.6728269bCvBINR">AnalyticDB for PostgreSQL-分析型数据库-PB级实时数据仓储方案 - 阿里云</a></li><li><a href="https://help.aliyun.com/product/35364.html?spm=a2c4g.750001.list.43.7ab07b13j72Vzz">分析型数据库PostgreSQL版</a></li></ul><h2 id="HybridDB-for-MySQL-原PetaData"><a href="#HybridDB-for-MySQL-原PetaData" class="headerlink" title="HybridDB for MySQL (原PetaData)"></a>HybridDB for MySQL (原PetaData)</h2><p>云数据库HybridDB for MySQL （原名PetaData）是同时支持海量数据在线事务（OLTP）和在线分析（OLAP）的HTAP（Hybrid Transaction&#x2F;Analytical Processing）关系型数据库。</p><p>理论上来说，啥都行的结果就是啥都不行</p><ul><li><a href="https://www.aliyun.com/product/petadata?spm=5176.10695662.cwnn_jpze.67.6728269bCvBINR">云数据库HybridDB for MySQL_产品详情_阿里云</a></li><li><a href="https://help.aliyun.com/product/26320.html?spm=a2c4g.750001.list.44.7ab07b13j72Vzz">HybridDB for MySQL</a></li></ul><h2 id="Data-Lake-Analytics"><a href="#Data-Lake-Analytics" class="headerlink" title="Data Lake Analytics"></a>Data Lake Analytics</h2><p>Data Lake Analytics是无服务器（Serverless）化的云上交互式查询分析服务。无需ETL，就可通过此服务在云上通过标准JDBC直接对阿里云OSS、TableStore的数据轻松进行查询和分析，以及无缝集成商业分析工具</p><ul><li><a href="https://www.aliyun.com/product/datalakeanalytics?spm=5176.10695662.cwnn_jpze.68.6728269bCvBINR">Data Lake Analytics_云上交互式数据查询分析服务_数据分析平台|系统 - 阿里云</a></li><li><a href="https://help.aliyun.com/product/70174.html?spm=a2c4g.750001.list.188.7ab07b13j72Vzz">Data Lake Analytics</a></li></ul><h2 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h2><p>目前OLAP领域表现比较好的数据库都是列式的，阿里云提供的分析型数据都不是列式数据库，暂时不考虑使用阿里云的OLAP服务。</p><p>so，在单表查询性能上暂时没有找到可以替代clickhouse的阿里云OLAP数据库，在初期clickhouse维护比较麻烦的情况下，对于性能查询不敏感的还是使用综合性能更好的presto+hive</p><h2 id="列式数据库更适合OLAP场景的原因？"><a href="#列式数据库更适合OLAP场景的原因？" class="headerlink" title="列式数据库更适合OLAP场景的原因？"></a>列式数据库更适合OLAP场景的原因？</h2><p>下面部分的解释原因来自于Clickhouse官网：</p><p>列式数据库更适合于OLAP场景(对于大多数查询而言，处理速度至少提高了100倍)，下面详细解释了原因(通过图片更有利于直观理解)：</p><p><strong>行式</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Aliyun-big-data-infrastructure-components-research/row_oriented.gif" alt="Row oriented"></p><p><strong>列式</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Aliyun-big-data-infrastructure-components-research/column_oriented.gif" alt="Column oriented"></p><p>看到差别了么？下面将详细介绍为什么会发生这种情况。</p><h3 id="Input-x2F-output"><a href="#Input-x2F-output" class="headerlink" title="Input&#x2F;output"></a>Input&#x2F;output</h3><ol><li>针对分析类查询，通常只需要读取表的一小部分列。在列式数据库中你可以只读取你需要的数据。例如，如果只需要读取100列中的5列，这将帮助你最少减少20倍的I&#x2F;O消耗。</li><li>由于数据总是打包成批量读取的，所以压缩是非常容易的。同时数据按列分别存储这也更容易压缩。这进一步降低了I&#x2F;O的体积。</li><li>由于I&#x2F;O的降低，这将帮助更多的数据被系统缓存。</li></ol><p>例如，查询“统计每个广告平台的记录数量”需要读取“广告平台ID”这一列，它在未压缩的情况下需要1个字节进行存储。如果大部分流量不是来自广告平台，那么这一列至少可以以十倍的压缩率被压缩。当采用快速压缩算法，它的解压速度最少在十亿字节(未压缩数据)每秒。换句话说，这个查询可以在单个服务器上以每秒大约几十亿行的速度进行处理。这实际上是当前实现的速度。</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>由于执行一个查询需要处理大量的行，因此在整个向量上执行所有操作将比在每一行上执行所有操作更加高效。同时这将有助于实现一个几乎没有调用成本的查询引擎。如果你不这样做，使用任何一个机械硬盘，查询引擎都不可避免的停止CPU进行等待。所以，在数据按列存储并且按列执行是很有意义的。</p><p>有两种方法可以做到这一点：</p><ol><li>向量引擎：所有的操作都是为向量而不是为单个值编写的。这意味着多个操作之间的不再需要频繁的调用，并且调用的成本基本可以忽略不计。操作代码包含一个优化的内部循环。</li><li>代码生成：生成一段代码，包含查询中的所有操作。</li></ol><p>这是不应该在一个通用数据库中实现的，因为这在运行简单查询时是没有意义的。但是也有例外，例如，MemSQL使用代码生成来减少处理SQL查询的延迟(只是为了比较，分析型数据库通常需要优化的是吞吐而不是延迟)。</p><p>请注意，为了提高CPU效率，查询语言必须是声明型的(SQL或MDX)， 或者至少一个向量(J，K)。 查询应该只包含隐式循环，允许进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Aliyun</tag>
      
      <tag>BigData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clickhouse创建分布式表以及表引擎介绍</title>
    <link href="/2019/07/27/clickhouse%E5%88%9B%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E4%BB%A5%E5%8F%8A%E8%A1%A8%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/"/>
    <url>/2019/07/27/clickhouse%E5%88%9B%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E4%BB%A5%E5%8F%8A%E8%A1%A8%E5%BC%95%E6%93%8E%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="表引擎"><a href="#表引擎" class="headerlink" title="表引擎"></a>表引擎</h1><p>表引擎（即表的类型）决定了：</p><ul><li>数据的存储方式和位置，写到哪里以及从哪里读取数据</li><li>支持哪些查询以及如何支持。</li><li>并发数据访问。</li><li>索引的使用（如果存在）。</li><li>是否可以执行多线程请求。</li><li>数据复制参数。</li></ul><p>在读取时，引擎只需要输出所请求的列，但在某些情况下，引擎可以在响应请求时部分处理数据。</p><p>对于大多数正式的任务，应该使用MergeTree族中的引擎。</p><p><code>MergeTree</code> 引擎系列的基本理念如下。当你有巨量数据要插入到表中，你要高效地一批批写入数据片段，并希望这些数据片段在后台按照一定规则合并。相比在插入时不断修改（重写）数据进存储，这种策略会高效很多。</p><span id="more"></span><p>各个引擎的具体使用参见官方文档：</p><ul><li>MergeTree：<a href="https://clickhouse.yandex/docs/zh/operations/table_engines/mergetree/">https://clickhouse.yandex/docs/zh/operations/table_engines/mergetree/</a></li><li>ReplacingMergeTree：<a href="https://clickhouse.yandex/docs/zh/operations/table_engines/replacingmergetree/">https://clickhouse.yandex/docs/zh/operations/table_engines/replacingmergetree/</a></li><li>Replicated*MergeTree：<a href="https://clickhouse.yandex/docs/zh/operations/table_engines/replication/">https://clickhouse.yandex/docs/zh/operations/table_engines/replication/</a></li><li>Distributed：<a href="https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/">https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/</a></li></ul><h1 id="分布式怎么玩"><a href="#分布式怎么玩" class="headerlink" title="分布式怎么玩"></a>分布式怎么玩</h1><p>使用ReplicatedMergeTree和Distributed引擎构建我们的分布式表，先看一个常用的表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 每个机器都需要建立各自的replica table，也需要建Distributed table当做路由</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dm.delphi_membership_properties_replica<br>(<br>  membership_id  <span class="hljs-type">int</span>,  <span class="hljs-comment">-- comment &#x27;会员id&#x27;,</span><br>  membership_uid String, <span class="hljs-comment">-- comment &#x27;会员uid&#x27;,</span><br>  business_group_id <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;商户id&#x27;,</span><br>  business_group_uid String , <span class="hljs-comment">--comment &#x27;商户uid&#x27;,</span><br>  business_group_name String, <span class="hljs-comment">-- comment &#x27;商户名&#x27;,</span><br>  business_id Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;门店id&#x27;,</span><br>  business_uid Nullable(String), <span class="hljs-comment">-- comment &#x27;门店uid&#x27;,</span><br>  business_name Nullable(String), <span class="hljs-comment">-- comment &#x27;门店name&#x27;,</span><br>  membership_source String, <span class="hljs-comment">-- comment &#x27;会员入会来源&#x27;,</span><br>  created_at DateTime,<br>  calendar_date <span class="hljs-type">Date</span>,<br>  last_visited_date <span class="hljs-type">Date</span>, <span class="hljs-comment">-- comment &#x27;最近一次访问时间&#x27;,</span><br>  membership_level <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;会员等级&#x27;,</span><br>  customer_type String, <span class="hljs-comment">-- comment &#x27;会员类型:新会员/忠诚会员/常来会员/淡忘会员/流失会员，根据最后一次访问时间和商户配置计算而来&#x27;,</span><br>  visit_count <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;到访次数&#x27;,</span><br>  consumptions_count Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;消费次数&#x27;,</span><br>  consumptions_original_amount Nullable(Decimal128(<span class="hljs-number">2</span>)), <span class="hljs-comment">-- comment &#x27;消费总金额：原始金额&#x27;,</span><br>  consumptions_amount Nullable(Decimal128(<span class="hljs-number">2</span>)), <span class="hljs-comment">-- comment &#x27;消费总金额：实付金额&#x27;,</span><br>  average_consume Nullable(Decimal128(<span class="hljs-number">2</span>)), <span class="hljs-comment">-- comment &#x27;平均消费金额：原始金额/消费次数&#x27;,</span><br>  account_id <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;用户id&#x27;,</span><br>  account_uid String, <span class="hljs-comment">-- comment &#x27;用户uid&#x27;,</span><br>  account_phone String, <span class="hljs-comment">-- comment &#x27;用户手机&#x27;,</span><br>  age Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;年龄&#x27;,</span><br>  birthday Nullable(String), <span class="hljs-comment">-- comment &#x27;生日&#x27;,</span><br>  birthday_month Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;生日月份&#x27;,</span><br>  birthday_day Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;生日天&#x27;,</span><br>  birthday_year Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;生日年&#x27;,</span><br>  zodiac String, <span class="hljs-comment">-- comment &#x27;星座&#x27;,</span><br>  name Nullable(String), <span class="hljs-comment">-- comment &#x27;姓名&#x27;,</span><br>  gender <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;性别&#x27;,</span><br>  profession Nullable(String), <span class="hljs-comment">-- comment &#x27;职业&#x27;,</span><br>  country Nullable(String), <span class="hljs-comment">-- comment &#x27;国家&#x27;,</span><br>  province Nullable(String), <span class="hljs-comment">-- comment &#x27;省份&#x27;,</span><br>  city Nullable(String), <span class="hljs-comment">-- comment &#x27;城市&#x27;,</span><br>  region Nullable(String), <span class="hljs-comment">-- comment &#x27;商圈&#x27;,</span><br>  head_img_url Nullable(String), <span class="hljs-comment">-- comment &#x27;头像&#x27;,</span><br>  wechat_name Nullable(String), <span class="hljs-comment">-- comment &#x27;微信名&#x27;,</span><br>  wechat_city Nullable(String), <span class="hljs-comment">-- comment &#x27;微信城市&#x27;,</span><br>  wechat_country Nullable(String), <span class="hljs-comment">-- comment &#x27;微信国家&#x27;,</span><br>  wechat_province Nullable(String), <span class="hljs-comment">-- comment &#x27;微信省份&#x27;,</span><br>  wechat_head_img_url Nullable(String), <span class="hljs-comment">-- comment &#x27;微信头像&#x27;,</span><br>  wechat_groupid <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;微信组&#x27;,</span><br>  wechat_remark Nullable(String), <span class="hljs-comment">-- comment &#x27;微信备注&#x27;</span><br>  insert_time DateTime <span class="hljs-keyword">DEFAULT</span> now(), <span class="hljs-comment">-- 数据插入时间</span><br>  insert_date <span class="hljs-type">Date</span> <span class="hljs-keyword">DEFAULT</span> toDate(now()) <span class="hljs-comment">-- 数据插入日期</span><br>)<br>ENGINE <span class="hljs-operator">=</span> ReplicatedMergeTree(<span class="hljs-string">&#x27;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/delphi_membership_properties_replica&#x27;</span>, <span class="hljs-string">&#x27;&#123;replica&#125;&#x27;</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (business_group_uid, calendar_date, created_at, membership_uid);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dm.delphi_membership_properties <span class="hljs-keyword">as</span> dm.delphi_membership_properties_replica<br>ENGINE <span class="hljs-operator">=</span> Distributed(ck_cluster, dm, delphi_membership_properties_replica, rand());<br></code></pre></td></tr></table></figure><p>delphi_membership_properties_replica是各个机器上的本地表，delphi_membership_properties是分布式表，比对下两个表的创建engine的区别。</p><h2 id="ReplicatedMergeTree"><a href="#ReplicatedMergeTree" class="headerlink" title="ReplicatedMergeTree"></a>ReplicatedMergeTree</h2><p>在表引擎名称上加上 <code>Replicated</code> 前缀，就表示是一种复制表。<strong>ReplicatedMergeTree 参数</strong>：</p><ul><li><code>zoo_path</code> — ZooKeeper 中该表的路径。</li><li><code>replica_name</code> — ZooKeeper 中的该表所在的副本名称。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">ENGINE <span class="hljs-operator">=</span> ReplicatedMergeTree(<span class="hljs-string">&#x27;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/delphi_membership_properties_replica&#x27;</span>, <span class="hljs-string">&#x27;&#123;replica&#125;&#x27;</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (business_group_uid, calendar_date, created_at, membership_uid);<br></code></pre></td></tr></table></figure><p>这些参数可以包含宏替换的占位符，即大括号的部分。它们会被替换为配置文件里 ‘macros’ 那部分配置的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">yandex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>172.31.59.118<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layer</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">layer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">yandex</span>&gt;</span><br></code></pre></td></tr></table></figure><p>“ZooKeeper 中该表的路径”对每个可复制表都要是唯一的。不同分片上的表要有不同的路径。 这种情况下，路径包含下面这些部分：</p><ul><li><p><code>/clickhouse/tables/</code> 是公共前缀，官方推荐。</p></li><li><p><code>&#123;layer&#125;-&#123;shard&#125;</code> 是分片标识部分</p></li><li><p><code>table_name</code> 是该表在 ZooKeeper 中的名称。使其与 ClickHouse 中的表名相同比较好。 这里它被明确定义，跟 ClickHouse 表名不一样，它并不会被 RENAME 语句修改</p></li></ul><p>注意点：</p><ol><li>副本是表级别的，不是整个服务器级的。所以，服务器里可以同时有复制表和非复制表。</li><li>DDL语句只会在单个服务器上执行，不会被复制</li></ol><h2 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Distributed(logs, <span class="hljs-keyword">default</span>, hits[, sharding_key])<br></code></pre></td></tr></table></figure><p>分布式引擎参数：服务器配置文件中的集群名，远程数据库名，远程表名，数据分片键（可选）。数据分片键的概念就是数据插入时是根据什么原则分配到具体分片上的。</p><p>在上面的表结构中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ENGINE <span class="hljs-operator">=</span> Distributed(ck_cluster, dm, delphi_membership_properties_replica, rand());<br></code></pre></td></tr></table></figure><p>表示将会从ck_cluster集群中dm.delphi_membership_properties_replica中读取数据。</p><p>集群的名称是在集群搭建时的metrika.xml文件中配置的，具体的可以看集群搭建部分的配置。可以在配置中配置任意数量的集群。</p><p>要查看集群，可使用“system.clusters”表。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/clickhouse-create-distributed-table-and-table-engine-introduction/clickhouse_system_clusters.jpg" alt="clickhouse_system_clusters"></p><p>通过分布式引擎可以像使用本地服务器一样使用集群。但是，集群不是自动扩展的：必须编写集群配置到服务器配置文件中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>clickhouse的分布式是一个彻底手动挡的分布式，无论是分布式集群的搭建还是还是表引擎的维护都能体现引擎的定制化感觉，相较于其他分布式比如hadoop等分布式来说，需要手动维护的内容较多。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clickhouse</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clickhouse分布式集群搭建</title>
    <link href="/2019/07/27/clickhouse%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/07/27/clickhouse%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="目标：1分片2副本的集群"><a href="#目标：1分片2副本的集群" class="headerlink" title="目标：1分片2副本的集群"></a>目标：1分片2副本的集群</h1><p>所以需要两台机器，分别是：172.31.59.118|172.31.40.79</p><p>安装参考dockerfile:</p><ul><li><a href="https://hub.docker.com/r/yandex/clickhouse-client/dockerfile">https://hub.docker.com/r/yandex/clickhouse-client/dockerfile</a></li><li><a href="https://hub.docker.com/r/yandex/clickhouse-server/dockerfile">https://hub.docker.com/r/yandex/clickhouse-server/dockerfile</a></li></ul><span id="more"></span><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>Amazon linux 2是centos系的，使用的yum系的安装方式</p><ul><li><a href="https://github.com/Altinity/clickhouse-rpm-install">GitHub - Altinity&#x2F;clickhouse-rpm-install: How to install clickhouse RPM packages</a></li></ul><p>修改机器时区(不需要重启)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><p>开始安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y curl<br>sudo yum install -y epel-release<br>curl -s https://packagecloud.io/install/repositories/altinity/clickhouse/script.rpm.sh | sudo os=centos dist=7 bash  <span class="hljs-comment"># for Amazon Linux</span><br>sudo yum list <span class="hljs-string">&#x27;clickhouse*&#x27;</span><br>sudo yum install -y clickhouse-server clickhouse-client<br>sudo yum list installed <span class="hljs-string">&#x27;clickhouse*&#x27;</span><br>sudo /etc/init.d/clickhouse-server restart<br>clickhouse-client<br></code></pre></td></tr></table></figure><p>安装zookeeper集群，也可以使用现成的，本次使用现成的，配置如下，后续加入配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper-servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.3.79<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.47.229<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.53.227<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper-servers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>设置每台机器clickhouse用户和密码，先生成sha256的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">PASSWORD=$(<span class="hljs-built_in">base64</span> &lt; /dev/urandom | <span class="hljs-built_in">head</span> -c16); <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWORD</span>&quot;</span>; <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWORD</span>&quot;</span> | <span class="hljs-built_in">sha256sum</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;-&#x27;</span><br>rKbfrrze4PO5xWeN<br>93626c6535b2817d55eca365d9a00bbe88c63e24fa4941ce8cdaf4c07f4ab4a6<br></code></pre></td></tr></table></figure><p>添加用户<code>sudo vim /etc/clickhouse-server/users.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">zaihui</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password_sha256_hex</span>&gt;</span>93626c6535b2817d55eca365d9a00bbe88c63e24fa4941ce8cdaf4c07f4ab4a6<span class="hljs-tag">&lt;/<span class="hljs-name">password_sha256_hex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">networks</span> <span class="hljs-attr">incl</span>=<span class="hljs-string">&quot;networks&quot;</span> <span class="hljs-attr">replace</span>=<span class="hljs-string">&quot;replace&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ip</span>&gt;</span>::/0<span class="hljs-tag">&lt;/<span class="hljs-name">ip</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">networks</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">quota</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">quota</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">zaihui</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">clickhouse-client -u zaihui --password rKbfrrze4PO5xWeN<br>clickhouse-client -u zaihui --password rKbfrrze4PO5xWeN<br></code></pre></td></tr></table></figure><p>修改clickhouse时区配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;<br></code></pre></td></tr></table></figure><p>取消访问来源ip的限制<code>sudo vim /etc/clickhouse-server/config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;listen_host&gt;::&lt;/listen_host&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- Same for hosts with disabled ipv6: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listen_host</span>&gt;</span>0.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">listen_host</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Default values - try listen localhost on ipv4 and ipv6: --&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;listen_host&gt;::1&lt;/listen_host&gt;</span><br><span class="hljs-comment">&lt;listen_host&gt;127.0.0.1&lt;/listen_host&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p>开始配置集群<br>配置<code>sudo vim /etc/clickhouse-server/config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- If element has &#x27;incl&#x27; attribute, then for it&#x27;s value will be used corresponding substitution from another file.</span><br><span class="hljs-comment">     By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in &#x27;include_from&#x27; element.</span><br><span class="hljs-comment">     Values for substitutions are specified in /yandex/name_of_substitution elements in that file.</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include_from</span>&gt;</span>/etc/clickhouse-server/metrika.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include_from</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.</span><br><span class="hljs-comment">     Optional. If you don&#x27;t use replicated tables, you could omit that.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     See https://clickhouse.yandex/docs/en/table_engines/replication/</span><br><span class="hljs-comment">  --&gt;</span><br></code></pre></td></tr></table></figure><p>配置<code>/etc/clickhouse-server/metrika.xml</code>，所有机器都一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">yandex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">clickhouse_remote_servers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ck_cluster</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">weight</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">weight</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.59.118<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>zaihui<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>rKbfrrze4PO5xWeN<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.40.79<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>zaihui<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>rKbfrrze4PO5xWeN<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ck_cluster</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">clickhouse_remote_servers</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">zookeeper-servers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.3.79<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.47.229<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>172.31.53.227<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper-servers</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">networks</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ip</span>&gt;</span>::/0<span class="hljs-tag">&lt;/<span class="hljs-name">ip</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">networks</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">clickhouse_compression</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">case</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">min_part_size</span>&gt;</span>10000000000<span class="hljs-tag">&lt;/<span class="hljs-name">min_part_size</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">min_part_size_ratio</span>&gt;</span>0.01<span class="hljs-tag">&lt;/<span class="hljs-name">min_part_size_ratio</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span>lz4<span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">clickhouse_compression</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">yandex</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置<code>/etc/clickhouse-server/config.d/macros.xml</code>，所有机器都不一样，虽然也可以把配置放在metrika.xml中，但是把不同的独立出来更合适</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">yandex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>172.31.59.118<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layer</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">layer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">yandex</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">yandex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>172.31.40.79<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layer</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">layer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">yandex</span>&gt;</span><br></code></pre></td></tr></table></figure><p>集群配置完成之后重启一下，确保每个机器都能连接成功</p><blockquote><p> 使用datagrip连接各个机器，全部成功</p></blockquote><h1 id="验证集群功能"><a href="#验证集群功能" class="headerlink" title="验证集群功能"></a>验证集群功能</h1><p>创建以replica结尾的本地表delphi_membership_properties_replica和分布式表delphi_membership_properties</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dm.delphi_membership_properties_replica<br>(<br>  membership_id  <span class="hljs-type">int</span>,  <span class="hljs-comment">-- comment &#x27;会员id&#x27;,</span><br>  membership_uid String, <span class="hljs-comment">-- comment &#x27;会员uid&#x27;,</span><br>  business_group_id <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;商户id&#x27;,</span><br>  business_group_uid String , <span class="hljs-comment">--comment &#x27;商户uid&#x27;,</span><br>  business_group_name String, <span class="hljs-comment">-- comment &#x27;商户名&#x27;,</span><br>  business_id Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;门店id&#x27;,</span><br>  business_uid Nullable(String), <span class="hljs-comment">-- comment &#x27;门店uid&#x27;,</span><br>  business_name Nullable(String), <span class="hljs-comment">-- comment &#x27;门店name&#x27;,</span><br>  membership_source String, <span class="hljs-comment">-- comment &#x27;会员入会来源&#x27;,</span><br>  created_at DateTime,<br>  calendar_date <span class="hljs-type">Date</span>,<br>  last_visited_date <span class="hljs-type">Date</span>, <span class="hljs-comment">-- comment &#x27;最近一次访问时间&#x27;,</span><br>  membership_level <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;会员等级&#x27;,</span><br>  customer_type String, <span class="hljs-comment">-- comment &#x27;会员类型:新会员/忠诚会员/常来会员/淡忘会员/流失会员，根据最后一次访问时间和商户配置计算而来&#x27;,</span><br>  visit_count <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;到访次数&#x27;,</span><br>  consumptions_count Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;消费次数&#x27;,</span><br>  consumptions_original_amount Nullable(Decimal128(<span class="hljs-number">2</span>)), <span class="hljs-comment">-- comment &#x27;消费总金额：原始金额&#x27;,</span><br>  consumptions_amount Nullable(Decimal128(<span class="hljs-number">2</span>)), <span class="hljs-comment">-- comment &#x27;消费总金额：实付金额&#x27;,</span><br>  average_consume Nullable(Decimal128(<span class="hljs-number">2</span>)), <span class="hljs-comment">-- comment &#x27;平均消费金额：原始金额/消费次数&#x27;,</span><br>  account_id <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;用户id&#x27;,</span><br>  account_uid String, <span class="hljs-comment">-- comment &#x27;用户uid&#x27;,</span><br>  account_phone String, <span class="hljs-comment">-- comment &#x27;用户手机&#x27;,</span><br>  age Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;年龄&#x27;,</span><br>  birthday Nullable(String), <span class="hljs-comment">-- comment &#x27;生日&#x27;,</span><br>  birthday_month Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;生日月份&#x27;,</span><br>  birthday_day Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;生日天&#x27;,</span><br>  birthday_year Nullable(<span class="hljs-type">int</span>), <span class="hljs-comment">-- comment &#x27;生日年&#x27;,</span><br>  zodiac String, <span class="hljs-comment">-- comment &#x27;星座&#x27;,</span><br>  name Nullable(String), <span class="hljs-comment">-- comment &#x27;姓名&#x27;,</span><br>  gender <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;性别&#x27;,</span><br>  profession Nullable(String), <span class="hljs-comment">-- comment &#x27;职业&#x27;,</span><br>  country Nullable(String), <span class="hljs-comment">-- comment &#x27;国家&#x27;,</span><br>  province Nullable(String), <span class="hljs-comment">-- comment &#x27;省份&#x27;,</span><br>  city Nullable(String), <span class="hljs-comment">-- comment &#x27;城市&#x27;,</span><br>  region Nullable(String), <span class="hljs-comment">-- comment &#x27;商圈&#x27;,</span><br>  head_img_url Nullable(String), <span class="hljs-comment">-- comment &#x27;头像&#x27;,</span><br>  wechat_name Nullable(String), <span class="hljs-comment">-- comment &#x27;微信名&#x27;,</span><br>  wechat_city Nullable(String), <span class="hljs-comment">-- comment &#x27;微信城市&#x27;,</span><br>  wechat_country Nullable(String), <span class="hljs-comment">-- comment &#x27;微信国家&#x27;,</span><br>  wechat_province Nullable(String), <span class="hljs-comment">-- comment &#x27;微信省份&#x27;,</span><br>  wechat_head_img_url Nullable(String), <span class="hljs-comment">-- comment &#x27;微信头像&#x27;,</span><br>  wechat_groupid <span class="hljs-type">int</span>, <span class="hljs-comment">-- comment &#x27;微信组&#x27;,</span><br>  wechat_remark Nullable(String), <span class="hljs-comment">-- comment &#x27;微信备注&#x27;</span><br>  insert_time DateTime <span class="hljs-keyword">DEFAULT</span> now(), <span class="hljs-comment">-- 数据插入时间</span><br>  insert_date <span class="hljs-type">Date</span> <span class="hljs-keyword">DEFAULT</span> toDate(now()) <span class="hljs-comment">-- 数据插入日期</span><br>)<br>ENGINE <span class="hljs-operator">=</span> ReplicatedMergeTree(<span class="hljs-string">&#x27;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/delphi_membership_properties_replica&#x27;</span>, <span class="hljs-string">&#x27;&#123;replica&#125;&#x27;</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (business_group_uid, calendar_date, created_at, membership_uid);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dm.delphi_membership_properties <span class="hljs-keyword">as</span> dm.delphi_membership_properties_replica<br>ENGINE <span class="hljs-operator">=</span> Distributed(ck_cluster, dm, delphi_membership_properties_replica, rand())<br></code></pre></td></tr></table></figure><p>插入数据：在本地表和分布式表插入时在每个replica中都有数据生成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dm.delphi_membership_properties_replica (membership_id, membership_uid, business_group_id, business_group_uid, business_group_name, business_id, business_uid, business_name, membership_source, created_at, calendar_date, last_visited_date, membership_level, customer_type, visit_count, consumptions_count, consumptions_original_amount, consumptions_amount, average_consume, account_id, account_uid, account_phone, age, birthday, birthday_month, birthday_day, birthday_year, zodiac, name, gender, profession, country, province, city, region, head_img_url, wechat_name, wechat_city, wechat_country, wechat_province, wechat_head_img_url, wechat_groupid, wechat_remark, insert_time, insert_date) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3209903</span>, <span class="hljs-string">&#x27;6735462d5ce444dd8d80763dbcaee746&#x27;</span>, <span class="hljs-number">2524</span>, <span class="hljs-string">&#x27;00067f26104445ff89f89820b898af37&#x27;</span>, <span class="hljs-string">&#x27;沐沐茶旅&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;third_party&#x27;</span>, <span class="hljs-string">&#x27;2017-12-24 16:17:34&#x27;</span>, <span class="hljs-string">&#x27;2017-12-24&#x27;</span>, <span class="hljs-string">&#x27;2017-12-24&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Forget&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">2754132</span>, <span class="hljs-string">&#x27;e3c8b0925460435586f05741eaae548f&#x27;</span>, <span class="hljs-string">&#x27;18616566494&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;中国&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;黄浦&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;fengyi&#x27;</span>, <span class="hljs-string">&#x27;黄浦&#x27;</span>, <span class="hljs-string">&#x27;中国&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;https://thirdwx.qlogo.cn/mmopen/Ria7DkYdO91HKPibgeJm3Inq3lbbFXlwHJAJMFREYOVibwNCriab41qpVvicm6zd3kZqByBQFC9t9pfMuORQoUIroyicBibicSQIIn0Z/132&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;2019-07-10 07:50:00&#x27;</span>, <span class="hljs-string">&#x27;2019-07-10&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dm.delphi_membership_properties (membership_id, membership_uid, business_group_id, business_group_uid, business_group_name, business_id, business_uid, business_name, membership_source, created_at, calendar_date, last_visited_date, membership_level, customer_type, visit_count, consumptions_count, consumptions_original_amount, consumptions_amount, average_consume, account_id, account_uid, account_phone, age, birthday, birthday_month, birthday_day, birthday_year, zodiac, name, gender, profession, country, province, city, region, head_img_url, wechat_name, wechat_city, wechat_country, wechat_province, wechat_head_img_url, wechat_groupid, wechat_remark, insert_time, insert_date) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3226176</span>, <span class="hljs-string">&#x27;50778ff3ca434edcb113f93af43d646a&#x27;</span>, <span class="hljs-number">2524</span>, <span class="hljs-string">&#x27;00067f26104445ff89f89820b898af37&#x27;</span>, <span class="hljs-string">&#x27;沐沐茶旅&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;third_party&#x27;</span>, <span class="hljs-string">&#x27;2017-12-25 15:44:41&#x27;</span>, <span class="hljs-string">&#x27;2017-12-25&#x27;</span>, <span class="hljs-string">&#x27;2017-12-25&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Forget&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">2780924</span>, <span class="hljs-string">&#x27;c01c3877410144a1965b3ede6e18905c&#x27;</span>, <span class="hljs-string">&#x27;13564809560&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;中国&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;骨头™&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;中国&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;https://thirdwx.qlogo.cn/mmopen/VNMic85jx3X5tq6iaBbVY7spB1dWWsWiae5Dz1p2LCsq0mCxps6Zt9sxPjdb7RkribVVElytAmichfx8ibayvC4QmW0g/132&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;2019-07-10 08:50:11&#x27;</span>, <span class="hljs-string">&#x27;2019-07-10&#x27;</span>);<br></code></pre></td></tr></table></figure><p>查询数据：停掉一个replica之后仍然能查询出数据</p><h1 id="JDBC连接clickhouse-cluster"><a href="#JDBC连接clickhouse-cluster" class="headerlink" title="JDBC连接clickhouse cluster"></a>JDBC连接clickhouse cluster</h1><p>两种方式，一种是使用clickhouse-jdbc连接集群中的每一个节点，另外一种是使用SLB提供一个对外的统一地址</p><h2 id="使用BalancedClickhouseDataSource"><a href="#使用BalancedClickhouseDataSource" class="headerlink" title="使用BalancedClickhouseDataSource"></a>使用BalancedClickhouseDataSource</h2><p>参考以下clickhouse-jdbc中的代码中的注释：<code>jdbc:clickhouse://localhost:8123,localhost:8123/database?compress=1&amp;decompress=2</code></p><ul><li><a href="https://github.com/yandex/clickhouse-jdbc/blob/master/src/main/java/ru/yandex/clickhouse/BalancedClickhouseDataSource.java">clickhouse-jdbc&#x2F;BalancedClickhouseDataSource.java at master · yandex&#x2F;clickhouse-jdbc · GitHub</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * create Datasource for clickhouse JDBC connections</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> url address for connection to the database</span><br><span class="hljs-comment"> *            must have the next format &#123;<span class="hljs-doctag">@code</span> jdbc:clickhouse://&lt;first-host&gt;:&lt;port&gt;,&lt;second-host&gt;:&lt;port&gt;/&lt;database&gt;?param1=value1&amp;param2=value2 &#125;</span><br><span class="hljs-comment"> *            for example, &#123;<span class="hljs-doctag">@code</span> jdbc:clickhouse://localhost:8123,localhost:8123/database?compress=1&amp;decompress=2 &#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if param have not correct format, or error happens when checking host availability</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BalancedClickhouseDataSource</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> &#123;<br>    <span class="hljs-built_in">this</span>(splitUrl(url), getFromUrl(url));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * create Datasource for clickhouse JDBC connections</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> url        address for connection to the database</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> properties database properties</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #BalancedClickhouseDataSource(String)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BalancedClickhouseDataSource</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url, Properties properties)</span> &#123;<br>    <span class="hljs-built_in">this</span>(splitUrl(url), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClickHouseProperties</span>(properties));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * create Datasource for clickhouse JDBC connections</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> url        address for connection to the database</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> properties database properties</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #BalancedClickhouseDataSource(String)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BalancedClickhouseDataSource</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url, ClickHouseProperties properties)</span> &#123;<br>    <span class="hljs-built_in">this</span>(splitUrl(url), properties.merge(getFromUrlWithoutDefault(url)));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用SLB"><a href="#使用SLB" class="headerlink" title="使用SLB"></a>使用SLB</h2><p>使用LB均衡到各个副本，保证应用方查询单host，本次不使用BalancedClickhouseDataSource，从github issue上看BalancedClickhouseDataSource在之前版本出现副本故障时没能故障转移，不知道是否有修复。</p><p>配置LB：<strong>使用标准JDBC连接时需要映射http协议到clickhouse的8123端口(http监听端口)</strong></p><p>验证LB配置是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;SELECT * from dm.delphi_membership_properties FORMAT Pretty&#x27;</span> | curl <span class="hljs-string">&#x27;internal-clickhouse-prod-621097858.</span><br><span class="hljs-string">cn-north-1.elb.amazonaws.com.cn:80/?&#x27;</span> --data-binary @-<br></code></pre></td></tr></table></figure><p>贴一下在Springboot中使用标准JDBC数据源HikariDataSource÷连接clickhouse的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kezaihui.delphi.core.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.entity.GlobalConfiguration;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.enums.DBType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.enums.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> com.zaxxer.hikari.HikariDataSource;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.mybatis.spring.boot.autoconfigure.MybatisProperties;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * clickhouse 数据源配置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Suncle</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-07-05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = &#123;</span><br><span class="hljs-meta">    &quot;com.kezaihui.delphi.core.membership.**.mapper&quot;</span><br><span class="hljs-meta">&#125;, sqlSessionFactoryRef = &quot;ckSqlSessionFactory&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CkDataSourceConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MybatisProperties mybatisProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> javax.sql.DataSource 数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;ckDataSource&quot;)</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.clickhouse.datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * sql 会话工厂配置</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ckDataSource javax.sql.DataSource 数据源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SqlSessionFactory</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(name = &quot;ckSqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;ckDataSource&quot;)</span> DataSource ckDataSource)</span> &#123;<br>        <span class="hljs-type">MybatisSqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisSqlSessionFactoryBean</span>();<br>        bean.setDataSource(ckDataSource);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">GlobalConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfiguration</span>();<br>            configuration.setDbType(DBType.OTHER.name());<br>            configuration.setIdType(IdType.AUTO.getKey());<br>            configuration.setDbColumnUnderline(<span class="hljs-literal">true</span>);<br>            bean.setGlobalConfig(configuration);<br>            <span class="hljs-type">ResourcePatternResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>();<br>            bean.setMapperLocations(mybatisProperties.resolveMapperLocations());<br>            bean.setConfigLocation(resolver.getResource(mybatisProperties.getConfigLocation()));<br>            <span class="hljs-keyword">return</span> bean.getObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置好之后可以使用mybatis查询数据</p><h1 id="原生TCP协议连接clickhouse-cluster"><a href="#原生TCP协议连接clickhouse-cluster" class="headerlink" title="原生TCP协议连接clickhouse cluster"></a>原生TCP协议连接clickhouse cluster</h1><p>同样是采用SLB映射到不同的节点上，但是映射的时候需要注意不同之处：</p><ul><li><strong>映射TCP协议到clickhouse的9000端口</strong></li></ul><p>连接方式可以参考clickhouse-driver的连接，也可以直接使用python语言clickhouse-driver库</p><h1 id="clickhouse-python-client的选择"><a href="#clickhouse-python-client的选择" class="headerlink" title="clickhouse python client的选择"></a>clickhouse python client的选择</h1><p>官方没有维护各语言的driver，全部由第三方维护，主要有以下两个，对比参见后面。</p><p>结论：选择clickhouse-driver，数仓项目使用orm的意义不大。因为应用层不是python项目，是java项目</p><h2 id="clickhouse-driver"><a href="#clickhouse-driver" class="headerlink" title="clickhouse-driver"></a>clickhouse-driver</h2><p> <a href="https://github.com/mymarilyn/clickhouse-driver">GitHub - mymarilyn&#x2F;clickhouse-driver: ClickHouse Python Driver with native interface support</a><br>活跃度高，star数最高。语法主要是执行原生sql</p><h2 id="infi-clickhouse-orm"><a href="#infi-clickhouse-orm" class="headerlink" title="infi.clickhouse_orm"></a>infi.clickhouse_orm</h2><p><a href="https://github.com/Infinidat/infi.clickhouse_orm">GitHub - Infinidat&#x2F;infi.clickhouse_orm: A Python library for working with the ClickHouse database (https://clickhouse.yandex/)</a><br>活跃度高，star数第二高。是一个为clickhouse封装的orm框架，写起来有django的感觉</p><hr><p>参考：</p><ul><li><p><a href="https://github.com/jneo8/clickhouse-setup">https://github.com/jneo8/clickhouse-setup</a></p></li><li><p><a href="https://clickhouse.yandex/docs/zh/operations/table_engines/replication/">https://clickhouse.yandex/docs/zh/operations/table_engines/replication/</a></p></li><li><p><a href="https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/">https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/</a></p></li><li><p><a href="https://clickhouse.yandex/docs/en/operations/table_engines/replication/">https://clickhouse.yandex/docs/en/operations/table_engines/replication/</a></p></li><li><p><a href="https://clickhouse.yandex/tutorial.html">https://clickhouse.yandex/tutorial.html</a></p></li><li><p><a href="https://hzkeung.com/2018/06/30/clickhouse-cluster-test">https://hzkeung.com/2018/06/30/clickhouse-cluster-test</a></p></li><li><p><a href="https://hzkeung.com/2018/06/21/clickhouse-cluster-install">https://hzkeung.com/2018/06/21/clickhouse-cluster-install</a></p></li><li><p><a href="https://www.jianshu.com/p/383cae967a64">https://www.jianshu.com/p/383cae967a64</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建</tag>
      
      <tag>clickhouse</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clickhouse简介和性能对比</title>
    <link href="/2019/07/27/clickhouse%E7%AE%80%E4%BB%8B%E5%92%8C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
    <url>/2019/07/27/clickhouse%E7%AE%80%E4%BB%8B%E5%92%8C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="Clickhouse简介和性能对比"><a href="#Clickhouse简介和性能对比" class="headerlink" title="Clickhouse简介和性能对比"></a>Clickhouse简介和性能对比</h1><p>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。</p><p>常见的列式数据库有： Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright、 InfiniDB、 MonetDB (VectorWise， Actian Vector)、 LucidDB、 SAP HANA、 Google Dremel、 Google PowerDrill、 Druid、 kdb+。</p><span id="more"></span><p>不同的存储方式适合不同的场景，这里的查询场景包括： </p><ul><li>进行了哪些查询</li><li>多久查询一次</li><li>各类查询的比例</li><li>每种查询读取多少数据————行、列和字节</li><li>读取数据和写入数据之间的关系</li><li>使用的数据集大小以及如何使用本地的数据集</li><li>是否使用事务,以及它们是如何进行隔离的</li><li>数据的复制机制与数据的完整性要求</li><li>每种类型的查询要求的延迟与吞吐量</li></ul><p>系统负载越高，根据使用场景进行定制化就越重要，并且定制将会变的越精细。没有一个系统同样适用于明显不同的场景。如果系统适用于广泛的场景，在负载高的情况下，所有的场景可以会被公平但低效处理，或者高效处理一小部分场景。</p><h1 id="OLAP场景的关键特征"><a href="#OLAP场景的关键特征" class="headerlink" title="OLAP场景的关键特征"></a>OLAP场景的关键特征</h1><ul><li>大多数是读请求</li><li>数据总是以相当大的批(&gt; 1000 rows)进行写入</li><li>不修改已添加的数据</li><li>每次查询都从数据库中读取大量的行，但是同时又仅需要少量的列</li><li>宽表，即每个表包含着大量的列</li><li>较少的查询(通常每台服务器每秒数百个查询或更少)</li><li>对于简单查询，允许延迟大约50毫秒</li><li>列中的数据相对较小： 数字和短字符串(例如，每个URL 60个字节)</li><li>处理单个查询时需要高吞吐量（每个服务器每秒高达数十亿行）</li><li>事务不是必须的</li><li>对数据一致性要求低</li><li>每一个查询除了一个大表外都很小</li><li>查询结果明显小于源数据，换句话说，数据被过滤或聚合后能够被盛放在单台服务器的内存中</li></ul><h1 id="Clickhouse优缺点"><a href="#Clickhouse优缺点" class="headerlink" title="Clickhouse优缺点"></a>Clickhouse优缺点</h1><p>优点</p><ul><li>数据压缩</li><li>多核并行处理</li><li>支持数据复制和数据完整性<ul><li>shard分片</li><li>replica副本</li></ul></li><li>多服务器分布式处理。其他列式数据库管理系统中，几乎没有一个支持分布式的查询处理</li><li>支持sql<ul><li>大部分情况下是与SQL标准兼容的。 支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。</li></ul></li><li>向量引擎</li><li>实时数据插入</li><li>稀疏索引</li><li>适合在线查询</li></ul><p>缺点</p><ul><li>没有完整的事务支持。</li><li>缺少高频率，低延迟的修改或删除已存在数据的能力。仅能用于批量删除或修改数据，但这符合 <a href="https://gdpr-info.eu/">GDPR</a>。</li><li>稀疏索引使得ClickHouse不适合通过其键检索单行的点查询。</li></ul><h1 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h1><p>官方的性能测试对比报告参见：<a href="https://clickhouse.yandex/benchmark.html">https://clickhouse.yandex/benchmark.html</a></p><p>知乎上的一篇OLAP引擎比较：<a href="https://zhuanlan.zhihu.com/p/54907288">https://zhuanlan.zhihu.com/p/54907288</a></p><p>在一张有44个字段的大表中做单表查询并且和Amazon RedShift做对比，结果如下：</p><p>Clickhouse 测试环境：单CPU 2核 4G内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;physical id&quot;</span>| <span class="hljs-built_in">sort</span>| <span class="hljs-built_in">uniq</span>| <span class="hljs-built_in">wc</span> -l  <span class="hljs-comment"># # 查看物理CPU个数</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;cpu cores&quot;</span>| <span class="hljs-built_in">uniq</span>  <span class="hljs-comment"># 查看每个物理CPU中core的个数(即核数)</span><br></code></pre></td></tr></table></figure><p>数据量：1580万</p><p>clickhouse engine和index：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">ENGINE = ReplacingMergeTree(<span class="hljs-keyword">insert_time)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">order </span><span class="hljs-keyword">by </span>(membership_uid, <span class="hljs-keyword">business_group_uid, </span>calendar_date, <span class="hljs-keyword">insert_time);</span><br></code></pre></td></tr></table></figure><p>Sql执行速度取决于：执行时间execution和数据拉取时间fetching</p><p>Clickhouse:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.membership_id<span class="hljs-operator">=</span><span class="hljs-number">666</span>; <span class="hljs-comment">-- 160ms</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.membership_uid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3ec723abeffc470ea42593f0d1e9d279&#x27;</span>; <span class="hljs-comment">-- 120ms</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_id<span class="hljs-operator">=</span><span class="hljs-number">44</span>; <span class="hljs-comment">--  120ms</span><br><span class="hljs-keyword">select</span> account_phone <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.membership_id<span class="hljs-operator">=</span><span class="hljs-number">666</span>; <span class="hljs-comment">-- 58ms</span><br><span class="hljs-keyword">select</span> account_phone <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.membership_uid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3ec723abeffc470ea42593f0d1e9d279&#x27;</span>; <span class="hljs-comment">-- 44 ms</span><br><span class="hljs-keyword">select</span> account_phone <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_id<span class="hljs-operator">=</span><span class="hljs-number">44</span>; <span class="hljs-comment">-- 190ms</span><br></code></pre></td></tr></table></figure><p>RedShift: 机器配置高于clickhouse单机数倍</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_id<span class="hljs-operator">=</span><span class="hljs-number">44</span>; <span class="hljs-comment">--  1286条数据一次取出来时间较长</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_uid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;7a68b4a7350c4d7288e8befef91f8581&#x27;</span>; <span class="hljs-comment">-- 1286条数据一次取出来时间较长</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_uid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;fa26f456030940b8b6ec4b56e256aee2&#x27;</span>; <span class="hljs-comment">-- 250ms</span><br><span class="hljs-keyword">select</span> account_phone <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_uid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;7a68b4a7350c4d7288e8befef91f8581&#x27;</span>; <span class="hljs-comment">-- 360ms</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> t.membership_uid) <span class="hljs-keyword">from</span> dm.delphi_membership_properties t <span class="hljs-keyword">where</span> t.business_group_uid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;fa26f456030940b8b6ec4b56e256aee2&#x27;</span>; <span class="hljs-comment">-- 450ms</span><br></code></pre></td></tr></table></figure><p>将clickhouse 表engine的order by key修改如下：颗粒度小的在后</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">ENGINE = ReplacingMergeTree(<span class="hljs-keyword">insert_time)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">order </span><span class="hljs-keyword">by </span>(<span class="hljs-keyword">business_group_uid, </span>calendar_date, created_at, <span class="hljs-keyword">insert_time, </span>membership_uid);<br></code></pre></td></tr></table></figure><p>修改order by key之后含有bguid的查询速度大幅提升，均低于60ms。这个速度提升主要是clickhouse的稀疏索引导致的，关于索引会在其他文章中介绍到。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clickhouse</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎样拍出一张好照片</title>
    <link href="/2019/06/16/%E6%80%8E%E6%A0%B7%E6%8B%8D%E5%87%BA%E4%B8%80%E5%BC%A0%E5%A5%BD%E7%85%A7%E7%89%87/"/>
    <url>/2019/06/16/%E6%80%8E%E6%A0%B7%E6%8B%8D%E5%87%BA%E4%B8%80%E5%BC%A0%E5%A5%BD%E7%85%A7%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>怎样拍出一张好照片？</p><blockquote><p>到达合适的位置，选择好合适的角度，安排好想要突出主题的构图，调好曝光和色彩，按下快门，适当的加一点后期处理和美化，一张好照片就诞生了。</p></blockquote><p>所以一张好照片的基本要求也就和照片诞生过程的每一个环节息息相关了。</p><h1 id="好照片的基本要求"><a href="#好照片的基本要求" class="headerlink" title="好照片的基本要求"></a>好照片的基本要求</h1><p>什么是好照片？这个问题本身就是非常主观的。不同人有不同的看法。不过，对于一张好照片，有一些客观的基本要求。做不到这些基本要求，运气再好也拍不出好照片。</p><p>下面有5个基本要求：</p><ul><li><p><strong>要求1：把相机端平</strong></p></li><li><p><strong>要求2：把相片拍清楚</strong></p></li><li><p><strong>要求3：曝光不要过度</strong></p></li><li><p><strong>要求4：构图好</strong></p></li><li><p><strong>要求5：有主题</strong></p></li></ul><p>下面分别来介绍如何才能做到这5点基本要求。</p><span id="more"></span><h2 id="把相机端平"><a href="#把相机端平" class="headerlink" title="把相机端平"></a>把相机端平</h2><p>这个非常简单的要求看上去是有点废话，但其实在实际拍照过程中，大部分业余摄影者都做不到这一点。每一次出去采景回来选取照片的时候废片率最高的就是倾斜的照片，因为真的不好看。虽然通过后期旋转可以矫正，但是旋转本身会损失像素，而且还会发生图像变形。</p><p>下图是一张很好的照片，但是存在几度的倾斜，美感瞬间大打折扣。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/91560677695_.pic_hd.jpg" alt="91560677695_.pic_hd"></p><p>经过后期旋转之后，虽然矫正了，但是照片面积明显缩小，塔尖部分也不得不被裁掉。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/81560677693_.pic_hd.jpg" alt="81560677693_.pic_hd"></p><p>因此使用手机拍照时，我是强烈推荐打开手机上的辅助网格（Assistive grid）的，非常有助于水平校准。</p><h2 id="把相片拍清楚"><a href="#把相片拍清楚" class="headerlink" title="把相片拍清楚"></a>把相片拍清楚</h2><p>每次拍完照片之后，只要是有点模糊的照片，我都会立马删除。这样的照片没有任何存在的意义。</p><p>想要把相片拍清楚，需要有两点注意事项，这两点注意事项同时适用于相机和手机的专业模式：</p><ol><li>快门速度不能太慢，曝光时间不能太长。因为没有经过训练的人是很难端稳相机的，以至于照片模糊不清。如果天色太暗，又不适合使用闪光灯，那么可以考虑使用三脚架稳定相机然后延长曝光时间。</li><li>照片通常需要通过虚化前景和背景突出主题。因此无论是通过调节光圈大小还是后期手动虚化，都是有必要的。</li></ol><h2 id="曝光不要过度"><a href="#曝光不要过度" class="headerlink" title="曝光不要过度"></a>曝光不要过度</h2><p>如何定义合适的曝光是一件很难的事情，平时拍照的时候我通常会避免完全逆光，也会避免阳光直射，再通过后期调节曝光到自己满意的范围。曝光调高带来的好处是很明显的，可以让突出的主体足够显眼，整个照片的景色不会太暗。但过度曝光却会严重损失照片的细节，即使后续通过对比度调节也只能加深一点层次感，无法补充细节。因此选好合适的曝光很重要。</p><p>同时，在拍照的时候人眼看到的环境光线并不一定是最好的，完全没有必要通过记录去还原每一个信息的细节，而是以目前的场景为基础，进行个性化的创作，这个也是摄影和记录的不同之处。和**@快雪初晴**在荔枝酒吧讨论的时候，这一点是共识。</p><p>具体到逆光照，并不刻意要将人脸曝光量给足、照清楚，而是重在平衡整张照片的效果，事实上在照剪影的时候，我会刻意调低曝光，凸显前景的轮廓。如果一定要把人脸的曝光补足，可以采用反光板补光。前两周一个阳光明媚的周六下午在西湖边的夕照亭，我就遇到有不少拍婚纱照的摄影师，除了相机之外携带的最重要的就是反光板了。</p><p>另外，善用HDR(High-Dynamic-Range)模式，可以使你的曝光趋向于适中。因为在HDR模式下，一次会拍几张曝光不同的照片后合成HDR图像。但是使用HDR模式的时候，一定要端稳持平镜头。关于使用 OpenCV 进行高动态范围（HDR）成像可以参考以前翻译的一篇文章：<a href="https://linux.cn/article-9754-1.html%E3%80%82%E4%B8%8D%E8%BF%87%E8%BF%99%E6%AC%A1%E4%B8%8D%E6%98%AF%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%EF%BC%8C%E5%B0%B1%E4%B8%8D%E5%9C%A8%E6%AD%A4%E6%89%A9%E5%B1%95%E4%BA%86%E3%80%82">https://linux.cn/article-9754-1.html。不过这次不是技术文章，就不在此扩展了。</a></p><h2 id="构图好"><a href="#构图好" class="headerlink" title="构图好"></a>构图好</h2><p>构图就是要考虑将什么东西放到图片里去，哪个在前，哪个在后，哪个唱主角，哪个唱配角。可以使用几何图形，常用的有三角形构图和圆形构图。拍人像坐姿的时候巧妙的利用三角形构图可以凸显人物的气质。</p><p>下面的这两张照片，是在西湖西边的曲院风荷里面的一座小桥上拍摄的路人拍照，照片里面的左边女生的pose就巧妙的利用了三角形构图。第一眼看上去之后观察者的目光就会被左边女生吸引过去。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/191560687045_.pic.jpg" alt="191560687045_.pic"></p><p>即使我们将照片裁剪，只留下左边的这个部分，这个女生依然看着很优雅，这个得益于这个女生的背部，大腿和手臂构成的三角形。如果将模特面部向右边转一定的角度看着摄像头，这肯定会是一张不错的照片。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/181560687032_.pic.jpg" alt="181560687032_.pic"></p><h2 id="有主题"><a href="#有主题" class="headerlink" title="有主题"></a>有主题</h2><p>绘画的过程是做加法，一笔一画构建出心中的图景。摄影的过程是做减法，从纷繁世界里抽取出独特的静止片段。好的主题就是画面上恰到好处的少，蕴意上无限遐想的多。</p><p>主题不突出的原因有很多，在这里简单列举3点：</p><ol><li>摄影者自身追求大而全的场景</li><li>摄影者和拍摄主体之间的距离较远</li><li>整个场景的色彩对比不明显，拍摄主体不突出</li></ol><p>比如下面这张图，作为一张旅游打卡的记录照片，是完全合格，记录了五一假期我们去青海湖在拉脊山的路上看到的景色，但是图像里面的主体很多，背景里的雪山和白云，前景的公路，中间的妹子。很难说想表达的是什么。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/141560682506_.pic.jpg" alt="141560682506_.pic"></p><p>相比之下，下面这张照片就更好一些，突出了雪山的巍峨。这样拍摄的照片也就有了主题：无论有多少人来人往，雪山依然在那里。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/131560682415_.pic.jpg" alt="131560682415_.pic"></p><p>那么看到第一张照片不太满意之后怎么做才能排到第二张照片呢？首先，妹子就不出现在图像里面了，公路就需要摆在角落，最重要的一点，开车到里雪山足够近的地方，再适当的放大，然后一张没有经过任何处理的照片就出炉了。</p><h1 id="到达和视角"><a href="#到达和视角" class="headerlink" title="到达和视角"></a>到达和视角</h1><p>所谓到达，其实就是无限风光在险峰。所谓视角，其实就是发现美的眼睛看到的独特角度。</p><p>发现美的眼睛不是人人都有，也不是通过简单的训练就能有极大提升的。但是<strong>到达</strong>却是任何一个正常的人都可以做到的。</p><p>下面两张图是我在拉脊山中让司机师傅停车去拍的公路蜿蜒在雪山中的图像，第一张是下车后在路边找了一个比较近的小土坡，尽可能拍出对照感，但是也仅仅是黑色的路面和白色的雪的对比，雪山和公路的蜿蜒感完全没有。不够漂亮也不够震撼。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/171560685683_.pic.jpg" alt="171560685683_.pic"></p><p>第二张图则是尽可能的爬到雪山上面，俯视公路的照片。雪山和公路都在脚下，在左右两条公路的对比下，蜿蜒曲折感异常明显，一直延伸到远处雪山的尽头。看到这张照片，曹总都有到这里骑行的冲动了。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/161560685545_.pic.jpg" alt="161560685545_.pic"></p><h1 id="感染力"><a href="#感染力" class="headerlink" title="感染力"></a>感染力</h1><p>摄影不仅仅是一种记录，它是我们与这个世界相处和交流的一种方式。从艺术的角度讲，摄影是一种观察的艺术，观察的重点不是所见之物，而是观察的视角和关注的重点。</p><p>下面的这张照片名为《战争中的女孩》，曾获美国普利策奖。图中的女孩张开双臂， 痛得放声尖叫，却仍在不停的奔跑。在激起公众对战争的反感方面，胜过于一百小时的电视宣传广播”。因此一张真正好的图片，还需要有有一定的感染力。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/photography/how-to-make-a-good-photo/71560676358_.pic_hd.jpg"></p><h1 id="后期处理"><a href="#后期处理" class="headerlink" title="后期处理"></a>后期处理</h1><p>一直以来，我只会用后期来调一调照片的亮度和对比度，以及进行手动虚化、裁剪这一类型的少量修复处理。对于构图和视角这两个方面如果掌握不好，PS是没有太大办法的，对于这类照片应该是直接废弃，而不要抱着还能抢救的心态。所以有几类后期处理是完全没有意义的：</p><ol><li>不要过度滤镜</li><li>杜绝合成照</li><li>不影响画面整体的杂物不需要擦除。</li></ol><p>因此抖音上的各种杂物擦除教程的最终图片效果都是模特出现在一个很空旷的场景中，没有任何生活气息</p><h1 id="拍照和拍视频的区别"><a href="#拍照和拍视频的区别" class="headerlink" title="拍照和拍视频的区别"></a>拍照和拍视频的区别</h1><p>有一天晚上下班之后，在地铁上和张总聊到了拍照和拍视频的区别。虽然两者都是基于光线的创作，但是拍视频最大的不一样是用视频表达你想讲的故事。因此故事的精彩程度才是视频最核心的部分。子岳是一个会讲故事的人，那么我有理由认为，掌握了基础拍视频技巧的子岳也是一个好的vlogger。</p><hr><p>好了，到此为止，所有我对拍照的理解就介绍完了。而所有的这些理解的形成过程是比较缓慢的，经过了很多年的练习。在这个过程中，我没有单独去学习任何摄影的理论。但是如果早点接触理论应该会成长的更快点，这也能体现科班的重要性了。最近开始补一些基础知识，计划看的书有好几本：</p><ul><li>《人在纽约》</li><li>《美国纽约摄影学院摄影教材》上下册</li></ul><p>最后说明一下图片来源，铁塔照片来源于吴军老师的硅谷来信，战争中的女孩来源于网络，其余照片均为自己的拍摄作品。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>飞奔在路上--西北大环线</title>
    <link href="/2019/05/13/%E9%A3%9E%E5%A5%94%E5%9C%A8%E8%B7%AF%E4%B8%8A-%E8%A5%BF%E5%8C%97%E5%A4%A7%E7%8E%AF%E7%BA%BF/"/>
    <url>/2019/05/13/%E9%A3%9E%E5%A5%94%E5%9C%A8%E8%B7%AF%E4%B8%8A-%E8%A5%BF%E5%8C%97%E5%A4%A7%E7%8E%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面，在整个游记的撰写过程中，图片较多，由于typora编辑器的懒加载机制，导致一直在loading图片，撰写体验极差，改成vim之后又无法预览，整体而言就是糟糕透了。</p><p>本来打算写一个一本正经的非常正规的充满文艺气息的游记，结果不知道为啥又写成了全程哈哈哈的游记，可能是路上太高兴了？估计是被人传染了吧，凉了。</p></blockquote><p>出发前的一段时间迷上了vlog，于是在youtube上利用空余时间狂刷各路大神的作品，主要是CaseyNeistat和Travellight这两个vlogger的。刷完之后就决定大干一番。带上Gopro准备趁着这次旅行也拍摄一个牛逼的vlog。嗯，计划是很美好的，从家里打包行李开始，到去地铁站的路上，到虹桥火车站，到宁波机场等等各种人流繁杂的地方，背着重装包用支架举着Gopro像个傻逼一样的各种拍摄，同时自言自语。一直拍到塔尔寺，但是寺庙不让拍照，只能拍一些在路上走的。再到后来被队友发现拍照技能之后，整个旅途就是各种：看这里，咔。是的，整个行程都是这样了，一直到结束我都没想起来我不是来拍照的呀，我是来尝试拍vlog的哎。不过也还好，被人需要也是一种幸福的感觉。so，第一次vlog流产，不过后续可以在上海和vlog爱好者约拍。</p><span id="more"></span><p>废话了一堆，先来看下行程的整体情况，首先是使用百度地图制作的大致路线图。不使用google地图的原因很简单，有一些地点在google上没有，就没法使用了。图上显示是1851公里，但实际行程远远不止这么多，理论上接近3000公里才对。6天跑了3000公里，没错就是这么强。典型的上车睡觉下车拍照的玩法。虽然不是我想要的方式，但是假期有限也是没得办法啦。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/006tNc79gy1g2ym2szf8hj30x20iugqs.jpg"></p><p>想玩的更细致的可以参见这一份手绘地图(出自昆哥的女朋友)：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/006tNc79gy1g1v2loan1qj30g90gztav.jpg"></p><h2 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h2><blockquote><p>Day 1（20190427）: 上海-宁波-西宁</p><p>Day 2（20190428）: 西宁-塔尔寺-拉脊山-青海湖措日朗嘎景区-茶卡镇</p><p>Day 3（20190429）: 茶卡镇-茶卡盐湖-大柴旦</p><p>Day 4（20190430）: 大柴旦-翡翠湖-乌素特水上雅丹地质公园-最美公路照-当金山-敦煌</p><p>Day 5（20190501）: 敦煌-莫高窟-鸣沙山月牙泉-沙城驿站</p><p>Day 6（20190502）: 沙城驿站-嘉峪关-张掖丹霞小镇</p><p>Day 7（20190503）: 丹霞小镇-七彩丹霞-祁连山-达板山-西宁</p><p>Day 8（20190504）: 西宁-宁波-上海</p></blockquote><p>我不打算像记流水账一样记录每一天到了哪里玩了什么吃了什么住的什么跑了多少公里。想要行程的可以参考上面的简要行程设计，相信只要到了当地，几乎都有吃的有玩的，我只想介绍哪里好玩，哪里是值得一去的，然后放图就可以了。</p><p>走起来，我们的西北大环线之旅。</p><h2 id="队友"><a href="#队友" class="headerlink" title="队友"></a>队友</h2><p>先介绍一下各个队友，我习惯性叫队友，因为我喜欢hiking和trekking，队友这种叫法会给人一种互帮互助的感觉。在路上我们也确实是这样做的。除我之外，总共还有五个队友，下面按照认识的先后顺序分别介绍：</p><p>首先出场的是大碗，一个嘉兴的妹子，也是第一个见到的妹子，就在宁波机场。(头发遮住了脸，就不戴上凶猛的南瓜头了，本来说是给盖上HelloKitty的，简直想太多，我是这么萌的人么)</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_184240_688.jpg" alt="IMG_20190429_184240_688"></p><p>第二位出场的是曦，一个南宁妹子，到西宁之后当天晚上见到的妹子。后续的多数行程就是我们三一起玩了。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_195252_268_meitu_4.jpg" alt="IMG_20190428_195252_268_meitu_4"></p><p>第三位出场的是CYC，一个北京大哥，在IBM工作，做BigData的，工作经验和旅行经验都很丰富，但是性格独特。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_155454_meitu_3.jpg" alt="IMG_20190430_155454_meitu_3"></p><p>第四位和第五位分别是Cecilia和Lauren，两个在成都的贵州妹子，都操着一口流利的川普。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_184252_743_meitu_1.jpg" alt="IMG_20190430_184252_743_meitu_1"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_201138_693_meitu_2.jpg" alt="IMG_20190428_201138_693_meitu_2"></p><h2 id="湖和水"><a href="#湖和水" class="headerlink" title="湖和水"></a>湖和水</h2><p>今年我的个人OKR里面有一项是去敦煌的鸣沙山月牙泉，但最终却是在去敦煌的路上停留了很长的时间，不过也见到了预期之外的景色，比如翡翠湖和水上雅丹，嗯，运气不错。那么就先来介绍一下好玩的湖和水吧</p><ul><li>青海湖</li><li>茶卡盐湖</li><li>翡翠湖</li><li>水上雅丹</li></ul><h3 id="青海湖"><a href="#青海湖" class="headerlink" title="青海湖"></a>青海湖</h3><p>青海湖位于西宁以西大约130公里处，是中国最大的内陆高原湖泊，对我来说，这已经是我第二次来青海湖了，第一次是大学毕业旅行和宿舍的哥们一起来的。不过第一次是二郎剑景区，这次是措日朗嘎景区。景色肯定是二郎剑景区要好一点点，不过也就是一点点了，真的差别不是很大，关键是措日朗嘎便宜啊，只要10块钱，哈哈哈。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200854_761_meitu_11.jpg" alt="IMG_20190428_200854_761"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200823_139_meitu_10.jpg" alt="IMG_20190428_200823_139"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200738_374.jpg" alt="IMG_20190428_200738_374"></p><h3 id="茶卡盐湖"><a href="#茶卡盐湖" class="headerlink" title="茶卡盐湖"></a>茶卡盐湖</h3><p>茶卡盐湖也叫茶卡或达布逊淖尔，位于青海省海西蒙古族藏族自治州乌兰县茶卡镇附近，距离西宁292公里，距离青海湖约151公里。还被《国家旅游地理杂志》评为“一生必去的55个地方之一”，可是给我的感觉咋完全不一样捏，我就感觉一个字：冷。真的，除了冷还是冷。多云天，没什么太阳，风还挺大，虽然知道没太阳拍不出天空之境的感觉，我们还是决定往湖中间走一走，走到了只有我们能挡住别人别人挡不住我们的地方，可是啊，湖里的那个盐水啊，冰冷彻骨，我的脚哟，瞬间没得感觉了。</p><p>顺便在这说一下关于在盐湖给女生拍照的事情，湖里面放眼望去全是大红裙，饱和度太高太抢眼，在盐湖，穿着白色或者浅蓝色的裙子也是不错的。应该也能拍出很美的照片。想去的七八月份可以去试试，4月底先别说拍照了，先穿起羽绒服把小命保住再说。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_184544_061.jpg" alt="IMG_20190429_184544_061"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_184507_449.jpg" alt="IMG_20190429_184507_449"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_184401_161.jpg" alt="IMG_20190429_184401_161"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_183802_697.jpg" alt="IMG_20190429_183802_697"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_183608_002.jpg" alt="IMG_20190429_183608_002"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190429_183544_357.jpg" alt="IMG_20190429_183544_357"></p><h3 id="翡翠湖"><a href="#翡翠湖" class="headerlink" title="翡翠湖"></a>翡翠湖</h3><p>翡翠湖在国道G315旁边，距离大柴旦镇十几公里。相比于茶卡盐湖，这里似乎更能拍出大片</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183234_298.jpg" alt="IMG_20190430_183234_298"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183203_677.jpg" alt="IMG_20190430_183203_677"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183121_957.jpg" alt="IMG_20190430_183121_957"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183022_720.jpg" alt="IMG_20190430_183022_720"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_190344_501.jpg" alt="IMG_20190430_190344_501"></p><h3 id="水上雅丹"><a href="#水上雅丹" class="headerlink" title="水上雅丹"></a>水上雅丹</h3><p>水上雅丹位于柴达木盆地的无人区，这里还未被过度开发，加上路途遥远，沿途受到自然条件的限制，所以这里的游客比较少。对于我们这一行人来说，水上雅丹是一个意外之喜，因为并不在最初的行程规划里面，但却是强烈推荐的一个景点。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_190927_097.jpg" alt="IMG_20190430_190927_097"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_185215_997.jpg" alt="IMG_20190430_185215_997"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_184444_259.jpg" alt="IMG_20190430_184444_259"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_184404_358.jpg" alt="IMG_20190430_184404_358"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_200655_621.jpg" alt="IMG_20190430_200655_621"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_200605_021.jpg" alt="IMG_20190430_200605_021"></p><h2 id="山和路"><a href="#山和路" class="headerlink" title="山和路"></a>山和路</h2><p>行程中最美的还是在路上，柴达木盆地中的茫茫戈壁给人以无限的遐想，也只有在这样的地方，才能催生出中国最美的公路，才能拍出最美的公路照。至于路边的山就更壮观了。</p><h3 id="最美公路"><a href="#最美公路" class="headerlink" title="最美公路"></a>最美公路</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_184137_970.jpg" alt="IMG_20190430_184137_970"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_184058_607.jpg" alt="IMG_20190430_184058_607"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183942_512_meitu_8.jpg" alt="IMG_20190430_183942_512"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183906_193_meitu_7.jpg" alt="IMG_20190430_183906_193"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183805_963_meitu_6.jpg" alt="IMG_20190430_183805_963"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183610_460.jpg" alt="IMG_20190430_183610_460"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183531_783_meitu_9.jpg" alt="IMG_20190430_183531_783"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_183342_301.jpg" alt="IMG_20190430_183342_301"></p><h3 id="拉脊山"><a href="#拉脊山" class="headerlink" title="拉脊山"></a>拉脊山</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200316_274.jpg" alt="IMG_20190430_183342_301"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200243_353.jpg" alt="IMG_20190430_183342_301"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_195819_269.jpg" alt="IMG_20190430_183342_301"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_195657_429.jpg" alt="IMG_20190430_183342_301"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_195615_136.jpg" alt="IMG_20190430_183342_301"></p><h3 id="鸣沙山"><a href="#鸣沙山" class="headerlink" title="鸣沙山"></a>鸣沙山</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190501_211637_356.jpg" alt="IMG_20190501_211637_356"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190501_212302_737.jpg" alt="IMG_20190501_212302_737"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190502_071322_511.jpg" alt="IMG_20190502_071322_511"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190502_071449_366.jpg" alt="IMG_20190502_071449_366"></p><h3 id="七彩丹霞"><a href="#七彩丹霞" class="headerlink" title="七彩丹霞"></a>七彩丹霞</h3><p>如果不是因为七彩丹霞，我大概率会从敦煌直接做高铁到兰州的，不过你看下面的照片，真的非常Spectacular</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190503_185333_204.jpg" alt="IMG_20190503_185333_204"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/WechatIMG11.jpeg" alt="WechatIMG11"></p><h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><p>我一直对这种带着宗教色彩的文化建筑或者活动都不太感冒，但是像莫高窟这样的奇迹还是应该早点去看。窟内的壁画有一些已经损毁严重，听说敦煌研究院已经开始着手采集数字模型了，没准以后再去就不一定能看到原物了。</p><p>莫高窟</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190501_212830_065.jpg" alt="IMG_20190501_212830_065"></p><p>塔尔寺</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_100701.jpg" alt="IMG_20190428_100701.jpg"></p><h2 id="动物"><a href="#动物" class="headerlink" title="动物"></a>动物</h2><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200424_396.jpg" alt="IMG_20190428_200424_396.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_200358_379.jpg" alt="IMG_20190428_200358_379.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190428_201542_316.jpg" alt="IMG_20190428_201542_316.jpg "></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_185437_149.jpg" alt="IMG_20190430_185437_149.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/WechatIMG10.jpeg" alt="WechatIMG10"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>想匆匆结束，因为我实在是写不下去了，照片多了之后真的卡爆了，如果不是这样，我能碎碎念到一万字，你信不，毕竟还有各种没有写的，包括美食啊，心情啊，每个人的想法啊，各个景点的典故啊，成因什么的，感觉都挺有趣的。但是我又想提一下关于包车和司机师傅，怎么办呢？那就提一下咯。</p><blockquote><p>关于包车：</p><ol><li>如果你是汉族，尽量选汉人司机。</li><li>如果你是回族，尽量选回民司机。</li><li>理论上大多数青海包车司机都会带你去几个和他们有合作的饭店或者服务区的购物店，这个也可以理解，毕竟只靠包车费也没多少钱。每个人也都得生存，如果想服务好一点的，就不要一直想着低价。</li><li>如果想深度游的，选好志同道合的有钱有闲的同伴自驾去吧</li></ol></blockquote><p>然后我必须解释一个事情：虽然我在朋友圈发了不少给同行女生拍的美照，但是我真的没有对象啊，真的没有，没有(强烈的求生欲望)</p><p>数了一下相册里这段时间的收获：930张照片，30多个视频，其中不乏美照和大片。此外，还认识了几个志趣相同的朋友。</p><p>总之，这是一次充满欢声笑语的圆满行程。但即使不圆满又怎么样呢，毕竟</p><blockquote><p>You only live once. 你只活一次，活出自己的样子</p></blockquote><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/20190501-northwest-circle/IMG_20190430_190141_861_meitu_5.jpg" alt="IMG_20190430_190141_861_meitu_5"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
      <tag>西北环线</tag>
      
      <tag>敦煌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数仓工作的简单介绍和对比</title>
    <link href="/2019/05/08/%E6%95%B0%E4%BB%93%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AF%B9%E6%AF%94/"/>
    <url>/2019/05/08/%E6%95%B0%E4%BB%93%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>数仓工作的简单介绍和对比</p><h2 id="传统技术栈"><a href="#传统技术栈" class="headerlink" title="传统技术栈"></a>传统技术栈</h2><p><img src="http://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/brief-introduction-and-comparison-of-data-warehouse/21557225799_.pic_hd.jpg"></p><h2 id="再惠技术栈"><a href="#再惠技术栈" class="headerlink" title="再惠技术栈"></a>再惠技术栈</h2><p><img src="http://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/brief-introduction-and-comparison-of-data-warehouse/11557225799_.pic_hd.jpg"></p><span id="more"></span><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><table><thead><tr><th>技术</th><th>目的</th></tr></thead><tbody><tr><td>Hadoop</td><td>生态环境，提供了一个可靠的共享存储和分析计算系统</td></tr><tr><td>HDFS</td><td>Hadoop 分布式文件系统，解决文件分布式存储的问题</td></tr><tr><td>MapReduce</td><td>解决分布式的数据处理和分析</td></tr><tr><td>Hive</td><td>分析和管理存储在HDFS中的数据</td></tr><tr><td>HBase</td><td>解决数据的存储和检索</td></tr><tr><td>Spark</td><td>支持流式处理和批处理(spark streaming)</td></tr><tr><td>Storm</td><td>流式计算</td></tr></tbody></table><p>参考：<a href="https://suncle.me/2018/04/16/Hadoop-MapReduce-HDFS-Introduction/">https://suncle.me/2018/04/16/Hadoop-MapReduce-HDFS-Introduction/</a></p><h2 id="MapReduce工作原理"><a href="#MapReduce工作原理" class="headerlink" title="MapReduce工作原理"></a>MapReduce工作原理</h2><p>以Python为例</p><p>参考：<a href="https://suncle.me/2018/04/17/Writing-An-Hadoop-MapReduce-Program-In-Python/">https://suncle.me/2018/04/17/Writing-An-Hadoop-MapReduce-Program-In-Python/</a></p><p><img src="http://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/brief-introduction-and-comparison-of-data-warehouse/061114_0930_Introductio1.png"></p><h2 id="hive工作原理"><a href="#hive工作原理" class="headerlink" title="hive工作原理"></a>hive工作原理</h2><p>Hive最初是应Facebook每天产生的海量新兴社会网络数据进行管理和机器学习的需求而产生和发展的。</p><p>Hive是一种建立在Hadoop文件系统上的数据仓库架构，并对存储在HDFS中的数据进行分析和管理（也就是说对存储在HDFS中的数据进行分析和管理，我们不想使用手工，我们建立一个工具把，那么这个工具就可以是hive）。</p><p>Hive定义了一种类似SQL的查询语言，被称为HQL<br>Hive可以允许用户编写自己定义的函数UDF，来在查询中使用。Hive中有3种UDF：</p><ol><li>User Defined Functions（UDF）</li><li>User Defined Aggregation Functions（UDAF）</li><li>User Defined Table Generating Functions（UDTF）。</li></ol><p><strong>Hive设计图：</strong></p><p><img src="http://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/brief-introduction-and-comparison-of-data-warehouse/hive_system_architecture.png"></p><ol><li>UI：用户界面，本质就是一个客户端，比如HUE(<strong>Hadoop User Experience</strong>)</li><li>Driver：接收查询的组件。比如接收HUE和presto过来的查询</li><li>Metastore：存储仓库中各种表和分区的所有结构信息</li><li>Compiler：解析query，使用的是antlr解析sql为抽象语法树。从Metastore中获取表字段的类型或者其他元数据进行各种检查。然后生成执行计划。</li><li>Execution engine：执行引擎。执行计划通常分为多步实现，也就是有阶段的概念，每个阶段都是一个mapreduce作业，然后就可以拿到hadoop中执行并且根据执行结果组装</li></ol><h2 id="技术栈升级"><a href="#技术栈升级" class="headerlink" title="技术栈升级"></a>技术栈升级</h2><p>可以按照以下技术栈出现的顺序进行升级，目前阶段是打算把hive升级到spark，将spark streaming投入生产。后续向Beam靠拢。</p><p><img src="http://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/brief-introduction-and-comparison-of-data-warehouse/bigdata_tech_stack.jpg"></p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>presto是如何从存储在s3上读取数据的？</p><blockquote><p>从hive的metastore读取表的metadata，然后直接去读s3</p></blockquote><p>DAG(Directed Acyclic Graph)？airflow调度？</p><blockquote><p>DAG的本意是有向无环图，数仓里面经常说的DAG是指由一系列有顺序的阶段组成的执行计划。将DAG扔给airflow调度执行即可</p></blockquote><hr><p>参考：</p><ol><li>Apache Hive官方设计文档： <a href="https://cwiki.apache.org/confluence/display/Hive/Design">https://cwiki.apache.org/confluence/display/Hive/Design</a></li><li>ANTLR解析器：<a href="https://github.com/antlr/antlr4">https://github.com/antlr/antlr4</a></li><li>BNF范式：<a href="http://sighingnow.github.io/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/bnf.html">http://sighingnow.github.io/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/bnf.html</a></li><li>Hadoop、MapReduce、HDFS介绍：<a href="https://suncle.me/2018/04/16/Hadoop-MapReduce-HDFS-Introduction">https://suncle.me/2018/04/16/Hadoop-MapReduce-HDFS-Introduction</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BigData</tag>
      
      <tag>数仓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精选唐诗十首</title>
    <link href="/2019/04/15/%E7%B2%BE%E9%80%89%E5%94%90%E8%AF%97%E5%8D%81%E9%A6%96/"/>
    <url>/2019/04/15/%E7%B2%BE%E9%80%89%E5%94%90%E8%AF%97%E5%8D%81%E9%A6%96/</url>
    
    <content type="html"><![CDATA[<p>平衡思维方式的唐诗</p><h1 id="登高"><a href="#登高" class="headerlink" title="登高"></a>登高</h1><p>杜甫《望岳》</p><blockquote><p>岱宗夫如何，齐鲁青未了。</p><p>造化钟神秀，阴阳割昏晓。</p><p>荡胸生层云，决眦入归鸟。</p><p>会当凌绝顶，一览众山小。</p></blockquote><p>李白《登金陵凤凰台》</p><blockquote><p>凤凰台上凤凰游，凤去台空江自流。</p><p>吴宫花草埋幽径，晋代衣冠成古丘。</p><p>三山半落青天外，二水中分白鹭洲。</p><p>总为浮云能蔽日，长安不见使人愁。</p></blockquote><span id="more"></span><h1 id="壮心"><a href="#壮心" class="headerlink" title="壮心"></a>壮心</h1><p>杨炯《从军行》</p><blockquote><p>烽火照西京，心中自不平。</p><p>牙璋辞凤阙，铁骑绕龙城。</p><p>雪暗凋旗画，风多杂鼓声。</p><p>宁为百夫长，胜作一书生。</p></blockquote><h1 id="羁旅"><a href="#羁旅" class="headerlink" title="羁旅"></a>羁旅</h1><p>李白《春夜洛城闻笛》</p><blockquote><p>谁家玉笛暗飞声，散入春风满洛城。</p><p>此夜曲中闻折柳，何人不起故园情。</p></blockquote><p>温庭筠《商山早行》</p><blockquote><p>晨起动征泽，客行悲故乡。</p><p>鸡声茅店月，人迹板桥霜。</p><p>槲叶落山路，枳花明驿墙。</p><p>因思杜陵梦，凫雁满回塘。</p></blockquote><h1 id="田园"><a href="#田园" class="headerlink" title="田园"></a>田园</h1><p>王维《终南别业》</p><blockquote><p>中岁颇好道，晚家南山陲。</p><p>兴来每独往，胜事空自知。</p><p>行到水穷处，坐看云起时。</p><p>偶然值林叟，谈笑无还期。</p></blockquote><h1 id="聚散"><a href="#聚散" class="headerlink" title="聚散"></a>聚散</h1><p>李白《宣州谢朓楼饯别校书叔云》</p><blockquote><p>弃我去者，昨日之日不可留。</p><p>乱我心者，今日之日多烦忧。</p><p>长风万里送秋雁，对此可以酣高楼。</p><p>蓬莱文章建安骨，中间小谢又清发。</p><p>俱怀逸兴壮思飞，欲上青天揽明月。</p><p>抽刀断水水更流，举刀消愁愁更愁。</p><p>人生在世不称意，明朝散发弄扁舟。</p></blockquote><p>李白《将进酒》</p><blockquote><p>君不见黄河之水天上来，奔流到海不复回。</p><p>君不见高堂明镜悲白发，朝如青丝暮成雪。</p><p>人生得意须尽欢，莫使金樽空对月。</p><p>天生我材必有用，千金散尽还复来。</p><p>烹羊宰牛且为乐，会须一饮三百杯。</p><p>岑夫子，丹丘生，将进酒，杯莫停。</p><p>与君歌一曲，请君为我倾耳听。</p><p>钟鼓馔玉不足贵，但愿长醉不复醒。</p><p>古来圣贤皆寂寞，惟有饮者留其名。</p><p>陈王昔时宴平乐，斗酒十千恣欢虐。</p><p>主人何为言少钱，径须沽取对君酌。</p><p>五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。</p></blockquote><h1 id="感时"><a href="#感时" class="headerlink" title="感时"></a>感时</h1><p>张若虚《春江花月夜》</p><blockquote><p>春江潮水连海平，海上明月共潮生。</p><p>滟滟随波千万里，何处春江无月明。</p><p>江流宛转绕芳甸，月照花林皆似霰。</p><p>空里流霜不觉飞，汀上白沙看不见。</p><p>江天一色无纤尘，皎皎空中孤月轮。</p><p>江畔何人初见月，江月何年初照人。</p><p>人生代代无穷已，江月年年只相似。</p><p>不知江月待何人，但见长江送流水。</p><p>白云一片去悠悠，青枫浦上不胜愁。</p><p>谁家今夜扁舟子，何处相思明月楼。</p><p>可怜楼上月徘徊，应照离人妆镜台。</p><p>玉户帘中卷不去，愿逐月华流照君。</p><p>鸿雁长飞光不度，鱼龙潜跃水成文。</p><p>昨夜闲潭梦落花，可怜春半不还家。</p><p>江水流春去欲尽，江潭落月复西斜。</p><p>斜月沉沉藏海雾，碣石潇湘无限路。</p><p>不知乘月几人归，落月摇情满江树。</p></blockquote><h1 id="快意"><a href="#快意" class="headerlink" title="快意"></a>快意</h1><p>杜甫《闻官军收河南河北》</p><blockquote><p>剑外忽传收蓟北，初闻涕泪满衣裳。</p><p>却看妻子愁何在，漫卷诗书喜欲狂。</p><p>白日放歌须纵酒，青春作伴好还乡。</p><p>即从巴峡穿巫峡，便下襄阳向洛阳。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>唐诗</tag>
      
      <tag>思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客域名迁移</title>
    <link href="/2019/03/31/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB/"/>
    <url>/2019/03/31/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<p>突然就想给本站换个域名了，那么就动手了</p><p>目标：</p><ol><li>网站使用Git Hooks自动部署到VPS，</li><li>nginx解析域名到VPS，并开启https和http2</li><li>老域名 <code>flowsnow.net</code> 301永久重定向到新域名 <code>suncle.me</code></li><li>更改Google收录和Baidu收录索引，尽可能少的影响权重</li><li>使用valine评论系统，迁移disqus评论数据到valine</li></ol><span id="more"></span><h2 id="网站自动部署到VPS"><a href="#网站自动部署到VPS" class="headerlink" title="网站自动部署到VPS"></a>网站自动部署到VPS</h2><p>首先需要建立好本地到VPS的ssh链接，开启互信</p><p>在VPS上建立git裸库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">mkdir</span> blog.git    <span class="hljs-comment"># 创建git仓库文件夹</span><br><span class="hljs-built_in">cd</span> blog.git       <span class="hljs-comment"># 进入仓库目录</span><br>git init --bare   <span class="hljs-comment"># 使用--bare参数初始化为裸仓库，这样创建的仓库不包含工作区</span><br></code></pre></td></tr></table></figure><p>配置Git Hooks，创建post-receive文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/blog.git/hooks  <span class="hljs-comment"># 切换到hooks目录下</span><br>vim post-receive     <span class="hljs-comment"># 创建文件</span><br></code></pre></td></tr></table></figure><p>写入一下内容实现基于复制的自动部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>GIT_REPO=/root/blog.git<br>TMP_GIT_CLONE=/tmp/blog<br>PUBLIC_WWW=/data/www<br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span><br>git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$GIT_REPO</span> <span class="hljs-variable">$TMP_GIT_CLONE</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span>/*<br><span class="hljs-built_in">cp</span> -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span><br></code></pre></td></tr></table></figure><p>保存退出后，执行：<code>chmod +x post-receive</code> 赋予可执行权限。</p><p>在hexo博客站点配置文件_config.yml文件中，修改部署配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span><br>      <span class="hljs-comment"># github: git@github.com:Flowsnow/Flowsnow.github.io.git,master</span><br>      <span class="hljs-comment"># coding: git@git.coding.net:Flowsnow/Flowsnow.git,coding-pages</span><br>      <span class="hljs-attr">linode:</span> <span class="hljs-string">root@139.162.108.44:blog.git</span><br></code></pre></td></tr></table></figure><h2 id="nginx解析域名到VPS"><a href="#nginx解析域名到VPS" class="headerlink" title="nginx解析域名到VPS"></a>nginx解析域名到VPS</h2><p>在VPS上使用 <code>apt-get install -y nginx</code> 安装好 <code>nginx</code> 之后，新增配置 <code>/etc/nginx/sites-available/suncle.me</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">server_name</span> suncle.me;<br>    <span class="hljs-attribute">root</span> /data/www;<br>    <span class="hljs-attribute">index</span> index.html;<br><br>    <span class="hljs-comment"># Media: images, icons, video, audio, HTC</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$</span> &#123;<br>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">&quot;max-age=2592000&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># CSS and Javascript</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(?:css|js)$</span> &#123;<br>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">&quot;max-age=31536000&quot;</span>;<br>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>    &#125;<br><br><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2; <span class="hljs-comment"># managed by Certbot</span><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/suncle.me/fullchain.pem; <span class="hljs-comment"># managed by Certbot</span><br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/suncle.me/privkey.pem; <span class="hljs-comment"># managed by Certbot</span><br>    <span class="hljs-attribute">include</span> /etc/letsencrypt/options-ssl-nginx.conf; <span class="hljs-comment"># managed by Certbot</span><br>    <span class="hljs-attribute">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem; <span class="hljs-comment"># managed by Certbot</span><br><br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> = suncle.me) &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://suncle.me<span class="hljs-variable">$request_uri</span>;<br>    &#125; <span class="hljs-comment"># managed by Certbot: redirect http to https</span><br><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> suncle.me;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>; <span class="hljs-comment"># managed by Certbot</span><br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.suncle.me;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://suncle.me<span class="hljs-variable">$request_uri</span>;  <span class="hljs-comment"># redirect www to non-www</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建软连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span>suncle.me <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><br></code></pre></td></tr></table></figure><p>切换用户为 <code>root</code>，开启 <code>gzip_static</code> 压缩，关闭日志，修改 <code>nginx.conf</code> 如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span> root;<br><span class="hljs-attribute">worker_processes</span> auto;<br><span class="hljs-attribute">pid</span> /run/nginx.pid;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">768</span>;<br>    <span class="hljs-comment"># multi_accept on;</span><br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br><br>    <span class="hljs-comment"># Basic Settings</span><br><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<br>    <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">2048</span>;<br>    <span class="hljs-comment"># server_tokens off;</span><br><br>    <span class="hljs-comment"># server_names_hash_bucket_size 64;</span><br>    <span class="hljs-comment"># server_name_in_redirect off;</span><br><br>    <span class="hljs-attribute">include</span> /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span> application/octet-stream;<br><br>    <span class="hljs-comment"># SSL Settings</span><br><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment"># Logging Settings</span><br><br>    <span class="hljs-comment"># access_log /var/log/nginx/access.log;</span><br>    <span class="hljs-comment"># error_log /var/log/nginx/error.log;</span><br><br>    <span class="hljs-comment"># Gzip Settings</span><br><br>    <span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">&quot;msie6&quot;</span>;<br><br>    <span class="hljs-comment"># gzip_vary on;</span><br>    <span class="hljs-comment"># gzip_proxied any;</span><br>    <span class="hljs-comment"># gzip_comp_level 6;</span><br>    <span class="hljs-comment"># gzip_buffers 16 8k;</span><br>    <span class="hljs-comment"># gzip_http_version 1.1;</span><br>    <span class="hljs-comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><br>    <span class="hljs-comment"># Virtual Host Configs</span><br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>    <span class="hljs-attribute">include</span> /etc/nginx/sites-enabled/*;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用一下命令启动&#x2F;重启 <code>nginx</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nginx<br>systemctl restart nginx<br></code></pre></td></tr></table></figure><p>配置https和http2，先安装certbot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install software-properties-common<br>add-apt-repository ppa:certbot/certbot<br>apt-get update<br>apt-get install python-certbot-nginx<br></code></pre></td></tr></table></figure><p>运行certbot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certbot --nginx<br></code></pre></td></tr></table></figure><p>设置好之后重启nginx即可。</p><p>设置定时更新Https证书，在crontab中加入以下定时任务，每天凌晨3点执行</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> * * * certbot renew<br></code></pre></td></tr></table></figure><h2 id="Nginx-实现永久重定向"><a href="#Nginx-实现永久重定向" class="headerlink" title="Nginx 实现永久重定向"></a>Nginx 实现永久重定向</h2><p>使用nginx将老域名永久重定向到新域名，site-enabled目录下新增以下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br>    <span class="hljs-attribute">server_name</span> flowsnow.net;<br>    <span class="hljs-attribute">index</span> index.html index.htm index.php;<br>    <span class="hljs-attribute">root</span> /home/wwwroot/default;<br><br>    <span class="hljs-attribute">if</span> ( <span class="hljs-variable">$scheme</span> = <span class="hljs-string">&quot;http&quot;</span> ) &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://suncle.me<span class="hljs-variable">$request_uri</span>;<br>    &#125;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)$</span>  https://suncle.me<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迁移Google和Baidu收录索引"><a href="#迁移Google和Baidu收录索引" class="headerlink" title="迁移Google和Baidu收录索引"></a>迁移Google和Baidu收录索引</h2><p>Baidu收录可以直接使用Baidu网站改版工具实现，Google收录可以使用Google更改网站地址工具实现，但是前提是需要配置好301重定向。Google提交更换地址申请页面如下：<br><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/migrate-blog-domain/google-replace-domain.jpg"></p><h2 id="迁移Disqus到Valine"><a href="#迁移Disqus到Valine" class="headerlink" title="迁移Disqus到Valine"></a>迁移Disqus到Valine</h2><p>觉得valine评论系统看着还不错，而且disqus由于被墙之前一直是加了一个disqus-proxy的反向代理才能使访客看到评论，比较麻烦而且需要一台VPS。</p><p>Valine基于LeanCloud，不得不说，LeanCloud的服务一直都是比较稳定的，而且有免费额度可以使用。</p><p>迁移Disqus评论数据到Valine可以使用Disqus2LeanCloud这个工具，见下图，具体使用可以参考后面的参考链接</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/migrate-blog-domain/Disqus2LeadCloud.jpg"></p><hr><p>参考：</p><ol><li><a href="https://www.zhihu.com/question/270176706">知乎-网站更换域名收录怎么办？</a> </li><li><a href="https://medium.com/@jasonrigden/how-to-host-a-static-website-with-nginx-8b2dd0c5b301">How to Host a Static Website with Nginx – Jason Rigden – Medium</a></li><li><a href="https://zhuanlan.zhihu.com/p/37312476">Hexo建站使用Git部署到VPS</a> </li><li><a href="http://www.html580.com/tool/nginx/index.php">Nginx 在线美化器</a></li><li><a href="https://www.google.com/webmasters/tools/change-address">Google 网站改版</a></li><li><a href="https://www.imydl.tech/lnmp/315.html">博客更换域名后利用Nginx实现完美301跳转 - 运维学习笔记博客</a></li><li><a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/">使用valine评论系统</a></li><li><a href="http://disqus.panjunwen.com/">disqus评论迁移到valine</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Linux脚本集锦</title>
    <link href="/2019/03/30/%E5%B8%B8%E7%94%A8linux%E8%84%9A%E6%9C%AC%E9%9B%86%E9%94%A6/"/>
    <url>/2019/03/30/%E5%B8%B8%E7%94%A8linux%E8%84%9A%E6%9C%AC%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<p>常用linux脚本：</p><ul><li>Linux系统bash脚本获取系统硬件资源</li><li>Aix系统ksh脚本获取系统硬件资源</li><li>服务器打开session时显示帮助信息</li><li>curl post中带有变量的脚本</li><li>金三系统基线包安装部署脚本</li></ul><span id="more"></span><h2 id="Linux系统bash脚本获取系统硬件资源"><a href="#Linux系统bash脚本获取系统硬件资源" class="headerlink" title="Linux系统bash脚本获取系统硬件资源"></a>Linux系统bash脚本获取系统硬件资源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;系统资源使用情况：以下各个数字均为百分比%&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;CPU平均使用率：&quot;</span><br>top -n 3 b|grep <span class="hljs-string">&#x27;Cpu(s)&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1|awk <span class="hljs-string">&#x27;&#123;sum+= $1&#125; END &#123;printf &quot;%.2f\n&quot;,sum/3&#125;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;内存使用率：&quot;</span><br>free|grep <span class="hljs-string">&#x27;Mem:&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;realused=$3-$6-$7&#125; END &#123;printf &quot;%.2f\n&quot;,realused*100/$2&#125;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;磁盘使用率：&quot;</span><br><span class="hljs-built_in">df</span>|awk <span class="hljs-string">&#x27;&#123;if(length($6)==1) print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Inode使用率：&quot;</span><br><span class="hljs-built_in">df</span> -i|awk <span class="hljs-string">&#x27;&#123;if(length($6)==1) print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1<br></code></pre></td></tr></table></figure><h2 id="Aix系统ksh脚本获取系统硬件资源"><a href="#Aix系统ksh脚本获取系统硬件资源" class="headerlink" title="Aix系统ksh脚本获取系统硬件资源"></a>Aix系统ksh脚本获取系统硬件资源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>echo &quot;以下数据均为百分比&quot;<br>echo &quot;cpu&quot;<br>vmstat 1 3|sed -n &#x27;7,9p&#x27;|awk &#x27;&#123;free+=$16&#125; END &#123;printf &quot;%.2f\n&quot;,100-free/3.0&#125;&#x27;<br>echo &quot;memory&quot;<br>svmon|grep memory|awk &#x27;&#123;printf &quot;%.2f\n&quot;,1.0*$3/$2&#125;&#x27;<br>echo &quot;disk&quot;<br>df /u01|sed -n 2p|awk &#x27;&#123;print $4&#125;&#x27;|cut -d &#x27;%&#x27; -f 1<br>echo &quot;Inode&quot;<br>df /u01|sed -n 2p|awk &#x27;&#123;print $6&#125;&#x27;|cut -d &#x27;%&#x27; -f 1<br></code></pre></td></tr></table></figure><h2 id="服务器打开session时显示帮助信息"><a href="#服务器打开session时显示帮助信息" class="headerlink" title="服务器打开session时显示帮助信息"></a>服务器打开session时显示帮助信息</h2><p>将脚本的执行语句写在用户profile中，登录时即可看到帮助信息</p><p>脚本名称：help.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">tput setaf 2<br>tput blink<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;====================测试服务器133======================&quot;</span><br>tput sgr0<br>tput setaf 2<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">--------------**支持dt,hx,sj,js---------------------</span><br><span class="hljs-string"> log-gs**.sh            查看日志</span><br><span class="hljs-string"> re-gs**.sh             重启应用</span><br><span class="hljs-string">--------------**支持dt,hx,sj,js---------------------</span><br><span class="hljs-string"></span><br><span class="hljs-string"> *****    help.sh       呼唤帮助信息      *****&quot;</span><br>tput blink  <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;====================测试服务器133======================&quot;</span><br>tput sgr0<br></code></pre></td></tr></table></figure><h2 id="curl-post中带有变量的脚本"><a href="#curl-post中带有变量的脚本" class="headerlink" title="curl post中带有变量的脚本"></a>curl post中带有变量的脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>username=<span class="hljs-string">&quot;suncle&quot;</span><br>apiKey=<span class="hljs-string">&quot;xxxxxx&quot;</span><br>domain=<span class="hljs-variable">$1</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$domain</span><br><span class="hljs-built_in">date</span>=`<span class="hljs-built_in">date</span> -R -u | awk <span class="hljs-string">&#x27;&#123;print $1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot; &quot;$5&quot; GMT&quot;&#125;&#x27;</span>`<br>password=`<span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;<span class="hljs-variable">$date</span>&quot;</span> | openssl dgst -sha1 -hmac <span class="hljs-variable">$apiKey</span> -binary | openssl enc -<span class="hljs-built_in">base64</span>`<br>curl -i --url <span class="hljs-string">&quot;https://open.chinanetcenter.com/api/report/flow/stream/detail&quot;</span> \<br>-X <span class="hljs-string">&quot;POST&quot;</span> \<br>-u <span class="hljs-variable">$username</span>:<span class="hljs-variable">$password</span> \<br>-H <span class="hljs-string">&quot;Date: <span class="hljs-variable">$date</span>&quot;</span> \<br>-H <span class="hljs-string">&quot;Accept: application/json&quot;</span> \<br>-d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;dateFrom&quot;: &quot;2018-03-01T00:00:00+08:00&quot;,</span><br><span class="hljs-string">    &quot;dateTo&quot;: &quot;2018-03-02T00:00:00+08:00&quot;,</span><br><span class="hljs-string">    &quot;domainStream&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;domain&quot;: &quot;&#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$domain</span>&quot;</span><span class="hljs-string">&#x27;&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ],</span><br><span class="hljs-string">    &quot;dataType&quot;: &quot;bandwidth&quot;,</span><br><span class="hljs-string">    &quot;dataInterval&quot;: &quot;5m&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>参见domain变量的处理：”domain”: “‘“$domain”‘“</p></blockquote><h2 id="金三系统基线包安装部署脚本"><a href="#金三系统基线包安装部署脚本" class="headerlink" title="金三系统基线包安装部署脚本"></a>金三系统基线包安装部署脚本</h2><p><strong>判断weblogic用户和组是否存在，判断&#x2F;weblogic目录是否存在</strong></p><blockquote><p>脚本名称：install-gs-1-init.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>USER_NAME=<span class="hljs-string">&quot;weblogic&quot;</span><br>GROUP_NAME=<span class="hljs-string">&quot;weblogic&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(whoami)</span>&quot;</span> != <span class="hljs-string">&quot;root&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m当前登录用户不是root用户，请使用root用户操作。\033[0m&quot;</span>;<span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m该脚本需在所有应用服务器执行。\033[0m&quot;</span><br><br>testing1=$(egrep <span class="hljs-string">&quot;^<span class="hljs-variable">$&#123;USER_NAME&#125;</span>:&quot;</span> /etc/passwd)<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;testing1&#125;</span>&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>    GROUP_ID=$(egrep <span class="hljs-string">&quot;^<span class="hljs-variable">$&#123;USER_NAME&#125;</span>:&quot;</span> /etc/passwd|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 4)<br>    GROUP_NAME=$(egrep <span class="hljs-string">&quot;:<span class="hljs-variable">$&#123;GROUP_ID&#125;</span>:&quot;</span> /etc/group|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 1)<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m用户<span class="hljs-variable">$&#123;USER_NAME&#125;</span>已存在，用户组为<span class="hljs-variable">$&#123;GROUP_NAME&#125;</span>。\033[0m&quot;</span><br><span class="hljs-keyword">else</span><br>    testing2=$(egrep <span class="hljs-string">&quot;^<span class="hljs-variable">$&#123;GROUP_NAME&#125;</span>:&quot;</span> /etc/group)<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$testing2</span>&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>        useradd -g <span class="hljs-variable">$&#123;GROUP_NAME&#125;</span> <span class="hljs-variable">$&#123;USER_NAME&#125;</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m用户组<span class="hljs-variable">$&#123;GROUP_NAME&#125;</span>存在，但用户<span class="hljs-variable">$&#123;USER_NAME&#125;</span>不存在，已创建。\033[0m&quot;</span><br>    <span class="hljs-keyword">else</span><br>        groupadd <span class="hljs-variable">$&#123;GROUP_NAME&#125;</span>;useradd -g <span class="hljs-variable">$&#123;GROUP_NAME&#125;</span> <span class="hljs-variable">$&#123;USER_NAME&#125;</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m用户组<span class="hljs-variable">$&#123;GROUP_NAME&#125;</span>和用户<span class="hljs-variable">$&#123;USER_NAME&#125;</span>都不存在，均已创建。\033[0m&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -d /weblogic; <span class="hljs-keyword">then</span><br>    CURRENT_TIME=$(<span class="hljs-built_in">date</span> +%Y%m%d%H%M%S)<br>    <span class="hljs-built_in">mv</span> /weblogic /weblogic_<span class="hljs-variable">$&#123;CURRENT_TIME&#125;</span><br>    <span class="hljs-built_in">mkdir</span> -p /weblogic;<span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$&#123;USER_NAME&#125;</span>:<span class="hljs-variable">$&#123;GROUP_NAME&#125;</span> /weblogic<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m目录/weblogic已存在，自动备份为/weblogic_<span class="hljs-variable">$&#123;CURRENT_TIME&#125;</span>，并重新创建空目录/weblogic。\033[0m&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">mkdir</span> -p /weblogic;<span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$&#123;USER_NAME&#125;</span>:<span class="hljs-variable">$&#123;GROUP_NAME&#125;</span> /weblogic<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m目录/weblogic不存在，已创建。\033[0m&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请确认已设置weblogic用户的密码。\033[0m&quot;</span><br></code></pre></td></tr></table></figure><p><strong>解压安装weblogic中间件和jdk并且设置环境变量</strong></p><blockquote><p>脚本名称：install-gs-2-base.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>INITIAL_PATH=<span class="hljs-string">&quot;/tmp/weblogic_initial&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(whoami)</span>&quot;</span> != <span class="hljs-string">&quot;weblogic&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m当前登录用户不是weblogic用户，请使用weblogic用户操作。\033[0m&quot;</span>;<span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m该脚本需在所有应用服务器执行。\033[0m&quot;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -d <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>; <span class="hljs-keyword">then</span><br>    CURRENT_TIME=$(<span class="hljs-built_in">date</span> +%Y%m%d%H%M%S)<br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>_<span class="hljs-variable">$&#123;CURRENT_TIME&#125;</span>&amp;&amp;<span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>&amp;&amp;<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m目录<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>已存在，自动备份为<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>_<span class="hljs-variable">$&#123;CURRENT_TIME&#125;</span>，并重新创建空目录<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>。\033[0m&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>&amp;&amp;<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m目录<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>不存在，已创建。\033[0m&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;请将基础软件包weblogic_base_*.tar.bz2上传到该服务器<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>目录下。\033[31m请使用weblogic用户上传。\033[0m&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m上传完毕后，\033[0m请按任意键继续...&quot;</span><br><span class="hljs-built_in">read</span> -n 1 var<br><br>num=$(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_base_*.tar.bz2|<span class="hljs-built_in">wc</span> -l)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;检测到【<span class="hljs-variable">$&#123;num&#125;</span>】个基础软件包<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_base_*.tar.bz2&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;num&#125;</span> -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请确认是否已正确上传。\033[0m&quot;</span><br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$&#123;num&#125;</span> -gt 1 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请移除多余的base包。\033[0m&quot;</span><br>    <span class="hljs-keyword">else</span><br>        base_package=$(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_base_*.tar.bz2)<br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;包名为\033[32m<span class="hljs-variable">$&#123;base_package&#125;</span>\033[0m&quot;</span><br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认包名是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>            yn=<br>            <span class="hljs-built_in">break</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，包名错误，需要重新上传。\033[0m&quot;</span><br>            yn=<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m处理完毕后，\033[0m请按任意键继续...&quot;</span><br>    <span class="hljs-built_in">read</span> -n 1 var<br>    num=$(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_base_*.tar.bz2|<span class="hljs-built_in">wc</span> -l)<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;开始解压安装包...&quot;</span><br>tar -xjvf <span class="hljs-variable">$&#123;base_package&#125;</span> -C /<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m解压base包到/weblogic完毕。\033[0m&quot;</span><br><br><span class="hljs-built_in">mkdir</span> -p /weblogic/user_projects/domains<br><span class="hljs-built_in">mkdir</span> -p /weblogic/user_projects/scripts<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;~&quot;</span> != <span class="hljs-string">&quot;/weblogic&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cp</span> /weblogic/.bash_profile ~/.bash_profile<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m用户环境变量已经更新，请执行命令source ~/.bash_profile使环境变量生效。\033[0m&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>根据具体服务器情况抽取相应的应用到各台服务器</p><blockquote><p>脚本名称：install-gs-3-gsap.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>INITIAL_PATH=<span class="hljs-string">&quot;/tmp/weblogic_initial&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(whoami)</span>&quot;</span> != <span class="hljs-string">&quot;weblogic&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m当前登录用户不是weblogic用户，请使用weblogic用户操作。\033[0m&quot;</span>;<span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m该脚本只需在【**一台[可任选]**】应用服务器执行。\n\033[0m&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请确认【**所有**】应用服务器都已经成功执行过脚本1和脚本2？\033[0m&quot;</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;已执行过输入Y，否则输入N。&quot;</span> yn<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> != <span class="hljs-string">&quot;Y&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> != <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>    yn=<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m输入不是Y，请先在所有服务器都执行脚本1和脚本2。\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -d <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects; <span class="hljs-keyword">then</span><br>    CURRENT_TIME=$(<span class="hljs-built_in">date</span> +%Y%m%d%H%M%S)<br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects_<span class="hljs-variable">$&#123;CURRENT_TIME&#125;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m目录<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects已存在，自动备份为<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects_<span class="hljs-variable">$&#123;CURRENT_TIME&#125;</span>。\033[0m&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;请将个税应用包weblogic_gsap_*.tar.bz2上传到该服务器<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>目录下&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m上传完毕后，\033[0m请按任意键继续...&quot;</span><br><span class="hljs-built_in">read</span> -n 1 var<br><br>num=$(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_gsap_*.tar.bz2|<span class="hljs-built_in">wc</span> -l)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;检测到【<span class="hljs-variable">$&#123;num&#125;</span>】个个税应用包<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_gsap_*.tar.bz2&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;num&#125;</span> -eq 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请确认是否已正确上传。\033[0m&quot;</span><br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$&#123;num&#125;</span> -gt 1 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请移除多余的gsap包。\033[0m&quot;</span><br>    <span class="hljs-keyword">else</span><br>        gsap_package=$(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_gsap_*.tar.bz2)<br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;包名为\033[32m<span class="hljs-variable">$&#123;gsap_package&#125;</span>\033[0m&quot;</span><br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认包名是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>            yn=<br>            <span class="hljs-built_in">break</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，包名错误，需要重新上传。\033[0m&quot;</span><br>            yn=<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m处理完毕后，\033[0m请按任意键继续...&quot;</span><br>    <span class="hljs-built_in">read</span> -n 1 var<br>    num=$(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/weblogic_gsap_*.tar.bz2|<span class="hljs-built_in">wc</span> -l)<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;开始解压安装包...&quot;</span><br>tar -xjvf <span class="hljs-variable">$&#123;gsap_package&#125;</span> -C <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m解压gsap包到<span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>完毕。\033[0m&quot;</span><br><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m开始安装管理节点应用：\n\033[0m&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入【管理节点】所在服务器的IP：&quot;</span> IP_gl<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;输入的\033[32m【管理节点】\033[0m所在服务器<span class="hljs-variable">$&#123;i&#125;</span>的IP为：\033[32m【<span class="hljs-variable">$&#123;IP_gl&#125;</span>】\033[0m&quot;</span> <br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>        yn=<br>        <span class="hljs-built_in">break</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，设置有误，需要重新输入。\033[0m&quot;</span><br>        yn=<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;【管理节点】所在服务器(IP：<span class="hljs-variable">$&#123;IP_gl&#125;</span>)包含应用为：&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;个税管理：gsadmin_domain&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;开始抽取管理节点domain到<span class="hljs-variable">$&#123;IP_gl&#125;</span>/weblogic/user_projects/domains，请耐心等待。&quot;</span><br>scp -r <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gsadmin_domain <span class="hljs-variable">$&#123;IP_gl&#125;</span>:/weblogic/user_projects/domains<br>scp -r <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/*-gsadmin.sh <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/upgrade-*.sh <span class="hljs-variable">$&#123;IP_gl&#125;</span>:/weblogic/user_projects/scripts<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m管理节点应用抽取完毕。\n\033[0m&quot;</span><br><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m开始安装前端应用：\n\033[0m&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入【前端】服务器台数(注意：只能是1/2/3/4四种情况之一)：&quot;</span> number_qd<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$number_qd</span>&quot;</span> != <span class="hljs-string">&quot;1&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$number_qd</span>&quot;</span> != <span class="hljs-string">&quot;2&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$number_qd</span>&quot;</span> != <span class="hljs-string">&quot;3&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$number_qd</span>&quot;</span> != <span class="hljs-string">&quot;4&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;输入服务器台数\033[31m【<span class="hljs-variable">$number_qd</span>】\033[0m，输入有误，需要重新输入。&quot;</span><br>        <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;设置【前端】服务器\033[32m【<span class="hljs-variable">$number_qd</span>】\033[0m台。&quot;</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认设置是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>        yn=<br>        <span class="hljs-built_in">break</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，设置有误，需要重新输入。\033[0m&quot;</span><br>        yn=<br>        <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> (( i=1; i&lt;=<span class="hljs-variable">$number_qd</span>; i=i+1 ))<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入【前端】服务器<span class="hljs-variable">$&#123;i&#125;</span>的IP：&quot;</span> IP_qd<br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;输入的【前端】服务器<span class="hljs-variable">$&#123;i&#125;</span>的IP为：\033[32m【<span class="hljs-variable">$&#123;IP_qd&#125;</span>】\033[0m&quot;</span> <br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>            yn=<br>            <span class="hljs-built_in">break</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，设置有误，需要重新输入。\033[0m&quot;</span><br>            yn=<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;【前端】服务器<span class="hljs-variable">$&#123;i&#125;</span> (IP：<span class="hljs-variable">$&#123;IP_qd&#125;</span>)包含应用为：&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;个税大厅：gsdt0$[ i ]_domain、gsdt0$[ i + number_qd ]_domain；查询统计：cxtj0$[ i ]_domain；&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;开始抽取需要的domain到<span class="hljs-variable">$&#123;IP_qd&#125;</span>:/weblogic/user_projects/domains，请耐心等待。&quot;</span><br>scp -r <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gsdt0$[ i ]_domain <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gsdt0$[ i + number_qd ]_domain  <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/cxtj0$[ i ]_domain <span class="hljs-variable">$&#123;IP_qd&#125;</span>:/weblogic/user_projects/domains<br>scp -r <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/*-gsdt.sh <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/*-cxtj.sh  <span class="hljs-variable">$&#123;IP_gl&#125;</span>:/weblogic/user_projects/scripts<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m前端应用抽取完毕。\n\033[0m&quot;</span><br><span class="hljs-keyword">done</span><br><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m开始安装后端应用：\n\033[0m&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入【后端】服务器台数(注意：只能是1/2/3/4四种情况之一)：&quot;</span> number_hd<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$number_hd</span>&quot;</span> != <span class="hljs-string">&quot;1&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$number_hd</span>&quot;</span> != <span class="hljs-string">&quot;2&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$number_hd</span>&quot;</span> != <span class="hljs-string">&quot;3&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$number_hd</span>&quot;</span> != <span class="hljs-string">&quot;4&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;输入服务器台数\033[31m【<span class="hljs-variable">$number_hd</span>】\033[0m，输入有误，需要重新输入。&quot;</span><br>        <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span>   <br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;设置【后端】服务器\033[32m【<span class="hljs-variable">$number_hd</span>】\033[0m台。&quot;</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认设置是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>        yn=<br>        <span class="hljs-built_in">break</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，设置有误，需要重新输入。\033[0m&quot;</span><br>        yn=<br>        <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> (( i=1; i&lt;=<span class="hljs-variable">$number_hd</span>; i=i+1 ))<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入【后端】服务器<span class="hljs-variable">$&#123;i&#125;</span>的IP：&quot;</span> IP_hd<br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;输入的【后端】服务器<span class="hljs-variable">$&#123;i&#125;</span>的IP为：\033[32m【<span class="hljs-variable">$&#123;IP_hd&#125;</span>】\033[0m&quot;</span> <br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请确认是否正确？正确输入Y，否则输入N。&quot;</span> yn<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;Y&quot;</span> -o  <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span><br>            yn=<br>            <span class="hljs-built_in">break</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m输入不是Y，设置有误，需要重新输入。\033[0m&quot;</span><br>            yn=<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;【后端】服务器<span class="hljs-variable">$&#123;i&#125;</span> (IP：<span class="hljs-variable">$&#123;IP_hd&#125;</span>)包含应用为：&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;个税核心：gshx0$[ i ]_domain、gshx0$[ i + number_hd ]_domain；个税工作流：gswf0$[ i ]_domain；个税间接登记：gsjjdj0$[ i ]_domain&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;开始抽取需要的domain到<span class="hljs-variable">$&#123;IP_hd&#125;</span>:/weblogic/user_projects/domains，请耐心等待。&quot;</span><br>scp -r <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gshx0$[ i ]_domain <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gshx0$[ i + number_hd ]_domain <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gswf0$[ i ]_domain <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/domains/gsjjdj0$[ i ]_domain <span class="hljs-variable">$&#123;IP_hd&#125;</span>:/weblogic/user_projects/domains<br>scp -r <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/*-gshx.sh <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/*-gswf.sh <span class="hljs-variable">$&#123;INITIAL_PATH&#125;</span>/user_projects/scripts/*-gsjjdj.sh <span class="hljs-variable">$&#123;IP_gl&#125;</span>:/weblogic/user_projects/scripts<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m后端应用抽取完毕。\n\033[0m&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m安装完毕。\n\033[0m&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m请根据说明文档继续手工修改某些配置。\n\033[0m&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Linux命令集锦</title>
    <link href="/2019/03/30/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E9%9B%86%E9%94%A6/"/>
    <url>/2019/03/30/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<p>常用linux命令:</p><ul><li>随机数</li><li>时间</li><li>ip</li><li>日志分析</li><li>硬件信息</li><li>进程端口</li><li>调整分区大小</li></ul><span id="more"></span><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>生成10以内的随机数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$RANDOM</span>%10 | bc<br></code></pre></td></tr></table></figure><p>生成11-20之间的随机数</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">echo $(($(<span class="hljs-keyword">date</span> +%s)%11+<span class="hljs-number">20</span><span class="hljs-number">-11</span>))<br></code></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>获取当前系统的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span>|<span class="hljs-built_in">cut</span> -c 1-26  <span class="hljs-comment"># 2016年 07月 23日 星期六 19:12:40</span><br></code></pre></td></tr></table></figure><p>查看硬件时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hwclock<br></code></pre></td></tr></table></figure><p>修改系统时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2019-03-29 13:58:00&quot;</span> <br></code></pre></td></tr></table></figure><p>将系统时间同步到硬件时间</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hwclock <span class="hljs-comment">--systohc</span><br></code></pre></td></tr></table></figure><h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prcdo ~]<span class="hljs-comment"># curl ipinfo.io/json</span><br>&#123;<br>  <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;138.68.1.61&quot;</span>,<br>  <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;Santa Clara&quot;</span>,<br>  <span class="hljs-string">&quot;region&quot;</span>: <span class="hljs-string">&quot;California&quot;</span>,<br>  <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;US&quot;</span>,<br>  <span class="hljs-string">&quot;loc&quot;</span>: <span class="hljs-string">&quot;37.3501,-121.9850&quot;</span>,<br>  <span class="hljs-string">&quot;postal&quot;</span>: <span class="hljs-string">&quot;95051&quot;</span>,<br>  <span class="hljs-string">&quot;org&quot;</span>: <span class="hljs-string">&quot;AS14061 DigitalOcean, LLC&quot;</span><br>&#125;<br><br>[root@prcdo ~]<span class="hljs-comment"># curl ip.cn</span><br>当前 IP：138.68.1.61 来自：美国 DigitalOcean<br><br>[root@prcdo ~]<span class="hljs-comment"># curl ip.tl</span><br>IP: 138.68.1.61<br>DigitalOcean, LLC (AS14061) New York New York United States<br></code></pre></td></tr></table></figure><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>日志分析命令：</p><ul><li>去重： uniq</li><li>排序： sort</li><li>统计： wc</li><li>筛选： awk</li><li>查找： grep</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看日志去除重复</span><br><span class="hljs-built_in">cat</span> catalina.out |grep <span class="hljs-string">&quot;xxxxx&quot;</span>|awk -F <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span><br><br><span class="hljs-comment"># 统计去除重复的行数</span><br><span class="hljs-built_in">cat</span> catalina.out |grep <span class="hljs-string">&quot;xxxxx&quot;</span>|awk -F <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span>|<span class="hljs-built_in">wc</span> -l <br> <br><span class="hljs-comment"># 查询日志大于某一个时间点的日志,并且去重复</span><br><span class="hljs-built_in">cat</span> catalina.out | grep <span class="hljs-string">&quot;xxxxxxxx&quot;</span>|awk <span class="hljs-string">&#x27;($0&gt;&quot;05-19 18:20:00&quot;)&#123;print $0&#125;&#x27;</span>|awk -F <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span><br><br><span class="hljs-comment"># 统计行数</span><br><span class="hljs-built_in">cat</span> catalina.out | grep <span class="hljs-string">&quot;xxxxxxxx&quot;</span>|awk <span class="hljs-string">&#x27;($0&gt;&quot;05-19 18:20:00&quot;)&#123;print $0&#125;&#x27;</span>|awk -F <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span>|<span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 获取disqus-proxy代理日志中的去重文章数量</span><br>grep <span class="hljs-string">&quot;Get Comments with identifier&quot;</span> disqus-proxy.log | awk <span class="hljs-string">&#x27;&#123;print $10&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> |<span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h2 id="硬件信息"><a href="#硬件信息" class="headerlink" title="硬件信息"></a>硬件信息</h2><p>截取top命令中的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -n 1|grep <span class="hljs-string">&#x27;top -&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>  <span class="hljs-comment"># 19:12:19</span><br></code></pre></td></tr></table></figure><p>截取top命令中三次cpu利用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -n 3 b|grep <span class="hljs-string">&#x27;Cpu(s)&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1<br></code></pre></td></tr></table></figure><p>截取top命令中三次cpu利用率的平均值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -n 3 b|grep <span class="hljs-string">&#x27;Cpu(s)&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1|awk <span class="hljs-string">&#x27;&#123;sum+= $1&#125; END &#123;printf &quot;%.2f\n&quot;,sum/3&#125;&#x27;</span>  <span class="hljs-comment"># 输出的0.13就是百分比，即cpu使用率是0.13%</span><br></code></pre></td></tr></table></figure><p>截取free命令中的内存使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">free|grep <span class="hljs-string">&#x27;Mem:&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;realused=$3-$6-$7&#125; END &#123;printf &quot;%.2f\n&quot;,realused*100/$2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>截取df命令中的&#x2F;dev&#x2F;sda3磁盘使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span>|grep <span class="hljs-string">&#x27;/dev/sda3&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1  <span class="hljs-comment"># 第5项就是磁盘使用率</span><br></code></pre></td></tr></table></figure><p>截取df -i命令中的&#x2F;dev&#x2F;sda3的Inode使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -i|grep <span class="hljs-string">&#x27;/dev/sda3&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1  <span class="hljs-comment"># df -i显示的就是各个磁盘Inode的使用率，其中第5项就是Inode使用率 </span><br></code></pre></td></tr></table></figure><p>截取df命令中的挂载在根目录下面的磁盘的使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span>|awk <span class="hljs-string">&#x27;&#123;if ($6==&quot;\/&quot;) print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1  <span class="hljs-comment"># awk: 警告: 转义序列“\/”被当作单纯的“/”</span><br><span class="hljs-built_in">df</span>|awk <span class="hljs-string">&#x27;&#123;if(length($6)==1) print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1<br></code></pre></td></tr></table></figure><p>截取df命令中的挂载在根目录下面的磁盘的Inode使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -i|awk <span class="hljs-string">&#x27;&#123;if ($6==&quot;\/&quot;) print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1  <span class="hljs-comment"># awk: 警告: 转义序列“\/”被当作单纯的“/”</span><br><span class="hljs-built_in">df</span> -i|awk <span class="hljs-string">&#x27;&#123;if(length($6)==1) print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;%&#x27;</span> -f 1<br></code></pre></td></tr></table></figure><p>find查询结果文件的大小求和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;grsds.log.2016-08*&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -lh &#123;&#125; \;|awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;M&#x27;</span> -f 1|awk <span class="hljs-string">&#x27;&#123;sum+=$1&#125; END &#123;printf &quot;%.2f\n&quot;,sum/1024.0&#125;&#x27;</span>  <span class="hljs-comment"># 已G为单位</span><br></code></pre></td></tr></table></figure><p>查看物理CPU个数、核数、逻辑CPU个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 物理CPU：实际服务器中插槽上的CPU个数</span><br><span class="hljs-comment"># CPU核数：一块CPU上面能处理数据的芯片组的数量</span><br><span class="hljs-comment"># 逻辑CPU：一般来说，物理CPU个数×每颗核数就应该等于逻辑CPU的个数，如果不相等的话，则表示服务器的CPU支持超线程技术 </span><br><span class="hljs-comment"># 总核数 = 物理CPU个数 X 每颗物理CPU的核数 </span><br><span class="hljs-comment"># 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</span><br><br><span class="hljs-comment"># 查看物理CPU个数</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;physical id&quot;</span>| <span class="hljs-built_in">sort</span>| <span class="hljs-built_in">uniq</span>| <span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 查看每个物理CPU中core的个数(即核数)</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;cpu cores&quot;</span>| <span class="hljs-built_in">uniq</span><br><br><span class="hljs-comment"># 查看逻辑CPU的个数</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;processor&quot;</span>| <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h2 id="进程端口"><a href="#进程端口" class="headerlink" title="进程端口"></a>进程端口</h2><p>根据端口号查看占用端口的进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@localhost domains]$ lsof -i:8999<br>COMMAND   PID     USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME<br>java    23256 weblogic  130u  IPv6 22077351      0t0  TCP 192.168.31.72:39609-&gt;192.168.31.72:bctp (ESTABLISHED)<br>java    23256 weblogic  131u  IPv6 22077353      0t0  TCP 192.168.31.72:39610-&gt;192.168.31.72:bctp (ESTABLISHED)<br>java    23256 weblogic  132u  IPv6 22077357      0t0  TCP 192.168.31.72:39611-&gt;192.168.31.72:bctp (ESTABLISHED)<br>java    23256 weblogic  133u  IPv6 22077359      0t0  TCP 192.168.31.72:39612-&gt;192.168.31.72:bctp (ESTABLISHED)<br>[weblogic@localhost domains]$ ps -ef | grep 23256<br>weblogic  5777  5745  0 17:04 pts/1    00:00:00 grep --color 23256<br>weblogic 23256     1  1  2016 ?        05:19:04 java -jar netbridge-client-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>根据进程名称查看进程号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@localhost domains]$ ps -ef | grep netbridge<br>weblogic  5811  5745  0 17:16 pts/1    00:00:00 grep --color netbridge<br>weblogic 20109     1  2  2016 ?        10:31:37 java -jar netbridge-server-0.0.1-SNAPSHOT.jar<br>weblogic 20141     1  1  2016 ?        05:32:17 java -jar netbridge-client-0.0.1-SNAPSHOT.jar<br>weblogic 23234     1  1  2016 ?        05:19:17 java -jar netbridge-server-0.0.1-SNAPSHOT.jar<br>weblogic 23256     1  1  2016 ?        05:19:12 java -jar netbridge-client-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>根据进程号查看端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@localhost domains]$ netstat -anp | grep 23256<br>(Not all processes could be identified, non-owned process info<br> will not be shown, you would have to be root to see it all.)           <br>tcp        0      0 ::ffff:192.168.31.72:39539  ::ffff:192.168.31.72:8999   ESTABLISHED 23256/java          <br>tcp        0      0 ::ffff:192.168.31.72:39545  ::ffff:192.168.31.72:8999   ESTABLISHED 23256/java          <br>tcp        0      0 ::ffff:192.168.31.72:39559  ::ffff:192.168.31.72:8999   ESTABLISHED 23256/java          <br>unix  2      [ ]         STREAM     CONNECTED     22077363 23256/java  <br></code></pre></td></tr></table></figure><h2 id="调整分区大小"><a href="#调整分区大小" class="headerlink" title="调整分区大小"></a>调整分区大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>/dev/mapper/vg_cs01-lv_home<br>                      399G  200M  378G   1% /home<br>[root@cs02 /]<span class="hljs-comment"># umount /home</span><br>[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>[root@cs02 /]<span class="hljs-comment"># mount /home</span><br>[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>/dev/mapper/vg_cs01-lv_home<br>                      399G  200M  378G   1% /home<br>[root@cs02 /]<span class="hljs-comment"># umount /home</span><br>[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>[root@cs02 /]<span class="hljs-comment"># resize2fs -p /dev/mapper/vg_cs01-lv_home 50G</span><br>resize2fs 1.41.12 (17-May-2010)<br>请先运行 <span class="hljs-string">&#x27;e2fsck -f /dev/mapper/vg_cs01-lv_home&#x27;</span>.<br><br>[root@cs02 /]<span class="hljs-comment"># e2fsck -f /dev/mapper/vg_cs01-lv_home</span><br>e2fsck 1.41.12 (17-May-2010)<br>第一步: 检查inode,块,和大小<br>第二步: 检查目录结构<br>第3步: 检查目录连接性<br>Pass 4: Checking reference counts<br>第5步: 检查簇概要信息<br>/dev/mapper/vg_cs01-lv_home: 36/26509312 files (0.0% non-contiguous), 1714751/106011648 blocks<br>[root@cs02 /]<span class="hljs-comment"># resize2fs -p /dev/mapper/vg_cs01-lv_home 50G</span><br>resize2fs 1.41.12 (17-May-2010)<br>Resizing the filesystem on /dev/mapper/vg_cs01-lv_home to 13107200 (4k) blocks.<br>Begin pass 2 (max = 32991)<br>正在重定位块            XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<br>Begin pass 3 (max = 3236)<br>正在扫描inode表          XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<br>Begin pass 4 (max = 10)<br>正在更新inode引用       XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<br>The filesystem on /dev/mapper/vg_cs01-lv_home is now 13107200 blocks long.<br><br>[root@cs02 /]<span class="hljs-comment"># mount /home</span><br>[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>/dev/mapper/vg_cs01-lv_home<br>                       50G  181M   47G   1% /home<br>[root@cs02 /]<span class="hljs-comment"># lvreduce -L 50G /dev/mapper/vg_cs01-lv_home</span><br>  WARNING: Reducing active and open logical volume to 50.00 GiB<br>  THIS MAY DESTROY YOUR DATA (filesystem etc.)<br>Do you really want to reduce lv_home? [y/n]: y<br>  Reducing logical volume lv_home to 50.00 GiB<br>  Logical volume lv_home successfully resized<br>[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>/dev/mapper/vg_cs01-lv_home<br>                       50G  181M   47G   1% /home<br>[root@cs02 /]<span class="hljs-comment"># vgdisplay</span><br>  --- Volume group ---<br>  VG Name               vg_cs01<br>  System ID             <br>  Format                lvm2<br>  Metadata Areas        1<br>  Metadata Sequence No  5<br>  VG Access             <span class="hljs-built_in">read</span>/write<br>  VG Status             resizable<br>  MAX LV                0<br>  Cur LV                3<br>  Open LV               3<br>  Max PV                0<br>  Cur PV                1<br>  Act PV                1<br>  VG Size               462.11 GiB<br>  PE Size               4.00 MiB<br>  Total PE              118299<br>  Alloc PE / Size       27572 / 107.70 GiB<br>  Free  PE / Size       90727 / 354.40 GiB<br>  VG UUID               pNF2xf-FCVn-GRTw-841J-4kJN-V6kg-4ux3OD<br>   <br>[root@cs02 /]<span class="hljs-comment"># lvextend -L +349G /dev/mapper/vg_cs01-lv_root</span><br>  Extending logical volume lv_root to 399.00 GiB<br>  Logical volume lv_root successfully resized<br>[root@cs02 /]<span class="hljs-comment"># df -h</span><br>文件系统      容量  已用  可用 已用%% 挂载点<br>/dev/mapper/vg_cs01-lv_root<br>                       50G  2.1G   45G   5% /<br>tmpfs                 3.8G     0  3.8G   0% /dev/shm<br>/dev/sda2             485M   37M  423M   9% /boot<br>/dev/sda1             200M  260K  200M   1% /boot/efi<br>/dev/mapper/vg_cs01-lv_home<br>                       50G  181M   47G   1% /home<br>[root@cs02 /]<span class="hljs-comment"># resize2fs -p /dev/mapper/vg_cs01-lv_root</span><br>resize2fs 1.41.12 (17-May-2010)<br>Filesystem at /dev/mapper/vg_cs01-lv_root is mounted on /; on-line resizing required<br>old desc_blocks = 4, new_desc_blocks = 25<br>Performing an on-line resize of /dev/mapper/vg_cs01-lv_root to 104595456 (4k) blocks.<br>The filesystem on /dev/mapper/vg_cs01-lv_root is now 104595456 blocks long.<br><br>[root@cs02 /]<span class="hljs-comment"># resize2fs -p /dev/mapper/vg_cs01-lv_root</span><br>resize2fs 1.41.12 (17-May-2010)<br>The filesystem is already 104595456 blocks long.  Nothing to <span class="hljs-keyword">do</span>!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>海底捞的经营哲学</title>
    <link href="/2019/03/10/%E6%B5%B7%E5%BA%95%E6%8D%9E%E7%9A%84%E7%BB%8F%E8%90%A5%E5%93%B2%E5%AD%A6/"/>
    <url>/2019/03/10/%E6%B5%B7%E5%BA%95%E6%8D%9E%E7%9A%84%E7%BB%8F%E8%90%A5%E5%93%B2%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>在京东选书为了满减凑单入了这本《海底捞的经营哲学》，和《飘》不同，这本书比较薄，全书只有200页，很快就看完了，但是内容涉及到了海底捞的方方面面，，当然这也就导致这本书不可能对每个方面都说得很细致。下面是这本书的大致提纲：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/normal/Haidilao-management-philosophy-outline.png" alt="海底捞的经营哲学提纲"></p><span id="more"></span><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>海底捞的起源有其必然性也有其偶然性。从必然性来看，2000年以后中国经济快速发展，人民生活日益富裕，有足够的资本投入在高品位高质量的餐饮产品。符合传统文化同时保证品质、服务优质的海底捞火锅才得以从各大餐饮品牌中脱颖而出。从偶然性来看，创始人张勇在创业初期非常注重每位到店的客人，尽管火锅的味道没有多大的优势，但是结账时客人总是在称赞，张勇当时就认为是他的服务赢得了客人的认可。于是，海底捞以服务起家，有了自己标准的接待动作：右手抚心，腰微弯，面带自然笑容，左手前伸请客人进店。这就类似于苹果掉在牛顿的头上之后发现了万有引力定律。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>有良好的定位才能有良好的开端，才是成功的一半。定位是一种营销战略理念，无论是一个国家，一个企业还是一个个人，为了获取成功都必须自我经营，自我推销，因而也都会有一个准确定位的问题。但是多数想要创业的人或者团队都只有一个不具体的想法，也不清楚自己到底想达到什么样的成就。每天都在各种不切实际的空想中度过。</p><p>准确进行市场分析是成功进行定位的基础。若心中决定做好一个项目，应该大胆付诸实行。而付诸实行的第一步不是立刻投资，也不是立刻动手做某件具体的事情。而是先做调研和资料搜集，需要严谨的可行性报告。</p><p>需要认清自己，选择好起步的规模：有些投资者有强大的经济基础，他们的起点就会很高，可能会加盟一些品牌连锁店。还有一些人是中等投资人，比如说一个在大公司上班的人，且通常有教育基础，懂得钱滚钱的投资手法，通常这类人都有一些闲钱，其能力足以创业。但这类人所有的钱还不足以开公司，他们可开一家精致的中小型的店。</p><p>至于没有多少资本创业的人，还是得好好工作，毕竟工资是最稳定的现金流。当然顺带玩下股票也是一个不错的投资手段。</p><p>关于如何定位这个问题，主要是需要把握顾客最迫切的需求。这就涉及到了产品卖点的三个具体的方面：</p><ol><li>解决用户的痛点</li><li>满足用户的爽点</li><li>迎合用户的痒点</li></ol><p>关于这三个方面具体的含义以及每个方面要怎么做，可以参考文章底部的知乎链接。我第一次了解到这个概念是洋神在2018年公司年会上的产品讲述。</p><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><p>基于定位，一步一个脚印向前开进，同时不断丰富产品的卖点。从切入时的一个方面，慢慢满足上面的提到的两到三个方面，牛逼的产品是可以同时满足三个方面的。因此在发展阶段可以做这几件事情：</p><ol><li>基于产品卖点打开突破口</li><li>会搞事情，玩点新花样</li><li>多点想象力（后话）</li></ol><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>结合海底捞的管理和日常工作经验，可以具体到以下几点：</p><ul><li><p>平等文化：比如阿里的花名和麦当劳的直呼其名</p></li><li><p>为员工解决后顾之忧：钱给够</p></li><li><p>让员工工作舒服且有成就感：在保证项目进度的情况下，适当的下发一些有成就感的任务</p></li><li><p>权力下发：管理者需要懂得放权</p></li><li><p>明确公司目标，并制定公司OKR，具体到团队OKR，个人OKR</p></li><li><p>学会激励员工：项目挑战包其实挺有用，虽然多数公司是没有的</p></li><li><p>用人不疑，疑人不用：工程师文化的团队的一个显著特征就是放权给员工（比如程序员）</p></li><li><p>工作周报和月报这些都是不错的督促手段</p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>世界上只有一个海底捞，照搬海底捞的模式再造一个海底捞是不太现实的，一个行业的蛋糕就那么多，用相同的模式在同一个行业并不会增加蛋糕的总量，而只是在和海底捞抢蛋糕而已，这样大概率是抢不过的。</p><p>但是所有的模式本质其实都是方法论，将这些方法论搬到一个蛋糕尚且不那么大的行业，这种复制又是可行的。</p><p>最后以泰戈尔的一句诗结束此篇：</p><blockquote><p>只有经过地狱般的磨练，才能练出创造天堂的力量；</p><p>只有流过血的手指，才能弹出世间的绝唱。</p></blockquote><hr><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/35092885">痛点、爽点和痒点，你的产品解决了哪个点？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>创业</tag>
      
      <tag>经营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人间失格</title>
    <link href="/2019/03/02/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/"/>
    <url>/2019/03/02/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">每天面对相同的事情<br>只需遵从昨天的习性不要过度欢喜<br>自然就不会感到极度的悲哀<br>为了躲开前方的绊脚石<br>蟾蜍迂回前行</blockquote><span id="more"></span><p>这是法国诗人夏尔·库洛的一首诗。在小说三分之二篇幅处，主人公叶藏借蟾蜍以自喻，此时的叶藏有了新的身份：杂志社记者静子的男妾，小女孩茂子的继父。从此开始了一段短暂的一边作画挣钱一边陪茂子玩耍但内心仍然阴暗的生活。</p><p>整篇小说里，太宰治都在同时描述叶藏内心的真实经历和世人眼中的叶藏，这也是小说的两条对比鲜明的主线。</p><p>叶藏内心的真实世界是从认识世界到害怕世界，恐惧绝望但仍会去挣扎，遇见希望但希望又破灭，最后彻底的绝望。而世人眼中的叶藏是一个极其混蛋的人，在当小白脸，玩女人，酗酒，吸毒这四件事情之中无限循环，最后直至死亡。</p><p>内心的绝望和躯体的死亡，最终失去了当一个人的资格。《人间失格》的英文翻译No Longer Human，翻译得恰到好处。</p><p>我从未完整的读过日本小说，读《人间失格》时完全不会像读四大名著那样去记忆小说中的人物关系和故事情节，只会感觉到所有发生在叶藏身上的事情，我都感同身受，这种震撼是读其他小说不曾有过的。坐在浦东图书馆的这个阴雨天的下午，仔细回想了这些年发生在自己身上的事情，和叶藏的经历真的是出奇的相似。</p><p><strong>小说中的叶藏</strong></p><ul><li>依靠扮演小丑保住和人类的最后一丝联系。</li><li>迎合所有人，害怕拒绝别人。</li><li>通过奇异又另类的肢体动作逗笑别人，成功地演出了别人眼中的恶作剧。但真实的性格却恰恰相反。</li><li>害怕别人识破自己的故意表演，一旦被识破，就会感到羞涩，不安和恐惧。</li><li>对待滑稽的逗笑，女人的反应似乎比男人更随便一些，但在扮演小丑时，男人从来不会哈哈大笑，而女人从来不知什么叫“适可而止”。</li><li>表面欢快，内心抑郁。将真实的自己隐藏在内心深处。</li></ul><p><strong>从前的我</strong></p><ul><li>课堂上冷不丁的俏皮话引得哄堂大笑，差不多每节物理课都来那么一次。</li><li>装傻装口误，会说一些不是自己内心真实想法还会引起误会的话，然后解释，掩盖。但其实一切都是已经准备好的，话说出口之前，在心里面早已酝酿完毕。</li><li>滑稽的躯体动作和和像蛇一样奇怪的走路姿势吸引女生注意，在那几年里真的成了自己都没察觉的习惯。</li><li>会因为被别人怀疑为故意的或者被彻底识破而面红耳赤。</li><li>手放在哪里都不合适，见到谁都只会一直笑，其实是尴尬。</li><li>从来没有人能真正看懂我，包括我自己，直到读了《人间失格》，畸形的心理。</li></ul><p>从前的我和现在的我已经截然不同了，即使我在这里写下我从前的奇怪行为，也只有少数的几个人可能还有印象。仔细想来，改变应该是发生在高中，然后一直持续到最近。为了那个我到现在都不清楚为什么的虚无缥缈的强制改变的承诺。庆幸的是，我并没有像叶藏一样走上那样的不归路，在此感谢某些人。</p><p>其实吧，人只要能活着就行。</p><p>写在最后，寻找走在路上的驴。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人间失格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Best practice on when to use the wrapper class and primitive type in Java</title>
    <link href="/2019/01/22/best-practice-on-when-to-use-the-wrapper-class-and-primitive-type-in-java/"/>
    <url>/2019/01/22/best-practice-on-when-to-use-the-wrapper-class-and-primitive-type-in-java/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Best practice on when to use the wrapper class and primitive type in Java</strong></p></blockquote><p>四个概念：</p><ul><li>primitive type：原始类型</li><li>wrapper class：包装类型</li><li>autoboxing：自动包装</li><li>unboxing：解包</li></ul><p>对应关系：</p><table><thead><tr><th>Primitive type</th><th>Wrapper class</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><p>在 Effective Java 的第五项中, Joshua Bloch 有这样的观点：</p><blockquote><p>The lesson is clear: <strong>prefer primitives to boxed primitives, and watch out for unintentional autoboxing</strong>.</p></blockquote><p>意思就是：相对于 <code>boxed primitive</code> 更喜欢 <code>primitive</code>，并且需要注意无意识的 <strong>autoboxing</strong> 机制。</p><p>类的一个很好的用途是作为泛型类型（包括Collection类，比如list和map），或者当你想要将它们转化为其他类型而不进行隐式转换时（例如 <code>Intege类</code>具有方法 <code>doubleValue()</code> or <code>byteValue()</code>）。</p><p>因此，最佳实践是能使用primitive的都用primitive，除非你正在处理泛型（确保你知道 autoboxing 和 unboxing）</p><span id="more"></span><h1 id="使用-primitive"><a href="#使用-primitive" class="headerlink" title="使用 primitive"></a>使用 primitive</h1><p>在以下几种情况下使用 primitive</p><h2 id="primitive-性能更好"><a href="#primitive-性能更好" class="headerlink" title="primitive 性能更好"></a>primitive 性能更好</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//隐式的降低程序速度</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;<br>         sum += i;<br>    &#125;<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序虽然能得到正确 <code>sum</code> ，但是效率比理论中会慢很多。变量 <code>sum</code> 被定义成了Long而不是 <code>long</code> ，这就意味着程序构建了 2^31 次没必要的 <code>Long</code> 实例（每次 <code>long i</code> 被加到 <code>Long sum</code> 上时算一次）。将<code>sum</code> 的类型从 <code>Long</code> 改为 <code>long</code>，程序时间可以达到数量级的缩减。</p><h2 id="primitive-可读性更高"><a href="#primitive-可读性更高" class="headerlink" title="primitive 可读性更高"></a>primitive 可读性更高</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (!a.equals(b)) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (c != d) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代码中的两种相等比较，多数人都会认为第二种更易读，对于先上手 C++ &#x2F; Python 的人更是这样。</p><h2 id="使用-primitive-可以避免一些错误"><a href="#使用-primitive-可以避免一些错误" class="headerlink" title="使用 primitive 可以避免一些错误"></a>使用 primitive 可以避免一些错误</h2><p>如果不了解 <code>wrapper class</code> 中的一些机制，会遇到一些莫名其妙的问题 </p><h3 id="莫名其妙的-NullPointException"><a href="#莫名其妙的-NullPointException" class="headerlink" title="莫名其妙的 NullPointException"></a>莫名其妙的 NullPointException</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>;<br>...<br><span class="hljs-type">int</span> <span class="hljs-variable">myValue</span> <span class="hljs-operator">=</span> getValue(); <span class="hljs-comment">// getValue返回null时就会抛出NPE</span><br></code></pre></td></tr></table></figure><p>这个代码可以编译通过，但是会抛出空指针异常。<code>int b = a</code>实际上是<code>int b = a.intValue()</code>，由于a的引用值为null，在空对象上调用方法就会抛出NPE。</p><h3 id="wrapper-class-的引用相等性"><a href="#wrapper-class-的引用相等性" class="headerlink" title="wrapper class 的引用相等性"></a>wrapper class 的引用相等性</h3><p>在Java中，<code>==</code> 符号判断的内存地址所对应的值的相等性，具体来说，基本类型判断值是否相等，引用类型判断其指向的地址是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>System.out.println(a1 == a2); <span class="hljs-comment">// true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">222</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">222</span>;<br>System.out.println(b1 == b2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>这两段代码的结果是不同的，具体需要看下 java.lang.Integer 的 <code>valueOf</code> 方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Native;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an &#123;<span class="hljs-doctag">@code</span> Integer&#125; instance representing the specified</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> int&#125; value.  If a new &#123;<span class="hljs-doctag">@code</span> Integer&#125; instance is not</span><br><span class="hljs-comment">     * required, this method should generally be used in preference to</span><br><span class="hljs-comment">     * the constructor &#123;<span class="hljs-doctag">@link</span> #Integer(int)&#125;, as this method is likely</span><br><span class="hljs-comment">     * to yield significantly better space and time performance by</span><br><span class="hljs-comment">     * caching frequently requested values.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * This method will always cache values in the range -128 to 127,</span><br><span class="hljs-comment">     * inclusive, and may cache other values outside of this range.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  i an &#123;<span class="hljs-doctag">@code</span> int&#125; value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an &#123;<span class="hljs-doctag">@code</span> Integer&#125; instance representing &#123;<span class="hljs-doctag">@code</span> i&#125;.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span>  1.5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>            <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The value of the &#123;<span class="hljs-doctag">@code</span> Integer&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>valueOf</code> 方法会缓存 -128 到 127 之间的值，因此第一段代码会取到的是同一个对象，第二段代码会创建两个对象且地址不一样，因此导致的结果不同。</p><h1 id="使用-wrapper-class"><a href="#使用-wrapper-class" class="headerlink" title="使用 wrapper class"></a>使用 wrapper class</h1><p>使用泛型的时候必须使用 wrapper class，因为Java不支持使用基本类型作为类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;<span class="hljs-type">int</span>&gt; list; <span class="hljs-comment">// 编译器会提示：Type argument cannot be of primitive type</span><br>List&lt;Integer&gt; list; <span class="hljs-comment">// 这个就是正确的</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><p><a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">Java-Oracle-Docs: Autoboxing and Unboxing</a></p></li><li><p><a href="https://stackoverflow.com/questions/1570416/when-to-use-wrapper-class-and-primitive-type">wrapper class and primitive type</a></p></li><li><p><a href="https://softwareengineering.stackexchange.com/questions/203970/when-to-use-primitive-vs-class-in-java">When to use primitive vs class in Java?</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wrapper class</tag>
      
      <tag>primitive type</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018个人年度报告</title>
    <link href="/2019/01/12/2018%E4%B8%AA%E4%BA%BA%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/01/12/2018%E4%B8%AA%E4%BA%BA%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/summary/2018-annual-report/eyeemfiltered1520083346838.jpg"></p><h1 id="2018个人年度报告"><a href="#2018个人年度报告" class="headerlink" title="2018个人年度报告"></a>2018个人年度报告</h1><p>每段日子都有可以记录的意义，哪怕再平凡，依然可以找到日后精进的经验。标题本来定为2018年总结，但觉得这样过于简单，还是改为个人年度报告比较合适，这样对于个人而言就有了一个象征性的具有画面感的汇报仪式。</p><p>先回顾一下 2018 年到底做了些什么事情，时间都花在什么地方了。分为工作和生活两个部分。</p><span id="more"></span><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年主要使用的编程语言有三种：Erlang、Python 和 Java。分别用它们做了以下这些事情。</p><p>Erlang</p><ul><li>cdn 网关，cdn 调度服务</li><li>rtmp 流媒体服务：转推流服务以及图优化</li></ul><p>Python</p><ul><li><p>数据处理，数据分析：主要是 cdn 和直播相关数据</p></li><li><p>Hadoop，MapReduce，HDFS：做一些大数据的离线批处理操作</p></li><li><p>惠外卖 Hunger-game：商户自己的外卖。凉了</p></li><li><p>Hack版本微信点餐的后端：Servant</p></li><li><p>赫尔墨斯 Hermes：微信点餐对接辰森。凉了</p></li><li><p>赫斯提亚 Hestia：Python 版本的 Saas 微信点餐</p></li></ul><p>Java</p><ul><li>赫斯提亚 Hestia：Java 版本的 Saas 微信点餐</li></ul><p>此外，还在公司做了两次分享，一个是公司内部的，一个是小组内部的，主题分别是：</p><ul><li>基于消息传递的并发模型</li><li>直播技术</li></ul><p>从整体上来说，在工作上对具体的语言不再有什么特别反感的地方，想起当初毕业之前打死不转 Java 的想法，真是倔强又无知。然而最终采用的都是即简单易用又高效稳定的，也就是一切都是实用主义。这也算更成熟了一些。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>我是一个将工作和生活分得很清楚的人，工作的时间好好工作，休息的时间好好生活。休息的时候可以到处游玩，写写文字，看看电影，参加一些活动，讨论一些想法。也就是旅行、阅读、写作、电影、聚会、想法、投资者这 7 个部分。</p><h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><p>这一年去过的地方还算满意</p><ul><li>杭州：孤山探梅，灵峰探梅，太子湾公园，老和山，将军山，北高峰，湘湖</li><li>临安：指南村。2018年11月25日，认为了一位青春无敌美少女小鱼干和英俊潇洒，风流倜傥，玉树临风（此处省略一万字）的乐总</li><li>上海：外滩，世博园，田子坊，后滩赏秋</li><li>青田：瓯江、石门洞</li><li>台州：中秋括苍山云海</li><li>成都：电子科大清水河校区，都江堰，成都大熊猫基地</li><li>越南：杭州-温州-南宁-河内-下龙湾-岘港-芽庄-大叻-美奈-胡志明</li></ul><p>此外，还有苏州太湖和上海ChinaJoy这种不属于纯粹旅行的地方。</p><p>2018年在路上的时间总共有34天，占全年的9%。所有的地方里面，越南玩的时间最久（18天），好玩的也最多，希望有机会再去。希望2019年能尽量多的出国玩。在国内玩就去偏远一点的西北西南等地，我心心念念的大西洋最后一滴眼泪啊。</p><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>不仅仅是看书，还有听音频等途径</p><ul><li>《此生未完成》 于娟</li><li>《货币战争》 宋鸿兵</li><li>《技术管理课》朱赟</li><li>《白话法律》周甲德</li><li>《硅谷来信》吴军</li><li>《Google方法论》吴军（完成一部分）</li><li>《行为金融学》陆蓉</li></ul><p>18年初的时候以为一年看4本书就需要花很长的时间在阅读上了，但是后来在公司认识了Lvxinyan等人，才发现这群逼的阅读量是真的大，当然也取决于他们高效的阅读速度。接触的多了，观念也慢慢的改变过来了，读书使人不再那么丑陋。</p><p>上面的内容里面，收货最大的是后三个，其中行为金融学就很有意思。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>写作内容分为技术和生活，有三种输出方式，分别是博客，微信公众号，和翻译平台。</p><p>2018 年一整年下来，总共写了 <strong>31</strong> 篇博客。2018 年初加上了博客的访客数UV和点击数PV的统计，截止到 2018 年末，总共有 <strong>6500</strong> 位访客，<strong>11800</strong> 次点击量。</p><p>其中个人比较喜欢的博客有这么几篇</p><ul><li><a href="https://suncle.me/2018/12/15/Travel-Croatia-By-Google-Map/">Google 地图旅拍克罗地亚</a></li><li><a href="https://suncle.me/2018/09/26/Mid-Autumn-Meets-Kuocang-Mountain/">当中秋遇上括苍山</a></li><li><a href="https://suncle.me/2018/08/07/A-Dinner-At-Jack-Rose/">在杰克玫瑰的一顿晚餐</a></li><li><a href="https://suncle.me/2018/04/11/FilmReview-Ready-Player-One/">影评：Ready Player One</a></li></ul><p>2018年发布的文章中点击量最高的三篇分别是：</p><ol><li><a href="https://suncle.me/2018/05/17/Classic-Interview-Questions/">经典面试题</a></li><li><a href="https://suncle.me/2018/12/31/2018-must-do-and-must-go/">2018 must do and must go</a></li><li><a href="https://suncle.me/2018/04/16/Hadoop3-basic-installation-and-configuration/">Hadoop3单机和伪分布式模式安装配置</a></li></ol><p>除了博客之外，在 2018 年的年末开通了微信公众号，公众号名称叫做 <strong>Suncle</strong>。截止到目前已经发了三篇了。</p><p>在一年的时间里面，为 Linux.CN 翻译了 <strong>23</strong> 篇文章，校对了一篇，LCCN 数量累计达到 <strong>77900</strong>，兑换了 <strong>4</strong> 个极客时间阅码和一本定制版的图灵编程日历。</p><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><p>一年里总共看了 <strong>9</strong> 场电影。这些电影没有什么特定的类型，印象深刻的有 <strong>4</strong> 场，分别是：</p><ul><li>神秘巨星</li><li>红海行动</li><li>小萝莉的猴神大叔：这一场尤其好看，最后的冰川场景很震撼人心</li><li>恋爱回旋</li></ul><h3 id="聚会"><a href="#聚会" class="headerlink" title="聚会"></a>聚会</h3><p>有具体时间记录的聚会是29次，群体聚会中和长安大学杭州驾校的两位领导聚会次数是最多的，达到了3次。印象深刻的有6次：</p><ul><li>20180311：税友老同事吐槽大会（Liuyouchun、Dingjiqiang、Zhangxiumin），小毛和 starbucks</li><li>20180414：雨中湘湖（Aming，Chenjianbo，Wumingjun）</li><li>20180714：宝龙城（Liuyouchun，Zhangxiumin，Zhangbei），蒸锅瘾，保龄球，桌球</li><li><strong>20180803：杰克玫瑰，zhiyuan、yanyun、yuliangmu、qiuqiu</strong></li><li>20181004：大姐过生日（ktv+爷爷的粥铺）</li><li>20181202：我和两只哈士奇（Wangle，Yuliling），长泰广场-桂满陇桃花山庄。</li></ul><p>其中杰克玫瑰的聚会印象最深刻，收获也最大，讨论问题的广度和深度都相当不错。</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>记录一些已经经过验证的想法或者可能的创业点</p><ul><li>短视频：少爷的短视频事业，给越南妹子录访谈视频，凉了。</li><li>流量：将Youtube等国外火热视频搬到国内的优酷，或者相反的操作，有成功的又失败的，看坚持。</li><li>建站：从某AV图片站上爬取了大量的图片，经过基于像素的色情检测算法，筛选出合格的图片批量上传，构成一个图片站。目前虽然网站还在，但是后续的维护和推广问题太多，难度较高。这就是所谓的建站容易推广难。毕竟一切都要在法律允许的范围内做事情，否则《白话法律》这个专栏就白学了。</li><li>贸易：从少爷和七哥反馈的情况来看，这个点上跨国贸易不再那么容易做，最大的原因是找不到稳定充足的客源。从我去越南的考察结果来看，和他们的观点基本相符。</li></ul><h3 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h3><p>股票、基金、债券，2018年在这三项里面的配比只有股票，基金和债券都是0。作为一个投资新人，对于市场的变化还是容易过于情绪化，很容易被误导，完全不是一个理性的人。</p><p>持有的Facebook股票涨势一直都还不错，Facebook出现数据泄露的丑闻之后，股价大跌，当时市场一度不看好Facebook以及这一类的科技公司，但是事态过后Facebook股价开始反弹。虽然目前美股整体在跌，但是Facebook这一家拥有十几亿高粘度用户的公司来说，这点系统性风险不是什么大问题，Facebook的股票价格最终还是会回归到正常的价值。因此在一遇到负面消息之后就清仓了，我这确实是一个草率的行为。</p><p>之前的一切不理性行为都是因为没有系统性的学习经济学和金融学的理论，也没有什么实际投资经验，经历过的跳水以及熊市太少，导致出现决策非理性。希望新的一年在空余时间多学习一点投资方面的知识。</p><h1 id="OKR总结"><a href="#OKR总结" class="headerlink" title="OKR总结"></a>OKR总结</h1><p>2018年初的OKR定的比较仓促，也较为简单。总共有 3 块，分别是阅读，技术和旅行。</p><p><strong>在阅读方面，给自己打 0.7 分。</strong>原定的6本书，只看完了2本，是《此生未完成》和《货币战争》。看了一部分的书是《飘》，但是这本书实在太长，特别是到了下半年，经常会静不下心来，整个人比较浮躁。一点都没有看的3本是文学类的《人生定位》、《穆斯林的葬礼》、《约翰·克利斯朵夫》，用于替代的那些书基本都是经济和管理方面的书籍。从这个数据也能看到自己的浮躁和迷茫。</p><p><strong>在技术方面，给自己打 0.3 分。</strong>深入了Django替代掉Flask，Go和Java都有涉猎。但是数据分析和机器学习这两个方面，都尚未起步。</p><p><strong>在旅行方面，给自己打 1.0 分。</strong>青田、成都和岘港都已打卡，只有厦门还没有去，但是厦门可以用越南的其他城市，以及在国内游玩的大量小众景点所替代掉。</p><h1 id="2018年所做的减法"><a href="#2018年所做的减法" class="headerlink" title="2018年所做的减法"></a>2018年所做的减法</h1><p>如果人的生命是无限的，或许反而一事无成，因为永远有明天。我不相信自己能够改掉拖延症，唯一能做的事情，就是进一步做减法。这一年里面有一些事情原本打算做，但是后来放弃的，还有一些是一开始就婉拒掉的事情。在这里列举出其中的两件。</p><p><strong>第一件事，婉拒了会改变我的行业的职位。</strong></p><p>第一个是Renyanlin花了不少时间邀请我去自然阳光做自由职业做创业，但是从我后续的理解来看，类似于销售，看上去前景确实不错，薪酬也很高。拒绝的原因在于对于代谢这个行业不太熟悉，不是所有的看上去的希望都是希望，虽然在投资领域能不能赚到钱和自己是否熟悉行业没什么关系（认知性偏差），但是选择自己主业时不能只因为诱惑，而一定要是自己熟悉或者感兴趣的，诚然我对于销售其实并没有什么兴趣。</p><p>人成熟与否，就看自己吃自助餐能否做到不比平时吃得多。因此需要学会抵制诱惑。</p><p><strong>第二件事，有几个在计划中的课程没有开始学习或者中断了。</strong></p><p>Coursera上的两门关于现代艺术和摄影的课程，完全没有开始。</p><ol><li>摄影-Coursera-透过摄影看世界-Sarah Meister-现代艺术博物馆</li><li>艺术-Coursera-Modern Art &amp; Ideas-现在艺术与思想-Lisa Mazzola-现代艺术博物馆</li></ol><p>虽然看上去很感兴趣，但是人的精力真的是有限的。</p><p>至于其他几门关于技术方面的专栏，都是学了一部分，最后不得不停止的，一方面是自己的时间原因，一方面是有的专栏课程实在一般，也不值得花费大量的时间。比如：</p><ol><li>极客时间-郝林-Go语言核心</li><li>极客时间-王潇俊-持续交付</li></ol><p>这两门就比较空泛，或者讲解的并不符合我的口味。</p><hr><p>最后，想做的事情要立马行动起来。“将来有时间或者有机会”这种话的真实意义是：永远没时间，永远没机会。</p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>2018</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018 must do and must go</title>
    <link href="/2018/12/31/2018-must-do-and-must-go/"/>
    <url>/2018/12/31/2018-must-do-and-must-go/</url>
    
    <content type="html"><![CDATA[<p>2018年都已经过了两个月了，还是想写一下2018年的大致计划，不涉及具体计划，只写提纲，包括阅读清单，技术提升，旅行计划等几个部分，特别是阅读这一块，2017年一整年都没有看完《此生未完成》这本生命日记，估计书上已经落满了灰尘，但是2017都过去了，从现在开始尊重每一本书和其中的故事。至于技术类的提升这一块每年到了冬天天气冷就不想动手，这真的是一个不好的习惯，应该努力去克服，虽然现在几乎都在和数据打交道，但是对于web从心底里还是非常有热情的，打算再深入一些，我也想自己做的东西能更炫酷。Java&#x2F;Go和tensorflow都需要涉猎一些，一来可以更上热潮，二来可以拓宽自己的知识面。至于旅行，这就是我最喜欢做的事情了，在路上有许许多多新奇的故事，很是开心，虽然每年旅游的不多，但我会认证对待每一次灵魂独旅。</p><blockquote><p>把这篇的创建时间改成2018年12月31号，这样更新的时候就会一直置顶，会督促自己完成此生未完成。</p></blockquote><span id="more"></span><h3 id="阅读清单"><a href="#阅读清单" class="headerlink" title="阅读清单"></a>阅读清单</h3><ul><li>《此生未完成》 于娟</li><li>《人生定位》 杰克·特劳特</li><li>《穆斯林的葬礼》 霍达</li><li>《约翰·克利斯朵夫》 罗曼·罗兰</li><li>《飘》 玛格丽特·米切尔</li><li>《货币战争》 宋鸿兵</li></ul><h3 id="技术提升"><a href="#技术提升" class="headerlink" title="技术提升"></a>技术提升</h3><ul><li>深入 Flask Web</li><li>深入 数据分析（概率论）</li><li>涉猎  Java&#x2F;Go</li><li>简易机器学习和tensorflow</li></ul><h3 id="旅行计划"><a href="#旅行计划" class="headerlink" title="旅行计划"></a>旅行计划</h3><ul><li>青田</li><li>成都</li><li>厦门</li><li>岘港</li></ul><p>当然还有一些令人心旷神怡的小地方也是很值得去的，就不一一列举了。</p><p>除了这些也慢慢的开始接触一些投资相关的知识，比如：</p><ul><li>股票 （长线持有）</li><li>贸易 （代购）</li><li>建站 （流量）</li></ul><p>写了这么多都能实现吗？嗯，可以的，只要开始做。</p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2018</tag>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信点餐的需求和技术演变</title>
    <link href="/2018/12/27/%E5%BE%AE%E4%BF%A1%E7%82%B9%E9%A4%90%E7%9A%84%E9%9C%80%E6%B1%82%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E5%8F%98/"/>
    <url>/2018/12/27/%E5%BE%AE%E4%BF%A1%E7%82%B9%E9%A4%90%E7%9A%84%E9%9C%80%E6%B1%82%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<p>微信点餐的需求和技术演变</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>先解释下什么是Hack版本，什么是Saas版本？</p><blockquote><p>Hack版本就是指使用侵入的手段破解点菜机的各种信息，使得点菜机看起来就像是我们自己的一样。</p><p>Saas版本就是指做我们自己的点菜机，还要做成服务的</p></blockquote><p>为什么要做Saas版本的微信点餐？</p><blockquote><p>因为目前的hack版本面向未来开发导致现实问题很多，多到让微信点餐产品看不到未来，商户静悄悄的越来越少</p></blockquote><span id="more"></span><h1 id="微信点餐的业务需求"><a href="#微信点餐的业务需求" class="headerlink" title="微信点餐的业务需求"></a>微信点餐的业务需求</h1><p>11个核心功能</p><ol><li>微信线上点单</li><li>微信线上支付</li><li>点菜机线下点单（退菜）</li><li>点菜机线下支付</li><li>点菜机关台</li><li>支持优惠</li><li>支持库存</li><li>支持做法</li><li>支持转台</li><li>支持套餐</li><li>支持快餐</li><li>支持优惠券，储值，积分</li></ol><p>1-6是一期内容，神通交接前已完成。7-10是二期内容，属于后续功能扩充。11是待完成功能，12是附加的会员管理方面的功能。</p><h1 id="Hack版本"><a href="#Hack版本" class="headerlink" title="Hack版本"></a>Hack版本</h1><p>当初为什么立项，现在已不可考。但是微信点餐产品做出来终归是为了占据点餐市场，并且作为会员服务其中的一项增值服务。</p><h2 id="Hack版本的问题"><a href="#Hack版本的问题" class="headerlink" title="Hack版本的问题"></a>Hack版本的问题</h2><p>目前hack版本的微信点餐到底存在哪些问题？</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>各种环境问题（软件没配置对，被杀毒软件杀了，点菜宝异常）等等导致的数据上传错误，缺失</li><li>打印机不出票</li><li>CRM不能操作菜单</li><li>小程序下单超时、点菜宝链路异常等各种点餐失败原因</li><li>商家点菜机落后最新版本100多个版本</li><li>关台不正常，导致小程序看到没关的单</li><li>购物车没有清空，在不同清空下到底要不要清</li><li>该打折的没有打折，不该打折的打折了，重复打折</li><li>不支持带价格的做法，导致价格各种不对</li><li>小程序点的多规格的菜在点菜机上价格会被改掉为最小价格</li><li>…(还有一百万个)</li></ol><p>总之，消费者使用体验很差，就像我们去吃饭用小程序点餐一样，会喷人家做的怎么这么烂。商家使用体验很差，只要出一点问题，消费者就喊商家解决，商家有不明白，然后就上报，报多了就默默地撕掉了点餐码。运营人员和技术人员接到问题之后被商家一顿喷，还得老老实实的给排查解决问题，但是对于那种数据源头不属于自己的系统的奇怪性的概率问题，查起来真的很难受。不管对于消费者还是商户还是运营人员还是开发人员来说，完全没有用户体验。So：去你妈的微信点餐，真难用</p><h3 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h3><p>hack版本微信点餐凉凉的主要原因：</p><ol><li>点菜机源头的任何结构改动都会导致整体不可用：例如美食专家的字段改动，导致读不到任何数据</li><li>hack的方式使得整个win端的配置太过于复杂，导致没有CS或者技术参与，出了问题商家根本不知道怎么办</li><li>hack的方式使得各种点菜机出了问题也都是找我们，而不是找点菜机厂商</li><li>各种不同版本的点菜机对于具体的菜不一定有唯一键，导致对于临时调价这种场景无法匹配到菜，结果老师出现各种价格不对的问题</li></ol><h2 id="基于事实基于约定面向未知"><a href="#基于事实基于约定面向未知" class="headerlink" title="基于事实基于约定面向未知"></a>基于事实基于约定面向未知</h2><p>口号：<strong>我们不生产点菜机，我们只是点菜机的搬运工</strong></p><p>那么之前是如何搬运的呢？此处有两个主要步骤：</p><ol><li>打通点菜机：破解点菜机的数据库密码，了解点菜机的数据库结构，并且adapt到我们自己的数据格式</li><li>打通点菜协议：解密博立协议，通过点菜宝和串口&#x2F;网口将点菜信息写入到点菜机</li></ol><p>很容易看到，基于事实基于约定面向未知的产品设计本身就不是一个稳定的产品，只能当成一个实验室产品使用，但是最后却错误的上线到了生产。</p><h2 id="目前的现状"><a href="#目前的现状" class="headerlink" title="目前的现状"></a>目前的现状</h2><ul><li>已打通83款点菜机（hack点菜机密码、菜品图片、菜品增删改查、做法等等信息）</li><li>支持博立协议的所有点菜机点餐</li></ul><p>因为面向未知，不确定因素导致维护成本很高。为了快速上线，新需求带来的新代码都嵌入到了老代码中，导致高耦合度，每一块看上去很恶心的代码都能看到和点餐相关的逻辑，所以后续就有拆分visit和stage的过程。</p><h2 id="hack的方法"><a href="#hack的方法" class="headerlink" title="hack的方法"></a>hack的方法</h2><p>手持点菜宝通讯过程：</p><ol><li><p>通讯过程</p><ul><li>点菜宝和基站通讯是通过无线特定赫兹（433MHZ）；</li><li>基站和收银机计算机通讯可以通过串口或者网口方式；</li></ul></li><li><p>通讯测试</p><ul><li><p>硬测试：点菜宝和基站通讯上需要通过将基站拨码处于调试状态测试，通信是单向的，基站发送，点菜宝接收；</p></li><li><p>软测试：软测试是指将通信基站连接计算机，用“无线点菜机管理”软件对通信基站与点菜机进行测试，此时的测试是双向的，即正常使用模式。</p></li></ul></li><li><p>通讯协议</p><ul><li><p>点菜宝，基站，收银机计算机数据交换采用的协议通常叫：博立协议，但是博立协议非行业标准协议，会存在不同厂商根据自身情况对协议进行私有定制开发；</p></li><li><p>协议有三个指令：登陆，开台，点菜；点菜宝在使用前需要先在收银机计算机“无线点菜机管理””模块中勾选点菜宝编号进行诸如“菜品”，“桌台”等基础数据同步到点菜宝内；然后“登陆”，“开台”，“点菜”流程；</p></li></ul></li></ol><p>除了hack点菜宝的通讯过程，还需要hack点菜机本身数据库的链接方式以及用户名和密码。</p><p>基站设备图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/wechat-order-evolution/basic-station.jpg"></p><h1 id="Saas版本"><a href="#Saas版本" class="headerlink" title="Saas版本"></a>Saas版本</h1><p>点菜机初始版本只支持在线点餐，不支持离线点餐，网络不好的就不上。也就是说就是为了微信点餐服务的。</p><h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><p>参见mindnode</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/wechat-order-evolution/system-stuct.jpg"></p><h2 id="待确认问题"><a href="#待确认问题" class="headerlink" title="待确认问题"></a>待确认问题</h2><h3 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h3><p>因为模式太多，需要考虑兼容性问题</p><ol><li>win端起新的后台管理项目</li><li>后端新项目不支持老版本老模式，如果还有老用户就慢慢过渡到新版本</li><li>不再有堂食菜品库，都是自定义菜单，在win端管理后台管理</li><li>B端的菜单设计功能逐渐废弃</li></ol><h3 id="优惠和菜品的关系"><a href="#优惠和菜品的关系" class="headerlink" title="优惠和菜品的关系"></a>优惠和菜品的关系</h3><blockquote><p>目前是否参与优惠取决于菜品是否有参与优惠的字段discountable，即是否参与优惠是菜品的一个属性。具体的优惠折扣应该是所有参与优惠的菜的总价的打折，这个是商家临时决定的。</p><p>折扣值具体在哪边设置需要确认下</p></blockquote><h3 id="做法和菜品的关系"><a href="#做法和菜品的关系" class="headerlink" title="做法和菜品的关系"></a>做法和菜品的关系</h3><blockquote><p>目前做法是在菜品里面加一个字段，显示这个菜有多少种做法。对于每一个菜都需要设置做法信息。</p><p>改为Saas之后，做法需要单独维护一个做法表，做法分类和菜品做关联（<strong>需要确认是和菜品关联还是和sku关联</strong>），避免各种重复录入</p><p>做法分类表和做法表的设计：</p><p>做法分类：做法分类Code + 做法分类name，例如 0100 + 甜度</p><p>做法：做法code + 做法name + 做法分类code，例如  AAAA + 七分甜 + 0100</p></blockquote><h2 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h2><p>屏芯：使用<a href="https://www.cnblogs.com/zhuxiaojie/p/5564187.html">ActiveMQ</a>推送。同样会产生因为推送超时导致的重复下单，不知道有什么巧妙的办法可以解决重复下单的问题。但是也说明推送的方式是可行的</p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信点餐</tag>
      
      <tag>演变</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>直播系统介绍</title>
    <link href="/2018/12/18/%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
    <url>/2018/12/18/%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p>本地演示：ffmpeg&#x2F;obs + livego + mpv</p><ol><li>推流选择ffmpeg或者obs</li><li>流媒体服务直接使用livego</li><li>播放使用mpv</li></ol><p>推流截图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/live-20181218/obs-push.jpg"></p><p>拉流截图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/live-20181218/hls-pull.jpg"></p><span id="more"></span><h2 id="livego"><a href="#livego" class="headerlink" title="livego"></a>livego</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/gwuhaolin/livego.git<br>go build livego.go  # 编译<br>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build livego.go  # 编译成linux环境下的可执行文件<br>./livego<br></code></pre></td></tr></table></figure><h2 id="流地址"><a href="#流地址" class="headerlink" title="流地址"></a>流地址</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">rtmp推流：rtmp:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1935</span><span class="hljs-regexp">/live/</span>taylor<br>rtmp拉流：rtmp:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1935</span><span class="hljs-regexp">/live/</span>taylor<br>hdl拉流：http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7001</span><span class="hljs-regexp">/live/</span>taylor.flv<br>hls拉流：http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7002</span><span class="hljs-regexp">/live/</span>taylor.m3u8<br></code></pre></td></tr></table></figure><p>如果使用ffmpeg推流</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffmpeg -re -i ~<span class="hljs-regexp">/Documents/</span>Taylor\ Swift\ -\ You\ Belong\ With\ Me.mp4 -c copy -f flv rtmp:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">1935</span><span class="hljs-regexp">/live/</span>taylor<br></code></pre></td></tr></table></figure><h1 id="视频流"><a href="#视频流" class="headerlink" title="视频流"></a>视频流</h1><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/live-20181218/%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B.png"></p><h1 id="直播系统组成"><a href="#直播系统组成" class="headerlink" title="直播系统组成"></a>直播系统组成</h1><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/live-20181218/%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90.png"></p><h1 id="直播流协议"><a href="#直播流协议" class="headerlink" title="直播流协议"></a>直播流协议</h1><h2 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h2><p>Rtmp规范1.0：<a href="https://suncle.me/2018/03/09/rtmp%E8%A7%84%E8%8C%831-0/">https://suncle.me/2018/03/09/rtmp%E8%A7%84%E8%8C%831-0/</a></p><p>Rtmp规范1.0 en：<a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf">http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf</a></p><ol><li>RTMP协议是应用层协议，基于下层的传输层协议TCP</li><li>要建立一个有效的RTMP Connection链接，首先要握手。但是实际使用过程中对握手数据校验不严格</li><li>Adobe公司</li><li>低延迟，内容延迟可以低于3秒</li><li>需要编解码</li><li>几乎所有的稳定推流协议都是RTMP</li></ol><h2 id="HDL"><a href="#HDL" class="headerlink" title="HDL"></a>HDL</h2><p>HDL协议中封装格式使用的是FLV，HDL又叫做HTTP-FLV</p><ol><li>基于HTTP</li><li>低延迟，内容延迟可以低于3秒</li><li>需要编解码</li></ol><h2 id="HLS"><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h2><p>Http Live Streaming。</p><ol><li>苹果公司</li><li>基于HTTP</li><li>HTML5可以直接播放，不需要编解码，需要在服务端切片，有Stream Segmenter的概念</li><li>格式：<ol><li>m3u8：索引文件，以m3u8为后缀。用文本方式对媒体文件进行描述，由一系列标签组成</li><li>ts：传输流文件，视频编码主要格式h264&#x2F;mpeg4，音频为acc&#x2F;MP3。</li></ol></li><li>延迟较高，一般在10秒左右</li></ol><h2 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h2><p>对于正常的直播场景，多数都是推流使用Rtmp协议，拉流使用HLS协议</p><hr><p>参考：</p><ol><li>SRS的C++版本：<a href="https://github.com/ossrs/srs">https://github.com/ossrs/srs</a></li><li>SRS的Golang版本：<a href="https://github.com/gwuhaolin/livego">https://github.com/gwuhaolin/livego</a></li><li>云直播系统架构与实施：<a href="https://blog.csdn.net/qiansg123/article/details/80124296">https://blog.csdn.net/qiansg123/article/details/80124296</a></li><li>UCloud：<a href="http://blog.ucloud.cn/archives/699">http://blog.ucloud.cn/archives/699</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>直播</tag>
      
      <tag>cdn</tag>
      
      <tag>livego</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go2school-2</title>
    <link href="/2018/11/15/go2school-2/"/>
    <url>/2018/11/15/go2school-2/</url>
    
    <content type="html"><![CDATA[<p>go2school 系列的第二道题目</p><ul><li>用 Go 语言实现一个简单的 HTTP Server。</li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>简要描述：实现 GET(get), POST(set) 两个功能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 读取Redis的&quot;path:path2&quot;</span><br>@GET /path/path2<br><span class="hljs-comment">// 将 value(=3) 写入 redis 的 &quot;path:path2&quot;</span><br>@POST /path/path2<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>现有可用的redis数据库（已脱敏）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Addr&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;t.kezaihui.com:6580&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;06ad0c72d5ce41ce9f04ad1237965a4d&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="交作业"><a href="#交作业" class="headerlink" title="交作业"></a>交作业</h1><ol><li>使用go语言原生的http库作为route处理url：暂时不适用框架</li><li>使用go-redis作为redis client：使用人数多，速度快推荐</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/go-redis/redis&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> payloadStruct <span class="hljs-keyword">struct</span> &#123;<br>Value <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> reg = regexp.MustCompile(<span class="hljs-string">`^/([(\w)]+)/([(\w)]+)/?$`</span>)<br><span class="hljs-keyword">var</span> redisClient = redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;t.kezaihui.com:6580&quot;</span>,<br>Password: <span class="hljs-string">&quot;06ad0c72d5ce41ce9f04ad1237965a4d&quot;</span>,<br>&#125;)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, Route)<br>err := http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>os.Exit(<span class="hljs-number">4</span>)<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// web route</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Route</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>path := r.URL.Path<br>params := reg.FindStringSubmatch(path)<br>key := params[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;:&quot;</span> + params[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> r.Method == <span class="hljs-string">&quot;GET&quot;</span> &#123;<br>val := getValueFromRedis(key)<br>fmt.Fprintf(w, val)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> r.Method == <span class="hljs-string">&quot;POST&quot;</span> &#123;<br>decoder := json.NewDecoder(r.Body)<br><span class="hljs-keyword">var</span> payload payloadStruct<br>err := decoder.Decode(&amp;payload)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>setValueToRedis(key, payload.Value)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;ok&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;NOT IMPLEMENT&quot;</span>)<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setValueToRedis</span><span class="hljs-params">(key <span class="hljs-type">string</span>, value <span class="hljs-type">string</span>)</span></span> &#123;<br>fmt.Println(redisClient, key, value)<br>redisClient.Set(key, value, <span class="hljs-number">0</span>).Err()<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getValueFromRedis</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> (val <span class="hljs-type">string</span>) &#123;<br>fmt.Println(redisClient, key)<br>val, err := redisClient.Get(key).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;key&quot;</span>, val)<br><span class="hljs-keyword">return</span> val<br>&#125;<br></code></pre></td></tr></table></figure><p>本次的 http server 也可以使用 web 框架，比如 iris 和 mux。（iris知名度高）</p><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>整体写下来还有两个问题不是很清楚</p><ul><li>Gopath</li><li>包依赖管理</li></ul><p>因为需要依赖go-redis这个第三方包，因此需要使用<code>go get</code>这个命令下载第三方包，但是下载下来之后GoLand这个IDE会显示包不存在，但是实际运行并不会有问题，有代码洁癖的人实在无法忍受。本质原因还是Gopath没有设置正确。因为go的workspace和python还有c++实在是不同。因此习惯go的workspace，理解Gopath就至关重要了。但是好消息是go的2.0版本会使用类似于npm和pipenv的方式解决包管理的问题，期待…</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go2school-1</title>
    <link href="/2018/10/31/go2school-1/"/>
    <url>/2018/10/31/go2school-1/</url>
    
    <content type="html"><![CDATA[<p>我司大佬<a href="http://www.liriansu.com/">紫月苏</a>最近在QCon上听了关于Go语言的洗脑报告，回来之后给各位普及了go的一些基本情况和未来发展，感觉大家兴致很浓，于是就在我司内部gitlab上开了一个新的repo，叫做go2school，也就是Go语言学习计划。又因为对Java实在无爱，然后妥妥的就加入了Go的大军。</p><p>下面是我司学习Go的Chapter 1. Grammer。具体就是阅读 <a href="https://learnxinyminutes.com/docs/zh-cn/go-cn/"><strong>Learn Go in Y minutes</strong></a> 学习基本语法。然后练习：</p><ul><li>用 Go 语言实现一个计算斐波那契数列的函数，从标准输入读入 n, 从标准输出返回 f(n)。（递归版、循环版都要实现）</li></ul><span id="more"></span><h1 id="交作业"><a href="#交作业" class="headerlink" title="交作业"></a>交作业</h1><p>斐波那契数列的go语言实现：递归版和循环版</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">// it means this package is an executable file, not a repo</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">// import fmt standard package</span><br><br><span class="hljs-comment">// fib function, by recursive</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibRe</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> (m <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-2</span>) + fib(n<span class="hljs-number">-1</span>)<br>&#125;<br><br><span class="hljs-comment">// fib function,  by loop</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> (m <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">var</span> a, b, c <span class="hljs-type">int</span><br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; n; i++ &#123;<br>c = a + b<br>a, b = b, c<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-comment">// program entry</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> n, m <span class="hljs-type">int</span><br>fmt.Scan(&amp;n) <span class="hljs-comment">// read from stdin</span><br>m = fib(n)<br>fmt.Printf(<span class="hljs-string">&quot;m: %d\n&quot;</span>, m)<br>m = fibRe(n)<br>fmt.Printf(<span class="hljs-string">&quot;m: %d\n&quot;</span>, m)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="感觉不错"><a href="#感觉不错" class="headerlink" title="感觉不错"></a>感觉不错</h1><p>在Learn Go in Y minutes这个网站上学习基本的语法感觉很nice，一个完整的用例中几乎廊括了所有的语法，看完基本语法找到斐波拉契数列开始牛刀小试了，感觉很不错。和之前写C++的感觉很像，一种熟悉的感觉。</p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><ul><li>代码格式化</li><li>Goland配置</li></ul><h2 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h2><p>Go语言的格式化感觉很nice，我就不喜欢每个人都有自己的独特的风格，再次鄙视一下那些喜欢用vim还不格式化代码的人，哈哈。个人还是比较同意有约束整体才更容易前进。</p><p>使用Goland这个IDE写Go时可以在preference中设置使用gofmt这个格式化工具。每次在保存代码的时候都会格式化，感觉很赞，这个体验比写C++好</p><h2 id="GoLand配置"><a href="#GoLand配置" class="headerlink" title="GoLand配置"></a>GoLand配置</h2><p>需要配置如下：</p><ul><li>GoROOT</li><li>GoPATH</li><li>还有一些别的没有配的后续再看</li></ul><p>本次就先水到这里了</p><hr><p>参考：</p><ol><li><a href="https://learnxinyminutes.com/docs/zh-cn/go-cn/">https://learnxinyminutes.com/docs/zh-cn/go-cn/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当中秋遇上括苍山</title>
    <link href="/2018/09/26/%E5%BD%93%E4%B8%AD%E7%A7%8B%E9%81%87%E4%B8%8A%E6%8B%AC%E8%8B%8D%E5%B1%B1/"/>
    <url>/2018/09/26/%E5%BD%93%E4%B8%AD%E7%A7%8B%E9%81%87%E4%B8%8A%E6%8B%AC%E8%8B%8D%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_061158.jpg"></p><blockquote><p>你来，或者不来，我就在这里</p><p>–括苍山</p></blockquote><p>出行的前一天在驴途报名，临时决定的此次行程，也算是说走就走，结局却是意外的美好。而且正值中秋假期，就把标题定为<code>&quot;当中秋遇上括苍山&quot;</code>吧。</p><span id="more"></span><h1 id="括苍山"><a href="#括苍山" class="headerlink" title="括苍山"></a>括苍山</h1><p>括苍山在浙江台州临海的括苍镇，主峰叫米筛浪，海拔1300多米。曾是21世纪曙光的首照地（2000年1月1日6时42分54秒照耀在米筛浪峰上）。山顶建有括苍山风电场，去之前以为风电场有非常大的规模，见到之后才发现是非常多的风车零散的分散在各个山峰。括苍山的整体植被也是完全符合山体由低到高的植被变化的，山脚下是大片大片的竹海，往高处慢慢变成松树，山顶上基本是一些不太高的灌木。</p><p>括苍山值得看的有三样，分别是日出，云海，和星空。当然具体能看到什么，完全取决于山中变幻莫测的天气，也就是完全取决于你的运气。</p><p>另外，括苍山整体在旅游开发中，后续应该会有较完善的旅游设施和对应的收费制度，目前还是免费。</p><h1 id="登山方式"><a href="#登山方式" class="headerlink" title="登山方式"></a>登山方式</h1><p>括苍山登顶有两种方法：</p><ol><li><p>靠双脚登山</p><blockquote><p>目前盘山公路已经完全开发完毕，因此可以从山脚下一路沿着盘山公路直到最终登顶。这次旅行的路上见到了不少驴友，身披雨衣手驻登山杖背着帐篷爬上山，勇气可嘉。也有经典的古道徒步路线是从东方村开始的。整体爬山时间在3到4小时之间。</p></blockquote></li><li><p>包车自驾上山</p><blockquote><p>因为这次到达括苍山脚下已经下午4点，因此放弃爬山，坐旅游巴士沿着盘山公路上山，一个小时就能到达山顶，不过我们本次的住宿地点是在离山顶步行20多分钟的阳光山庄。</p></blockquote></li></ol><h1 id="住宿方式"><a href="#住宿方式" class="headerlink" title="住宿方式"></a>住宿方式</h1><p>山顶住宿：</p><ul><li>阳光山庄</li><li>云顶山庄</li><li>山顶人家</li><li>小木屋</li></ul><p>这些农家乐住宿，后续肯定是会越来越多的，价格一般，不用太担心住的地方，而且括苍山的山顶有一个比较大的场地很适合带帐篷野营，如果风不是很大风车没有很大声响的时候，在风车底下的草地上野营也是不错的选择，记得带好防潮垫，实话说还是挺想体验下睡帐篷的感觉。不过如果是冬季，温度过低就不推荐了。</p><h1 id="沿途所见"><a href="#沿途所见" class="headerlink" title="沿途所见"></a>沿途所见</h1><p>一路坐车，时而视野开阔，时而雾气弥漫，在云雾中开车，心也都揪成一团了。顿时就想起了之前在越南从芽庄到大叻的路上雾气丛生，可见度不到一米，最后被迫停车的情景。司机师傅是湖北老乡，开车格外的小心，到了接近山顶的阳光山庄时，已经是傍晚5点多了，到处都是雾，还飘着小雨。撑着伞出来看风车，也是第一次这么近距离的看到风车了。整个阳光山庄都是若隐若现的，红墙房子，泥泞地面和三三两两的汽车，一种绝地求生的既视感，然而我只是个绝地求生的快递员。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180922_170632.jpg"></p><p>晚上喝完美味的鸡汤之后，雨慢慢浇灭了点着了的篝火，一堆人一起玩拍七游戏，运气不错的我从来没有输过，当然也就体会不到真心话大冒险的乐趣了。晚上趁着大家玩狼人杀的时间，早早的就睡了，只为了第二天起个大早。</p><p>第二天凌晨五点不到就醒了，收拾好准备出发，拍下清晨第一张图片，天还蒙蒙亮，却已经能看到云海了，看来运气不错。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_052102.jpg"></p><p>半跑半走着就到了山顶，站在曙光碑下，却找不到一个没有障碍物的视角。而且日出被云海挡住了，还看不太清。于是一个人凭着以往的拍摄经验到处跑着找场景找角度。于是找到了小木屋旁边看云海绝好的地点，后又向东边跑，爬上了最东边的山，在崖边等日出跃过云海。</p><h2 id="黄牛"><a href="#黄牛" class="headerlink" title="黄牛"></a>黄牛</h2><p>山顶上的黄牛，每天吮吸最好的空气和雨露，非常悠闲自在，此图由诗雨妹子（杨超越妹妹的姐姐李超越）拍摄</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/mmexport1537885056358.jpg"></p><h2 id="日出"><a href="#日出" class="headerlink" title="日出"></a>日出</h2><p>米筛浪东边的小山崖边的日出，隐约可见两条直射的光束</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_060342.jpg"></p><p>我总喜欢拍日出时在这样空旷的天际里寻找一些譬如电线的前景物，从而使得图片不那么空旷，以前在普陀山拍的日出中最满意的一张就是突兀的电线划过花草丛，在海边日出下熠熠生辉。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_063035.jpg"></p><h2 id="风车"><a href="#风车" class="headerlink" title="风车"></a>风车</h2><p>日出透过多彩云海照耀下的风车，风车很暗，但是和背景搭配的很和谐</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_054839.jpg"></p><p>美女衬托的风车。偷拍小玲姐姐，拍照习惯于拿正手机，人和风车穿过黄金比例线，美感自然不差</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_083600.jpg"></p><p>大雾笼罩下的风车，日出过后，云层中的水滴向上汽化成了水雾，弥漫了群山</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_085421.jpg"></p><h2 id="妹子"><a href="#妹子" class="headerlink" title="妹子"></a>妹子</h2><p>静站凝思的妹子。偶然从后面的山丘看到了前面山头上伫立着一个妹子，静静的站在那里看着远方，思索着，很久很久，于是我就有机会拍下了这张照片。但总觉得这张图里面过于空旷，人物过于渺小，体现不出凝思的感觉，但若只是想通过这张图片展示括苍山的云海，那是足够了。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_062153.jpg"></p><p>于是飞奔跑到妹子的身后，蹲着接近于趴着的姿势拍到了本次括苍山之旅最满意的图片。前景是低矮土堆上的一株小松树，中间是悬崖边的方形石凳，远景是很浓很厚的云海，妹子伫立其中，凝视远方，好像妹子此时就是我自己，开始思考人生。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_062517.jpg"></p><p>本来打算将这张照片转给这个妹子，追上去，走到小木屋旁边，转眼就不见了。</p><h2 id="云海"><a href="#云海" class="headerlink" title="云海"></a>云海</h2><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_054523.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_062556.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_065728.jpg"></p><p>也学了一次Instagram上的推荐的拍照方式，拍空旷的环境可以摆上自己的双脚，表示路在脚下，也让整个场景不那么单调。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_071237.jpg"></p><h2 id="露珠"><a href="#露珠" class="headerlink" title="露珠"></a>露珠</h2><p><strong>清晨的露珠</strong>。跨过围栏，翻到崖边，想透过清晨枝丫上的露珠拍日出，但是脚踩的石头并不稳固，只能在尽可能靠近的地方随意拍摄一张，没有拍到日出的效果，只有一种空旷而杂乱的感觉。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/IMG_20180923_064817.jpg"></p><h1 id="关于摄影"><a href="#关于摄影" class="headerlink" title="关于摄影"></a>关于摄影</h1><p>油油拍摄的两张图片让我大开眼界，model是小玲姐，从前只注重图片美感的我突然发现全景拍摄还可以这么玩，非常有趣，但从摄影的角度看这两张照片曝光过久，整个图片缺乏层次感。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/mmexport1537751924335.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/mmexport1537753327464.jpg"></p><p>回来之后搜了不少关于全景拍照Panorama的资料。在此稍稍总结一下手机全景拍照的技巧：</p><ol><li>打开相机，点击或者滑动切换到全景模式，英文版系统则为Panorama</li><li>让被拍者摆好姿势，开拍时点一下拍摄按钮，然后慢慢转动相机，直到被拍对象出画（需要注意转动方向）</li><li>让被拍者赶紧跑出画面，从拍照者背后绕着跑到镜头前面，等被拍者再次摆好拍照姿势，再继续转相机，如果需要拍摄多个“分身”，重复此动作即可，然后再点一下拍摄按钮，才算完成拍摄。</li></ol><p>整个过程非常需要被拍者的配合，比如小玲姐的配合度就非常高。刚开始不是很熟悉定点位置的时候，可以寻找一些辅助道具，比如事先在地上放置定位用的石块等等。</p><p>有的手机还有3D panorama的功能，后续再研究一下。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>我喜欢走在路上，喜欢在路上遇见未知的美景，喜欢交往不同来历的朋友。无论是在大山深处爬行，还是在山崖边静坐，想要的只是简简单单的对内心的自白，对人生的思考。毕竟生活不止眼前的苟且，还有诗和远方。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/kuocang/mmexport1537703827202.jpg"></p><p>感谢这么可爱的你看完我的记录。</p><p>完</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中秋</tag>
      
      <tag>括苍山</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硅谷来信—投资哲学</title>
    <link href="/2018/09/22/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1%E2%80%94%E6%8A%95%E8%B5%84%E5%93%B2%E5%AD%A6/"/>
    <url>/2018/09/22/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1%E2%80%94%E6%8A%95%E8%B5%84%E5%93%B2%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>经过小半年的不懈努力，终于追完了吴军博士的硅谷来信，其中对于投资部分的篇幅较多，而且很实用，因此马不停蹄的梳理完所有的来信中的投资哲学。因此本篇主要包含三个部分：</p><ul><li>硅谷来信的投资哲学</li><li>结合以往经历的个人投资感悟</li><li>未来投资方案</li></ul><h1 id="硅谷来信的投资哲学"><a href="#硅谷来信的投资哲学" class="headerlink" title="硅谷来信的投资哲学"></a>硅谷来信的投资哲学</h1><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/investment/Investment-philosophy.png" alt="硅谷来信-投资哲学"></p><span id="more"></span><h1 id="个人投资感悟"><a href="#个人投资感悟" class="headerlink" title="个人投资感悟"></a>个人投资感悟</h1><p>待括苍山旅游回来之后补充</p><h1 id="未来投资方案"><a href="#未来投资方案" class="headerlink" title="未来投资方案"></a>未来投资方案</h1><p>待括苍山旅游回来之后补充</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
      <tag>硅谷来信</tag>
      
      <tag>吴军</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>此生未完成</title>
    <link href="/2018/09/17/%E6%AD%A4%E7%94%9F%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    <url>/2018/09/17/%E6%AD%A4%E7%94%9F%E6%9C%AA%E5%AE%8C%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>我们要用多大的代价，才能认清活着的意义？</p><ul><li>晋升无门的职场？</li><li>彻底失败的生意？</li><li>突如其来的癌症？</li></ul><p>不，这些代价都太大。我们不禁经常思考：生活的意义是什么？我究竟能为之做点什么呢？</p><span id="more"></span><h1 id="此生未完成"><a href="#此生未完成" class="headerlink" title="此生未完成"></a>此生未完成</h1><p>估计只有在生死临界点的时候，才会发现，任何的加班（长期熬夜等于慢性自杀），给自己太多的压力，买房买车的需求，这些都是浮云。如果有时间，好好陪陪家人，把买车的钱给父母亲买双鞋子，不要拼命去买什么大房子，和相爱的人在一起，蜗居也很幸福，和亲人在一起，离开大城市回家乡也很愿意。</p><p>或许透过生死，才会觉得名利权情都很虚无，尤其是首当其冲的名，说穿了，无非是别人茶余饭后的谈资。即使你名声四海皆知响彻云天，也无非是一时猎奇，各种各样的人揣着各种各样的心态唾沫四溅过后，你仍然是你，其实，你一直是你，只是别人在谈论你的时候，你忘记了你自己是谁而已。</p><p>有太多的计划要完成，有太多的事情要应付，总是觉得等做好了手头的事情，陪父母也是来得及的，反正人生很长，时间很多。现在想想并不尽然，只有一天天的过，才是一年年，才是一辈子。无头绪的追逐与奔忙，一旦站定思考，发现半辈子已经过去，自己手里的成败并无多少意义。</p><p>入了社会才发现，思考的时间并不太多，每次去思考多少回有个因由，一旦开始思考，有些事情会想不明白，会迷茫，会觉得要做的事情还有好多好多，会觉得一天的24小时完全不够用，恨不得有48小时。慢慢的每个人变得拘谨又谨慎。</p><blockquote><p> 我的房间很小，我就把窗户开的很大。</p><p>我的感情很重，我就把诺言许的很轻。</p><p>我的往昔很空，我就把今天填的很满。</p><p>我的喜悦很少，我就把笑容积得很多。</p></blockquote><p>在你的人生里，朋友的个数很有限，每个人的精力更是有限，没有那么多的时间和精力去维系，遇到关键的人与珍贵的事，要积极争取，可以失败，但是不能放弃。</p><h1 id="癌症"><a href="#癌症" class="headerlink" title="癌症"></a>癌症</h1><p>虽然并不是我自己得癌症，但是每次看到思考到这样的话题，不禁会反思自己的现状，反思自己和癌症的距离。我有很多不好的习惯，同时又生活在不那么好的环境里。</p><p><strong>饮食习惯</strong></p><ul><li>瞎几把吃：不挑食某种程度来说，并不算什么好习惯</li><li>暴饮暴食：每个周末基本不吃早饭，有时候甚至一天只吃一顿饭，饭量又大，结果暴饮暴食。</li><li>嗜荤如命：每次吃饭都会点很多荤菜，可劲的吃。最近一次团建完，至今还想着海璐秘制的红汤火锅。</li></ul><p><strong>睡眠习惯</strong></p><p>自己大的坏习惯便是睡眠不规律，以前总觉得睡觉是一件很浪费时间的事情，因此即使到了晚上什么也不做，静坐着也不想去睡觉。同时心里又很明白，早睡的两个小时早起之后一样可以做自己想做的事情。但是就是执行不下去。</p><p>千里之堤毁于蚁穴。我们是现代人，不可能脱离社会发展的轨迹和现代的生活节奏以及身边的干扰，那么，在能控制的时候多控制控制，在能早睡的时候尽量善待自己的身体。有些事情，直播也好，玩游戏也好，想想无非感官享受，过了那一刻，都是浮云。</p><p>现在想来，唯一踩在地上的，就是自己健康的身体。还有最最重要的自己的头发，发际线越来越高，发质越来越差，很难想象以前的头发像刺猬的硬刺。突然想到包总的头发，不，我不能那样。</p><p><strong>突击作业</strong></p><p>无论是大学四年还是工作后的两年里，经常都是有计划但是也是要到最后deadline之前才去做，已经熬了数不清楚多少个夜晚。以至于到现在面容憔悴，不复当年神采奕奕。更可笑的是，已经遇到被很多人问是不是已经30岁了，拜托，我才25，芳华正茂啊。</p><p>这种突击作业的行为就好像一辆平时就跌跌撞撞一直不维修的破车，一踩油门就彻天彻夜地疯跑疯开半个月。一年搞个四五次。就是钢筋铁打的汽车，开个二十几年也都报废了。更别说是人了。</p><p><strong>环境问题</strong></p><p>随时注意身边的生活环境，小心甲醛致癌，要是经年累月的浸泡在甲醛超标的环境里，最终很难不得癌症。恰巧最近自如等租赁公司的房子很多都爆出甲醛超标，目前我住的这个自如单间其实还不错，但是柜子确实有些味道，看来需要买个绿萝调节一下。</p><h1 id="每日修身"><a href="#每日修身" class="headerlink" title="每日修身"></a>每日修身</h1><p>平日工作虽然规律，但并不那么健康，特别是周末，更是谈不上计划，完全是混乱的日子。之前看到曾国藩家书里的日课十二条，在这里摘录并解释如下</p><ol><li><p>主敬：整齐严肃，无时不慎。无事时心在腔子里；应事时，专一不杂，如日之升。</p><blockquote><p>衣冠外貌保持整齐，心思神情端正严肃，时时刻刻都要保持警惕。闲时，宁静致远。忙时，专心致志。就像早晨的太阳一样保持旺盛的精神状态。</p></blockquote></li><li><p>静坐：每日不拘何时，静坐半时，体验静极生阳来复之仁心，正位凝命，如鼎之镇。</p><blockquote><p>每天不限任何时间，必须静坐一小时以上，体验圣人所教诲的仁心，使思虑不出本位，以使性命凝结，就像宝鼎一样镇定而不可动摇。</p></blockquote></li><li><p>早起：黎时即起，醒后不沾恋。</p><blockquote><p>天色刚亮就赶紧起身，醒了以后一定不要有留恋安逸甚至淫邪的念头。这一点真的需要学会。</p></blockquote></li><li><p>读书不二：一书未点完，断不看他书，东翻西阅，徒循外为人，每日以十叶为率。</p><blockquote><p>一本书还没有读完，一定不去看其它的书籍。东翻西阅地随意读书，对自己的道德学问没有一点益处，不过就是一个只求知识而没有道德的人。每天必须圈点十页。</p></blockquote></li><li><p>读史：丙申购二十三史，每日读十叶，虽有事不间断。</p><blockquote><p>在丙申年购置《二十三史》，每天都仔细读上十页，从不间断。此为读书，该学。</p></blockquote></li><li><p>谨言：刻刻留心，是工夫第一。</p><blockquote><p>时时刻刻细心留意，这是为人处世的第一等功夫。花太多，这点要改。</p></blockquote></li><li><p>养气：气藏丹田，无不可对人言之事。</p><blockquote><p>能够做到内外统一、光明正大之行，没有奸诈计谋、行险侥幸之念，任何所作所想都能够说得出口，只有这样，才能将真气存蓄于丹田之中。</p></blockquote></li><li><p>保身：节劳节欲节饮食，时时当作养病。</p><blockquote><p>要节制操劳，节制欲望，节制饮食。时时刻刻都像养病时一样地保养自己的身体。</p></blockquote></li><li><p>日知其所亡：每日记茶余偶谈一则。分德行门、学问门、经济门、艺术门。</p><blockquote><p>每天读书，都要将心得体会记录下来，不要刻意地从书中谋求深意，否则，就是曲从于他人。</p></blockquote></li><li><p>月无忘所能：每月作诗文数首，以验积理之多寡，养气之盛否，不可一味眈着，最容易溺心丧志。</p><blockquote><p>每月都能有机会复习已经学过的知识和本领：每个月必须做诗歌或短文数首，用来检验所学理论是多还是少，所培养真气是否充盛。不可以一味地懒惰迟延，这样最容易使自己的远大志向丧失殆尽。</p></blockquote></li><li><p>作字：早饭后作字半小时，凡笔墨应酬，当作自己功课，不留待明日，愈积愈难清。</p><blockquote><p>早饭后必须练习书法一小时。而且，所有文字方面的应酬，都可以作为练习书法的机会。凡是今天的事情，一定不许留待明天去做，事情越积越多，就会越难以清理。今日是今日毕，要改。</p></blockquote></li><li><p>夜不出门：旷功疲神，切戒切戒！</p><blockquote><p>出门应酬玩乐，会使人荒废修养功夫，会使精气耗损、神情疲惫。所以，这种不良习气必须彻底戒除！这一点，尽量减少，毕竟今时不同往日。</p></blockquote></li></ol><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>此次只谈狭义的读书，也就是读本，暂且不谈读书的延伸意义，比如求学等等。</p><p>最近这段时间，得益于家用电脑的固态硬盘烧坏了，三个月没有带电脑去维修点修，闲来无聊，拿起了之前一直没有读完，而且还在今年的读书清单中的《此生未完成》，这一次并不是读几页就觉得枯燥乏味后放下，而是连续用了几个晚上去理解，去消化，去共鸣。已经有许久没有像这几天一样完整的读过一本书了。曾经我给自己找了很多不肯读书的理由，到头来却发现，这些理由其实不是理由，最大的问题是静不下心来，空虚浮躁，总是觉得这个不好那个不好，丝毫不去体会读书的乐趣和作者的思想。</p><p>读书，要读的是别人的思想，要参透的，是高尚悲悯的人性，矜持贵重的品行，洞明豁达的修养，锲而不舍的理想和追求。</p><p>现在，我很享受读书的感觉，这种感觉以前从不曾有，借着这种感觉，顺便又给自己买了几本书，几乎都是经典，有的是一直就想读的，有的是别人的推荐的，有这么几本：</p><ul><li>《飘》 玛格丽特·米切尔（小平的推荐）</li><li>《约翰·克利斯朵夫》 罗曼·罗兰</li><li>《人间失格 (博集文学典藏系列)》 太宰治, 颜月（心言的推荐）</li><li>《傲慢与偏见》简·奥斯丁</li><li>《千年一叹》 余秋雨（心言的推荐）</li><li>《简爱 英文版》夏洛蒂</li></ul><p>再加上目前每天上下班在地铁上读吴军博士的《硅谷来信》，整体来说，读书内容较以前更加丰富，多少有点想弥补以前读书少的遗憾了。</p><hr><p>读完整本《此生未完成》，发现并没有清楚的去写此生到底是什么没有完成，更多的是穿插在回忆中，在小事里。重新看一遍自己的心得体会，发现也是零零散散，毫无章法。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>越南记忆</title>
    <link href="/2018/09/05/%E8%B6%8A%E5%8D%97%E8%AE%B0%E5%BF%86/"/>
    <url>/2018/09/05/%E8%B6%8A%E5%8D%97%E8%AE%B0%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180523_192308_017.jpg"></p><p>整个旅行时间从5月20号出发到6月6号结束，耗时18天，之后由于换城市换工作等原因一直非常忙碌，直到今天（9月12号）才有时间来回忆这次旅程。时隔数月，差不多很多东西都已经忘记了，而且旅行前也没有做任何攻略，都是走到哪儿看到哪儿。本次游记只凭回忆随心所记，重点在沿途见闻，以及面对未知的无限惊喜，因此就把标题定为越南记忆吧。</p><span id="more"></span><h1 id="越南行缘由"><a href="#越南行缘由" class="headerlink" title="越南行缘由"></a>越南行缘由</h1><p>第一次出国自由行选择越南最大的原因估计还是因为少爷和香香吧，看他们直播看了一年多，很欢乐，下班后无所事事的2017年基本都是在他们的陪伴下度过，后来停播之后还为此写了一篇文章记忆少爷，香香和小玉。一直说有时间就要去河内看下，见一面。所以我和很多人都不一样，河内才是我最想去的地方，而不是越南的南部，因为有朋友在。说到这就想起了大学宿舍的几个老铁，玛德，得赶紧找时间聚会。</p><h1 id="关于约伴"><a href="#关于约伴" class="headerlink" title="关于约伴"></a>关于约伴</h1><p>在此概要介绍各个人</p><ol><li>温州老大哥：63年的大叔，人很不错，但是可能确实有代沟了，做事方法和我们年轻人不一样</li><li>重庆老大哥：很搞笑，也能感觉到很有智慧，30多岁了开始出来导出旅游，旅途中就想睡觉</li><li>桂林小二哥：热情好客的小二哥，梦想开一家客栈，希望有一天能去住一哈（口音被重庆人带偏了）</li><li>少爷：通过直播认识的山西主播小伙，人很不错，现在已经没有播了</li><li>香香：有中国血统的越南妹子，河内林业大学毕业，人很不错，现在是一名兼职中越翻译</li><li>芳芳芳：在河内三十六行街认识的，就在还剑湖旁边，和香香同时出现</li><li>南京妹子HanFeng：在芽庄的青旅认识的妹子，活的很洒脱</li><li>同为离职旅行的兄弟池鱼：这算是旅行最大的收获吧，多少次喝着酒聊到深夜，有思想共鸣的同龄人好朋友，从澳洲留学回来，英语很不错，我就只能听懂，说不出来了</li><li>迪拜一姐差不多小姐肖明：英语贼棒，做事情很果断，一起旅游很舒服，啥都不用自己操心，一切办妥</li><li>重庆差不多先生小文兄弟：刚成年的胖小文，贼搞笑，虽然胖，但是水性特别好</li></ol><p>以及途中撩的一些越南妹子，就不列举了，想交朋友就大胆的去撩吧</p><h1 id="行前准备"><a href="#行前准备" class="headerlink" title="行前准备"></a>行前准备</h1><p><strong>必备</strong></p><ol><li>身份证，国内交通</li><li>护照，出入境以及国外交通和住宿</li><li>签证，淘宝或飞猪，200多</li><li>银行卡，比如工行和建行等</li><li>信用卡，比如招行visa信用卡，<strong>信用卡在国外炒鸡好用</strong></li><li>越南盾，直接找ATM机，多数ATM都是支持银联的，也可以在边境或者机场换一点，随身带点美元也是很好的</li></ol><p><strong>背包</strong></p><ol><li>双肩包，不带旅行箱（行程中遇到的大多数人都是不带旅行箱的，都是背包客）</li><li>束口袋，也可以用胸包等替代，在酒店放下双肩包出门闲逛专用</li></ol><p><strong>服装</strong></p><ol><li>短袖4件、短裤4条、内裤4条、袜子若干（因为随处都有洗衣服务Laundry Service，因此不用带太多）</li><li>薄外套1件（在大叻还有Sleeping bus上用得着）</li><li>长裤1条（可以不带，适合骑摩托时遮阳，防止膝盖和小腿晒伤，反正我是被晒脱了好几层皮）</li><li>雨伞，这个也算在服装里面，夏季多雨，伞总是有用的，从美奈到胡志明下车的时候遇到暴雨等</li><li>湿纸巾、卫生纸若干</li><li>牙刷、牙膏、毛巾、袋装洗发水，梳子，这些东西最好自己备一套，喜欢住青旅的就不说了</li><li><strong>拖鞋</strong>，这个一定要有一双，无论是sleeping bus还是海滩都用得着，很多人全程都是拖鞋</li></ol><p><strong>设备</strong></p><ol><li>手机，可以带个备用机，毕竟见到同行的人手机被偷过，我自己的手机也不小心摔碎了</li><li>电话卡，可以在网上先买好，也可以在边境买，vinaphone公司的和viettel的都可以，使用体验和国内差不多</li><li>手机三角架，支持蓝牙功能的，可手握可三脚架直立的最佳，海边拍日出必备，虽然最后也没用上</li><li>充电宝，比如小米充电宝20000mah的</li><li>手机快充数据线2根，充电宝数据线一根</li><li>Gopro 6，狗6，旅拍神器，可以租赁</li></ol><p><strong>药品</strong></p><ol><li>蚊虫叮咬止痒膏，只要不去偏僻地区，其实用不上，但是还是带着</li><li>感冒药：感冒清热颗粒，路上遇到的朋友确实有感冒的，冷热交替，很惨</li><li>止泻药：江中乳酸菌素片，旅行不拉几次肚子是不正常的</li></ol><p><strong>APP</strong></p><ol><li>地图：google地图和稀客地图，其他都是垃圾（稀客最后也没用上）</li><li>翻译：google翻译和彩云小译</li><li>社交：facebook和微信（附近人哟），还有zalo，就是越南版qq</li><li>约伴：穷游APP，很多人都有相似的行程，在途中也能遇到不少的好朋友</li><li>美食：大众点评和TripAdvisor，也就是猫途鹰，当然马蜂窝也不错</li><li>机票：首推去哪儿和航旅纵横，去哪儿用于购买，航旅纵横用于查看航班实时消息</li><li>酒店：booking和agoda，首推booking，但是agoda支持支付宝</li><li>打车：软件叫Grab，可以现金结算，邮箱注册，不需要信用卡。也可以直接打的，车身号码<strong>38383838</strong>的是靠谱的，其他的各凭运气</li></ol><p><strong>微信公众号</strong></p><ol><li>小鱼惠游，主要是用来在越南购买车票，小鱼惠游还有微信群，可以咨询，群友热心</li><li>青游堂，可以作为小鱼惠游的补充</li></ol><h1 id="关于路线"><a href="#关于路线" class="headerlink" title="关于路线"></a>关于路线</h1><p>越南整体呈南北条状，我的行程基本是一路由北到南，毕竟都说越难越美呀，美好的总是要留在最后。大致路线就是：<strong>河内Ha Noi</strong>—<strong>下龙湾Ha Long Bay</strong>—<strong>岘港Da Nang</strong>—<strong>会安Hoi An</strong>—<strong>芽庄Nha Trang</strong>—<strong>大叻Da Lat</strong>—<strong>美奈Mui Ne</strong>—<strong>胡志明（Ho Chi Minh City）</strong></p><p>其中顺化不在计划范围之内，至于会安，由于看多了国内古镇，又因为在岘港有一个海鲜大餐等着我，会安就没有去，据说灯笼很美，适合有情怀的人。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/vietnam-tour-map.jpg"></p><p>除了这张网上的行程图之外，我自己也用google地图绘制了一张，链接如下（国内可能无法打开）：</p><ul><li><a href="https://drive.google.com/open?id=10FKI8JxtoMNei_pj4f7PK8uehtjC5FwK">https://drive.google.com/open?id=10FKI8JxtoMNei_pj4f7PK8uehtjC5FwK</a></li></ul><h1 id="河内"><a href="#河内" class="headerlink" title="河内"></a>河内</h1><p>6月21日凌晨2点到南宁吴圩机场，坐机场大巴（机场大巴时间很晚）到火车站 ，入住南宁旅游集散中心旁边青年旅社(兴华苑里面，不好找，特别当时在修路) ，8点20从集散中心坐180块的9座商务车(超级舒服，推荐)到友谊关，在友谊关可以换钱，因为是9座商务车，出入境时有专人带领，走特殊通道，简直不要太爽。一路上看到的北越乡村确实挺破的，不过有心理准备，惊喜的是第一次出国看到了都是看不懂的文字。少爷在红河宾馆附近接待，然后带我们入住还剑湖北侧的<strong>cocoon inn</strong>青旅。晚上在三十六行街吃饭，等香香和重庆妹子芳芳，不过旅游区的价格贼高还难吃，所有人就在少爷和香香的带领下换地点吃火锅，结束后在还剑湖西北角咖啡馆喝咖啡，第一天就这么充实，对后续的行程也就很期待了。</p><p>到越南的第一个公路服务区外景：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180521_141712.jpg"></p><p>还剑湖白天和晚上的景色：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180521_171743.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180521_213144.jpg"></p><p>同行的妹子吃火锅：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180521_204756.jpg"></p><p>第二天一大早跟着一日游的团（马蜂窝可预订，青旅前台也可以预定，不过会稍微贵一点，都有接车服务，接车体验真的很好啊）去了下龙湾，虽然路上时间较长，但是景色不错，主要看的就是海上的山，听去过的人说和桂林那边的很像，因此桂林和下龙湾两个地方去一个就够了。</p><p>等再回到河内就已经晚上10点多了，这个一日游真的好累，各自洗洗就睡了。由于决定坐6月23号晚上的sleeping bus去岘港，所以还有一整个白天的时间可以闲逛河内。</p><p>第二天9点在cocoon inn前台预定河内到岘港的sleeping bus（因为这个时候还不知道有小鱼惠游），然后办理check out ，再去河内大教堂打卡，接着去巴亭广场（其实没啥意思），午饭的时候在还剑湖西边的一家小餐馆吃的第一顿米饭(很实惠)，因为时间还很充足，就在餐馆旁边的massage店体验了一下越式massage，按的很不错，妹子长得很漂亮。之后返回cocoon inn乘坐sleeping bus了，第一次做汽车卧铺还担心个子太高，睡不下，结果是想太多了，这么多欧美大个都睡得下，根本不是问题，简直不要太舒服。</p><p>河内大教堂：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180523_105526.jpg"></p><h1 id="岘港"><a href="#岘港" class="headerlink" title="岘港"></a>岘港</h1><p>早上9点车到了顺化Hue，居然还要换车，只想说酒店前台定的服务真不咋地，还是小鱼靠谱，停车并等后续车去岘港，到岘港之后，一直以为会进站，结果这个车压根不停，直接继续向南走了，导致我们坐过了一段距离。到岘港之后入住booking上定好了的Rom Casa Hostel，天气太热，一直休息直到下午6点才出发去美溪海滩看海景坐躺椅，美溪海滩的景色真的很好啊，比后续看到的芽庄海滩好太多太多了。而且岘港也是越南基础设施最好的城市，在这里体验生活相比也是极好的。</p><p>美溪海滩：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180524_175130.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180524_175135.jpg"></p><p>在岘港的第二天，一大早在青旅前台租摩托沿着海边公路一路赶到海云岭、灵姑湾。加油时乱收费，路上等人时头盔掉了，在海云岭山上买了一个，花了50块，血亏。不过好在海云岭和灵姑湾的景色很美。灵姑湾美景：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180525_115358.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180525_123216.jpg"></p><p>晚上当然还是继续海鲜啦。</p><p>现在想来本次越南旅行的最大遗憾就是没有在岘港多待几天，每天晚上只要坐在美溪海滩边的躺椅上就很舒服，什么都不想做，静静的听海浪声和人们的嬉戏声就很美好了。</p><h1 id="芽庄"><a href="#芽庄" class="headerlink" title="芽庄"></a>芽庄</h1><p>到芽庄的时候还很早，凌晨5点多。打车到青旅。放下行李，坐等四岛游的车来接。整个四岛游的形成中就两个感想：水是真的蓝，导游确实坑。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/eyeemfiltered1527862224544.jpg"></p><p>晚上买了些喝的和池鱼韩枫在hostel门口各种聊，一直到很晚，应该有一点了吧。不同的人真的有不一样的想法。</p><p>除了四岛游之外就只是去洗了一个泥浆浴，芽庄最著名的泥浆浴<code>i-resort</code>确实还可以，值得一去。</p><h1 id="大叻"><a href="#大叻" class="headerlink" title="大叻"></a>大叻</h1><p>整个行程中玩的最舒心的地方就属大叻了。芽庄到大叻的路比较差，很多路段都处在山中，半路上遭遇大雾，被迫停车。晚上到大叻入住<code>viridian hostel</code>（中文名称叫翠绿住宿加早餐旅馆），一对越南青年夫妻开的，老板叫wing，人很ncie，虽然设施一般，但是评分还不错（另外有一家评分不错的hostel不接待中国人，据说是曾经和中国人发生过几次不愉快的事情）。后续三天全部住在<code>viridian hostel</code>，旅社附近有一家很便宜的洗衣店<code>Laundry Service</code>，洗的贼香，地图上可以搜到。晚上一堆人打卡疯狂屋对面的网红餐厅<code>le chalet dalat</code>。</p><p>在大叻的几天依次打卡以下景点：</p><ol><li>疯狂屋（crazy house）</li><li>达坦拉瀑布（Datala Falls）</li><li>大叻火车站，寻找最高点拍大叻夜景失败。</li><li>大叻夜市，用作业本包起来的大叻特色的一种饼，路边随处可见</li><li>春香湖，划船</li></ol><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/eyeemfiltered1527609964995.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180529_105243.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/eyeemfiltered1527609846032.jpg"></p><h1 id="美奈"><a href="#美奈" class="headerlink" title="美奈"></a>美奈</h1><p>从大叻到美奈做的是汉咖啡，是座位的不是sleeping bus。沿途道路很差，下午五点左右到美奈，入住<code>Mui Ne Ocean Hotel</code>(是一个越南大叔开的，在深圳待过很多年，也算是我在越南见到的仅有的有肚子的人，说是在深圳涨起来的)，休息直到晚上，韩枫、池鱼、俞卫四人在Bibo吃海鲜大餐，主要是考虑到比MiuNe 888要便宜一点，但是味道真的挺好的，不过大龙虾味道真的一般，肉感也不是很好，以后应该也不会再吃大龙虾了。</p><p>美奈第二天：白沙丘，红沙丘，渔村码头，仙女溪半日游(马蜂窝预定，凌晨4点半吉普车出发，8点结束。因为阴天没有太阳，所以没有做沙丘摩托去白沙丘，而且白沙丘费用25万盾，太贵。渔村码头上并没有什么优质海鲜，基本都是次品，因此并没有买到想吃的食材，随之放弃晚上自己做饭的想法)。8点结束失望的半日游之后，回来补觉，直到晚上才和池鱼，大叔，韩枫四人一起吃MUINE 888这家大众点评网红店的海鲜大餐，人均吃了120。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180601_062510.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180601_062252.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180601_065103.jpg"></p><h1 id="胡志明"><a href="#胡志明" class="headerlink" title="胡志明"></a>胡志明</h1><p>11点从美奈出发，4点才到胡志明。到达的时候胡志明正遭遇台风，街道严重积水。入住agoda上的裴维青年旅舍<code>Bui Vien Hostel</code>，位置就在范五老街旁边。依次打卡以下地点：</p><ol><li>粉红教堂（耶稣圣心堂）</li><li>圣母大教堂</li><li>西贡邮政</li><li>书街</li></ol><p>最后一天的时候在胡志明<code>vincom center</code> 购物： Tommy Hilfiger 和 真维斯 ，大把的刷信用卡的感觉真好啊。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180603_125422-EFFECTS.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180603_120734.jpg"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>对于旅行，我个人还是喜欢深度游这种散步式的旅行方式，特别是喜欢在路上遇到不同的人体验不同的生活，喜欢不带目的的瞎逛，喜欢越意外越惊喜，喜欢旅行的一切。</p><p>谢谢你这么有耐心的看完我的回忆。</p><h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><p>一切回忆结束，该回归现实，需归于平淡，日常生活就是</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/vietnam-2018/IMG_20180713_190116.jpg" alt="日常coding图片"></p><p>旅游虽好，也要兼顾现实，得攒够了钱再开始下一次</p><hr><p>马蜂窝游记链接：<a href="https://www.mafengwo.cn/i/10467082.html">https://www.mafengwo.cn/i/10467082.html</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
      <tag>越南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在杰克玫瑰的一顿晚餐</title>
    <link href="/2018/08/07/%E5%9C%A8%E6%9D%B0%E5%85%8B%E7%8E%AB%E7%91%B0%E7%9A%84%E4%B8%80%E9%A1%BF%E6%99%9A%E9%A4%90/"/>
    <url>/2018/08/07/%E5%9C%A8%E6%9D%B0%E5%85%8B%E7%8E%AB%E7%91%B0%E7%9A%84%E4%B8%80%E9%A1%BF%E6%99%9A%E9%A4%90/</url>
    
    <content type="html"><![CDATA[<p>本次晚餐人员总共五人，分别是zhiyuan、yanyun、qiuiqu、yuliangmu、suncle。</p><p>刚开始听到鱼梁木这三个字就觉得这三个字肯定有一定的含义，但是有不知道，因此只能搜索一下，<strong>鱼梁木</strong>（<strong>Weirwood</strong> ）是一种遍布维斯特洛大陆的落叶乔木。它的树皮灰白如骨，叶色深红，有如千只染血手掌。多数鱼梁木的树干上刻有人脸，据说是古代的森林之子在先民渡过狭海而来之前刻上去的。现在的自由民和其余先民的后裔会在鱼梁木上继续雕刻。有时还会用树的汁液将雕刻的眼睛染成红色，当汁液滴下，看起来就像心树泣血。</p><span id="more"></span><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>五个人一起进了杰克玫瑰，开始点餐了，一如既往的是点了一些烧烤，炭烤五花肉和扇贝等肯定是必点的，每个人也都有自己想吃的菜，点餐也算是一帆风顺，很快就点完了。当然重头戏是杰克玫瑰的啤酒了，每人一大杯扎啤，后续再定。</p><p>说到酒量的问题，三个女生丝毫不虚一大杯扎啤，这也算是在我见过的女生里面很不错的了，反倒是男生有点认怂。因为经常喝酒，现在家里还有一箱茅台原浆酒没开始喝，在我看来喝酒这玩意喝的真的是一个气氛，几个人聚在一起，最有意思的就是喝酒扯淡说心里话，酒精给人带来的兴奋往往能套出一些平时不知道的，都很有意思。</p><p>至于谁和谁谈对象这些八卦事情，虽然有趣，但是刚入司没多久，对大家还不太了解，因此这件事我也就插不上嘴了，避免尴尬，在此直接略过。</p><p>若是几个同事坐在一起不谈论下公司的日常工作，一些内幕，某某同事以及某某老板，那就是不正常的。不过这个也直接在此略过，各家公司都有自己的特色，也都有自己特殊的奇葩点。不过我司的最大的优点就是在工程师文化吧，具体的参见我司大佬紫月苏写的文章<a href="https://zhuanlan.zhihu.com/p/40660103">为什么我喜欢工程师文化</a>。</p><h1 id="正片"><a href="#正片" class="headerlink" title="正片"></a>正片</h1><p>谈的时间最久的大家也最感兴趣的当属谈发财之路了。先记录一下zhiyuan在创业路上一路摸索过来的心得：</p><ol><li>对于个人：寻找团队，避免单干。</li><li>对于团队：定出一个能给大家全局规划并且让队员看到希望的leader，需要会吹牛逼画大饼，给队员以干劲，而且需要有一定的引入投资的能力。</li><li>不要轻易加入队友，需要确保每一个队友都有一定要创业的决心，有狠劲，至少不会想中途退出影响到其他队友，要不就是一首凉凉。</li><li>对于idea：和产品息息相关，因此谈论的较多，关键在idea的选择：互联网创业最容易想到的是各种游戏（剧情、养成、恐怖、色情、诈骗，写在刑法里面的都是最好赚钱的，但是不要轻易触碰）</li><li>从兴趣出发，找到属于团队的兴趣。</li></ol><p>在整个谈论的过程中，越来越觉得技术人员在一个团队中是很容易被替代掉的，但是一个好的PM是不可替代的，从鱼梁木身上看到了太多合格的PM应该具有的素质，更何况还是PM兼设计师，听说画画特别好，其中最重要的素质应该是：</p><ul><li>接触尽可能多的优秀的产品，了解其产品设计思维。</li><li>从用户出发，从人性出发，一个自己都不想用的产品，别人肯定也不会去用</li></ul><p>在这里，如果是一个对游戏感兴趣的PM，想在游戏方面创业，自然应该玩很多很多的优秀游戏，就毋庸置疑了。</p><p>当然，除了在自己的老本行走技术创业之外，还有一种比较可行的方法是输出技术到其他国家，但是需要和人合作，毕竟不像纯互联网创业零成本。这种创业类似于倒卖，有点做贸易的意思。在这里列举两个我身边的例子，但都不是IT行业的。</p><p>第一个例子是越南-少爷，一个反面例子，虽然我们关系现在很不错。但是实际情况我还是想在这里面描述一下，没有规划清楚自己想做什么，都是走一步看一步，做直播的时候没有想通过直播扩展人脉，因此在后续直播无法继续进行的前提下再去做一些中越贸易之间的事情的时候发现只有货源没有销路。</p><p>第二个例子是鬼脚七，一个正面例子，做直播的时候积极拓展人脉，梳理自己正直可靠的人格形象，后续停止直播，开始做中越之间的各种倒卖，比如水果，海鲜，坚果等等，着实赚了一大笔，因为只要找到货源完全不愁销路。这个问题恰恰是少爷面临的最大的问题。</p><p>这两个例子想说明的意思有两点：</p><ul><li>做事情之前需要好好规划，每一步创业都要有明确的目的。</li><li>必须要拓展人脉，让你身边的每一个人都成为你日后创业的助力器。</li></ul><p>最后也希望少爷后续的短视频业务一路顺风。</p><p>当然本次聚餐的最大收获是建立了一个名为色轻游戏的群组。希望能找到志同道合的人</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dinner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典面试题</title>
    <link href="/2018/05/17/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2018/05/17/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>整理面试中遇到的一些常规面试题，在此记录</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/interview-questions-collection.png"></p><span id="more"></span><h3 id="简单描述HTTP协议"><a href="#简单描述HTTP协议" class="headerlink" title="简单描述HTTP协议"></a>简单描述HTTP协议</h3><p>HTTP是超文本传输协议（HyperText Transfer Protocol）的简写，它是基于TCP&#x2F;IP协议的一个应用层协议。用于定义WEB客户端和WEB服务器之间交换数据的过程以及数据本身的格式。Http协议的运行分为四个过程，建立连接、发送请求信息、发送响应信息、关闭连接。HTTP协议有以下三个特点：</p><ul><li>基于请求和响应。</li><li>无状态的，服务端不会保存客户端的状态信息。</li><li>连接过程是短暂的，每次连接只会处理一个请求和响应。</li></ul><h3 id="HTTP请求头和响应头有哪些字段"><a href="#HTTP请求头和响应头有哪些字段" class="headerlink" title="HTTP请求头和响应头有哪些字段"></a>HTTP请求头和响应头有哪些字段</h3><p><strong>一个HTTP请求报文由请求行、请求头、空行和请求体4个部分组成</strong></p><p><strong>请求头：主要有3个部分的内容</strong></p><ul><li><p>对请求体的一些描述，比如请求体的内容长度和内容类型等。</p></li><li><p>客户端对服务端的一些要求，比如客户端可以接受的内容类型，可接受的语言和字符集编码等。</p></li><li><p>客户端需要在请求头中发送给服务端的数据，比如认证信息和cookie信息等。</p></li></ul><p><strong>一个HTTP响应报文由状态行、响应头、空行和响应体4个部分组成</strong></p><p><strong>响应头：主要是响应体的一些描述</strong></p><ul><li>比如响应体的类型，长度，语言，压缩编码类型，md5校验值等</li></ul><h3 id="HTTP长连接和短连接的区别"><a href="#HTTP长连接和短连接的区别" class="headerlink" title="HTTP长连接和短连接的区别"></a>HTTP长连接和短连接的区别</h3><p>HTTP的长连接和短连接本质上是TCP长连接和短连接。</p><p><strong>短连接</strong>：客户端和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。</p><p><strong>长连接</strong>：当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p><h3 id="如何维持HTTP长连接"><a href="#如何维持HTTP长连接" class="headerlink" title="如何维持HTTP长连接"></a>如何维持HTTP长连接</h3><p>维持HTTP的一种最简单的方法就是就是客户端定时向服务端发送心跳，就类似于UDP聊天室里面客户端需要向服务端发送心跳来表示自己还存活一样。</p><h3 id="常用心跳机制的实现方式"><a href="#常用心跳机制的实现方式" class="headerlink" title="常用心跳机制的实现方式"></a>常用心跳机制的实现方式</h3><ul><li><strong>传统的周期检测心跳机制</strong>。其检测方法是设定一个超时时间T，只要在T之内没有接收到对方的心跳包便认为对方宕机，方法简单有效，使用比较广泛。在传统方式下，目标主机会每间隔t秒发起心跳，而接收方采用超时时间T(t&lt;T)来判断目标是否宕机，接收方首先要非常清楚目标的心跳规律（周期为t的间隔）才能正确设定一个超时时间T，而T的选择依赖当前网络状况、目标主机的处理能力等很多不确定因素，因此在实际中往往会通过测试或估计的方式为T赋一个上限值。上限值设置过大，会导致判断“迟缓”，但会增大判断的正确性；过小，会提高判断效率，但会增加误判的可能性。由于存在网络闪断、丢包和网络拥塞等实际情况，在工程实践中，一般认为连续多次丢失心跳才可认定故障发生。</li><li>累计失效检测机制。随着网路负载的加大，Server心跳的接收时间可能会大于上限值T；但当网络压力减少时，心跳接收时间又会小于T，如果用一成不变的T来反映心跳状况，则会造成判断”迟缓“或误判。累计失效检测可以较好的解决这一问题，所谓的累计失效检测算法基本工作流程如下：<ul><li>对于每一个被监控资源，检测器记录心跳信息到达时间Ti。</li><li>计算在统计预测范围内的到达时间的均值和方差。</li><li>假定到达时间的分布已知（下图包括一个正态分布的公式），我们可以计算心跳延迟（当前时间t_now和上一次到达时间Tc之间的差值） 的概率，用这个概率来判断是否发生故障，可以使用对数函数来调整它以提高可用性。在这种情况下，输出1意味着判断错误（认为节点失效）的概率是10%，2意味着1%，以此类推。</li></ul></li></ul><h3 id="session和cookie的区别"><a href="#session和cookie的区别" class="headerlink" title="session和cookie的区别"></a>session和cookie的区别</h3><p>cookie和session都是认证web客户端用户身份的会话方式。他们的区别在于：</p><p><strong>session</strong>：如果web服务器端使用的是session，那么在认证成功之后，所有的数据都保存在服务器上，服务器只给客户端发送一个sessionid。后续客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid确定用户的登录状态和权限信息。<br><strong>cookie</strong>：如果web服务器端使用的是cookie，那么在认证成功之后，服务器会把认证数据发送到客户端，也就是cookie。后续客户端每次请求服务器的时候都需要发送cookie，服务器根据cookie确认用户的登录状态和权限信息</p><h3 id="全双工半双工单工"><a href="#全双工半双工单工" class="headerlink" title="全双工半双工单工"></a>全双工半双工单工</h3><ul><li>全双工：通信允许数据在两个方向上同时传输</li><li>半双工：一个时间段内只有一个动作发生。比如一条窄窄的马路，同时只能有一辆车通过，当目前有两辆车对开，这种情况下就只能一辆先过，过后另一辆再开</li><li>单工：只允许甲方向乙方传送信息，而乙方不能向甲方传送</li></ul><h3 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h3><p>所谓三次握手，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。</p><p><img src="https://www.centos.bz/wp-content/uploads/2012/08/100327002629.png?_=3690998" alt="img"></p><p>所谓四次挥手，是指TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。</p><p><img src="https://www.centos.bz/wp-content/uploads/2012/08/100327022731.jpg?_=3690998" alt="img"></p><p>需要弄明白为什么需要3次握手和四次挥手，具体的解释参见：</p><ul><li><a href="https://github.com/jawil/blog/issues/14">通俗大白话来理解TCP协议的三次握手和四次挥手</a></li></ul><h3 id="七层模型与四层模型的区别"><a href="#七层模型与四层模型的区别" class="headerlink" title="七层模型与四层模型的区别"></a>七层模型与四层模型的区别</h3><p><strong>七层</strong>： OSI 开放系统互联参考模型，它是理论的，参考模型</p><p>物理层-&gt;数据链路层-&gt;网络层-&gt;传输层-&gt;会话层-&gt;表示层-&gt;应用层</p><p><strong>四层</strong>: TCP&#x2F;IP模型 ,现在实际应用的这一层</p><p>网际接口层-&gt;互联网层-&gt;传输层-&gt;应用层</p><h3 id="进程线程协程的区别"><a href="#进程线程协程的区别" class="headerlink" title="进程线程协程的区别"></a>进程线程协程的区别</h3><p><strong>进程</strong>：进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间。由于进程比较重量，占据独立的内存，进程间的切换开销比较大，但相对比较稳定安全。</p><p><strong>线程</strong>：线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位，它与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p><strong>协程</strong>：协程是一种用户态的轻量级线程，协程之间的切换非常快，适用于IO密集型的应用。</p><h3 id="进程间通信的方式"><a href="#进程间通信的方式" class="headerlink" title="进程间通信的方式"></a>进程间通信的方式</h3><ul><li>管道（pipe）</li><li>信号与槽（signal）</li><li>消息队列（message queue）</li><li>共享内存（shared memory）</li><li>信号量（semaphore）：一种锁机制</li><li>套接字（socket）</li></ul><h3 id="线程间通信的方式"><a href="#线程间通信的方式" class="headerlink" title="线程间通信的方式"></a>线程间通信的方式</h3><ul><li>共享进程的全局的变量</li><li>线程锁</li></ul><h3 id="数据库锁的原理以及死锁的条件"><a href="#数据库锁的原理以及死锁的条件" class="headerlink" title="数据库锁的原理以及死锁的条件"></a>数据库锁的原理以及死锁的条件</h3><p><strong>数据库锁的原理</strong>：当并发事务同时访问一个资源时，有可能导致数据不一致，数据库锁这种机制可以将数据访问顺序化，以保证数据库数据的一致性。</p><p><strong>死锁的条件</strong>：两个或两个以上的进程（在数据库中就是两个请求）在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态，也就是系统产生了死锁。</p><h3 id="Sql优化基本手段"><a href="#Sql优化基本手段" class="headerlink" title="Sql优化基本手段"></a>Sql优化基本手段</h3><ol><li>选取最适用的字段属性</li><li>使用连接（JOIN）来代替子查询(Sub-Queries) </li><li>使用联合(UNION)来代替手动创建的临时表</li><li>使用索引，最常用的操作就是想尽办法让sql语句走索引</li></ol><h3 id="怎么看Mysql执行计划"><a href="#怎么看Mysql执行计划" class="headerlink" title="怎么看Mysql执行计划"></a>怎么看Mysql执行计划</h3><p>主要是看执行计划中是否走索引，重点关注的字段：</p><ul><li>select_type字段的查找类型</li><li>type字段的访问类型，常见类型有all，index，range，ref，eq_ref，const，system，NULL 性能从做至右由差至好。</li><li>rows字段的估算行数，表示根据mysql表统计信息及索引选用情况，估算找到所需记录要读取的行数。</li></ul><h3 id="什么是CI？什么是CD？"><a href="#什么是CI？什么是CD？" class="headerlink" title="什么是CI？什么是CD？"></a>什么是CI？什么是CD？</h3><ul><li>CI：持续集成<code>CONTINUOUS INTEGRATION</code>： 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</li></ul><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/CONTINUOUS-INTEGRATION.jpg"></p><ul><li>CD：持续交付<code>CONTINUOUS DELIVERY</code>：持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（<em>production-like environments</em>）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</li></ul><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/CONTINUOUS-DELIVERY.jpg"></p><ul><li>CD：持续部署<code>CONTINUOUS DEPLOYMENT</code>：持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。</li></ul><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/CONTINUOUS-DEPLOYMENT.jpg"></p><h3 id="使用容器部署一个Python项目"><a href="#使用容器部署一个Python项目" class="headerlink" title="使用容器部署一个Python项目"></a>使用容器部署一个Python项目</h3><p>目前的部署方式都是采用完整的Python项目+supervisor进行管理，如果采用Docker部署Python项目，需要先在项目目录下创建<code>Dockerfile</code>文件，然后使用<code>docker build</code>命令构建docker镜像。将镜像分发到目标机器上使用<code>docker run</code>命令运行Python项目。当容器太多时可以使用容器云进行管理。</p><h3 id="什么是死锁？用Python代码解释下"><a href="#什么是死锁？用Python代码解释下" class="headerlink" title="什么是死锁？用Python代码解释下"></a>什么是死锁？用Python代码解释下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading  <br>  <br>num = <span class="hljs-number">0</span>  <br>lock = threading.Lock()  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):  <br>    lock.acquire()  <br>    <span class="hljs-built_in">print</span> n  <br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">5</span>):  <br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;到我这就锁死了&quot;</span>  <br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;大死锁之术!&#x27;</span>)   <span class="hljs-comment"># 异常抛出之后锁未释放</span><br>    lock.release()  <br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <br>    t1 = threading.Thread(target=func, args=(<span class="hljs-number">5</span>,))  <br>    t2 = threading.Thread(target=func, args=(<span class="hljs-number">8</span>,))<br>    t1.start()  <br>    t2.start()  <br></code></pre></td></tr></table></figure><p>加锁需谨慎，在出现exception情况下没有try catch，所有线程都锁死了。</p><h3 id="什么是竞争条件（Race-Condition）？用Python代码解释下"><a href="#什么是竞争条件（Race-Condition）？用Python代码解释下" class="headerlink" title="什么是竞争条件（Race Condition）？用Python代码解释下"></a>什么是竞争条件（Race Condition）？用Python代码解释下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># incrmnt.py</span><br><span class="hljs-keyword">import</span> db<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">incremnt</span>():<br>    count = db.get_count()<br>    new_count = count + <span class="hljs-number">1</span><br>    db.set_count(new_count)<br>    <span class="hljs-keyword">return</span> new_count<br></code></pre></td></tr></table></figure><p>在并发情况下，读取，加一，写入的操作并非原子性，会产生竞争导致最后写入数据库的结果不一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 线程1和线程2同一时间在两个不同的进程中执行  </span><br><span class="hljs-comment"># 为了方便展示把他们并排放在一起  </span><br><span class="hljs-comment"># 垂直方向用来展示在某个时间点是那条语句在运行  </span><br><span class="hljs-comment"># 线程 1                                            # 线程 2  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">increment</span>():<br>                                                         <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment</span>():<br>    <span class="hljs-comment"># get_count  return 0</span><br>    count = db.get_count()<br>                                                              <span class="hljs-comment"># get_count return 0 again</span><br>                                                              count = db.get_count()<br>    new_count = count + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># set_count called with 1</span><br>    db.set_count(new_count)<br>                                                              new_count = count + <span class="hljs-number">1</span><br>                                                              <span class="hljs-comment"># set_count called with 1 again</span><br>                                                              db.set_count(new_count)<br></code></pre></td></tr></table></figure><p>解决竞态条件在在数据存储层通过互斥锁使用原子操作来进行数据更新。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bubble_sort</span>(<span class="hljs-params">arr</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(arr)-i):<br>            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:<br>                arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]<br>    <span class="hljs-built_in">print</span>(arr)<br><br>bubble_sort([<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">34</span>,<span class="hljs-number">3</span>,<span class="hljs-number">24</span>,<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序使用<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95">分治法</a>（Divide and conquer）策略来把一个<a href="https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97">序列</a>（list）分为两个子序列（sub-lists）。</p><p>步骤为：</p><ol><li>从数列中挑出一个元素，称为”基准”（pivot），</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为<strong>分区（partition）</strong>操作。</li><li><a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">function quicksort(q)<br>     var <span class="hljs-built_in">list</span> less, pivotList, greater<br>     <span class="hljs-keyword">if</span> length(q) ≤ <span class="hljs-number">1</span> &#123;<br>         <span class="hljs-keyword">return</span> q<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         select a pivot value pivot <span class="hljs-keyword">from</span> q<br>         <span class="hljs-keyword">for</span> each x <span class="hljs-keyword">in</span> q <span class="hljs-keyword">except</span> the pivot element<br>             <span class="hljs-keyword">if</span> x &lt; pivot then add x to less<br>             <span class="hljs-keyword">if</span> x ≥ pivot then add x to greater<br>         add pivot to pivotList<br>         <span class="hljs-keyword">return</span> concatenate(quicksort(less), pivotList, quicksort(greater))<br>     &#125;<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 简单版本（翻译伪代码）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">lst</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lst) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> lst<br>    less = []<br>    pivot_list = []<br>    greater = []<br>    pivot = lst[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:<br>        <span class="hljs-keyword">if</span> i &lt; pivot:<br>            less.append(i)<br>        <span class="hljs-keyword">elif</span> i &gt; pivot:<br>            greater.append(i)<br>        <span class="hljs-keyword">else</span>:<br>            pivot_list.append(i)<br>    <span class="hljs-keyword">return</span> quicksort(less) + pivot_list + quicksort(greater)<br><br><br><span class="hljs-comment"># 列表递推式版本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">lst</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lst) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> lst<br>    pivot = lst[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> quicksort([x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> x &lt; pivot]) + [pivot] + quicksort([x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> x &gt;= pivot])<br><br><br><span class="hljs-comment"># 原地分区版本（in-place partition）, left和right均为index，从0开始</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quicksort</span>(<span class="hljs-params">lst, left, right</span>):<br>    <span class="hljs-keyword">if</span> left &lt; right:<br>        pivot_new_index = partition(lst, left, right)<br>        quicksort(lst, left, pivot_new_index-<span class="hljs-number">1</span>)<br>        quicksort(lst, pivot_new_index+<span class="hljs-number">1</span>, right)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">lst, left, right</span>):<br>    pivot = lst[right]<br>    store_index  = left<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(left, right):<br>    <span class="hljs-keyword">if</span> lst[i] &lt;= pivot:<br>    lst[store_index], lst[i] = lst[i], lst[store_index]<br>    store_index += <span class="hljs-number">1</span><br>    lst[right], lst[store_index] = lst[store_index], lst[right]<br>    <span class="hljs-keyword">return</span> store_index<br></code></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找是一种在有序数组中查找某一特定元素的搜索算法。</p><p><strong>经典的二分查找</strong></p><p>搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_search</span>(<span class="hljs-params">lst, low, high, key</span>):<br>    <span class="hljs-keyword">if</span> low &gt; high:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    mid = (low + high) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> key &lt; lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search(lst, low, mid-<span class="hljs-number">1</span>, key)<br>    <span class="hljs-keyword">if</span> key &gt; lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search(lst, mid+<span class="hljs-number">1</span>, high, key)<br>    <span class="hljs-keyword">return</span> mid<br></code></pre></td></tr></table></figure><p><strong>有重复元素的二分查找</strong></p><p>在一个非递减序列中，查找指定元素key所在序列中的起始下标和终止下标</p><p>思路：先通过二分查找，找到key出现的最左边的位置，如果不存在，返回-1；再通过二分查找，找到key出现的最右边的位置，如果不存在，返回-1；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_search_left</span>(<span class="hljs-params">lst, low, high, key</span>):<br>    <span class="hljs-keyword">if</span> low &gt; high:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    mid = (low + high) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> key &lt; lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search_left(lst, low, mid-<span class="hljs-number">1</span>, key)<br>    <span class="hljs-keyword">if</span> key &gt; lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search_left(lst, mid+<span class="hljs-number">1</span>, high, key)<br>    <span class="hljs-keyword">if</span> mid-<span class="hljs-number">1</span> &gt;= low <span class="hljs-keyword">and</span> lst[mid-<span class="hljs-number">1</span>] == lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search_left(lst, low, mid-<span class="hljs-number">1</span>, key)<br>    <span class="hljs-keyword">return</span> mid<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_search_right</span>(<span class="hljs-params">lst, low, high, key</span>):<br>    <span class="hljs-keyword">if</span> low &gt; high:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    mid = (low + high) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> key &lt; lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search_right(lst, low, mid-<span class="hljs-number">1</span>, key)<br>    <span class="hljs-keyword">if</span> key &gt; lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search_right(lst, mid+<span class="hljs-number">1</span>, high, key)<br>    <span class="hljs-keyword">if</span> mid+<span class="hljs-number">1</span> &lt;= high <span class="hljs-keyword">and</span> lst[mid+<span class="hljs-number">1</span>] == lst[mid]:<br>        <span class="hljs-keyword">return</span> binary_search_right(lst, mid+<span class="hljs-number">1</span>, high, key)<br>    <span class="hljs-keyword">return</span> mid<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_search</span>(<span class="hljs-params">lst, low, high, key</span>):<br>    left = binary_search_left(lst, low, high, key)<br>    right = binary_search_right(lst, low, high, key)<br>    <span class="hljs-keyword">return</span> left, right<br></code></pre></td></tr></table></figure><h3 id="图的BFS算法：队列"><a href="#图的BFS算法：队列" class="headerlink" title="图的BFS算法：队列"></a>图的BFS算法：队列</h3><ol><li>把根节点（起始节点）放到队列的末尾。</li><li>每次从队列的头部取出一个元素，查看这个元素所有的下一级元素，把它们放到队列的末尾。并把这个元素记为它下一级元素的前驱。</li><li>找到所要找的元素时结束程序。</li><li>如果遍历整个树还没有找到，结束程序。</li></ol><h3 id="图的DFS算法：栈"><a href="#图的DFS算法：栈" class="headerlink" title="图的DFS算法：栈"></a>图的DFS算法：栈</h3><ol><li>访问顶点v；</li><li>依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</li><li>若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历</li></ol><h3 id="A-算法"><a href="#A-算法" class="headerlink" title="A*算法"></a><code>A*</code>算法</h3><ul><li><p><code>https://zh.wikipedia.org/wiki/A*%E6%90%9C%E5%AF%BB%E7%AE%97%E6%B3%95</code></p></li><li><p><code>https://www.cnblogs.com/yanlingyin/archive/2012/01/15/2322640.html</code></p></li><li><p>欧几里得距离：欧几里得空间中两点间的直线距离</p></li><li><p>曼哈顿距离： 两点在南北方向上的距离加上在东西方向上的距离</p></li><li><p>切比雪夫距离：二点之间的距离定义为其各坐标数值差的最大值<code>max(|x2-x1|,|y2-y1|)</code></p></li></ul><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>Dijkstra(迪杰斯特拉)算法是典型的单源最短路径算法，用于计算一个节点到其他所有节点的最短路径。</p><p><strong>算法思想</strong>：设<code>G=(V,E)</code>是一个带权有向图，把图中顶点集合<code>V</code>分成两组，第一组为已求出最短路径的顶点集（用<code>S</code>表示，初始时<code>S</code>中只有一个源点，以后每求得一条最短路径 , 就将加入到集合<code>S</code>中，直到全部顶点都加入到<code>S</code>中，算法就结束了），第二组为其余未确定最短路径的顶点集合（用<code>U</code>表示），按最短路径长度的递增次序依次把第二组的顶点加入<code>S</code>中。在加入的过程中，总保持从源点<code>v</code>到<code>S</code>中各顶点的最短路径长度不大于从源点<code>v</code>到<code>U</code>中任何顶点的最短路径长度。此外，每个顶点对应一个距离，<code>S</code>中的顶点的距离就是从<code>v</code>到此顶点的最短路径长度，<code>U</code>中的顶点的距离，是从v到此顶点只包括S中的顶点为中间顶点的当前最短路径长度。</p><p><strong>算法步骤</strong>：</p><ol><li>初始时，<code>S</code>只包含源点，即<code>S＝&#123;v&#125;</code>，<code>v</code>的距离为<code>0</code>。<code>U</code>包含除v外的其他顶点，即:<code>U</code>&#x3D;{其余顶点}，若<code>v</code>与<code>U</code>中顶点<code>u</code>有边，则<code>&lt;u,v&gt;</code>正常有权值，若<code>u</code>不是<code>v</code>的出边邻接点，则<code>&lt;u,v&gt;</code>权值为<code>∞</code>。</li><li>从<code>U</code>中选取一个距离<code>v</code>最小的顶点<code>k</code>，把<code>k</code>加入S中（该选定的距离就是<code>v</code>到<code>k</code>的最短路径长度）。</li><li>以<code>k</code>为新考虑的中间点，修改<code>U</code>中各顶点的距离；若从源点<code>v</code>到顶点<code>u</code>的距离（经过顶点<code>k</code>）比原来距离（不经过顶点<code>k</code>）短，则修改顶点<code>u</code>的距离值，修改后的距离值的顶点<code>k</code>的距离加上边上的权。</li><li>重复步骤2和3直到所有顶点都包含在S中。</li></ol><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/Dijkstra-Algorithm-Dynamic-Demonstration.gif" alt="img"></p><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><p>Floyd算法是解决任意两点间的最短路径的一种算法，Floyd算法是一个经典的动态规划算法。算法任意两点之间的距离矩阵。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">let</span> <span class="hljs-selector-tag">dist</span> <span class="hljs-selector-tag">be</span> <span class="hljs-selector-tag">a</span> |<span class="hljs-selector-tag">V</span>| × |<span class="hljs-selector-tag">V</span>| <span class="hljs-selector-tag">array</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">minimum</span> <span class="hljs-selector-tag">distances</span> <span class="hljs-selector-tag">initialized</span> <span class="hljs-selector-tag">to</span> ∞ (infinity)<br><span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">each</span> <span class="hljs-selector-tag">vertex</span> <span class="hljs-selector-tag">v</span><br>   <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[v]</span><span class="hljs-selector-attr">[v]</span> ← <span class="hljs-number">0</span><br><span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">each</span> <span class="hljs-selector-tag">edge</span> (u,v)<br>   <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[u]</span><span class="hljs-selector-attr">[v]</span> ← <span class="hljs-selector-tag">w</span>(u,v)  <span class="hljs-comment">// the weight of the edge (u,v)</span><br><span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">k</span> <span class="hljs-selector-tag">from</span> <span class="hljs-number">1</span> <span class="hljs-selector-tag">to</span> |<span class="hljs-selector-tag">V</span>|<br>   <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">from</span> <span class="hljs-number">1</span> <span class="hljs-selector-tag">to</span> |<span class="hljs-selector-tag">V</span>|<br>      <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">j</span> <span class="hljs-selector-tag">from</span> <span class="hljs-number">1</span> <span class="hljs-selector-tag">to</span> |<span class="hljs-selector-tag">V</span>|<br>         <span class="hljs-selector-tag">if</span> <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> &gt; <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[k]</span> + <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[k]</span><span class="hljs-selector-attr">[j]</span> <br>            <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> ← <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[k]</span> + <span class="hljs-selector-tag">dist</span><span class="hljs-selector-attr">[k]</span><span class="hljs-selector-attr">[j]</span><br>         <span class="hljs-selector-tag">end</span> <span class="hljs-selector-tag">if</span><br></code></pre></td></tr></table></figure><h3 id="啤酒瓶问题"><a href="#啤酒瓶问题" class="headerlink" title="啤酒瓶问题"></a>啤酒瓶问题</h3><p>1块钱一瓶水2个空瓶子换1瓶有20瓶可以喝到几瓶，并且可以临时赊欠</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">money</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;每个空瓶都借一瓶水，能喝的水就是钱数乘2&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> money * <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span> calc(<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>1块钱一瓶水2个空瓶子换1瓶有20瓶可以喝到几瓶，不可以临时赊欠</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">money</span>):<br>    <span class="hljs-comment"># 初始可以喝money瓶水，有money个瓶子</span><br>    <span class="hljs-keyword">return</span> _calc(money, money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_calc</span>(<span class="hljs-params">drink_bottle, empty_bottle_num</span>):<br>    <span class="hljs-keyword">if</span> empty_bottle_num == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> empty_bottle_num == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> drink_bottle<br>    <span class="hljs-keyword">return</span> _calc(drink_bottle + empty_bottle_num/<span class="hljs-number">2</span>, empty_bottle_num % <span class="hljs-number">2</span> + empty_bottle_num/<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span> calc(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>一元钱一瓶水，两个空瓶可以换一瓶，三个盖儿可以换一瓶，20元最多能喝多少? 不可以临时赊欠</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">money</span>):<br>    <span class="hljs-comment"># 初始可以喝money瓶水，有money个瓶子, 有money个盖子</span><br>    <span class="hljs-keyword">return</span> _calc(money, money, money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_calc</span>(<span class="hljs-params">drink_bottle, empty_bottle_num, bottle_cap_num</span>):<br>    <span class="hljs-keyword">while</span> empty_bottle_num &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> bottle_cap_num &gt;= <span class="hljs-number">3</span>:<br>        drink_bottle, empty_bottle_num, bottle_cap_num = _handle1(drink_bottle, empty_bottle_num, bottle_cap_num)<br>        drink_bottle, empty_bottle_num, bottle_cap_num = _handle2(drink_bottle, empty_bottle_num, bottle_cap_num)<br>    <span class="hljs-keyword">return</span> drink_bottle<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_handle1</span>(<span class="hljs-params">drink_bottle, empty_bottle_num, bottle_cap_num</span>):<br>    <span class="hljs-keyword">if</span> empty_bottle_num &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> drink_bottle, empty_bottle_num, bottle_cap_num<br>    <span class="hljs-keyword">return</span> _handle1(drink_bottle+empty_bottle_num/<span class="hljs-number">2</span>, empty_bottle_num % <span class="hljs-number">2</span> + empty_bottle_num/<span class="hljs-number">2</span>,<br>                    bottle_cap_num+empty_bottle_num/<span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_handle2</span>(<span class="hljs-params">drink_bottle, empty_bottle_num, bottle_cap_num</span>):<br>    <span class="hljs-keyword">if</span> bottle_cap_num &lt;= <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> drink_bottle, empty_bottle_num, bottle_cap_num<br>    <span class="hljs-keyword">return</span> _handle2(drink_bottle+bottle_cap_num/<span class="hljs-number">3</span>, empty_bottle_num+bottle_cap_num/<span class="hljs-number">3</span>,<br>                    bottle_cap_num % <span class="hljs-number">3</span> + bottle_cap_num/<span class="hljs-number">3</span>)<br><br><br><span class="hljs-built_in">print</span> calc(<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h3 id="青蛙跳台阶问题"><a href="#青蛙跳台阶问题" class="headerlink" title="青蛙跳台阶问题"></a>青蛙跳台阶问题</h3><p>一只青蛙可以一次跳一级台阶，也可以一次跳两级台阶，如果青蛙要跳上n级台阶，共有多少钟跳法？</p><blockquote><p>当青蛙即将跳上n级台阶时，共有两种可能性，一种是从n-1级台阶跳一步到n级，另外一种是从n-2级台阶跳两步到n级，所以求到n级台阶的所有可能性f(n)就转变为了求到n-2级台阶的所有可能性f(n-2)和到n-1级台阶的所有可能性f(n-1)之和，以此类推至最后f(2)&#x3D;f(0)+f(1)&#x3D;1+1。递推公式就是f(n) &#x3D; f(n - 1) + f(n - 2)</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">          /  <span class="hljs-number">1</span>                               <span class="hljs-built_in">n</span>=<span class="hljs-number">1</span><br>f(<span class="hljs-built_in">n</span>)=      <span class="hljs-number">2</span>                              <span class="hljs-built_in">n</span>=<span class="hljs-number">2</span><br>          \  f(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>)+(f-<span class="hljs-number">2</span>)               <span class="hljs-built_in">n</span>&gt;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果青蛙一次可以跳1到n之间的任意阶，那么此时需要采用裂项相消的方法计算。参考：</p><ul><li><a href="https://blog.csdn.net/bin_ge_love/article/details/52415363">https://blog.csdn.net/bin_ge_love/article/details/52415363</a></li></ul><h3 id="斐波拉契数列问题"><a href="#斐波拉契数列问题" class="headerlink" title="斐波拉契数列问题"></a>斐波拉契数列问题</h3><p><strong>递归</strong>： 时间复杂度O(2^n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n-<span class="hljs-number">1</span>) + fib(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>递推</strong>： 时间复杂度O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    a = b = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>        c = a + b<br>        a, b = b, c<br>    <span class="hljs-keyword">return</span> b<br></code></pre></td></tr></table></figure><p>矩阵求解的方法忽略。</p><p>参考：<a href="https://www.cnblogs.com/xudong-bupt/archive/2013/03/19/2966954.html">https://www.cnblogs.com/xudong-bupt/archive/2013/03/19/2966954.html</a></p><h3 id="微博短链接设计"><a href="#微博短链接设计" class="headerlink" title="微博短链接设计"></a>微博短链接设计</h3><p>TinyUrl问题：</p><p><a href="http://wdxtub.com/interview/14520604447653.html">http://wdxtub.com/interview/14520604447653.html</a></p><p><a href="https://www.zhihu.com/question/29270034">https://www.zhihu.com/question/29270034</a></p><h3 id="为什么一个语言中，”函数是第一公民”是很重要的"><a href="#为什么一个语言中，”函数是第一公民”是很重要的" class="headerlink" title="为什么一个语言中，”函数是第一公民”是很重要的"></a>为什么一个语言中，”函数是第一公民”是很重要的</h3><p>函数作为第一功名时，函数本身可以作为传递的对象，而在c语言中函数只是一段程序代码，它不是一个对象，函数名则是函数的地址，因此我们只能通过指针——通过传递地址的方式来解决。</p><h3 id="理解Restful-api架构"><a href="#理解Restful-api架构" class="headerlink" title="理解Restful api架构"></a>理解Restful api架构</h3><p>Rest全称是 Resource Representational State Transfer（前面的主语Resource被省略掉了），通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：</p><blockquote><p>Resource：资源，即数据（前面说过网络的核心）。比如 newsfeed，friends等；<br>Representational：某种表现形式，比如用JSON，XML，JPEG等；<br>State Transfer：状态变化。通过HTTP动词实现。</p></blockquote><p>之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/RestfulApi.jpg"></p><p>参考：<a href="https://www.zhihu.com/question/27785028">知乎-REST 架构该怎么生动地理解？</a></p><h3 id="Restful-api架构设计规范"><a href="#Restful-api架构设计规范" class="headerlink" title="Restful api架构设计规范"></a>Restful api架构设计规范</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li><li><a href="http://blog.gusibi.com/post/build_restful_api_by_swagger/">http://blog.gusibi.com/post/build_restful_api_by_swagger/</a></li></ul><h3 id="nginx的使用"><a href="#nginx的使用" class="headerlink" title="nginx的使用"></a>nginx的使用</h3><p>一个完整的nginx配置一般情况下会包含5个通用的配置</p><ul><li>共用的配置，比如指定pid，限制连接数，是否使用epoll之类的</li><li>Upstream模块：通过upstream模块实现负载均衡</li><li>http模块：入口模块</li><li>http中的server模块：http中可以有多个server，一个server就是一个站点</li><li>http中的location模块：匹配url</li></ul><p>nginx最常用的操作是：实现restful api的负载均衡，可以分发到多个server节点。</p><h3 id="权限系统的设计"><a href="#权限系统的设计" class="headerlink" title="权限系统的设计"></a>权限系统的设计</h3><ul><li>用户表-角色表-权限表-资源表</li><li>用户角色关联表</li><li>角色资源权限关联表</li></ul><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Classic-Interview-Questions/Role-Resource-Permission-Association-Table.png"></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="两种持久化"><a href="#两种持久化" class="headerlink" title="两种持久化"></a>两种持久化</h4><ul><li>快照RDB：会在一个特定的间隔保存那个时间点的一个数据快照。</li><li>追加AOF：会记录每一个服务器收到的写操作</li></ul><p><img src="/Users/mac/Desktop/redis-data-persistence.jpg" alt="redis-data-persistence"></p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>请求去查询一条压根儿数据库中根本就不存在的数据，也就是缓存和数据库都查询不到这条数据，但是请求每次都会打到数据库上面去。</p><p>这种查询不存在数据的现象我们称为<strong>缓存穿透</strong>。</p><p>解决方法：</p><ol><li>缓存空值：空数据的key有限，重复率比较高的，采用这种方式进行缓存</li><li>在缓存之前在加一层 BloomFilter ，在查询的时候先去 BloomFilter 去查询 key 是否存在，如果不存在就直接返回，存在再走查缓存 -&gt; 查 DB。空数据的Key较多时，采用这种方法</li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>在平常高并发的系统中，大量的请求同时查询一个 key 时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去。这种现象我们称为<strong>缓存击穿</strong>。</p><p>解决办法：在第一个请求穿过缓存查询数据库的时候加互斥锁，取到数据之后加缓存</p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到DB上面。结果就是DB 称不住，挂掉。</p><p>解决办法：</p><ol><li>事前<ul><li>使用集群缓存，保证缓存服务的高可用</li><li>设置不同的失效时间：在一个基础的时间上加上或者减去一个范围内的随机值</li></ul></li><li>事中：使用本地缓存 + Hystrix限流&amp;降级,避免MySQL被打死</li><li>事后：开启redis持久化机制，从rdb或者aof尽快恢复缓存集群</li></ol><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p><img src="/Users/mac/Desktop/mongodb-cluster.jpg" alt="mongodb-cluster"></p><h3 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h3><p>使用RabbitMQ做broker，用 Django ORM 配合数据库 做 Result Backend。</p><p>为什么不使用redis做broker：</p><ul><li>如果使用Redis，强行重启 Worker的时候不丢消息但任务可能会不执行, RabbitMQ 则一切正常</li><li>另外redis要注意开启持久化</li></ul><p>Celery内存泄漏问题：</p><p>celery配置项如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CELERYD_CONCURRENCY</span> = <span class="hljs-number">2</span>      celery worker并发数<br><span class="hljs-attr">CELERYD_MAX_TASKS_PER_CHILD</span> = <span class="hljs-number">5</span>   每个worker最大执行任务数<br></code></pre></td></tr></table></figure><p> 执行celery -A ansibleAPI.celery worker启动celery，通过ps -ef | grep celery可以看到两个celery worker进程（8226，8228）。</p><p>利用celery worker进行某个任务，当worker没有执行到最大任务时（即销毁重建），每执行一次任务占用内存必然有所增加，任务数为9，10时（celery均匀调度，并发数*最大任务数），分别有原8228 worker被销毁，重新创建9386 worker及原8226 worker被销毁，重新创建9564 worker，此时，运行第9次时，占用总内存有所下降，运行第10次时，总内存回到初如值，同样任务执行第19、20次情况类似。</p><p><strong>celery并发计算规则</strong><br>celery任务并发只与celery配置项CELERYD_CONCURRENCY 有关，与CELERYD_MAX_TASKS_PER_CHILD没有关系，即CELERYD_CONCURRENCY&#x3D;2，只能并发2个worker，此时任务处理较大的文件时，执行两次可以看到两个task任务并行执行，而执行第三个任务时，开始排队，直到两个worker执行完毕。</p><p><strong>结论</strong><br>celery执行完任务不释放内存与原worker一直没有被销毁有关，因此CELERYD_MAX_TASKS_PER_CHILD可以适当配置小点，而任务并发数与CELERYD_CONCURRENCY配置项有关，每增加一个worker必然增加内存消耗，同时也影响到一个worker何时被销毁，因为celery是均匀调度任务至每个worker，因此也不宜配置过大，适当配置。</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h3 id="Pulsar"><a href="#Pulsar" class="headerlink" title="Pulsar"></a>Pulsar</h3><h3 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h3><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><h3 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h3><p><strong>降级一般而言指的是我们自身的系统出现了故障而降级。而熔断一般是指依赖的外部接口出现故障的情况断绝和外部接口的关系。</strong></p><p>例如你的A服务里面的一个功能依赖B服务，这时候B服务出问题了，返回的很慢。这种情况可能会因为这么一个功能而拖慢了A服务里面的所有功能，因此我们这时候就需要熔断！即当发现A要调用这B时就直接返回错误(或者返回其他默认值啊啥的)，就不去请求B了。我这还是举了两个服务的调用，有些那真的是一环扣一环，出问题不熔断，那真的是会雪崩。</p><p>当然也有人认为熔断不就是降级的一种的，我觉得你非要说熔断也属于一种降级我也没法反驳，但是它们本质上的突出点和想表达的意思还是有一些不同的。</p><p>那什么时候熔断合适呢？也就是到达哪个阈值进行熔断，5分钟内50%的请求都超过1秒？还是啥？参考降级。</p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>上面说的两个算是请求过来我们都受理了，这个限流就更狠了，直接跟请求说对不起再见！也就是系统规定了多少承受能力，只允许这么些请求能过来，其他的请求就说再见了。</p><p>一般限制的指标有：<strong>请求总量或某段时间内请求总量</strong>。</p><p>请求总量：比如秒杀的，秒杀100份产品，我就放5000名进来，超过的直接拒绝请求了。</p><p>某段时间内请求总量：比如规定了每秒请求的峰值是1W，这一秒内多的请求直接拒绝了。咱们下一秒再见。</p><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>降级也就是服务降级，当我们的服务器压力剧增为了<strong>保证核心功能的可用性</strong> ，而<strong>选择性的降低一些功能的可用性，或者直接关闭该功能</strong>。这就是典型的<strong>丢车保帅</strong>了。 就比如贴吧类型的网站，当服务器吃不消的时候，可以选择把发帖功能关闭，注册功能关闭，改密码，改头像这些都关了，为了确保登录和浏览帖子这种核心的功能。</p><p>一般而言都会建立一个独立的降级系统，可以灵活且批量的配置服务器的降级功能。当然也有用代码自动降级的，例如接口超时降级、失败重试多次降级等。具体失败几次，超时设置多久，由你们的业务等其他因素决定。开个小会，定个值，扔线上去看看情况。根据情况再调优。</p><h3 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h3><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>先看一个小例子：</p><p>一些商品要缓存到redis里，高并发度，低并发写，要怎么缓存？</p><ul><li>写完mysql去更新redis就行。如果不一致就按照CAP理论用下面的方法处理</li></ul><blockquote><p>网络抖动就是P，C就是强一致性，A就是可用性，满足cp还是满足ap</p><p>cp就是写redis失败，就让写入mysql也失败，也就是不满足可用性</p><p>ap就是写redis失败，就找个地方存起来，或者mysql上标记下，后面补偿写</p></blockquote><h3 id="事务的级别"><a href="#事务的级别" class="headerlink" title="事务的级别"></a>事务的级别</h3><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读（Dirty Read）</th><th align="left">不可重复读（NonRepeatable Read）</th><th align="left">幻读（Phantom Read）</th></tr></thead><tbody><tr><td align="left">未提交读（Read uncommitted）</td><td align="left">可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">已提交读（Read committed）</td><td align="left">不可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">可重复读（Repeatable read）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">可能</td></tr><tr><td align="left">可串行化（Serializable ）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">不可能</td></tr></tbody></table><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li></ul><p>Mysql 默认的事务隔离级别是可重复读REPEATABLE_READ，并且通过GAP锁解决幻读的问题<br>Oracle默认的事务隔离级别是读已提交READ_COMMITTED</p><p><strong>不可重复读和幻读的区别</strong></p><blockquote><p>不可重复读重点在于update和delete，而幻读的重点在于insert。<br>如果使用锁机制来实现这两种隔离级别，在可重复读中，该sql第一次读取到数据后，就将这些数据加锁，其它事务无法修改这些数据，就可以实现可重复读了。但这种方法却无法锁住insert的数据，所以当事务A先前读取了数据，或者修改了全部数据，事务B还是可以insert数据提交，这时事务A就会发现莫名其妙多了一条之前没有的数据，这就是幻读，不能通过行锁来避免。需要Serializable隔离级别 ，读用读锁，写用写锁，读锁和写锁互斥，这么做可以有效的避免幻读、不可重复读、脏读等问题，但会极大的降低数据库的并发能力。<br>所以说不可重复读和幻读最大的区别，就在于如何通过锁机制来解决他们产生的问题。<br>上文说的，是使用悲观锁机制来处理这两种问题，但是MySQL、ORACLE、PostgreSQL等成熟的数据库，出于性能考虑，都是使用了以乐观锁为理论基础的MVCC（多版本并发控制）来避免这两种问题。</p></blockquote><p>行锁防止别的事务修改或删除，GAP锁防止别的事务新增，行锁和GAP锁结合形成的的Next-Key锁共同解决了RR级别在写数据时的幻读问题。</p><p><strong>Springboot事务隔离</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Isolation</span> &#123;<br>    DEFAULT(-<span class="hljs-number">1</span>),  <span class="hljs-comment">// 默认的是使用数据库当前隔离级别</span><br>    READ_UNCOMMITTED(<span class="hljs-number">1</span>),<br>    READ_COMMITTED(<span class="hljs-number">2</span>),<br>    REPEATABLE_READ(<span class="hljs-number">4</span>),<br>    SERIALIZABLE(<span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Springboot事务传播行为</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Propagation</span> &#123;<br>    REQUIRED(<span class="hljs-number">0</span>),<br>    SUPPORTS(<span class="hljs-number">1</span>),<br>    MANDATORY(<span class="hljs-number">2</span>),<br>    REQUIRES_NEW(<span class="hljs-number">3</span>),<br>    NOT_SUPPORTED(<span class="hljs-number">4</span>),<br>    NEVER(<span class="hljs-number">5</span>),<br>    NESTED(<span class="hljs-number">6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">Innodb中的事务隔离级别和锁的关系 - 美团技术团队</a></p><h3 id="Python的gc机制"><a href="#Python的gc机制" class="headerlink" title="Python的gc机制"></a>Python的gc机制</h3><p>python引用计数 + 分代收集和标记清除（处理循环引用），进行垃圾回收</p><p><strong>标记清除(Mark Sweep)</strong></p><ul><li>标记清除算法主要分为标记阶段和清除阶段。标记阶段是把所有活动对象做上标记。清除阶段是把那些没有标记的对象，也就是非活动对象进行回收。</li></ul><p><strong>分代收集（Generational Collection）算法</strong></p><ul><li>对于一个大型的系统，当创建的对象和方法变量比较多时，堆内存中的对象也会比较多，如果逐一分析对象是否该回收，那么势必造成效率低下。分代收集算法是基于这样一个事实：不同的对象的生命周期(存活情况)是不一样的，而不同生命周期的对象位于堆中不同的区域，因此对堆内存不同区域采用不同的策略进行回收可以提高 JVM 的执行效率。</li><li>分代收集可以说是以上几种算法的混合运用，不同代不同回收算法。</li></ul><p><a href="https://oangeor.github.io/2017/08/06/python-vs-java-gc-1/">https://oangeor.github.io/2017/08/06/python-vs-java-gc-1/</a></p><p><a href="https://oangeor.github.io/2017/08/13/python-vs-java-gc-2/">https://oangeor.github.io/2017/08/13/python-vs-java-gc-2/</a></p><p>面试介绍</p><p>我叫陈亮，有3年半工作经验，之前主要做的是web后端|运维开发|大数据这三块</p><hr><p>参考：</p><ul><li><a href="https://github.com/monklof/Back-End-Developer-Interview-Questions">Github-后端开发常用面试题整理</a></li><li>[Github-CyC2018 LeetCode刷题目录](<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode">https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode</a> 题解 - 目录.md)</li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>面试</tag>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop项目：从cdn日志统计直播流量</title>
    <link href="/2018/05/16/hadoop%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%BB%8Ecdn%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E7%9B%B4%E6%92%AD%E6%B5%81%E9%87%8F/"/>
    <url>/2018/05/16/hadoop%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%BB%8Ecdn%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E7%9B%B4%E6%92%AD%E6%B5%81%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>从在用的四家cdn的大量日志中，统计出每场直播的流量数据，包括国内流量和海外流量。</p><h1 id="获取日志"><a href="#获取日志" class="headerlink" title="获取日志"></a>获取日志</h1><p>目前已有的数据来源：四家cdn服务商。每个服务商都有自己不同的日志接口，不同的日志获取方式，可以把日志类型分为：</p><ul><li><p>网宿日志、帝联日志、阿里日志，腾讯日志</p></li><li><p>直播日志、录播日志</p></li><li><p>hls日志、rtmp日志、rtmpdist日志、hdl日志，不同协议日志的域名都不相同。</p></li></ul><p>各家厂商cdn日志的收集方法参见各自官网。获取到的日志示例文件名如下：</p><table><thead><tr><th>cdn_code</th><th>log_name</th></tr></thead><tbody><tr><td>netcenter</td><td>2017-12-06-2300-2330_rtmp-wsz.qukanvideo.com.cn.log.gz</td></tr><tr><td>dnion</td><td>hls-d.quklive.com_20180509_03_04.gz</td></tr><tr><td>alicdn</td><td>play-a.quklive.com_2017_12_07_1100_1200.gz</td></tr><tr><td>qukan-&gt;alicdn</td><td>recordcdn-sz.qukanvideo.com_2017_12_06_1800_1900.gz</td></tr><tr><td>tencent</td><td>2017120607_hangzhouqukan.cdn.log.gz</td></tr></tbody></table><p>可以从文件名判断属于日志所属的cdn代码和对应的协议。将cdn代码、播放类型代码、协议代码对应的关系直接存在字典中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">domain_protocol_dict = &#123;<br>    <span class="hljs-string">&#x27;recordcdn.quklive.com&#x27;</span>: (<span class="hljs-string">&#x27;qukan&#x27;</span>, <span class="hljs-string">&#x27;record&#x27;</span>, <span class="hljs-string">&#x27;hls&#x27;</span>),<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>通过日志名称匹配到域名，并取得对应的cdn代码、播放类型代码、协议代码，然后对具体的日志做不同的正则处理。</p><span id="more"></span><h1 id="日志存入HDFS"><a href="#日志存入HDFS" class="headerlink" title="日志存入HDFS"></a>日志存入HDFS</h1><p><strong>直接使用hdfs命令拷贝到HDFS中</strong></p><p>通过日志下载程序调用接口下载到的日志可以使用以下命令直接拷贝到hdfs，拷贝成功一个日志，就删除对应的本地文件系统日志。示例命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -put /tmp/2018-05-09-0000-0030_rtmpdist-wsz.qukanvideo.com.cn.log.gz cdn_log<br></code></pre></td></tr></table></figure><p><strong>使用分布式日志收集系统flume导入到HDFS中</strong></p><p>对于用户访问日志的采集，更多的是使用flume，并且会将采集的数据保存到HDFS中 。虽然本次项目日志不需要采用此种方式，但是也可以作为一个手段。flume在分布式日志收集上比较类似于ELK中的logstash，可以对比学习下。最简单（单agent）的数据流模型如下：</p><p><img src="http://flume.apache.org/_images/UserGuide_image00.png" alt="flume data flow model"></p><p>具体使用方法参见：<a href="http://flume.apache.org/FlumeUserGuide.html">Flume 1.8.0 User Guide</a></p><h1 id="hadoop压缩日志"><a href="#hadoop压缩日志" class="headerlink" title="hadoop压缩日志"></a>hadoop压缩日志</h1><p>各个cdn厂商提供的cdn日志都是gz格式的压缩日志，因此必须考虑对压缩日志的处理。Hadoop3 对于压缩格式是自动识别的。如果我们压缩的文件有相应压缩格式的扩展名（比如 lzo，gz，bzip2 等）。Hadoop 会根据压缩格式的扩展名自动选择相对应的解码器来解压数据，此过程完全是 Hadoop 自动处理，我们只需要确保输入的压缩文件有扩展名。因此这一步可以直接省略自行解压的操作。</p><p>但是需要注意在mapper环境变量中得到的输入文件的文件名是解压之前的文件名，也就是带压缩扩展名的。在hadoop3中可以通过以下变量验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>input_file_path = os.environ[<span class="hljs-string">&#x27;mapreduce_map_input_file&#x27;</span>]<br></code></pre></td></tr></table></figure><p>需要稍微注意的地方有两点：  </p><ol><li>input_file_path保存的是文件在hdfs上的完整路径。  比如：<code>hdfs://node-master:9000/user/hadoop/cdn_log/2018-05-09-0100-0130_rtmpdist-wsz.qukanvideo.com.cn.log.gz</code></li><li>老版本的api为<code>map_input_file</code>，在集群上尝试了老版本的api，代码会报错。</li></ol><h1 id="MR程序"><a href="#MR程序" class="headerlink" title="MR程序"></a>MR程序</h1><p>具体代码参见Github：<a href="https://github.com/Flowsnow/hadoop-mapreduce-demo">https://github.com/Flowsnow/hadoop-mapreduce-demo</a></p><p>需要先确定mapper和redecer中间的数据格式，需要考虑到shuffle。因为最终是要按照live_id分组进行统计，因此live_id作为key，中间数据如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">formatted_line</span> = <span class="hljs-string">&#x27;\t&#x27;</span>.join([live_id, datetime_str, ip, up_flow, down_flow])<br></code></pre></td></tr></table></figure><p>使用<code>&#39;\t&#39;</code>分隔，ip用于后续判断属于国内还是海外。</p><h2 id="flow-statistic-mapper-py"><a href="#flow-statistic-mapper-py" class="headerlink" title="flow_statistic_mapper.py"></a>flow_statistic_mapper.py</h2><p>主要从各个cdn日志中筛选出有效的格式化数据，因此最多的操作就是对日志文件名和日志每一行进行正则匹配。</p><h2 id="flow-statistic-reducer-py"><a href="#flow-statistic-reducer-py" class="headerlink" title="flow_statistic_reducer.py"></a>flow_statistic_reducer.py</h2><p>根据ip查询是国内流量还是海外流量，对每场直播进行统计。</p><h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>使用linux管道、cat命令、sort命令综合使用进行调试，示例调试命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /tmp/2018-05-09-0000-0030_rtmpdist-wsz.qukanvideo.com.cn.log | python flow_statistic_mapper.py | sort -t $&#x27;\t&#x27; -k1,1 | python flow_statistic_reducer.py<br></code></pre></td></tr></table></figure><p>因为原始日志是压缩格式的，因此调试时可以先把日志解压然后调试，相对应的mapper中的输入文件名称也会有变化，需要注意。</p><h2 id="MR调用"><a href="#MR调用" class="headerlink" title="MR调用"></a>MR调用</h2><p>命令和执行结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hadoop</span>@node-master:~/workspace/flow_statistic$ hadoop jar /usr/local/src/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>/share/hadoop/tools/lib/hadoop-streaming-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.jar -file flow_statistic_mapper.py -mapper &#x27;python flow_statistic_mapper.py&#x27; -file flow_statistic_reducer.py -reducer &#x27;python flow_statistic_reducer.py&#x27; -input all_cdn_logs/*.gz -output output-flow<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">26</span>,<span class="hljs-number">975</span> WARN streaming.StreamJob: -file option is deprecated, please use generic option -files instead.<br><span class="hljs-attribute">packageJobJar</span>:<span class="hljs-meta"> [flow_statistic_mapper.py, flow_statistic_reducer.py, /tmp/hadoop-unjar3114046136813781093/] [] /tmp/streamjob6407868495582297159.jar tmpDir=null</span><br><span class="hljs-meta">2018-05-15 19:14:28,667 INFO client.RMProxy: Connecting to ResourceManager at node-master/120.77.239.67:18040</span><br><span class="hljs-meta">2018-05-15 19:14:28,944 INFO client.RMProxy: Connecting to ResourceManager at node-master/120.77.239.67:18040</span><br><span class="hljs-meta">2018-05-15 19:14:29,587 INFO mapreduce.JobResourceUploader: Disabling Erasure Coding for path: /tmp/hadoop-yarn/staging/hadoop/.staging/job_1526300938491_0016</span><br><span class="hljs-meta">2018-05-15 19:14:30,598 INFO mapred.FileInputFormat: Total input files to process : 24</span><br><span class="hljs-meta">2018-05-15 19:14:30,741 INFO mapreduce.JobSubmitter: number of splits:24</span><br><span class="hljs-meta">2018-05-15 19:14:30,789 INFO Configuration.deprecation: yarn.resourcemanager.system-metrics-publisher.enabled is deprecated. Instead, use yarn.system-metrics-publisher.enabled</span><br><span class="hljs-meta">2018-05-15 19:14:31,866 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1526300938491_0016</span><br><span class="hljs-meta">2018-05-15 19:14:31,868 INFO mapreduce.JobSubmitter: Executing with tokens: []</span><br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">071</span> INFO conf.Configuration: resource-types.xml not found<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">072</span> INFO resource.ResourceUtils: Unable to find &#x27;resource-types.xml&#x27;.<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">177</span> INFO impl.YarnClientImpl: Submitted application application_1526300938491_0016<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">229</span> INFO mapreduce.Job: The url to track the job: http://node-master:<span class="hljs-number">18088</span>/proxy/application_1526300938491_0016/<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">231</span> INFO mapreduce.Job: Running job: job_1526300938491_0016<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">38</span>,<span class="hljs-number">323</span> INFO mapreduce.Job: Job job_1526300938491_0016 running in uber mode : false<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">38</span>,<span class="hljs-number">325</span> INFO mapreduce.Job:  map <span class="hljs-number">0</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">46</span>,<span class="hljs-number">398</span> INFO mapreduce.Job:  map <span class="hljs-number">8</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">50</span>,<span class="hljs-number">419</span> INFO mapreduce.Job:  map <span class="hljs-number">21</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">54</span>,<span class="hljs-number">438</span> INFO mapreduce.Job:  map <span class="hljs-number">25</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">14</span>:<span class="hljs-number">56</span>,<span class="hljs-number">449</span> INFO mapreduce.Job:  map <span class="hljs-number">29</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">04</span>,<span class="hljs-number">487</span> INFO mapreduce.Job:  map <span class="hljs-number">38</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">05</span>,<span class="hljs-number">492</span> INFO mapreduce.Job:  map <span class="hljs-number">42</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">06</span>,<span class="hljs-number">497</span> INFO mapreduce.Job:  map <span class="hljs-number">50</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">14</span>,<span class="hljs-number">534</span> INFO mapreduce.Job:  map <span class="hljs-number">54</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">15</span>,<span class="hljs-number">539</span> INFO mapreduce.Job:  map <span class="hljs-number">58</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">21</span>,<span class="hljs-number">569</span> INFO mapreduce.Job:  map <span class="hljs-number">67</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">23</span>,<span class="hljs-number">578</span> INFO mapreduce.Job:  map <span class="hljs-number">71</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">24</span>,<span class="hljs-number">582</span> INFO mapreduce.Job:  map <span class="hljs-number">75</span>% reduce <span class="hljs-number">0</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">30</span>,<span class="hljs-number">608</span> INFO mapreduce.Job:  map <span class="hljs-number">75</span>% reduce <span class="hljs-number">25</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">31</span>,<span class="hljs-number">613</span> INFO mapreduce.Job:  map <span class="hljs-number">79</span>% reduce <span class="hljs-number">25</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">32</span>,<span class="hljs-number">617</span> INFO mapreduce.Job:  map <span class="hljs-number">88</span>% reduce <span class="hljs-number">25</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">34</span>,<span class="hljs-number">626</span> INFO mapreduce.Job:  map <span class="hljs-number">92</span>% reduce <span class="hljs-number">25</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">36</span>,<span class="hljs-number">634</span> INFO mapreduce.Job:  map <span class="hljs-number">92</span>% reduce <span class="hljs-number">31</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">39</span>,<span class="hljs-number">646</span> INFO mapreduce.Job:  map <span class="hljs-number">96</span>% reduce <span class="hljs-number">31</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">40</span>,<span class="hljs-number">651</span> INFO mapreduce.Job:  map <span class="hljs-number">100</span>% reduce <span class="hljs-number">31</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">41</span>,<span class="hljs-number">659</span> INFO mapreduce.Job:  map <span class="hljs-number">100</span>% reduce <span class="hljs-number">100</span>%<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">43</span>,<span class="hljs-number">676</span> INFO mapreduce.Job: Job job_1526300938491_0016 completed successfully<br><span class="hljs-attribute">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">15</span> <span class="hljs-number">19</span>:<span class="hljs-number">15</span>:<span class="hljs-number">43</span>,<span class="hljs-number">784</span> INFO mapreduce.Job: Counters: <span class="hljs-number">53</span><br><span class="hljs-attribute">File</span> System Counters<br><span class="hljs-attribute">FILE</span>: Number of bytes read=<span class="hljs-number">2208548</span><br><span class="hljs-attribute">FILE</span>: Number of bytes written=<span class="hljs-number">9857943</span><br><span class="hljs-attribute">FILE</span>: Number of read operations=<span class="hljs-number">0</span><br><span class="hljs-attribute">FILE</span>: Number of large read operations=<span class="hljs-number">0</span><br><span class="hljs-attribute">FILE</span>: Number of write operations=<span class="hljs-number">0</span><br><span class="hljs-attribute">HDFS</span>: Number of bytes read=<span class="hljs-number">864242</span><br><span class="hljs-attribute">HDFS</span>: Number of bytes written=<span class="hljs-number">303</span><br><span class="hljs-attribute">HDFS</span>: Number of read operations=<span class="hljs-number">77</span><br><span class="hljs-attribute">HDFS</span>: Number of large read operations=<span class="hljs-number">0</span><br><span class="hljs-attribute">HDFS</span>: Number of write operations=<span class="hljs-number">2</span><br><span class="hljs-attribute">Job</span> Counters <br><span class="hljs-attribute">Launched</span> map tasks=<span class="hljs-number">24</span><br><span class="hljs-attribute">Launched</span> reduce tasks=<span class="hljs-number">1</span><br><span class="hljs-attribute">Data</span>-local map tasks=<span class="hljs-number">24</span><br><span class="hljs-attribute">Total</span> time spent by <span class="hljs-literal">all</span> maps in occupied slots (ms)=<span class="hljs-number">167511</span><br><span class="hljs-attribute">Total</span> time spent by <span class="hljs-literal">all</span> reduces in occupied slots (ms)=<span class="hljs-number">32319</span><br><span class="hljs-attribute">Total</span> time spent by <span class="hljs-literal">all</span> map tasks (ms)=<span class="hljs-number">167511</span><br><span class="hljs-attribute">Total</span> time spent by <span class="hljs-literal">all</span> reduce tasks (ms)=<span class="hljs-number">32319</span><br><span class="hljs-attribute">Total</span> vcore-milliseconds taken by <span class="hljs-literal">all</span> map tasks=<span class="hljs-number">167511</span><br><span class="hljs-attribute">Total</span> vcore-milliseconds taken by <span class="hljs-literal">all</span> reduce tasks=<span class="hljs-number">32319</span><br><span class="hljs-attribute">Total</span> megabyte-milliseconds taken by <span class="hljs-literal">all</span> map tasks=<span class="hljs-number">343062528</span><br><span class="hljs-attribute">Total</span> megabyte-milliseconds taken by <span class="hljs-literal">all</span> reduce tasks=<span class="hljs-number">66189312</span><br><span class="hljs-attribute">Map</span>-Reduce Framework<br><span class="hljs-attribute">Map</span> input records=<span class="hljs-number">87876</span><br><span class="hljs-attribute">Map</span> output records=<span class="hljs-number">35060</span><br><span class="hljs-attribute">Map</span> output bytes=<span class="hljs-number">2138422</span><br><span class="hljs-attribute">Map</span> output materialized bytes=<span class="hljs-number">2208686</span><br><span class="hljs-attribute">Input</span> split bytes=<span class="hljs-number">3864</span><br><span class="hljs-attribute">Combine</span> input records=<span class="hljs-number">0</span><br><span class="hljs-attribute">Combine</span> output records=<span class="hljs-number">0</span><br><span class="hljs-attribute">Reduce</span> input groups=<span class="hljs-number">9</span><br><span class="hljs-attribute">Reduce</span> shuffle bytes=<span class="hljs-number">2208686</span><br><span class="hljs-attribute">Reduce</span> input records=<span class="hljs-number">35060</span><br><span class="hljs-attribute">Reduce</span> output records=<span class="hljs-number">9</span><br><span class="hljs-attribute">Spilled</span> Records=<span class="hljs-number">70120</span><br><span class="hljs-attribute">Shuffled</span> Maps =<span class="hljs-number">24</span><br><span class="hljs-attribute">Failed</span> Shuffles=<span class="hljs-number">0</span><br><span class="hljs-attribute">Merged</span> Map outputs=<span class="hljs-number">24</span><br><span class="hljs-attribute">GC</span> time elapsed (ms)=<span class="hljs-number">3650</span><br><span class="hljs-attribute">CPU</span> time spent (ms)=<span class="hljs-number">23560</span><br><span class="hljs-attribute">Physical</span> memory (bytes) snapshot=<span class="hljs-number">8264720384</span><br><span class="hljs-attribute">Virtual</span> memory (bytes) snapshot=<span class="hljs-number">66202730496</span><br><span class="hljs-attribute">Total</span> committed heap usage (bytes)=<span class="hljs-number">6004146176</span><br><span class="hljs-attribute">Peak</span> Map Physical memory (bytes)=<span class="hljs-number">346320896</span><br><span class="hljs-attribute">Peak</span> Map Virtual memory (bytes)=<span class="hljs-number">2619580416</span><br><span class="hljs-attribute">Peak</span> Reduce Physical memory (bytes)=<span class="hljs-number">210169856</span><br><span class="hljs-attribute">Peak</span> Reduce Virtual memory (bytes)=<span class="hljs-number">3486892032</span><br><span class="hljs-attribute">Shuffle</span> Errors<br><span class="hljs-attribute">BAD_ID</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">CONNECTION</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">IO_ERROR</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">WRONG_LENGTH</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">WRONG_MAP</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">WRONG_REDUCE</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">File</span> Input Format Counters <br><span class="hljs-attribute">Bytes</span> Read=<span class="hljs-number">860378</span><br><span class="hljs-attribute">File</span> Output Format Counters <br><span class="hljs-attribute">Bytes</span> Written=<span class="hljs-number">303</span><br></code></pre></td></tr></table></figure><h1 id="流量数据导出到Mysql"><a href="#流量数据导出到Mysql" class="headerlink" title="流量数据导出到Mysql"></a>流量数据导出到Mysql</h1><p>使用Sqoop导出HDFS中的流量数据到Mysql中，需要创建有对应字段的新表，具体使用参见Sqoop导入导出文档。</p><h1 id="hadoop-streaming错误排查"><a href="#hadoop-streaming错误排查" class="headerlink" title="hadoop streaming错误排查"></a>hadoop streaming错误排查</h1><p>使用hadoop streaming编写MR程序时最常见的错误：<strong>hadoop-streaming-subprocess-failed-with-code-1</strong></p><p>对应的需要检查以下几个问题：</p><ol><li>如果是通过.&#x2F;mapper.py的方式执行，则需要给mapper.py增加执行权限</li><li>python shell命令执行时，py文件头部需要指定<code>#!/usr/bin/env python</code></li><li>Python环境和程序依赖的第三方库需要在集群中的所有节点上安装</li></ol><p>上述几项没有问题之后，基本就是代码层面的问题了。需要逐层排查</p><hr><p>参考：</p><ul><li><a href="https://www.cnblogs.com/joyeecheung/p/3841952.html">用python + hadoop streaming 编写分布式程序（三） – 自定义功能</a></li><li><a href="https://www.cnblogs.com/joyeecheung/p/3757915.html">用python + hadoop streaming 编写分布式程序（一） – 原理介绍，样例程序与本地调试</a></li><li><a href="https://hadoop.apache.org/docs/r3.0.0/hadoop-streaming/HadoopStreaming.html">官方-Hadoop Streaming</a></li><li><a href="http://grokbase.com/t/cloudera/cdh-user/132he822ep/hadoop-streaming-subprocess-failed-with-code-1">问题排查-Hadoop streaming - Subprocess failed with code 1</a></li><li><a href="http://chenlly.com/2017/04/18/Hadoop-Python%E5%AE%9E%E7%8E%B0HadoopStreaming%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%8C%E6%AC%A1%E6%8E%92%E5%BA%8F/">Hadoop-Python实现Hadoop Streaming分组和二次排序</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-compression-analysis/index.html">IBM-Hadoop 压缩实现分析</a></li><li><a href="http://blog.51cto.com/balich/2067858">hadoop mapreduce开发实践之HDFS压缩文件（-cacheArchive）</a></li><li><a href="http://icejoywoo.github.io/2015/09/28/introduction-to-hadoop-streaming.html">Hadoop Streaming入门</a></li><li><a href="http://blog.51cto.com/xpleaf/2095836">大数据采集、清洗、处理：使用MapReduce进行离线数据分析完整案例</a></li><li><a href="https://blog.csdn.net/bitcarmanlee/article/details/51735053">hadoop 代码中获取文件名 </a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>项目</tag>
      
      <tag>统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sqoop导入导出</title>
    <link href="/2018/05/09/sqoop%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <url>/2018/05/09/sqoop%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>Apache Sqoop是一种用于在Apache Hadoop和结构化数据存储（如关系数据库）之间高效传输批量数据的工具。实质就是将导入导出命令转换成mapreduce程序来实现。</p><h1 id="Sqoop版本选择"><a href="#Sqoop版本选择" class="headerlink" title="Sqoop版本选择"></a>Sqoop版本选择</h1><p>根据官网介绍，当前（文档编写时间：2018-05-07）最新的稳定版本是1.4.7。 Sqoop2的最新版本是1.99.7（下载，文档）。 请注意，1.99.7与1.4.7不兼容，且未完成功能，具体信息可以参见Apache Sqoop官网。因此不适用于生产部署。所以我们选择1.4.7版本。</p><ul><li>1.4.7版本下载地址：<a href="https://www.apache.org/dyn/closer.lua/sqoop/1.4.7">https://www.apache.org/dyn/closer.lua/sqoop/1.4.7</a></li></ul><blockquote><p>可以选择华中科技大学的镜像站进行下载：<a href="http://mirrors.hust.edu.cn/apache/sqoop/1.4.7">http://mirrors.hust.edu.cn/apache/sqoop/1.4.7</a></p></blockquote><ul><li>1.4.7版本文档地址：<a href="https://sqoop.apache.org/docs/1.4.7/index.html">https://sqoop.apache.org/docs/1.4.7/index.html</a></li></ul><span id="more"></span><h1 id="Sqoop安装配置"><a href="#Sqoop安装配置" class="headerlink" title="Sqoop安装配置"></a>Sqoop安装配置</h1><p>上传sqoop安装包sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz到&#x2F;usr&#x2F;local&#x2F;src目录中，解压并改名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/<br>tar xvfz sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz<br>mv sqoop-1.4.7.bin__hadoop-2.6.0 sqoop<br></code></pre></td></tr></table></figure><p>配置SQOOP_HOME到环境变量中，<code>vim ~/.profile</code>，然后写入以下内容（根据实际情况修改）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sqoop install <span class="hljs-built_in">env</span> settings</span><br>export SQOOP_HOME=/usr/local/src/sqoop<br>export PATH=$PATH:$SQOOP_HOME:$SQOOP_HOME/bin<br></code></pre></td></tr></table></figure><p>配置sqoop-env.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/sqoop/conf<br>mv sqoop-env-template.sh sqoop-env.sh<br></code></pre></td></tr></table></figure><p>然后使用 <code>vim sqoop-env.sh</code> 命令，打开文件添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Set path to <span class="hljs-built_in">where</span> bin/hadoop is available</span><br>export HADOOP_COMMON_HOME=/usr/local/src/hadoop-3.1.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Set path to <span class="hljs-built_in">where</span> hadoop-*-core.jar is available</span><br>export HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">set</span> the path to <span class="hljs-built_in">where</span> bin/hbase is available</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> HBASE_HOME=</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Set the path to <span class="hljs-built_in">where</span> bin/hive is available</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> HIVE_HOME=</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Set the path <span class="hljs-keyword">for</span> <span class="hljs-built_in">where</span> zookeper config <span class="hljs-built_in">dir</span> is</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> ZOOCFGDIR=</span><br></code></pre></td></tr></table></figure><p>如果数据读取不涉及hbase和hive，那么相关hbase和hive的配置可以不加；如果集群有独立的zookeeper集群，那么配置zookeeper，反之，不用配置。因为本次主要是使用Sqoop从Mysql导入数据到HDFS和使用Sqoop导出HDFS数据到Mysql，所以不需要配置这三项，但是会出现harmless warnning，不过没影响。</p><p>将mysql-connector-java.jar文件复制到sqoop&#x2F;lib文件夹下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/<br>wget https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz<br>tar xvfz mysql-connector-java-5.1.46.tar.gz<br>cp mysql-connector-java-5.1.46/mysql-connector-java-5.1.46-bin.jar /usr/local/src/sqoop/lib/<br></code></pre></td></tr></table></figure><p><strong>测试运行</strong></p><p>使用vps中的数据库测试，数据库url为ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出mysql server中所有的数据库</span><br>hadoop@iZwz9367lkujh8ulgxc2cwZ:/usr/local/src/sqoop/lib$ sqoop list-databases --connect jdbc:mysql://138.68.1.61:3306/ --username root -P<br>2018-05-07 17:05:13,057 INFO sqoop.Sqoop: Running Sqoop version: 1.4.7<br>Enter password: <br>2018-05-07 17:05:15,646 INFO manager.MySQLManager: Preparing to use a MySQL streaming resultset.<br>information_schema<br>mysql<br>performance_schema<br>wordpress<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出数据库中的所有表</span><br>hadoop@iZwz9367lkujh8ulgxc2cwZ:/usr/local/src/sqoop/lib$ sqoop list-tables --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root -P<br>2018-05-07 17:07:37,570 INFO sqoop.Sqoop: Running Sqoop version: 1.4.7<br>Enter password: <br>2018-05-07 17:07:39,948 INFO manager.MySQLManager: Preparing to use a MySQL streaming resultset.<br>wp_commentmeta<br>wp_comments<br>wp_pic_postmeta<br>wp_pic_posts<br>...<br></code></pre></td></tr></table></figure><p>sqoop 命令执行成功，代表安装成功，数据库连接成功。</p><p>如果使用阿里云RDS进行连接测试，需要配置RDS和本地的DNS，以便支持阿里云RDS的连接。如果不做配置会有如下报错：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">07</span> <span class="hljs-number">16</span>:<span class="hljs-number">54</span>:<span class="hljs-number">23</span>,<span class="hljs-number">169</span> ERROR sqoop<span class="hljs-selector-class">.Sqoop</span>: Got exception running Sqoop: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.exceptions</span><span class="hljs-selector-class">.jdbc4</span><span class="hljs-selector-class">.CommunicationsException</span>: Communications link failure<br></code></pre></td></tr></table></figure><h1 id="Sqoop从Mysql导入数据到HDFS"><a href="#Sqoop从Mysql导入数据到HDFS" class="headerlink" title="Sqoop从Mysql导入数据到HDFS"></a>Sqoop从Mysql导入数据到HDFS</h1><p>新建Mysql测试表tb_roommate：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `tb_roommate` (<br>  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;ID&#x27;,<br>  `name_1` VARCHAR(30) NOT NULL COMMENT &#x27;姓名&#x27;,<br>  `age` TINYINT(3) UNSIGNED NOT NULL COMMENT &#x27;年龄&#x27;,<br>  `height` TINYINT(3) UNSIGNED NOT NULL COMMENT &#x27;身高&#x27;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_name` (`name_1`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT=&#x27;室友表&#x27;<br></code></pre></td></tr></table></figure><p>插入测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO tb_roommate(name_1, age, height) VALUES(&#x27;ChenLiang&#x27;, 24, 182);<br>INSERT INTO tb_roommate(name_1, age, height) VALUES(&#x27;NieMing&#x27;, 23, 173);<br>INSERT INTO tb_roommate(name_1, age, height) VALUES(&#x27;LvShaohe&#x27;, 23, 172);<br>INSERT INTO tb_roommate(name_1, age, height) VALUES(&#x27;LiXuyun&#x27;, 22, 173);<br>COMMIT;<br></code></pre></td></tr></table></figure><p>查询待处理结果集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM tb_roommate WHERE age &gt; 22;<br></code></pre></td></tr></table></figure><p>数据导入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop@node-master:~/workspace$ sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate<br>Warning: /usr/local/src/sqoop/../hbase does not exist! HBase imports will fail.<br>Please set $HBASE_HOME to the root of your HBase installation.<br>Warning: /usr/local/src/sqoop/../hcatalog does not exist! HCatalog jobs will fail.<br>Please set $HCAT_HOME to the root of your HCatalog installation.<br>Warning: /usr/local/src/sqoop/../accumulo does not exist! Accumulo imports will fail.<br>Please set $ACCUMULO_HOME to the root of your Accumulo installation.<br>Warning: /usr/local/src/sqoop/../zookeeper does not exist! Accumulo imports will fail.<br>Please set $ZOOKEEPER_HOME to the root of your Zookeeper installation.<br>2018-05-09 09:47:44,962 INFO sqoop.Sqoop: Running Sqoop version: 1.4.7<br>2018-05-09 09:47:45,011 WARN tool.BaseSqoopTool: Setting your password on the command-line is insecure. Consider using -P instead.<br>2018-05-09 09:47:45,202 INFO manager.MySQLManager: Preparing to use a MySQL streaming resultset.<br>2018-05-09 09:47:45,203 INFO tool.CodeGenTool: Beginning code generation<br>2018-05-09 09:47:47,328 INFO manager.SqlManager: Executing SQL statement: SELECT t.* FROM `tb_roommate` AS t LIMIT 1<br>2018-05-09 09:47:48,371 INFO manager.SqlManager: Executing SQL statement: SELECT t.* FROM `tb_roommate` AS t LIMIT 1<br>2018-05-09 09:47:49,053 INFO orm.CompilationManager: HADOOP_MAPRED_HOME is /usr/local/src/hadoop-3.1.0<br>Note: /tmp/sqoop-hadoop/compile/6b2ce87c6baaca5f524499832b6b1bdd/tb_roommate.java uses or overrides a deprecated API.<br>Note: Recompile with -Xlint:deprecation for details.<br>2018-05-09 09:47:51,122 INFO orm.CompilationManager: Writing jar file: /tmp/sqoop-hadoop/compile/6b2ce87c6baaca5f524499832b6b1bdd/tb_roommate.jar<br>2018-05-09 09:47:51,134 WARN manager.MySQLManager: It looks like you are importing from mysql.<br>2018-05-09 09:47:51,134 WARN manager.MySQLManager: This transfer can be faster! Use the --direct<br>2018-05-09 09:47:51,134 WARN manager.MySQLManager: option to exercise a MySQL-specific fast path.<br>2018-05-09 09:47:51,134 INFO manager.MySQLManager: Setting zero DATETIME behavior to convertToNull (mysql)<br>2018-05-09 09:47:51,813 INFO mapreduce.ImportJobBase: Beginning import of tb_roommate<br>2018-05-09 09:47:51,814 INFO Configuration.deprecation: mapred.job.tracker is deprecated. Instead, use mapreduce.jobtracker.address<br>2018-05-09 09:47:52,013 INFO Configuration.deprecation: mapred.jar is deprecated. Instead, use mapreduce.job.jar<br>2018-05-09 09:47:53,671 INFO Configuration.deprecation: mapred.map.tasks is deprecated. Instead, use mapreduce.job.maps<br>2018-05-09 09:47:53,816 INFO client.RMProxy: Connecting to ResourceManager at node-master/120.77.239.67:18040<br>2018-05-09 09:47:54,816 INFO mapreduce.JobResourceUploader: Disabling Erasure Coding for path: /tmp/hadoop-yarn/staging/hadoop/.staging/job_1525781821036_0013<br>2018-05-09 09:50:15,455 INFO db.DBInputFormat: Using read commited transaction isolation<br>2018-05-09 09:50:15,629 INFO db.DataDrivenDBInputFormat: BoundingValsQuery: SELECT MIN(`id`), MAX(`id`) FROM `tb_roommate`<br>2018-05-09 09:50:15,804 INFO db.IntegerSplitter: Split size: 0; Num splits: 4 from: 1 to: 4<br>2018-05-09 09:50:16,198 INFO mapreduce.JobSubmitter: number of splits:4<br>2018-05-09 09:50:16,237 INFO Configuration.deprecation: yarn.resourcemanager.system-metrics-publisher.enabled is deprecated. Instead, use yarn.system-metrics-publisher.enabled<br>2018-05-09 09:50:16,817 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1525781821036_0013<br>2018-05-09 09:50:16,819 INFO mapreduce.JobSubmitter: Executing with tokens: []<br>2018-05-09 09:50:17,053 INFO conf.Configuration: resource-types.xml not found<br>2018-05-09 09:50:17,054 INFO resource.ResourceUtils: Unable to find &#x27;resource-types.xml&#x27;.<br>2018-05-09 09:50:17,169 INFO impl.YarnClientImpl: Submitted application application_1525781821036_0013<br>2018-05-09 09:50:17,217 INFO mapreduce.Job: The url to track the job: http://node-master:18088/proxy/application_1525781821036_0013/<br>2018-05-09 09:50:17,218 INFO mapreduce.Job: Running job: job_1525781821036_0013<br>2018-05-09 09:50:23,347 INFO mapreduce.Job: Job job_1525781821036_0013 running in uber mode : false<br>2018-05-09 09:50:23,348 INFO mapreduce.Job:  map 0% reduce 0%<br>2018-05-09 09:50:32,417 INFO mapreduce.Job:  map 25% reduce 0%<br>2018-05-09 09:50:41,462 INFO mapreduce.Job:  map 50% reduce 0%<br>2018-05-09 09:50:50,508 INFO mapreduce.Job:  map 75% reduce 0%<br>2018-05-09 09:50:59,550 INFO mapreduce.Job:  map 100% reduce 0%<br>2018-05-09 09:51:00,562 INFO mapreduce.Job: Job job_1525781821036_0013 completed successfully<br>2018-05-09 09:51:00,647 INFO mapreduce.Job: Counters: 32<br>File System Counters<br>FILE: Number of bytes read=0<br>FILE: Number of bytes written=888404<br>FILE: Number of read operations=0<br>FILE: Number of large read operations=0<br>FILE: Number of write operations=0<br>HDFS: Number of bytes read=393<br>HDFS: Number of bytes written=71<br>HDFS: Number of read operations=24<br>HDFS: Number of large read operations=0<br>HDFS: Number of write operations=8<br>Job Counters <br>Launched map tasks=4<br>Other local map tasks=4<br>Total time spent by all maps in occupied slots (ms)=23644<br>Total time spent by all reduces in occupied slots (ms)=0<br>Total time spent by all map tasks (ms)=23644<br>Total vcore-milliseconds taken by all map tasks=23644<br>Total megabyte-milliseconds taken by all map tasks=48422912<br>Map-Reduce Framework<br>Map input records=4<br>Map output records=4<br>Input split bytes=393<br>Spilled Records=0<br>Failed Shuffles=0<br>Merged Map outputs=0<br>GC time elapsed (ms)=279<br>CPU time spent (ms)=3990<br>Physical memory (bytes) snapshot=953724928<br>Virtual memory (bytes) snapshot=10424242176<br>Total committed heap usage (bytes)=560463872<br>Peak Map Physical memory (bytes)=262942720<br>Peak Map Virtual memory (bytes)=2613026816<br>File Input Format Counters <br>Bytes Read=0<br>File Output Format Counters <br>Bytes Written=71<br>2018-05-09 09:51:00,654 INFO mapreduce.ImportJobBase: Transferred 71 bytes in 186.9643 seconds (0.3798 bytes/sec)<br>2018-05-09 09:51:00,657 INFO mapreduce.ImportJobBase: Retrieved 4 records.<br>hadoop@node-master:~/workspace$ hdfs dfs -ls tb_roommate<br>Found 5 items<br>-rw-r--r--   2 hadoop supergroup          0 2018-05-09 09:50 tb_roommate/_SUCCESS<br>-rw-r--r--   2 hadoop supergroup         19 2018-05-09 09:50 tb_roommate/part-m-00000<br>-rw-r--r--   2 hadoop supergroup         17 2018-05-09 09:50 tb_roommate/part-m-00001<br>-rw-r--r--   2 hadoop supergroup         18 2018-05-09 09:50 tb_roommate/part-m-00002<br>-rw-r--r--   2 hadoop supergroup         17 2018-05-09 09:50 tb_roommate/part-m-00003<br>hadoop@node-master:~/workspace$ hdfs dfs -cat tb_roommate/part-m-00000<br>1,ChenLiang,24,182<br>hadoop@node-master:~/workspace$ hdfs dfs -cat tb_roommate/part-m-00001<br>2,NieMing,23,173<br>hadoop@node-master:~/workspace$ hdfs dfs -cat tb_roommate/part-m-00002<br>3,LvShaohe,23,172<br>hadoop@node-master:~/workspace$ hdfs dfs -cat tb_roommate/part-m-00003<br>4,LiXuyun,22,173<br></code></pre></td></tr></table></figure><p>将msyql数据库wordpress中的表tb_roommate，导入到hdfs目录，默认会导入到<code>/user/hadoop/tb_roommate</code>下，其中tb_roommate为导入的表名。</p><p>如果想要数据导入速度更快，可以使用<code>--direct</code>模式，sqoop为特定的RDBMS提供直接连接器，因此传输更快</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sqoop import <span class="hljs-params">--connect</span> jdbc<span class="hljs-function">:mysql</span>:<span class="hljs-string">//138.68.1.61</span><span class="hljs-function">:3306</span>/wordpress <span class="hljs-params">--username</span> root <span class="hljs-params">--password</span> XXXXXX <span class="hljs-params">--table</span> tb_roommate <span class="hljs-params">--direct</span><br></code></pre></td></tr></table></figure><p><strong>但是需要在每台机器上有一份mysqldump可执行文件，解决办法是复制一份mysqldump文件或者直接在每台机器上安装一个mysql数据库</strong>，如果没有mysqldump，会报如下错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>java.io.IOException: Cannot run program &quot;mysqldump&quot;: error=2, No such file or directory<br></code></pre></td></tr></table></figure><p>如果要想导入到指定的目录，添加一个选项–target-dir：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate --target-dir /output/sqoop/tb_roommate<br></code></pre></td></tr></table></figure><p>因为默认执行sqoop会有4个maptasks任务，为了满足业务的需要，可以进行修改，只需要在命令后面加一个选项-m：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate --target-dir /output/sqoop/tb_roommate -m 1<br></code></pre></td></tr></table></figure><p>执行的过程中，如果输出目录已经存在，报错，要想输出到该目录 使用选项–delete-target-dir：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate --target-dir /output/sqoop/tb_roommate -m 1 --delete-target-dir<br></code></pre></td></tr></table></figure><p>如果想在原来的基础之上追加新的数据，只需要添加一个选项–append,但是注意，–append和–delete-target-dir不能同时存在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate --target-dir /output/sqoop/tb_roommate -m 1 --append<br></code></pre></td></tr></table></figure><p>条件导入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate --target-dir /output/sqoop/tb_roommate -m 1 --append --where &quot;age &gt; 22&quot;<br></code></pre></td></tr></table></figure><p>通过sql导入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop import --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate --target-dir /output/sqoop/tb_roommate -m 1 --append --query &quot;SELECT id, name_1, age, height FROM tb_roommate WHERE age &gt; 22&quot;<br></code></pre></td></tr></table></figure><h1 id="Sqoop导出HDFS数据到Mysql"><a href="#Sqoop导出HDFS数据到Mysql" class="headerlink" title="Sqoop导出HDFS数据到Mysql"></a>Sqoop导出HDFS数据到Mysql</h1><p>数据导出到mysql，默认以逗号作为分隔符。导出数据到Mysql之前，表需要已经存在，否则报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop export --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate1 --export-dir /user/hadoop/tb_roommate<br></code></pre></td></tr></table></figure><p>类似于Mysql duplicate操作，如果存在就更新，不存在就插入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqoop export --connect jdbc:mysql://138.68.1.61:3306/wordpress --username root --password XXXXXX --table tb_roommate1 --export-dir /user/hadoop/tb_roommate -m 2 --update-key id --update-mode allowinsert<br></code></pre></td></tr></table></figure><h1 id="常见错误整理"><a href="#常见错误整理" class="headerlink" title="常见错误整理"></a>常见错误整理</h1><ol><li>阿里云RDS连接不上时，先用一个本地的url中只有ip的数据库或者是腾讯Mysql数据库进行测试，确认是否有问题</li><li>命令使用过程中的warning信息，需要判断是否是harmless的</li></ol><hr><p>参考：</p><ul><li><a href="https://sqoop.apache.org/">https://sqoop.apache.org/</a></li><li><a href="https://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html">https://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html</a></li><li><a href="https://www.jianshu.com/p/19ff7effcaf2">https://www.jianshu.com/p/19ff7effcaf2</a></li><li><a href="https://www.cnblogs.com/zhangs1986/p/7063592.html">https://www.cnblogs.com/zhangs1986/p/7063592.html</a></li><li><a href="https://acadgild.com/blog/exporting-files-hdfs-mysql-using-sqoop/">https://acadgild.com/blog/exporting-files-hdfs-mysql-using-sqoop/</a></li><li><a href="https://my.oschina.net/sniperLi/blog/687942">https://my.oschina.net/sniperLi/blog/687942</a></li><li><a href="https://www.cnblogs.com/zhangs1986/p/7052621.html">https://www.cnblogs.com/zhangs1986/p/7052621.html</a></li><li><a href="http://blog.51cto.com/xpleaf/2090584">http://blog.51cto.com/xpleaf/2090584</a></li><li><a href="https://www.alibabacloud.com/help/zh/doc-detail/28133.htm">https://www.alibabacloud.com/help/zh/doc-detail/28133.htm</a></li><li><a href="https://yq.aliyun.com/articles/43799">https://yq.aliyun.com/articles/43799</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>HDFS</tag>
      
      <tag>Sqoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hadoop3集群</title>
    <link href="/2018/05/03/%E6%90%AD%E5%BB%BAhadoop3%E9%9B%86%E7%BE%A4/"/>
    <url>/2018/05/03/%E6%90%AD%E5%BB%BAhadoop3%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>强烈建议再搭建hadoop集群之前体验一下单机模式和伪分布式模式的搭建过程，可以参考以下链接：</p><ul><li><a href="https://suncle.me/2018/04/16/Hadoop3-basic-installation-and-configuration/">https://suncle.me/2018/04/16/Hadoop3-basic-installation-and-configuration/</a></li></ul><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>本次集群搭建所依赖的软件环境如下：</p><ol><li>Linux系统：以运行在阿里云ECS上的Ubuntu 16.04 LTS版本为例</li><li>jdk-8u162-linux-x64.tar.gz</li><li>hadoop 3.1.0</li></ol><p>先了解一个概念：</p><blockquote><p><strong>Hadoop YARN</strong>： YARN是一个在所有节点上执行数据处理任务的作业调度框架。</p></blockquote><p>然后执行以下初始步骤：</p><ol><li>创建三台阿里云ECS，也可以在本地创建3台配置较好的Vmware虚拟机。分别作为hadoop集群的node-master，node1和node2（名称可以自取）。 <del>建议将每个主机名设置为节点名</del> ，一定要修改hostname。</li><li>为每台机器创建hadoop用户，后续如没有特殊说明，所有命令均在hadoop用户下执行。</li><li>在三台机器上都安装jdk，统一使用hadoop用户安装在<code>/usr/local/src</code>目录下（其他目录也可，放在用户目录下会更好，省掉权限问题），更改<code>/usr/local/src</code>目录的属主和属组为hadoop，可以使用<code>chown hadoop:hadoop /usr/local/src</code>命令更改。</li><li>需要在各个节点的&#x2F;bin目录下增加java可执行文件的软连接，以node2为例</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop@node2:~$ cd /bin<br>hadoop@node2:/bin$ sudo ln -s /usr/local/src/jdk1.8.0_162/bin/java java<br></code></pre></td></tr></table></figure><p>如果没有添加，在执行MR程序时会报错：<code>/bin/bash: /bin/java: No such file or directory</code></p><p>创建hadoop用户和安装jdk的步骤参见文章开头的单机和伪分布式搭建过程。</p><p>下面是本次集群安装的三台ECS机器的ip情况：</p><ul><li><strong>node-master</strong>: 120.77.239.67</li><li><strong>node1</strong>: 119.23.145.73</li><li><strong>node2</strong>: 119.23.141.223</li></ul><span id="more"></span><h1 id="Hadoop集群架构"><a href="#Hadoop集群架构" class="headerlink" title="Hadoop集群架构"></a>Hadoop集群架构</h1><p>在配置主从节点之前，了解Hadoop集群的不同组件是非常重要的。</p><p>主节点保存有关分布式文件系统的信息，例如ext3文件系统上的inode表，并调度资源分配。 此次搭建过程中node-master即为主节点，并运行两个守护进程：</p><ul><li><strong>NameNode</strong>：管理分布式文件系统并知道集群内存储的数据块的位置。</li><li><strong>ResourceManager</strong>：管理YARN作业，监管从节点上的调度进程和执行进程。</li></ul><p>从节点存储实际数据并提供处理能力来运行作业。分别是node1和node2，并运行两个守护进程：</p><ul><li><strong>DataNode</strong>：管理物理存储在节点上的实际数据。</li><li><strong>NodeManager</strong>：管理节点上任务的执行。</li></ul><h1 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h1><h2 id="在每个节点上创建主机文件"><a href="#在每个节点上创建主机文件" class="headerlink" title="在每个节点上创建主机文件"></a>在每个节点上创建主机文件</h2><p> 要想使用节点名称通信，需要编辑<code>/etc/hosts</code>文件以添加三台服务器的IP地址。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">120.77.239.67</span>     node-master<br><span class="hljs-number">119.23.145.73</span>     node1<br><span class="hljs-number">119.23.141.223</span>    node2<br></code></pre></td></tr></table></figure><p>相当于给ip取名称。</p><h2 id="修改所有节点hostname文件"><a href="#修改所有节点hostname文件" class="headerlink" title="修改所有节点hostname文件"></a>修改所有节点hostname文件</h2><p><strong>这一步骤一定要操作</strong>：以管理节点为例进行操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>hostname<br></code></pre></td></tr></table></figure><p>替换掉其中已有的<code>hostname</code>，写入<code>node-master</code>，和上述hosts文件中保持一致即可。</p><p>如果这个步骤不修改则会在后续集群中执行MapReduce程序过程中出现以下错误：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2018</span>-<span class="hljs-number">05</span>-<span class="hljs-number">08</span> <span class="hljs-number">19</span>:<span class="hljs-number">50</span>:<span class="hljs-number">46</span>,<span class="hljs-number">481</span> ERROR org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.yarn</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.resourcemanager</span><span class="hljs-selector-class">.scheduler</span><span class="hljs-selector-class">.SchedulerApplicationAttempt</span>: Error trying to assign container token and NM token to an updated container container_1525778560515_0005_01_000001<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalArgumentException</span>: java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.UnknownHostException</span>: iZwz99xn3877js1s191xp9Z<br>        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.SecurityUtil</span><span class="hljs-selector-class">.buildTokenService</span>(SecurityUtil<span class="hljs-selector-class">.java</span>:<span class="hljs-number">445</span>)<br>        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.yarn</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.AsyncDispatcher</span><span class="hljs-selector-class">.dispatch</span>(AsyncDispatcher<span class="hljs-selector-class">.java</span>:<span class="hljs-number">197</span>)<br>        at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.yarn</span><span class="hljs-selector-class">.event</span>.AsyncDispatcher$<span class="hljs-number">1</span><span class="hljs-selector-class">.run</span>(AsyncDispatcher<span class="hljs-selector-class">.java</span>:<span class="hljs-number">126</span>)<br>        at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">748</span>)<br>Caused by: java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.UnknownHostException</span>: iZwz99xn3877js1s191xp9Z<br></code></pre></td></tr></table></figure><p>意思是管理节点无法识别从节点的hostname，因为在管理节点的hosts文件中对应的是node2，而不是node2的真是hosname，也就是iZwz99xn3877js1s191xp9Z。因此一定要修改hostname。</p><p>参考：<a href="http://www.voidcn.com/article/p-dsepxqfl-pz.html">http://www.voidcn.com/article/p-dsepxqfl-pz.html</a></p><h2 id="为Hadoop用户分配认证密钥对"><a href="#为Hadoop用户分配认证密钥对" class="headerlink" title="为Hadoop用户分配认证密钥对"></a>为Hadoop用户分配认证密钥对</h2><p>主节点将使用ssh协议通过密钥对认证连接到其他节点，以管理群集。</p><p>以hadoop用户身份登录到node-master，并生成一个ssh-key（如果执行已生成过ssh-key则会提示重复，是否需要重写，此时忽略即可）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -b 4096<br></code></pre></td></tr></table></figure><p>将密钥复制到其他节点。 将密钥复制到节点主机本身也是一种很好的做法，这样您可以根据需要将它用作DataNode。 输入以下命令，并在询问时输入hadoop用户的密码。 如果提示是否将密钥添加到已知主机，请输入yes：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@node-master<br>ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@node1<br>ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@node2<br></code></pre></td></tr></table></figure><h2 id="下载hadoop安装包并上传"><a href="#下载hadoop安装包并上传" class="headerlink" title="下载hadoop安装包并上传"></a>下载hadoop安装包并上传</h2><p>以hadoop用户身份登录到node-master，将下载好的安装包上传并解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>tar -xzvf jdk-8u162-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="设置hadoop环境变量"><a href="#设置hadoop环境变量" class="headerlink" title="设置hadoop环境变量"></a>设置hadoop环境变量</h2><p>编辑<code>~/.profile</code>文件并写入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop install <span class="hljs-built_in">env</span> settings</span><br>HADOOP_INSTALL=/usr/local/src/hadoop-3.1.0<br>PATH=$HADOOP_INSTALL/bin:$HADOOP_INSTALL/sbin:$PATH<br>export HADOOP_INSTALL PATH<br></code></pre></td></tr></table></figure><h1 id="配置管理节点"><a href="#配置管理节点" class="headerlink" title="配置管理节点"></a>配置管理节点</h1><p>配置将在node-master上完成并复制到其他节点。</p><h2 id="设置hadoop依赖的java环境变量"><a href="#设置hadoop依赖的java环境变量" class="headerlink" title="设置hadoop依赖的java环境变量"></a>设置hadoop依赖的java环境变量</h2><p>修改<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/hadoop-env.sh</code>文件中的<code>JAVA_HOME</code>变量，改为实际的即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Many of the options here are built from the perspective that <span class="hljs-built_in">users</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">may want to provide OVERWRITING values on the <span class="hljs-built_in">command</span> line.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">For example:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#  JAVA_HOME=/usr/java/testing hdfs dfs -ls</span></span><br>JAVA_HOME=/usr/local/src/jdk1.8.0_162<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Therefore, the vast majority (BUT NOT ALL!) of these defaults</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">are configured <span class="hljs-keyword">for</span> substitution and not append.  If append</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">is preferable, modify this file accordingly.</span><br></code></pre></td></tr></table></figure><h2 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置core-site.xml</h2><p>在master主机上配置hdfs地址，注意和伪分布式的略微不同，需要直接指定master节点所在的地址。在<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/core-site.xml</code>文件中写入以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/src/hadoop-3.1.0/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Abase for other temporary directories.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://node-master:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置hdfs-site.xml</h2><p>配置副本的个数及数据的存放路径，在<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/hdfs-site.xml</code>文件中写入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/src/hadoop-3.1.0/tmp/dfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/src/hadoop-3.1.0/tmp/dfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>dfs.replication</code> 表示数据块的副本数量，指示数据在集群中的复制次数。 您可以设置2以将所有数据复制到两个节点上。 不要设置高于实际节点数量的值。</li><li><code>dfs.namenode.name.dir</code> 元数据存放路径</li><li><code>dfs.datanode.data.dir</code> 数据节点存放路径</li></ul><h2 id="配置mapred-site-xml"><a href="#配置mapred-site-xml" class="headerlink" title="配置mapred-site.xml"></a>配置mapred-site.xml</h2><p>设置YARN为作业调度器，也就是默认的MapReduce框架，在<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/mapred-site.xml</code>文件中写入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置yarn-site-xml文件"><a href="#配置yarn-site-xml文件" class="headerlink" title="配置yarn-site.xml文件"></a>配置yarn-site.xml文件</h2><p>在<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/yarn-site.xml</code>文件中写入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node-master:18040<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node-master:18030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node-master:18088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node-master:18025<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node-master:18141<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  &lt;/property<br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意修改的各个<code>value</code>需要和<code>/etc/hosts</code>中的名称保持一致。</p><p>这三项配置一定要有：<code>yarn.app.mapreduce.am.env</code> <code>mapreduce.map.env</code> <code>mapreduce.reduce.env</code>否则在执行MR程序时会直接报错（hadoop3.1中已验证）。</p><p>具体错误参考：<a href="https://stackoverflow.com/questions/47599789/hadoop-pagerank-error-when-running">https://stackoverflow.com/questions/47599789/hadoop-pagerank-error-when-running</a></p><h2 id="配置workers文件"><a href="#配置workers文件" class="headerlink" title="配置workers文件"></a>配置workers文件</h2><p>列出所有workers的主机名。在<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/workers</code>文件中写入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span><span class="hljs-title">-master</span><br>node1<br>node2<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>hadoop2.x配置的是slaves文件，这里有所改变。</li><li>此处的worker中写入了管理节点，因此启动HDFS之后也会在管理节点所在机器创建一个DataNode。如果不想在管理节点机器中开启DataNode，则删除workers文件中的node-master配置。</li></ol><p>此外，如果想在Hadoop集群中动态增加和删除节点，则更改此文件即可。</p><h1 id="配置内存分配"><a href="#配置内存分配" class="headerlink" title="配置内存分配"></a>配置内存分配</h1><p>内存分配在低RAM节点上可能会很棘手，因为默认值不适用于RAM少于8GB的节点，因此在使用sqoop等命令时调用的MapReduce程序会有如下类似的报错：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Application</span> is added to the scheduler and is not yet activated. Queue&#x27;s AM resource limit exceeded. Details : AM Partition = &lt;DEFAULT_PARTITION&gt;; AM Resource Request = &lt;memory:<span class="hljs-number">2048</span>, vCores:<span class="hljs-number">1</span>&gt;; Queue Resource Limit for AM = &lt;memory:<span class="hljs-number">3072</span>, vCores:<span class="hljs-number">1</span>&gt;; User AM Resource Limit of the queue = &lt;memory:<span class="hljs-number">3072</span>, vCores:<span class="hljs-number">1</span>&gt;; Queue AM Resource Usage = &lt;memory:<span class="hljs-number">2048</span>, vCores:<span class="hljs-number">1</span>&gt;;<br></code></pre></td></tr></table></figure><p>这里将重点介绍如何为MapReduce作业分配内存，因为此次使用的ECS机器是4GB内存，因此为4GB RAM节点提供示例配置。</p><h2 id="内存分配属性"><a href="#内存分配属性" class="headerlink" title="内存分配属性"></a>内存分配属性</h2><p>YARN作业执行需要使用以下两种资源：</p><ul><li>Application Master (AM) ：负责监视应用程序并协调集群中的分布式执行程序。</li><li>Executors：一些由AM创建的Executors，用于真正的运行该作业。 对于MapReduce作业，executors会并行的执行map和reduce操作。</li></ul><p>两者都在从节点的容器中运行。 每个从节点都运行一个NodeManager守护进程，负责在节点上创建容器。 整个集群由一个ResourceManager管理，它根据容量要求和当前使用情况调度所有所有从节点上的容器分配。</p><p>需要正确配置四种类型的资源分配才能使群集正常工作。分别是：</p><ol><li>可以为单个节点上的YARN容器分配的内存大小。 这个限制应该高于其他所有的限制; 否则，容器分配会被拒绝，应用程序失败。 但是，它不应该是节点上的全部RAM。</li></ol><blockquote><p>这个值在<code>yarn-site.xml</code>中配置<code>yarn.nodemanager.resource.memory-mb</code>属性</p></blockquote><ol start="2"><li>单个容器可以消耗的内存大小以及允许的最小内存分配量。 一个容器永远不会超过最大容量，否则分配将失败，并且总是以最小分配量的倍数进行RAM分配。</li></ol><blockquote><p>这些值在<code>yarn-site.xml</code>中配置<code>yarn.scheduler.maximum-allocation-mb</code>和<code>yarn.scheduler.minimum-allocation-mb</code>属性。</p></blockquote><ol start="3"><li>分配给ApplicationMaster的内存大小。 是一个适合容器最大尺寸的常数值。</li></ol><blockquote><p>这个值在<code>mapred-site.xml</code>中配置<code>yarn.app.mapreduce.am.resource.mb</code>属性。</p></blockquote><ol start="4"><li>分配给map和reduce操作的内存大小。应该小于最大尺寸。</li></ol><blockquote><p>这是在<code>mapred-site.xml</code>中配置的，其属性为<code>mapreduce.map.memory.mb</code>和<code>mapreduce.reduce.memory.mb</code>。</p></blockquote><p>具体配置参数可以参见：<a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html">https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html</a></p><h2 id="各内存大小计算方式"><a href="#各内存大小计算方式" class="headerlink" title="各内存大小计算方式"></a>各内存大小计算方式</h2><p>下载内存计算脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://raw.githubusercontent.com/mahadevkonar/ambari-yarn-utils/master/yarn-utils/yarn-utils.py<br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> yarn-utils.py -c <span class="hljs-number">16</span> -m <span class="hljs-number">64</span> -d <span class="hljs-number">4</span> -k True<br></code></pre></td></tr></table></figure><ul><li>-c选项：cpu核数</li><li>-m选项：内存大小</li><li>-d选项：机器上的磁盘数量</li><li>-k选项：如果安装了HBase则设置为True，否则为False</li></ul><blockquote><p>其中：Core的数量可以通过<code>nproc</code>命令计算；内存大小可以通过<code>free -m</code>命令来计算需要换算为G;磁盘的数量可以通过<code>lsblk -s</code>或<code>sudo fdisk -l</code>命令来查看。</p></blockquote><p>计算完成之后，最后的脚本执行命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop@node-master:~$ python yarn-utils.py -c 2 -m 8 -d 1 -k False<br> Using cores=2 memory=8GB disks=1 hbase=False<br> Profile: cores=2 memory=6144MB reserved=2GB usableMem=6GB disks=1<br> Num Container=3<br> Container Ram=2048MB<br> Used Ram=6GB<br> Unused Ram=2GB<br> yarn.scheduler.minimum-allocation-mb=2048<br> yarn.scheduler.maximum-allocation-mb=6144<br> yarn.nodemanager.resource.memory-mb=6144<br> mapreduce.map.memory.mb=1024<br> mapreduce.map.java.opts=-Xmx819m<br> mapreduce.reduce.memory.mb=2048<br> mapreduce.reduce.java.opts=-Xmx1638m<br> yarn.app.mapreduce.am.resource.mb=1024<br> yarn.app.mapreduce.am.command-opts=-Xmx819m<br> mapreduce.task.io.sort.mb=409<br></code></pre></td></tr></table></figure><h2 id="8GB节点的示例配置"><a href="#8GB节点的示例配置" class="headerlink" title="8GB节点的示例配置"></a>8GB节点的示例配置</h2><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>yarn.nodemanager.resource.memory-mb</td><td>6144</td></tr><tr><td>yarn.scheduler.maximum-allocation-mb</td><td>6144</td></tr><tr><td>yarn.scheduler.minimum-allocation-mb</td><td>2048</td></tr><tr><td>yarn.app.mapreduce.am.resource.mb</td><td>1024</td></tr><tr><td>mapreduce.map.memory.mb</td><td>1024</td></tr><tr><td>mapreduce.reduce.memory.mb</td><td>2048</td></tr></tbody></table><p>编辑 <code>/usr/local/src/hadoop-3.1.0/etc/hadoop/yarn-site.xml</code> 文件，并增加以下行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>6144<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>6144<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2048<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编辑<code>/usr/local/src/hadoop-3.1.0/etc/hadoop/mapred-site.xml</code>文件，并增加以下行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.resource.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2048<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h1><p>复制hadoop的压缩包到所有从节点（也可以使用ftp手动上传）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp hadoop-3.1.0.tar.gz hadoop@node1:/usr/local/src/<br>scp hadoop-3.1.0.tar.gz hadoop@node2:/usr/local/src/<br></code></pre></td></tr></table></figure><p>使用hadoop用户连接到所有的从节点，解压安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>tar -xzvf jdk-8u162-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>复制主节点的所有hadoop配置文件到各从节点中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp /usr/local/src/hadoop-3.1.0/etc/hadoop/* hadoop@node1:/usr/local/src/hadoop-3.1.0/etc/hadoop/<br>scp /usr/local/src/hadoop-3.1.0/etc/hadoop/* hadoop@node2:/usr/local/src/hadoop-3.1.0/etc/hadoop/<br></code></pre></td></tr></table></figure><h1 id="格式化HDFS"><a href="#格式化HDFS" class="headerlink" title="格式化HDFS"></a>格式化HDFS</h1><p>HDFS需要像任何传统文件系统一样格式化。 在node-master上，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs namenode -format<br></code></pre></td></tr></table></figure><h1 id="启动停止HDFS"><a href="#启动停止HDFS" class="headerlink" title="启动停止HDFS"></a>启动停止HDFS</h1><p>通过从node-master运行以下脚本启动HDFS：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span>-dfs.sh<br></code></pre></td></tr></table></figure><p>这个命令会启动node-master上的NameNode和SecondaryNameNode，并且根据node1和node2上的配置文件分别启动node1和node2的DataNode。</p><p>使用jps命令检查每个节点上的进程是否启动：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">24053 </span>SecondaryNameNode<br><span class="hljs-symbol">23721 </span>NameNode<br><span class="hljs-symbol">23850 </span>DataNode<br><span class="hljs-symbol">24205 </span>Jps<br></code></pre></td></tr></table></figure><p>（如果node-master上也启动了一个DataNode那么在node-master上也能看到NodeManager）</p><p>在node1上jps结果如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">27387 </span>Jps<br><span class="hljs-symbol">27311 </span>DataNode<br></code></pre></td></tr></table></figure><p>在node2上jps结果如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1314 </span>Jps<br><span class="hljs-symbol">1227 </span>DataNode<br></code></pre></td></tr></table></figure><p>要停止主节点和从节点上的HDFS，请从node-master运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">stop-dfs.sh<br></code></pre></td></tr></table></figure><p>在hdfs启动之后，各种hdfs命令就都可以直接在集群上使用。</p><p>关于hdfs安全模式的解除：重启机器等操作时会导致hdfs处于安全模式，因此需要用命令解除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfsadmin -safemode leave<br></code></pre></td></tr></table></figure><h1 id="运行YARN"><a href="#运行YARN" class="headerlink" title="运行YARN"></a>运行YARN</h1><p>HDFS是一个分布式存储系统，它不提供任何服务来运行和调度集群中的任务。 这是YARN框架的作用。 以下部分是关于启动，监控和向YARN提交作业。</p><h2 id="启动停止YARN"><a href="#启动停止YARN" class="headerlink" title="启动停止YARN"></a>启动停止YARN</h2><p>运行以下脚本启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start-yarn.sh<br></code></pre></td></tr></table></figure><p>使用jps命令检查各节点上正在运行的进程。除了前面的HDFS守护进程之外，还应该在node-master上看到ResourceManager，并在node1和node2上看到NodeManager。</p><p>要停止YARN，请在node-master上运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">stop-yarn.sh<br></code></pre></td></tr></table></figure><h2 id="监控YARN"><a href="#监控YARN" class="headerlink" title="监控YARN"></a>监控YARN</h2><p>yarn命令提供实用的命令套件程序来管理YARN集群。 还可以使用以下命令打印正在运行的节点的报告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn node -list<br></code></pre></td></tr></table></figure><p>如果运行错误，需要检查YARN的配置文件<code>hadoop/yarn-site.xml</code>是否配置错误。</p><p>可以使用以下命令获取正在运行的应用程序的列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn application -list<br></code></pre></td></tr></table></figure><p>要获得yarn命令的所有可用参数，请参阅<a href="https://community.hortonworks.com/content/supportkb/49544/hdfs-client-fails-with-unknownhostexception-when-h.html">Apache YARN文档</a></p><p>与HDFS一样，YARN提供了一个友好的Web UI，默认端口为8088。 具体端口可通过yarn-site.xml文件里面的yarn.resourcemanager.webapp.address配置。示例地址如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">120.77</span>.<span class="hljs-number">239.67</span>:<span class="hljs-number">18088</span>/cluster<br></code></pre></td></tr></table></figure><h2 id="提交MapReduce作业至YARN"><a href="#提交MapReduce作业至YARN" class="headerlink" title="提交MapReduce作业至YARN"></a>提交MapReduce作业至YARN</h2><p>YARN作业被打包成jar文件，并提交给YARN用命令<code>yarn jar</code>执行。</p><hr><p>参考：</p><ul><li><a href="https://suncle.me/2018/04/16/Hadoop3-basic-installation-and-configuration/">https://suncle.me/2018/04/16/Hadoop3-basic-installation-and-configuration/</a></li><li><a href="https://www.cnblogs.com/guoyuanwei/p/8583380.html">https://www.cnblogs.com/guoyuanwei/p/8583380.html</a></li><li><a href="https://linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster">https://linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster</a></li><li><a href="http://www.dajiangtai.com/community/18389.do">http://www.dajiangtai.com/community/18389.do</a></li><li><a href="https://www.2cto.com/net/201610/557536.html">https://www.2cto.com/net/201610/557536.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>集群</tag>
      
      <tag>搭建</tag>
      
      <tag>YARN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Python语言写Hadoop MapReduce程序</title>
    <link href="/2018/04/17/%E4%BD%BF%E7%94%A8python%E8%AF%AD%E8%A8%80%E5%86%99hadoop-mapreduce%E7%A8%8B%E5%BA%8F/"/>
    <url>/2018/04/17/%E4%BD%BF%E7%94%A8python%E8%AF%AD%E8%A8%80%E5%86%99hadoop-mapreduce%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>在了解到Hadoop的生态环境以及Hadoop单机模式和伪分布式模式安装配置之后，我们可以使用自己熟悉的语言来编写Hadoop MapReduce程序，进一步了解MapReduce编程模型。</p><p>本教程将使用Python语言为Hadoop编写一个简单的MapReduce程序：<strong>单词计数</strong></p><blockquote><p>尽管Hadoop框架是用Java编写的，但是为Hadoop编写的程序不必非要Java写，还可以使用其他语言开发，比如Python，Ruby，C++等</p></blockquote><p>编写完成的MapReduce程序可以直接在你已经搭建好的伪分布式程序中调试运行。</p><span id="more"></span><h1 id="MapReduce的Python代码"><a href="#MapReduce的Python代码" class="headerlink" title="MapReduce的Python代码"></a>MapReduce的Python代码</h1><p>我们将使用<a href="https://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming">Hadoop流API</a>通过STDIN和STDOUT在Map和Reduce代码间传递数据。我们只需要使用Python的sys.stdin读取输入数据和打印输出到sys.stdout。这就是我们需要做的，因为Hadoop流会处理好其他的一切。</p><h2 id="mapper-py"><a href="#mapper-py" class="headerlink" title="mapper.py"></a>mapper.py</h2><p>将下面的代码保存在文件 <code>/home/hadoop/workspace/mapper.py</code> 中。它将从STDIN读取数据，拆分为单词并输出一组映射单词和它们数量（中间值）的行到STDOUT。尽管这个Map脚本不会计算出单词出现次数的总和（中间值）。相反，它会立即输出<code>&lt;word&gt; 1</code>元组的形式——即使某个特定的单词可能会在输入中出现多次。在我们的例子中，我们让后续的Reduce做最终的总和计数。当然，你可以按照你的想法在你自己的脚本中修改这段代码。</p><p>需要给mapper.py文件赋予可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /home/hadoop/workspace/mapper.py<br></code></pre></td></tr></table></figure><p><code>/home/hadoop/workspace/mapper.py</code>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/17/18 11:16 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function:  word count mapper</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 从标准输入STDIN输入</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    <span class="hljs-comment"># 移除line收尾的空白字符</span><br>    line = line.strip()<br>    <span class="hljs-comment"># 将line分割为单词</span><br>    words = line.split()<br>    <span class="hljs-comment"># 遍历</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>        <span class="hljs-comment"># 将结果写到标准输出STDOUT</span><br>        <span class="hljs-comment"># 此处的输出会作为Reduce代码的输入</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;\t&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(word, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="reducer-py"><a href="#reducer-py" class="headerlink" title="reducer.py"></a>reducer.py</h2><p>将下面的代码保存在文件 <code>/home/hadoop/workspace/reducer.py</code> 中。它将从STDIN读取mapper.py的结果（因此mapper.py的输出格式和reducer.py预期的输入格式必须匹配），然后统计每个单词出现的次数，最后将结果输出到STDOUT中。</p><p>需要给reducer.py文件赋予可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /home/hadoop/workspace/reducer.py<br></code></pre></td></tr></table></figure><p><code>/home/hadoop/workspace/reducer.py</code>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/17/18 11:16 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: word count reducer</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br>current_word = <span class="hljs-literal">None</span><br>current_count = <span class="hljs-number">0</span><br>word = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    <span class="hljs-comment"># 移除line收尾的空白字符</span><br>    line = line.strip()<br><br>    <span class="hljs-comment"># 解析我们从mapper.py得到的输入</span><br>    word, count = line.split(<span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 将字符串count转换为int</span><br>    <span class="hljs-keyword">try</span>:<br>        count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-comment"># 不是数字，不做处理，跳过</span><br>        <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-comment"># hadoop在将kv对传递给reduce之前会进行按照key进行排序，在这里也就是word</span><br>    <span class="hljs-keyword">if</span> current_word == word:<br>        current_count += count<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> current_word <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 将结果写入STDOUT</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;\t&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(current_word, current_count))<br>        current_count = count<br>        current_word = word<br><br><span class="hljs-comment"># 最后一个单词不要忘记输出</span><br><span class="hljs-keyword">if</span> current_word == word:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;\t&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(current_word, current_count))<br><br></code></pre></td></tr></table></figure><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><p>在MapReduce作业中正式使用mapper.py和reducer.py之前，最好先在本地测试mapper.py和reducer.py脚本。否则，作业可能成功完成了但没有得到作业结果数据或者得到了不是你想要的结果。</p><p>这里有一些想法，关于如何测试这个Map和Reduce脚本的功能。</p><p>使用<code>cat data | map | sort | reduce</code>这样的顺序。具体测试如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 首先在本地测试 mapper.py 和 reducer.py</span><br><br><span class="hljs-comment"># 非常基本的测试</span><br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;foo foo quux labs foo bar quux&quot;</span> | /home/hadoop/workspace/mapper.py<br>foo1<br>foo1<br>quux1<br>labs1<br>foo1<br>bar1<br>quux1<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ vim reducer.py <br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;foo foo quux labs foo bar quux&quot;</span> | /home/hadoop/workspace/mapper.py | <span class="hljs-built_in">sort</span> -k1,1 | /home/hadoop/workspace/reducer.py<br>bar1<br>foo3<br>labs1<br>quux2<br><span class="hljs-comment"># 使用示例文件</span><br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ <span class="hljs-built_in">cat</span> /home/hadoop/workspace/file/input1.txt | /home/hadoop/workspace/mapper.py <br>Now1<br>that1<br>everything1<br>is1<br>prepared,1<br>we1<br>can1<br>finally1<br>run1<br>our1<br>Python1<br>MapReduce1<br>...<br></code></pre></td></tr></table></figure><p>其中<code>/home/hadoop/workspace/file/input1.txt</code>示例输入文件的内容如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Now that everything <span class="hljs-keyword">is</span> <span class="hljs-keyword">prepared</span>, we can finally run our Python MapReduce job <span class="hljs-keyword">on</span> the Hadoop <span class="hljs-keyword">cluster</span>.<br><span class="hljs-keyword">As</span> I said above, we leverage the Hadoop Streaming API <span class="hljs-keyword">for</span> helping us <span class="hljs-keyword">passing</span> data <span class="hljs-keyword">between</span> our Map <span class="hljs-keyword">and</span> Reduce code via STDIN <span class="hljs-keyword">and</span> STDOUT.<br></code></pre></td></tr></table></figure><h1 id="在Hadoop上运行Python代码"><a href="#在Hadoop上运行Python代码" class="headerlink" title="在Hadoop上运行Python代码"></a>在Hadoop上运行Python代码</h1><h2 id="下载示例输入数据"><a href="#下载示例输入数据" class="headerlink" title="下载示例输入数据"></a>下载示例输入数据</h2><p>对于这个示例，我们将使用的三个文本来自Gutenberg项目：</p><ol><li><a href="https://www.gutenberg.org/etext/20417">The Outline of Science, Vol. 1 (of 4) by J. Arthur Thomson</a></li><li><a href="https://www.gutenberg.org/etext/5000">The Notebooks of Leonardo Da Vinci</a></li><li><a href="https://www.gutenberg.org/etext/4300">Ulysses by James Joyce</a></li></ol><p>下载对应链接下的<code>Plain Text UTF-8</code>，三个文本对应的地址分别为：</p><ol><li><a href="https://www.gutenberg.org/cache/epub/20417/pg20417.txt">https://www.gutenberg.org/cache/epub/20417/pg20417.txt</a></li><li><a href="https://www.gutenberg.org/files/5000/5000-8.txt">https://www.gutenberg.org/files/5000/5000-8.txt</a></li><li><a href="https://www.gutenberg.org/files/4300/4300-0.txt">https://www.gutenberg.org/files/4300/4300-0.txt</a></li></ol><p>下载每个文件为纯文本文件，以UTF-8编译并且将这些文件存储在一个临时目录中，如&#x2F;tmp&#x2F;gutenberg。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace/file$ ll<br>total 3612<br>drwxrwxr-x<span class="hljs-number"> 2 </span>hadoop hadoop   <span class="hljs-number"> 4096 </span>Apr<span class="hljs-number"> 17 </span>14:46 ./<br>drwxrwxr-x<span class="hljs-number"> 3 </span>hadoop hadoop   <span class="hljs-number"> 4096 </span>Apr<span class="hljs-number"> 17 </span>14:32 ../<br>-rw-rw-r--<span class="hljs-number"> 1 </span>hadoop hadoop    <span class="hljs-number"> 237 </span>Apr<span class="hljs-number"> 17 </span>14:32 input1.txt<br>-rw-rw-r--<span class="hljs-number"> 1 </span>hadoop hadoop <span class="hljs-number"> 674570 </span>Apr<span class="hljs-number"> 17 </span>14:45 pg20417.txt<br>-rw-rw-r--<span class="hljs-number"> 1 </span>hadoop hadoop<span class="hljs-number"> 1580890 </span>Aug<span class="hljs-number"> 17 </span><span class="hljs-number"> 2017 </span>pg4300.txt<br>-rw-rw-r--<span class="hljs-number"> 1 </span>hadoop hadoop<span class="hljs-number"> 1428841 </span>Apr <span class="hljs-number"> 7 </span><span class="hljs-number"> 2015 </span>pg5000.txt<br></code></pre></td></tr></table></figure><h2 id="将本地示例数据拷贝到HDFS"><a href="#将本地示例数据拷贝到HDFS" class="headerlink" title="将本地示例数据拷贝到HDFS"></a>将本地示例数据拷贝到HDFS</h2><p>首先在HDFS中创建一个子目录，然后拷贝文件过来（如果input已存在先删除再创建，以免影响测试结果）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ hdfs dfs -<span class="hljs-built_in">mkdir</span> input<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ hdfs dfs -<span class="hljs-built_in">ls</span><br>Found 1 items<br>drwxr-xr-x   - hadoop supergroup          0 2018-04-17 14:51 input<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ hdfs dfs -put /home/hadoop/workspace/file/pg*.txt input<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ hdfs dfs -<span class="hljs-built_in">ls</span> input<br>Found 3 items<br>-rw-r--r--   1 hadoop supergroup     674570 2018-04-17 14:53 input/pg20417.txt<br>-rw-r--r--   1 hadoop supergroup    1580890 2018-04-17 14:53 input/pg4300.txt<br>-rw-r--r--   1 hadoop supergroup    1428841 2018-04-17 14:53 input/pg5000.txt<br></code></pre></td></tr></table></figure><h2 id="运行MapReduce作业"><a href="#运行MapReduce作业" class="headerlink" title="运行MapReduce作业"></a>运行MapReduce作业</h2><p>运行MapReduce作业，敲入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop jar /usr/local/src/hadoop-3.1.0/share/hadoop/tools/lib/hadoop-streaming-3.1.0.jar -file mapper.py -mapper mapper.py -file reducer.py -reducer reducer.py -input input/* -output output-first<br></code></pre></td></tr></table></figure><p>查看<code>output-first</code>目录确保程序执行正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ hdfs dfs -<span class="hljs-built_in">ls</span> output-first<br>Found 2 items<br>-rw-r--r--   1 hadoop supergroup          0 2018-04-17 15:03 output-first/_SUCCESS<br>-rw-r--r--   1 hadoop supergroup     878847 2018-04-17 15:03 output-first/part-00000<br></code></pre></td></tr></table></figure><p>将文件从HDFS中拷入到你本地文件系统中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ <span class="hljs-built_in">mkdir</span> /home/hadoop/workspace/file/output-first<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ hdfs dfs -get output-first/* /home/hadoop/workspace/file/output-first/<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace$ <span class="hljs-built_in">cd</span> /home/hadoop/workspace/file/output-first/<br>hadoop@iZwz9367lkujh8ulgxc2cwZ:~/workspace/file/output-first$ <span class="hljs-built_in">ls</span><br>part-00000  _SUCCESS<br></code></pre></td></tr></table></figure><p>一般情况下，Hadoop对每个reducer产生一个输出文件；在我们的示例中，然而它将只创建单个文件，因为输入的文件都很小。</p><p>如果你想要在运行的时候修改Hadoop参数，如增加Reduce任务的数量，你可以使用-D选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-D mapred.reduce.tasks=16<br></code></pre></td></tr></table></figure><p>只能指定reduce的task数量不能指定map的task数量。</p><h1 id="改进Mapper和Reducer代码"><a href="#改进Mapper和Reducer代码" class="headerlink" title="改进Mapper和Reducer代码"></a>改进Mapper和Reducer代码</h1><p>上面的Mapper和Reducer例子应该给你提供了一种思路，关于如何创建第一个MapReduce程序。重点是代码简洁和易于理解，特别是对于Python语言的初学者。在现实程序中，你可能想要通过<a href="http://www.ibm.com/developerworks/library/l-pycon.html">Python的迭代器和生成器</a>来优化你的代码。</p><p>一般来说，迭代器和生成器有一个优点：序列中的元素在你需要它的时候才会生成。计算资源昂贵或内存紧缺的时候很有用。</p><p>注意：下面的Map和Reduce脚本只有运行在Hadoop环境中才会正常工作，即在 MapReduce任务中作为Mapper和Reducer。这表示在本地运行的测试命令”cat DATA | .&#x2F;mapper.py | sort -k1,1 | .&#x2F;reducer.py”不会正常工作，因为一些功能是由Hadoop来完成的。</p><p>准确地说，我们计算了一个单词出现的次数，例如(“foo”, 4)，只有恰巧相同的单词（foo）相继出现多次。然而，在大多数情况下，我们让Hadoop在Map和Reduce过程时自动分组(key, value)对这样的形式，因为Hadoop在这方面比我们简单的Python脚本效率更高。</p><h2 id="advanced-mapper-py"><a href="#advanced-mapper-py" class="headerlink" title="advanced_mapper.py"></a>advanced_mapper.py</h2><p>advanced_mapper.py是改进之后的mapper代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/17/18 3:23 PM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: 更高级的Mapper，使用Python迭代器和生成器</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_input</span>(<span class="hljs-params">std_input</span>):<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> std_input:<br>        <span class="hljs-comment"># 将line分割成单词</span><br>        <span class="hljs-keyword">yield</span> line.split()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">separator=<span class="hljs-string">&#x27;\t&#x27;</span></span>):<br>    <span class="hljs-comment"># 从标准输入STDIN输入</span><br>    data = read_input(sys.stdin)<br>    <span class="hljs-keyword">for</span> words <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-comment"># 将结果写到标准输出，此处的输出会作为reduce的输入</span><br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(word, separator, <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h2 id="advanced-reducer-py"><a href="#advanced-reducer-py" class="headerlink" title="advanced_reducer.py"></a>advanced_reducer.py</h2><p>advanced_reducer.py是改进之后的reducer代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/17/18 3:23 PM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: 更高级的Reducer，使用Python迭代器和生成器</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> groupby<br><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_mapper_output</span>(<span class="hljs-params">std_input, separator=<span class="hljs-string">&#x27;\t&#x27;</span></span>):<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> std_input:<br>        <span class="hljs-keyword">yield</span> line.rstrip().split(separator, <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">separator=<span class="hljs-string">&#x27;\t&#x27;</span></span>):<br>    <span class="hljs-comment"># 从STDIN输入</span><br>    data = read_mapper_output(sys.stdin, separator=separator)<br>    <span class="hljs-comment"># groupby通过word对多个word-count对进行分组，并创建一个返回连续键和它们的组的迭代器：</span><br>    <span class="hljs-comment">#  - current_word - 包含单词的字符串（键）</span><br>    <span class="hljs-comment">#  - group - 是一个迭代器，能产生所有的[&quot;current_word&quot;, &quot;count&quot;]项</span><br>    <span class="hljs-comment"># itemgetter: 用于获取对象的哪些维的数据，itemgetter(0)表示获取第0维</span><br>    <span class="hljs-keyword">for</span> current_word, group <span class="hljs-keyword">in</span> groupby(data, itemgetter(<span class="hljs-number">0</span>)):<br>        <span class="hljs-keyword">try</span>:<br>            total_count = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(count) <span class="hljs-keyword">for</span> current_word, count <span class="hljs-keyword">in</span> group)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(current_word, separator, total_count))<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>代码改进结束。</p><hr><p>参考：</p><ul><li><a href="https://emunix.emich.edu/~sverdlik/COSC472/WritingAnHadoopMapReduceProgramInPython-MichaelG.Noll.html">https://emunix.emich.edu/~sverdlik/COSC472/WritingAnHadoopMapReduceProgramInPython-MichaelG.Noll.html</a></li><li><a href="https://python.freelycode.com/contribution/detail/307">https://python.freelycode.com/contribution/detail/307</a></li><li><a href="https://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming">https://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming</a></li><li><a href="https://wiki.apache.org/hadoop/HadoopStreaming">https://wiki.apache.org/hadoop/HadoopStreaming</a></li><li><a href="https://blog.csdn.net/dongtingzhizi/article/details/12068205">https://blog.csdn.net/dongtingzhizi/article/details/12068205</a></li><li><a href="https://www.cnblogs.com/dreamer-fish/p/5522687.html">https://www.cnblogs.com/dreamer-fish/p/5522687.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Hadoop</tag>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop3单机和伪分布式模式安装配置</title>
    <link href="/2018/04/16/hadoop3%E5%8D%95%E6%9C%BA%E5%92%8C%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%BC%8F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2018/04/16/hadoop3%E5%8D%95%E6%9C%BA%E5%92%8C%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%BC%8F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>搭建hadoop</p></blockquote><p>为了体验HDFS和MapReduce框架，以及在HDFS上运行示例程序或简单作业，我们首先需要完成单机上的Hadoop安装。所依赖的软件环境如下：</p><ol><li>Linux系统：以运行在阿里云ECS上的Ubuntu 16.04 LTS版本为例</li><li>jdk-8u162-linux-x64.tar.gz</li><li>hadoop 3.1.0</li></ol><p>本次演示统一将软件放置在<code>/usr/local/src</code>目录中</p><span id="more"></span><h1 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h1><p>首先需要建立一个hadoop用户，用来启动Hadoop的进程，这样避免使用root用户启动进程，这也是比较规范的服务器用户管理，使用以下命令创建hadoop用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -m hadoop -s /bin/bash<br>passwd hadoop  <span class="hljs-comment"># 为hadoop用户设置密码，直接设置为hadoop</span><br>adduser hadoop sudo  <span class="hljs-comment"># 为 hadoop 用户增加管理员权限，方便部署</span><br></code></pre></td></tr></table></figure><p>后续均在hadoop用户中操作。</p><p><strong>免密码ssh设置</strong></p><p>Hadoop中namenode需要启动集群中的所有机器的Hadoop守护进程，而这个过程需要通过SSH登录来实现。而Hadoop并没有提供SSH输入密码的登录形式，因此为了保证可以顺利登录每台机器，需要将所有机器配置为namenode可以无密码登录它们。所以我们需要配置SSH的无密码访问（注意无密码访问是为hadoop用户配置的，故以下操作需要在hadoop用户下完成）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -P <span class="hljs-string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa<br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 0600 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>此时再用 <code>ssh localhost</code> 命令，无需输入密码就可以直接登陆了（第一次需要先输入一个yes）</p><h1 id="Java安装配置"><a href="#Java安装配置" class="headerlink" title="Java安装配置"></a>Java安装配置</h1><p>下载地址：<code>https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</code></p><p>执行以下命令解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src<br>tar -xzvf jdk-8u162-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>然后编辑<code>~/.profile</code>文件，在文件结尾处增加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># java jdk env settings</span><br>JAVA_HOME=/usr/local/src/jdk1.8.0_162<br>PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> JAVA_HOME PATH<br></code></pre></td></tr></table></figure><p>修改完成之后使用source命令使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.profile<br></code></pre></td></tr></table></figure><p>若输出JAVA_HOME环境变量有结果则说明修改成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$JAVA_HOME</span><br></code></pre></td></tr></table></figure><p>此时可以使用验证java环境变量是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><h1 id="Hadoop安装配置"><a href="#Hadoop安装配置" class="headerlink" title="Hadoop安装配置"></a>Hadoop安装配置</h1><p>下载地址：<code>https://hadoop.apache.org/releases.html</code></p><p>Hadoop的运行有三种形式：</p><ul><li>单实例运行</li><li>伪分布式</li><li>完全分布式</li></ul><p>本次主要介绍单实例和伪分布式Hadoop的安装以及使用简介。首先需要先配置hadoop的环境变量。</p><p>编辑<code>~/.profile</code>文件，在文件结尾处增加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hadoop install env settings</span><br>HADOOP_INSTALL=/usr/local/src/hadoop-3.1.0<br>PATH=<span class="hljs-variable">$HADOOP_INSTALL</span>/bin:<span class="hljs-variable">$HADOOP_INSTALL</span>/sbin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> HADOOP_INSTALL PATH<br></code></pre></td></tr></table></figure><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><p>单机模式（<strong>standalone</strong>）是Hadoop的默认模式。当首次解压Hadoop的源码包时，Hadoop无法了解硬件安装环境，便保守地选择了最小配置。在这种默认模式下所有3个XML文件均为空。当配置文件为空时，Hadoop会完全运行在本地。因为不需要与其他节点交互，单机模式就不使用HDFS，也不加载任何Hadoop的守护进程。该模式主要用于开发调试MapReduce程序的应用逻辑。</p><blockquote><p>此程序一般不建议安装，网络上很少这方面资料</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/src<br>tar -xzvf hadoop-3.1.0.tar.gz<br></code></pre></td></tr></table></figure><p>解压完成之后测试安装是否正常：执行命令<code>hadoop</code>，正常情况应该显示hadoop的命令使用文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop<br>hadoop version<br></code></pre></td></tr></table></figure><p>也可以运行MapReduce任务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> hadoop-3.1.0/<br><span class="hljs-built_in">mkdir</span> input<br><span class="hljs-built_in">cp</span> etc/hadoop/*.xml input<br>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.0.jar grep input output <span class="hljs-string">&#x27;dfs[a-z.]+&#x27;</span><br></code></pre></td></tr></table></figure><p>执行完成之后可以发现output文件夹中生成了两个文件<code>part-r-00000</code>和<code>_SUCCESS</code>，其中<code>part-r-00000</code>文件中记录着在input目录中的所有xml文件中上述正则表达式匹配成功的单词的数量。可以使用以下命令检查结果是否正确。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">grep -5 <span class="hljs-params">--color</span> <span class="hljs-string">&quot;dfs&quot;</span> *<span class="hljs-string">.xml</span><br></code></pre></td></tr></table></figure><p>在hadoop3.1版本中的所有xml文件中只有<code>dfsadmin</code>这个单词出现了一次。</p><h2 id="伪分布模式"><a href="#伪分布模式" class="headerlink" title="伪分布模式"></a>伪分布模式</h2><p>伪分布模式（<strong>Pseudo-Distributed Mode</strong>）在“单节点集群”上运行Hadoop，其中所有的守护进程都运行在同一台机器上。该模式在单机模式之上增加了代码调试功能，允许你检查内存使用情况，HDFS输入输出，以及其他的守护进程交互。</p><blockquote><p>namenode，datanode，secondarynamenode，jobtracer，tasktracer这5个进程，都能在集群上看到。</p></blockquote><p>伪分布式模式只需要在单机模式的基础上改两个配置文件并且格式化namenode即可。</p><p>编辑文件<code>etc/hadoop/core-site.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/src/hadoop-3.1.0/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Abase for other temporary directories.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编辑文件<code>etc/hadoop/hdfs-site.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/src/hadoop-3.1.0/tmp/dfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/src/hadoop-3.1.0/tmp/dfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Hadoop配置文件说明：</p><p>Hadoop 的运行方式是由配置文件决定的（运行 Hadoop 时会读取配置文件），因此如果需要从伪分布式模式切换回单机模式，需要删除 core-site.xml 中的配置项。</p><p>此外，伪分布式虽然只需要配置 fs.defaultFS 和 dfs.replication 就可以运行（官方教程如此），不过若没有配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 &#x2F;tmp&#x2F;hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。所以我们进行了设置，同时也指定 dfs.namenode.name.dir 和 dfs.datanode.data.dir，否则在接下来的步骤中可能会出错。</p></blockquote><p>配置完成后，执行 namenode  的格式化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs namenode -format<br></code></pre></td></tr></table></figure><p>然后使用<code>start-dfs.sh</code>命令启动NameNode daemon进程和DataNode daemon进程：</p><p>在启动前需要修改<code>etc/hadoop/hadoop-env.sh</code>文件中的<code>JAVA_HOME</code>变量，改为实际的即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Many of the options here are built from the perspective that users</span><br><span class="hljs-comment"># may want to provide OVERWRITING values on the command line.</span><br><span class="hljs-comment"># For example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  JAVA_HOME=/usr/java/testing hdfs dfs -ls</span><br>JAVA_HOME=/usr/local/src/jdk1.8.0_162<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Therefore, the vast majority (BUT NOT ALL!) of these defaults</span><br><span class="hljs-comment"># are configured for substitution and not append.  If append</span><br><span class="hljs-comment"># is preferable, modify this file accordingly.</span><br></code></pre></td></tr></table></figure><p>启动完成后，可以通过命令 <code>jps</code> 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin&#x2F;stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。</p><p>启动成功之后，浏览NameNode的web接口，Web界面示例地址如下（hadoop2.x端口默认为50070，hadoop3.x端口默认为9870）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">120.77</span>.<span class="hljs-number">239.67</span>:<span class="hljs-number">9870</span><br></code></pre></td></tr></table></figure><p>上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">mkdir</span> -p /user/hadoop<br></code></pre></td></tr></table></figure><p>接着将 <code>etc/hadoop</code> 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 <code>/usr/local/src/hadoop-3.1.0/etc/hadoop</code> 目录下的xml文件复制到分布式文件系统中的 &#x2F;user&#x2F;hadoop&#x2F;input 中。我们使用的是 hadoop 用户，并且已创建相应的用户目录 &#x2F;user&#x2F;hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 &#x2F;user&#x2F;hadoop&#x2F;input：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">mkdir</span> input<br>hdfs dfs -put ./etc/hadoop/*.xml input<br></code></pre></td></tr></table></figure><p>复制完成后，可以通过如下命令查看文件列表：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">hdfs dfs -<span class="hljs-keyword">ls</span> <span class="hljs-keyword">input</span><br></code></pre></td></tr></table></figure><p>伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.0.jar grep input output <span class="hljs-string">&#x27;dfs[a-z.]+&#x27;</span><br></code></pre></td></tr></table></figure><p>查看运行结果的命令（查看的是位于 HDFS 中的输出结果）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">cat</span> output/*<br></code></pre></td></tr></table></figure><p>结果如下，注意到刚才我们已经更改了配置文件，所以运行结果不同。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hadoop<span class="hljs-variable">@iZwz9367lkujh8ulgxc2cwZ</span><span class="hljs-symbol">:/usr/local/src/hadoop-</span><span class="hljs-number">3.1</span>.<span class="hljs-number">0</span><span class="hljs-variable">$ </span> hdfs dfs -cat output/*<br><span class="hljs-number">1</span>dfsadmin<br><span class="hljs-number">1</span>dfs.replication<br><span class="hljs-number">1</span>dfs.namenode.name.dir<br><span class="hljs-number">1</span>dfs.datanode.data.dir<br></code></pre></td></tr></table></figure><p>也可以将运行结果取回到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/hdfs dfs -get output ./output     <span class="hljs-comment"># 将 HDFS 上的 output 文件夹取回到本机</span><br><span class="hljs-built_in">cat</span> ./output/*<br></code></pre></td></tr></table></figure><p>Hadoop 运行程序时，输出目录不能存在，否则会提示错误org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs:&#x2F;&#x2F;localhost:9000&#x2F;user&#x2F;hadoop&#x2F;output already exists，因此若要再次执行，需要执行如下命令删除 output 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">rm</span> -r output<br></code></pre></td></tr></table></figure><p>若要关闭 Hadoop，则运行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">stop</span>-dfs.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>下次启动 hadoop 时，无需进行 NameNode 的初始化，只需要运行 <code>start-dfs.sh</code> 就可以！</p><hr><p>参考：</p><ul><li><a href="https://blog.csdn.net/muyi_amen/article/details/62423649">https://blog.csdn.net/muyi_amen/article/details/62423649</a></li><li><a href="https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html">https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html</a></li><li><a href="http://www.aboutyun.com/thread-6839-1-1.html">http://www.aboutyun.com/thread-6839-1-1.html</a></li><li><a href="https://www.jianshu.com/p/e450fe10d003">https://www.jianshu.com/p/e450fe10d003</a></li><li><a href="http://dblab.xmu.edu.cn/blog/install-hadoop/">http://dblab.xmu.edu.cn/blog/install-hadoop/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>配置</tag>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop、MapReduce、HDFS介绍</title>
    <link href="/2018/04/16/hadoop%E3%80%81mapreduce%E3%80%81hdfs%E4%BB%8B%E7%BB%8D/"/>
    <url>/2018/04/16/hadoop%E3%80%81mapreduce%E3%80%81hdfs%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>对于入门hadoop的初学者，首先需要了解一下三个部分：</p><ul><li>hadoop的生态环境</li><li>MapReduce模型</li><li>HDFS分布式文件系统</li></ul><p>依次介绍这三个部分。</p><span id="more"></span><h1 id="初识hadoop"><a href="#初识hadoop" class="headerlink" title="初识hadoop"></a>初识hadoop</h1><p>Hadoop数据存储与分析</p><p>hadoop提供了一个可靠的共享存储和分析系统。HDFS实现数据的存储，MapReduce实现数据的分析和处理。虽然Hadoop还有其他功能，但HDFS和MapReduce是核心价值。</p><p>Hadoop项目：</p><ul><li>Common：一系列组件和接口，用于分布式文件系统和通用I&#x2F;O（序列化，Java RPC和持久化数据结构）</li><li>Avro：一种序列化系统，用于支持高效、跨语言的RPC和持久化数据存储</li><li>MapReduce：分布式数据处理模型和执行环境</li><li>HDFS：分布式文件系统</li><li>Pig：数据流语言和运行时环境，运行在MapReduce和HDFS集群上</li><li>Hive：一种分布式的、按列存储的数据仓库。Hive管理HDFS中存储的数据，并提供基于SQL的查询语言（由运行时引擎翻译成MapReduce作业）用以查询数据</li><li>HBase：一种分布式的、按列存储的数据库。HBase使用HDFS作为底层存储，同时支持MapReduce的批量式计算和点查询（随机读取）</li><li>ZooKeeper：一种分布式的、可用性高的协调服务。ZooKeeper提供分布式锁之类的基础服务用于构建分布式应用</li><li>Sqoop：该工具用于在结构化数据存储（如关系型数据库）和HDFS之间高效批量传输数据</li><li>Oozie：该服务用于运行和调度hadoop作业（如MapReduce，Pig，Hive及Sqoop作业）</li></ul><h1 id="MapReduce模型"><a href="#MapReduce模型" class="headerlink" title="MapReduce模型"></a>MapReduce模型</h1><p>分为MapReduce的定义和MapReduce的工作方式两个部分进行说明</p><h2 id="MapReduce的定义"><a href="#MapReduce的定义" class="headerlink" title="MapReduce的定义"></a>MapReduce的定义</h2><p>MapReduce是一个适用于处理大量数据的编程模型。 Hadoop能够运行用各种语言编写的MapReduce程序：Java，Ruby，Python和C ++。 MapReduce程序本质上是并行的，因此对于使用群集中的多台机器执行大规模数据分析非常有用。</p><p>MapReduce程序分两个阶段工作：</p><ul><li>Map阶段</li><li>Reduce阶段</li></ul><p>每个阶段的输入都是<strong>key-value</strong>对。 另外，每个程序员都需要指定两个函数：map函数和reduce函数。</p><h2 id="MapReduce的工作方式"><a href="#MapReduce的工作方式" class="headerlink" title="MapReduce的工作方式"></a>MapReduce的工作方式</h2><p>让我们用一个例子来理解MapReduce的工作方式。考虑你的MapReduce程序有以下输入数据（示例数据来自<a href="https://www.guru99.com/introduction-to-mapreduce.html">这里</a>）：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Welcome <span class="hljs-keyword">to</span> Hadoop <span class="hljs-keyword">Class</span><br>Hadoop <span class="hljs-keyword">is</span> good<br>Hadoop <span class="hljs-keyword">is</span> bad<br></code></pre></td></tr></table></figure><p>需要经过MapReduce以下几个步骤的处理：</p><p><img src="https://cdn.guru99.com/images/Big_Data/061114_0930_Introductio1.png" alt="https://cdn.guru99.com/images/Big_Data/061114_0930_Introductio1.png"></p><p>MapReduce任务的最终输出是：</p><table><thead><tr><th>单词</th><th>数量</th></tr></thead><tbody><tr><td>bad</td><td>1</td></tr><tr><td>Class</td><td>1</td></tr><tr><td>good</td><td>1</td></tr><tr><td>Hadoop</td><td>3</td></tr><tr><td>is</td><td>2</td></tr><tr><td>to</td><td>1</td></tr><tr><td>Welcome</td><td>1</td></tr></tbody></table><p>数据经历了以下几个阶段：</p><p><strong>Input Splits</strong></p><p>对MapReduce作业的输入分为固定大小的片段，称为<strong>Input Splits</strong>。<strong>Input Splits</strong>是由单个map消费的输入块。</p><p><strong>Mapping</strong></p><p>这是执行map-reduce程序的第一个阶段。 在这个阶段中，每个分割中的数据被传递给一个mapping 函数以产生输出值。 在我们的例子中，映射阶段的工作是计算来自输入分割的每个词的出现次数，并且提供<code>&lt;word, frequency&gt;</code>形式的列表。</p><p><strong>Shuffling</strong></p><p>此阶段消费Mapping阶段的输出。 其任务是整合Mapping阶段输出的相关记录。 在我们的例子中，同样的词汇与各自的频率一起组合在一起。</p><p>此阶段除了进行Shuffling操作还可以进行sorting操作。</p><p><strong>Reducing</strong></p><p>在这个阶段，会汇总来自Shuffling阶段的输出值。 该阶段结合Shuffling阶段的值并返回单个输出值。 总之，这个阶段得出了完整的数据集。</p><h1 id="HDFS分布式文件系统"><a href="#HDFS分布式文件系统" class="headerlink" title="HDFS分布式文件系统"></a>HDFS分布式文件系统</h1><p>分以下六个部分说明。</p><h2 id="HDFS的定义"><a href="#HDFS的定义" class="headerlink" title="HDFS的定义"></a>HDFS的定义</h2><p>HDFS（Hadoop Distributed FileSystem）是Apache Software Foundation项目和Apache Hadoop项目的子项目。 Hadoop非常适合存储大量数据（如TB和PB），并使用HDFS作为其存储系统。 你可以通过HDFS连接到数据文件分发集群中的任意节点。 然后可以像一个无缝的文件系统一样访问和存储数据文件。 访问数据文件是以流式方式处理的，这意味着应用程序或命令可以直接使用MapReduce处理模型执行。</p><h2 id="HDFS的应用接口"><a href="#HDFS的应用接口" class="headerlink" title="HDFS的应用接口"></a>HDFS的应用接口</h2><p>您可以通过许多不同的方式访问HDFS。 HDFS为Java API提供本地Java应用程序编程接口（API）和对java api封装的本地C语言包装器。 另外，您可以使用Web浏览器浏览HDFS文件。下表是可以与HDFS接口的应用程序：</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>FileSystem (FS) shell</td><td>类似于常见Linux和UNIX shell（bash，csh等）的命令行界面，允许与HDFS数据交互。</td></tr><tr><td>DFSAdmin</td><td>可以用来管理HDFS群集的命令集。</td></tr><tr><td>fsck</td><td>Hadoop命令的子命令。 可以使用fsck命令检查文件是否存在不一致，如缺少块，但不能使用fsck命令纠正这些不一致。</td></tr><tr><td>Name nodes and data nodes</td><td>内置Web服务器可让管理员检查群集的当前状态。</td></tr></tbody></table><p>由于其简单而强大的体系结构，HDFS具有非凡的功能集和高期望值。</p><h2 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h2><p>HDFS由文件和目录所在节点的互连集群组成。 HDFS群集包含一个称为NameNode的单个节点，该节点管理文件系统命名空间并管理客户端对文件的访问。 另外，DataNode将数据作为块存储在文件中。</p><p>在HDFS中，NameNode节点管理文件系统命名空间操作，如打开，关闭和重命名文件和目录。 NameNode还将数据块映射到DataNode，DataNode处理来自HDFS客户端的读取和写入请求。 DataNode还根据NameNode的指示信息创建，删除和复制数据块。</p><p>HDFS架构图如下：</p><p><img src="https://www.ibm.com/developerworks/library/wa-introhdfs/fig1.gif" alt="https://www.ibm.com/developerworks/library/wa-introhdfs/fig1.gif"></p><p>每个群集都包含一个NameNode。 这种设计方便了管理每个命名空间和判断数据分配的简化模型。</p><p><strong>NameNode和DataNode之间的关系：</strong></p><p>NameNode和DataNode是用于在异构操作系统上的商用机器上以分离方式运行的软件组件。 HDFS是使用Java编程语言构建的；因此，任何支持Java编程语言的机器都可以运行HDFS。 典型的安装集群有一台运行NameNode的专用机器，这台机器上也可能有一个DataNode。 集群中的其他机器每台都运行一个数据节点。</p><p>DataNode不断循环的向NameNode询问指令。NameNode不能直接连接到DataNode；它只是返回来自DataNode调用的函数的值。 每个DataNode维护一个开放的服务器套接字，以便客户端代码或其他DataNode可以读取或写入数据。 NameNode持有该服务器套接字的主机或端口，该NameNode将信息提供给感兴趣的客户端或其他数据节点。</p><p>NameNode维护并管理对文件系统命名空间的更改。</p><blockquote><p>文件系统命名空间（File system namespace）：</p><p>HDFS支持传统的分层文件组织，用户或应用程序可以在其中创建目录并存储文件。 文件系统命名空间层次与大多数其他现有文件系统类似; 您可以创建，重命名，重定位和删除文件。</p></blockquote><h2 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h2><p>数据复制：Data replication</p><p>HDFS复制文件块以实现容错。 应用程序可以指定文件在创建时的副本数量，并且此后可以随时更改此数字。 NameNode会做出关于块复制的所有决定。</p><p>HDFS使用智能副本放置模型来提高可靠性和性能。 优化的副本放置功能使得HDFS独特于大多数其他分布式文件系统。</p><p>大型HDFS环境通常在多台计算机上安装。 不同机器上的两个数据节点之间的通信通常比同一机器上的数据节点慢。 因此，NameNode会尝试优化数据节点之间的通信。</p><h2 id="数据组织方式"><a href="#数据组织方式" class="headerlink" title="数据组织方式"></a>数据组织方式</h2><p>HDFS的一个主要目标是支持大文件。 一个典型的HDFS块的大小是64MB（HDFS默认数据块大小为64MB（最小化寻址开销），小于一个块大小的文件不会占据整个块的空间）。 因此，每个HDFS文件都由一个或多个64MB块组成。 HDFS会尝试将每个块放置在单独的数据节点上。</p><h2 id="数据存储可靠性"><a href="#数据存储可靠性" class="headerlink" title="数据存储可靠性"></a>数据存储可靠性</h2><p>HDFS的一个重要目标是可靠地存储数据，即使在NameNode、DataNode或者网络分区内出现故障时也是如此。</p><p>检测是HDFS克服故障的第一步。 HDFS使用心跳消息来检测NameNode和DataNode之间的连接。</p><p>HDFS采用以下手段保证数据存储的可靠性：</p><ul><li>HDFS心跳：HDFS heartbeats</li><li>数据块重新平衡：Data block rebalancing</li><li>数据的完整性：Data integrity，通过事务</li><li>同步元数据更新：Synchronous metadata updating</li><li>用户，文件和目录的HDFS权限：HDFS permissions</li><li>快照：Snapshots</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>了解hadoop的生态：整体环境</li><li>理解MapReduce模型：计算过程</li><li>熟悉HDFS分布式文件系统：存储方式</li></ul><p>了解以上3个部分之后就可以去搭建hadoop环境，开发MapReduce应用。</p><hr><p>参考：</p><ul><li><a href="https://www.guru99.com/introduction-to-mapreduce.html">https://www.guru99.com/introduction-to-mapreduce.html</a></li><li><a href="https://www.ibm.com/developerworks/library/wa-introhdfs/">https://www.ibm.com/developerworks/library/wa-introhdfs/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>MapReduce</tag>
      
      <tag>HDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>影评：Ready Player One</title>
    <link href="/2018/04/11/%E5%BD%B1%E8%AF%84%EF%BC%9Aready-player-one/"/>
    <url>/2018/04/11/%E5%BD%B1%E8%AF%84%EF%BC%9Aready-player-one/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/ready_player_one/olivia-cooke.jpg" alt="olivia-cooke"></p><span id="more"></span><p>游戏中的虚拟世界真的美好又炫酷，不知不觉从接触电子游戏开始到如今已经18年了，从最初游戏厅的摇杆游戏和PS游戏到后来的PC游戏，经过了形式和体验的多种变化，虚拟游戏整体来说越来越充满趣味性，越来越让人有成就感。</p><p>自己喜欢的游戏也在一直不停的变化，摇杆时代最喜欢的格斗游戏是拳皇97和拳皇98，通关游戏是三国战纪和恐龙快打。PS游戏整体来说是在复制摇杆游戏的经典，但是操作性没有那么强，毕竟对于摇杆和按键的操控感要远远优于纯粹的按键，但是整体来说也有一个经典，那就是<strong>生化危机</strong>。PC时代的初期因为经济原因，并没有钱去网吧玩电脑，因此一直不了解为什么那么多人喜欢打PC游戏，直到家里面买了电脑，接着开了一段时间的网吧，作为一个年轻的网管自然便接触了大量游戏，比如经典的<strong>Counter-Strike</strong>，以及后来逐步玩过的<strong>问道</strong>和<strong>跑跑卡丁车</strong>，再到最最经典的<strong>Warcraft III</strong>，和老家关系最好的小伙伴玩遍了整个魔兽争霸3里面的各种地图，有<strong>四方战争</strong>， <strong>Lost Temple</strong>， <strong>澄海3C</strong>， <strong>守卫剑阁</strong> ， <strong>守护雅典娜</strong>， <strong>守护美女城</strong>， <strong>天龙八部</strong>， <strong>倚天屠龙记</strong>， <strong>火影忍者</strong>， <strong>冥皇颠覆</strong>， 以及后来红极一时的<strong>dota</strong>，也就是<strong>Defense of the Ancients</strong>。 </p><p>这些游戏中有许许多多的有趣味的至今仍然记忆犹新的名称，比如：</p><ul><li>午夜屠猪男： 倚天屠龙记的作者</li><li>若日孤城：冥皇颠覆的作者，这也是我用了很长时间的一个网名的出处</li><li>雨田上林：守护美女城的作者</li><li>洛丹伦的夏天：地图的名称，类似于召唤师峡谷，一个绝佳的旅游去除</li><li>等等…</li></ul><p>游戏几乎贯穿了我存在这世界上的25年，25年的时间里尽心竭力的活在美轮美奂的虚拟世界里，获得了游戏友情和满满的成就感。现如今，我已经很少再玩游戏了，只是还会继续关注着，还会看直播看视频。</p><p>在众多朋友的安利之下，选择了一个工作日的晚上，来看了这部《Ready Player One》。很多人说的那些彩蛋，只是隐约有点印象，但是几乎已经遗忘。电影的剧情很普通，很符合寻宝游戏和闯关游戏的模式。但是作为一个多年的游戏死忠，也只是看到了以前的影子和炫酷的特效，而更多的关注点却在于现实和虚拟的对比，诚然，自己是长大了，成熟了，慢慢变得务实且世俗了。其实这也没什么不好的，虚拟虽好，过去虽好，但是人终归是活在当前的现实世界中，要珍惜现实生活中的一切美好，现实生活中的友情和爱情，要理解生活中的不完美，学会接纳，学会包容。</p><blockquote><p>Reality is the only thing that is real.</p><p>不要恐惧现实，害怕现实，因为只有现实才能让你吃饱一顿饭。</p><p>“绿洲”游戏将会在每周二和周四关闭服务器。</p></blockquote><p>最后最后的结论也就是：虽然虚拟中的世界是那么迷人，但是现实比虚拟更加重要。</p><p>希望身边的每一个人都能努力拼搏，创造自己的美好生活，到那时，必然能让这个世界对你温柔以待。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>影评</tag>
      
      <tag>头号玩家</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微博爬取热搜榜和热门话题</title>
    <link href="/2018/04/10/%E5%BE%AE%E5%8D%9A%E7%88%AC%E5%8F%96%E7%83%AD%E6%90%9C%E6%A6%9C%E5%92%8C%E7%83%AD%E9%97%A8%E8%AF%9D%E9%A2%98/"/>
    <url>/2018/04/10/%E5%BE%AE%E5%8D%9A%E7%88%AC%E5%8F%96%E7%83%AD%E6%90%9C%E6%A6%9C%E5%92%8C%E7%83%AD%E9%97%A8%E8%AF%9D%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="weibo-spider"><a href="#weibo-spider" class="headerlink" title="weibo_spider"></a>weibo_spider</h1><p>微博爬虫：</p><ul><li>爬取热搜榜：不需要登录，但是需要处理反扒措施</li><li>爬取热门话题：需要登录之后获得cookies和user_id</li></ul><span id="more"></span><h1 id="爬取热搜榜"><a href="#爬取热搜榜" class="headerlink" title="爬取热搜榜"></a>爬取热搜榜</h1><p>微博热搜榜地址：<code>https://s.weibo.com/top/summary?cate=realtimehot</code>，具体爬取代码如下，其中最终的部分在于对热搜标题中的反扒处理，具体可参见<a href="https://www.jianshu.com/p/e6c24feeb806">简书中的爬取新浪微博热搜</a>。具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/3/18 2:08 PM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: 爬取weibo实时热搜榜（不需要登录）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> spider.base_spider <span class="hljs-keyword">import</span> BaseSpider<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealTimeHotSpider</span>(<span class="hljs-title class_ inherited__">BaseSpider</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;爬取weibo实时热搜榜（不需要登录）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hot_list</span>(<span class="hljs-params">self, url</span>):<br>        html = self.get_html_content(url)<br>        raw = re.findall(<span class="hljs-string">r&#x27;class=\\&quot;star_name\\&quot;&gt;.*?&lt;a href=\\&quot;\\/weibo\\/(.*?)&amp;Refer=[top|new]&#x27;</span>, html)<br>        hot_degree_lst = re.findall(<span class="hljs-string">r&#x27;class=\\&quot;star_num\\&quot;&gt;&lt;span&gt;(.*?)&lt;\\/span&gt;&#x27;</span>, html)<br>        hot_degree_lst.insert(<span class="hljs-number">0</span>, sys.maxsize)<br>        title_lst = []<br>        names_lst = []<br>        links_lst = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> raw:<br>            title_lst.append(i.replace(<span class="hljs-string">&#x27;25&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> title_lst:<br>            names_lst.append(parse.unquote(i))<br>            link = <span class="hljs-string">&#x27;https://s.weibo.com/weibo/&#x27;</span> + i<br>            links_lst.append(link)<br><br>        hot_info = []<br>        <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(names_lst):<br>            <span class="hljs-comment"># print(i, v, links_lst[i], hot_degree_lst[i])</span><br>            json_data = &#123;<br>                <span class="hljs-string">&quot;number&quot;</span>: i,<br>                <span class="hljs-string">&quot;title&quot;</span>: v,<br>                <span class="hljs-string">&quot;url&quot;</span>: links_lst[i],<br>                <span class="hljs-string">&quot;hot&quot;</span>: hot_degree_lst[i]<br>            &#125;<br>            hot_info.append(json_data)<br>        <span class="hljs-keyword">return</span> json.dumps(hot_info)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    spider = RealTimeHotSpider()<br>    target_real_time_hot = <span class="hljs-string">&#x27;https://s.weibo.com/top/summary?cate=realtimehot&#x27;</span><br>    <span class="hljs-built_in">print</span>(spider.get_hot_list(target_real_time_hot))<br><br></code></pre></td></tr></table></figure><h1 id="爬取热门话题"><a href="#爬取热门话题" class="headerlink" title="爬取热门话题"></a>爬取热门话题</h1><p>热门话题在登录之后会出现在home页面中，示例地址：<code>https://weibo.com/u/3655576503/home</code></p><p>可以采用selenium模拟登录，模拟登录的关键是通过selenium提供的选择器找到对应的input标签和对应的submit按钮。使用过程中遇到了以下问题：</p><p>微博selenium模拟登录bug</p><blockquote><p>验证版本：</p><p>chromedriver&#x3D;2.37 and os &#x3D; ubuntu 16.04 LTS</p></blockquote><p>如果不增加chrome_options会出现chromedriver加载失败的报错，报错如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/root/PycharmProjects/smart_login/sina_login/sina_login_by_selenium.py&quot;</span>, line <span class="hljs-number">54</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    cookies = login(name_input, passwd_input, url)<br>  File <span class="hljs-string">&quot;/root/PycharmProjects/smart_login/sina_login/sina_login_by_selenium.py&quot;</span>, line <span class="hljs-number">14</span>, <span class="hljs-keyword">in</span> login<br>    driver = webdriver.<span class="hljs-constructor">Chrome(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">root</span><span class="hljs-operator">/</span><span class="hljs-params">qk_python</span><span class="hljs-operator">/</span><span class="hljs-params">python</span><span class="hljs-operator">/</span><span class="hljs-params">data</span><span class="hljs-operator">/</span><span class="hljs-params">collect</span><span class="hljs-operator">/</span><span class="hljs-params">weibo_spider</span><span class="hljs-operator">/</span><span class="hljs-params">priv</span><span class="hljs-operator">/</span><span class="hljs-params">chromedriver</span>&#x27;)</span><br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/chrome/webdriver.py&quot;</span>, line <span class="hljs-number">75</span>, <span class="hljs-keyword">in</span> __init__<br>    desired_capabilities=desired_capabilities)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/webdriver.py&quot;</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> __init__<br>    self.start<span class="hljs-constructor">_session(<span class="hljs-params">desired_capabilities</span>, <span class="hljs-params">browser_profile</span>)</span><br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/webdriver.py&quot;</span>, line <span class="hljs-number">243</span>, <span class="hljs-keyword">in</span> start_session<br>    response = self.execute(Command.NEW_SESSION, parameters)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/webdriver.py&quot;</span>, line <span class="hljs-number">312</span>, <span class="hljs-keyword">in</span> execute<br>    self.error_handler.check<span class="hljs-constructor">_response(<span class="hljs-params">response</span>)</span><br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/errorhandler.py&quot;</span>, line <span class="hljs-number">242</span>, <span class="hljs-keyword">in</span> check_response<br>    raise <span class="hljs-keyword">exception</span><span class="hljs-constructor">_class(<span class="hljs-params">message</span>, <span class="hljs-params">screen</span>, <span class="hljs-params">stacktrace</span>)</span><br>selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed <span class="hljs-keyword">to</span> start: exited abnormally<br>  (Driver info: chromedriver=<span class="hljs-number">2.37</span>.<span class="hljs-number">544315</span> (<span class="hljs-number">730</span>aa6a5fdba159ac9f4c1e8cbc59bf1b5ce12b7),platform=Linux <span class="hljs-number">4.13</span>.<span class="hljs-number">0</span>-<span class="hljs-number">38</span>-generic x86_64)<br></code></pre></td></tr></table></figure><p>同时需要在get操作之前增加<code>driver.set_window_size(1124, 850)</code>进行窗口大小的预置（合适的值即可），否则得到的WebElement的状态is_displayed为False，即不可见，导致进行clear操作和send_keys操作时出现异常。异常如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Traceback (most recent <span class="hljs-keyword">call</span> last):<br>  File &quot;/root/PycharmProjects/smart_login/sina_login/sina_login_by_selenium.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">61</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    cookies = <span class="hljs-keyword">login</span>(name_input, passwd_input, url)<br>  File &quot;/root/PycharmProjects/smart_login/sina_login/sina_login_by_selenium.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">27</span>, <span class="hljs-keyword">in</span> <span class="hljs-keyword">login</span><br>    name_field.clear()<br>  File &quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/webelement.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">95</span>, <span class="hljs-keyword">in</span> clear<br>    self._execute(Command.CLEAR_ELEMENT)<br>  File &quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/webelement.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">628</span>, <span class="hljs-keyword">in</span> _execute<br>    <span class="hljs-keyword">return</span> self._parent.<span class="hljs-keyword">execute</span>(command, params)<br>  File &quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/webdriver.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">312</span>, <span class="hljs-keyword">in</span> <span class="hljs-keyword">execute</span><br>    self.error_handler.check_response(response)<br>  File &quot;/usr/local/lib/python3.5/dist-packages/selenium/webdriver/remote/errorhandler.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">242</span>, <span class="hljs-keyword">in</span> check_response<br>    <span class="hljs-keyword">raise</span> exception_class(message, screen, stacktrace)<br>selenium.common.exceptions.InvalidElementStateException: Message: invalid element state: Element <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> currently interactable <span class="hljs-keyword">and</span> may <span class="hljs-keyword">not</span> be manipulated<br>  (<span class="hljs-keyword">Session</span> <span class="hljs-keyword">info</span>: headless chrome=<span class="hljs-number">65.0</span><span class="hljs-number">.3325</span><span class="hljs-number">.162</span>)<br>  (Driver <span class="hljs-keyword">info</span>: chromedriver=<span class="hljs-number">2.37</span><span class="hljs-number">.544315</span> (<span class="hljs-number">730</span>aa6a5fdba159ac9f4c1e8cbc59bf1b5ce12b7),platform=Linux <span class="hljs-number">4.13</span><span class="hljs-number">.0</span><span class="hljs-number">-38</span>-generic x86_64)<br></code></pre></td></tr></table></figure><p>处理方法参考PhantomJs 的一个issue：<a href="https://github.com/ariya/phantomjs/issues/11637">https://github.com/ariya/phantomjs/issues/11637</a></p><p>bug解决之后完整的登录代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/8/18 10:41 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: selenium模拟登录</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> ChromeOptions<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-comment"># def singleton(cls):</span><br><span class="hljs-comment">#     instances = &#123;&#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     def wrap(*args, **kwargs):</span><br><span class="hljs-comment">#         if cls not in instances:</span><br><span class="hljs-comment">#             instances[cls] = cls(*args, **kwargs)</span><br><span class="hljs-comment">#         return instances[cls]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     return wrap</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># @singleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeiboSeleniumLogin</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, driver_path</span>):<br>        chrome_options = ChromeOptions()<br>        chrome_options.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<br>        chrome_options.add_argument(<span class="hljs-string">&#x27;--no-sandbox&#x27;</span>)<br>        self.__driver = webdriver.Chrome(driver_path, chrome_options=chrome_options)<br>        self.__driver.maximize_window()<br>        self.__driver.set_page_load_timeout(<span class="hljs-number">30</span>)<br>        self.__driver.set_window_size(<span class="hljs-number">1124</span>, <span class="hljs-number">850</span>)<br>        self.__cookies = <span class="hljs-literal">None</span><br>        self._source = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self, username, password, login_url</span>):<br>        self.__driver.get(login_url)<br>        name_field = self.__driver.find_element_by_id(<span class="hljs-string">&#x27;loginname&#x27;</span>)<br>        name_field.clear()<br>        name_field.send_keys(username)<br>        password_field = self.__driver.find_element_by_class_name(<span class="hljs-string">&#x27;password&#x27;</span>).find_element_by_name(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        password_field.clear()<br>        password_field.send_keys(password)<br>        submit = self.__driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;pl_login_form&quot;]/div/div[3]/div[6]/a/span&#x27;</span>)<br>        ActionChains(self.__driver).double_click(submit).perform()<br>        time.sleep(<span class="hljs-number">5</span>)<br>        WebDriverWait(self.__driver, <span class="hljs-number">10</span>).until(EC.presence_of_element_located((By.CLASS_NAME, <span class="hljs-string">&#x27;WB_miniblog&#x27;</span>)))<br><br>        self._source = self.__driver.page_source<br>        <span class="hljs-comment"># print(self._source)</span><br>        <span class="hljs-keyword">if</span> self.is_login():<br>            <span class="hljs-comment"># print(&#x27;login success&#x27;)</span><br>            self.__cookies = self.__driver.get_cookies()<br>            self.__driver.quit()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        self.__driver.quit()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_login</span>(<span class="hljs-params">self</span>):<br>        rs = re.search(<span class="hljs-string">&quot;CONFIG\[&#x27;islogin&#x27;\]=&#x27;(\d)&#x27;&quot;</span>, self._source)<br>        <span class="hljs-keyword">if</span> rs:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(rs.group(<span class="hljs-number">1</span>)) == <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cookies</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__cookies<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">user_id</span>(<span class="hljs-params">self</span>):<br>        rs = re.search(<span class="hljs-string">&quot;CONFIG\[&#x27;uid&#x27;\]=&#x27;(\d+)&#x27;&quot;</span>, self._source)<br>        <span class="hljs-keyword">if</span> rs:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(rs.group(<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    chrome_driver_path1 = <span class="hljs-string">&#x27;/root/qk_python/python/data/collect/weibo_spider/priv/chromedriver&#x27;</span><br>    username1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的账号\n&#x27;</span>)<br>    password1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码\n&#x27;</span>)<br>    login_url1 = <span class="hljs-string">&#x27;https://weibo.com/login.php&#x27;</span><br>    sl = WeiboSeleniumLogin(chrome_driver_path1)<br>    <span class="hljs-keyword">if</span> sl.login(username1, password1, login_url1):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;login success&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(sl.cookies)<br>        <span class="hljs-built_in">print</span>(sl.user_id)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;login failed&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>登录成功之后可以获取到cookies数据和后续抓取所需要的user_id。并且cookies也需要转变成request库所需要的格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 4/3/18 2:08 PM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: 爬取weibo热门话题（需要处理登录）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">from</span> spider.base_spider <span class="hljs-keyword">import</span> BaseSpider<br><span class="hljs-keyword">from</span> login.simulate_login <span class="hljs-keyword">import</span> WeiboSeleniumLogin<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HotNewTopicSpider</span>(<span class="hljs-title class_ inherited__">BaseSpider</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;爬取weibo热门话题（需要处理登录）：需要获取title, url, 阅读数, 讨论数, 粉丝数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cookies, user_id</span>):<br>        self._cookie_dict = &#123;&#125;<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(cookies, <span class="hljs-built_in">list</span>), <span class="hljs-string">&quot;argument type error&quot;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(user_id, <span class="hljs-built_in">int</span>), <span class="hljs-string">&quot;argument type error&quot;</span><br>        <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> cookies:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> cookie <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;value&#x27;</span> <span class="hljs-keyword">in</span> cookie:<br>                self._cookie_dict[cookie[<span class="hljs-string">&#x27;name&#x27;</span>]] = cookie[<span class="hljs-string">&#x27;value&#x27;</span>]<br>        self._user_id = user_id<br>        self._html = self.get_html_content(<span class="hljs-string">&#x27;https://weibo.com/u/&#123;&#125;/home&#x27;</span>.<span class="hljs-built_in">format</span>(self._user_id), self._cookie_dict)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_topic_list</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取热门话题列表&quot;&quot;&quot;</span><br>        topic_list = []<br>        pattern = <span class="hljs-string">r&#x27;&lt;span class=\\&quot;total S_txt2\\&quot; title=\\&quot;阅读量\\&quot;&gt;(.*?)&lt;.*?href=\\&quot;\\/\\/weibo.com\\/p\\/(.*?from=&#x27;</span> \<br>                  <span class="hljs-string">r&#x27;trendtop_api&amp;refer=index_hot_new).*?title=\\&quot;(.*?)\\&quot;&gt;&#x27;</span><br>        raw_list = re.findall(pattern, self._html)<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raw_list:<br>            read_cnt, path, title = raw<br>            topic_list.append(<br>                &#123;<br>                    <span class="hljs-string">&#x27;read_cnt&#x27;</span>: self.read_cnt_transfer(read_cnt),<br>                    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://weibo.com/p/&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(path),<br>                    <span class="hljs-string">&#x27;title&#x27;</span>: title.strip(<span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#125;<br>            )<br>        <span class="hljs-keyword">return</span> topic_list<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_cnt_transfer</span>(<span class="hljs-params">read_cnt_str</span>):<br>        <span class="hljs-keyword">if</span> read_cnt_str.rstrip(<span class="hljs-string">&#x27;亿&#x27;</span>) != read_cnt_str:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">float</span>(read_cnt_str.rstrip(<span class="hljs-string">&#x27;亿&#x27;</span>)) * <span class="hljs-number">100000000</span>)<br>        <span class="hljs-keyword">elif</span> read_cnt_str.rstrip(<span class="hljs-string">&#x27;万&#x27;</span>) != read_cnt_str:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">float</span>(read_cnt_str.rstrip(<span class="hljs-string">&#x27;万&#x27;</span>)) * <span class="hljs-number">10000</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(read_cnt_str)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_numbers</span>(<span class="hljs-params">self, url</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据话题的url获取 阅读数, 讨论数, 粉丝数等数据</span><br><span class="hljs-string">            进一步解析topic_list中的详情url</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    chrome_driver_path1 = <span class="hljs-string">&#x27;/root/qk_python/python/data/collect/weibo_spider/priv/chromedriver&#x27;</span><br>    username1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的账号\n&#x27;</span>)<br>    password1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码\n&#x27;</span>)<br>    login_url1 = <span class="hljs-string">&#x27;https://weibo.com/login.php&#x27;</span><br>    sl = WeiboSeleniumLogin(chrome_driver_path1)<br>    <span class="hljs-keyword">if</span> sl.login(username1, password1, login_url1):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;login success&#x27;</span>)<br>        <span class="hljs-comment"># print(sl.cookies)</span><br>        <span class="hljs-comment"># print(sl.user_id)</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;login failed&#x27;</span>)<br><br>    spd = HotNewTopicSpider(sl.cookies, sl.user_id)<br>    topic_list1 = spd.get_topic_list()<br>    <span class="hljs-keyword">import</span> json<br>    <span class="hljs-built_in">print</span>(json.dumps(topic_list1))<br><br></code></pre></td></tr></table></figure><p>最后能成功获取到热门话题以及对应的链接和阅读量。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整个爬取任务中的关键在于反扒，模拟登录，以及抓取正则表达式。本次涉及到了以下爬虫技巧：</p><ul><li>登录：cookie</li><li>登录：表单</li><li>伪装成浏览器访问</li><li>反”反盗链”</li></ul><p>要做一个完整的大爬虫，还需要涉及以下几个部分：</p><ul><li>验证码：想尽一切办法避免验证码（目前验证码的难度比较大，一定有验证码时，可以做成服务）</li><li>gzip&#x2F;deflate：流式解压用于提高效率</li><li>多线程（线程类和线程池）</li><li>http代理池：squid和haipproxy构成高可用的ip代理迟</li></ul><p>这几个部分本次用不上，后续补充。</p><hr><p>参考：</p><ul><li>weibo_spider：<a href="https://github.com/Flowsnow/weibo_spider">https://github.com/Flowsnow/weibo_spider</a></li><li>smart_login：<a href="https://github.com/Flowsnow/smart_login">https://github.com/Flowsnow/smart_login</a></li><li>爬取新浪微博热搜：<a href="https://www.jianshu.com/p/e6c24feeb806">https://www.jianshu.com/p/e6c24feeb806</a></li><li>python爬虫技巧总结：<a href="http://www.pythonclub.org/python-network-application/observer-spider">http://www.pythonclub.org/python-network-application/observer-spider</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>微博</tag>
      
      <tag>爬虫</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFS+剪枝查找目标转推流节点</title>
    <link href="/2018/03/24/bfs-%E5%89%AA%E6%9E%9D%E6%9F%A5%E6%89%BE%E7%9B%AE%E6%A0%87%E8%BD%AC%E6%8E%A8%E6%B5%81%E8%8A%82%E7%82%B9/"/>
    <url>/2018/03/24/bfs-%E5%89%AA%E6%9E%9D%E6%9F%A5%E6%89%BE%E7%9B%AE%E6%A0%87%E8%BD%AC%E6%8E%A8%E6%B5%81%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>需求：在各个国家都有可能部署转推流节点，因此需要高效快捷的查找到离推理地点最近的一个目标转推流节点。</p><p>现状：国内以省为单位，国外以国家为单位，虽然当前节点较少，但是为了保障业务拓展之后的效果，因此需要及时进行图优化。</p><p>分析：建立中国地图和世界地图，根据ip地址在ip数据库中查找，得到ip所属的国家名称，国家代码，省份名称，省份代码。用国家代码在世界地图中查找最近的国家节点，用省份代码在中国地图中查找最近的省份节点。</p><p>搜索：搜索方式为广度优先搜索BFS，用于寻找最近的目标点。</p><span id="more"></span><p>BFS+剪枝实现的中国地图和世界地图中查找目标转推流节点的代码如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-comment">%%% @author ChenLiang</span><br><span class="hljs-comment">%%% @copyright (C) 2018, &lt;COMPANY&gt;</span><br><span class="hljs-comment">%%% @doc</span><br><span class="hljs-comment">%%%</span><br><span class="hljs-comment">%%% @end</span><br><span class="hljs-comment">%%% Created : 2018/03/20 14:59</span><br><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-keyword">-module</span><span class="hljs-params">(detonate_deliver_site_graph)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-keyword">-behaviour</span><span class="hljs-params">(gen_server)</span>.<br><span class="hljs-keyword">-include</span><span class="hljs-params">(<span class="hljs-string">&quot;detonate_server.hrl&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([start_link/<span class="hljs-number">0</span>, lookup_deliver_node/<span class="hljs-number">2</span>])</span>.<br><br><span class="hljs-comment">%% gen_server callbacks</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([init/<span class="hljs-number">1</span>,</span><br><span class="hljs-params">  handle_call/<span class="hljs-number">3</span>,</span><br><span class="hljs-params">  handle_cast/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  handle_info/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  terminate/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  code_change/<span class="hljs-number">3</span>])</span>.<br><br><span class="hljs-keyword">-define</span><span class="hljs-params">(SERVER, ?MODULE)</span>.<br><br><span class="hljs-keyword">-record</span><span class="hljs-params">(state, &#123;</span><br><span class="hljs-params">  china_graph = digraph:new() :: digraph:graph(),</span><br><span class="hljs-params">  china_tid = ets:new(undefined, []) :: ets:tid(),</span><br><span class="hljs-params">  world_graph = digraph:new() :: digraph:graph(),</span><br><span class="hljs-params">  world_tid = ets:new(undefined, []) :: ets:tid()</span><br><span class="hljs-params">  &#125;</span><br><span class="hljs-params">)</span>.<br><br><span class="hljs-comment">%%%===================================================================</span><br><span class="hljs-comment">%%% API</span><br><span class="hljs-comment">%%%===================================================================</span><br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% Starts the server</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(start_link() -&gt;</span><br><span class="hljs-params">  &#123;ok, Pid :: pid()&#125; | ignore | &#123;error, Reason :: term()&#125;)</span>.<br><span class="hljs-function"><span class="hljs-title">start_link</span><span class="hljs-params">()</span> -&gt;</span><br>  gen_server:start_link(&#123;local, ?SERVER&#125;, ?MODULE, [], []).<br><br><span class="hljs-function"><span class="hljs-title">lookup_deliver_node</span><span class="hljs-params">(lookup_province, Province)</span> -&gt;</span><br>  lager:debug(<span class="hljs-string">&quot;lookup_province: ~p ~n&quot;</span>, [Province]),<br>  gen_server:call(?MODULE, &#123;lookup_province, Province&#125;);<br><span class="hljs-function"><span class="hljs-title">lookup_deliver_node</span><span class="hljs-params">(lookup_country, CountryCode)</span> -&gt;</span><br>  lager:debug(<span class="hljs-string">&quot;lookup_country: ~p ~n&quot;</span>, [CountryCode]),<br>  gen_server:call(?MODULE, &#123;lookup_country, CountryCode&#125;).<br><br><span class="hljs-comment">%%%===================================================================</span><br><span class="hljs-comment">%%% gen_server callbacks</span><br><span class="hljs-comment">%%%===================================================================</span><br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @private</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% Initializes the server</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @spec init(Args) -&gt; &#123;ok, State&#125; |</span><br><span class="hljs-comment">%%                     &#123;ok, State, Timeout&#125; |</span><br><span class="hljs-comment">%%                     ignore |</span><br><span class="hljs-comment">%%                     &#123;stop, Reason&#125;</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(init(Args :: term()) -&gt;</span><br><span class="hljs-params">  &#123;ok, State :: #state&#123;&#125;&#125; | &#123;ok, State :: #state&#123;&#125;, timeout() | hibernate&#125; |</span><br><span class="hljs-params">  &#123;stop, Reason :: term()&#125; | ignore)</span>.<br><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">([])</span> -&gt;</span><br>  gen_server:cast(?MODULE, init_china),<br>  gen_server:cast(?MODULE, init_world),<br>  &#123;ok, #state&#123;&#125;&#125;.<br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @private</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% Handling call messages</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(handle_call(Request :: term(), From :: &#123;pid(), Tag :: term()&#125;,</span><br><span class="hljs-params">    State :: #state&#123;&#125;) -&gt;</span><br><span class="hljs-params">  &#123;reply, Reply :: term(), NewState :: #state&#123;&#125;&#125; |</span><br><span class="hljs-params">  &#123;reply, Reply :: term(), NewState :: #state&#123;&#125;, timeout() | hibernate&#125; |</span><br><span class="hljs-params">  &#123;noreply, NewState :: #state&#123;&#125;&#125; |</span><br><span class="hljs-params">  &#123;noreply, NewState :: #state&#123;&#125;, timeout() | hibernate&#125; |</span><br><span class="hljs-params">  &#123;stop, Reason :: term(), Reply :: term(), NewState :: #state&#123;&#125;&#125; |</span><br><span class="hljs-params">  &#123;stop, Reason :: term(), NewState :: #state&#123;&#125;&#125;)</span>.<br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(&#123;lookup_province, Province&#125;, _From, State=#state&#123;china_graph = ChinaGraph, china_tid = ChinaTid&#125;)</span> -&gt;</span><br>  Reply = lookup_deliver_node(lookup_province, ChinaGraph, ChinaTid, Province),<br>  &#123;reply, Reply, State&#125;;<br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(&#123;lookup_country, CountryCode&#125;, _From, State=#state&#123;world_graph = WorldGraph, world_tid = WorldTid&#125;)</span> -&gt;</span><br>  Reply = lookup_deliver_node(lookup_country, WorldGraph, WorldTid, CountryCode),<br>  &#123;reply, Reply, State&#125;;<br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(_Request, _From, State)</span> -&gt;</span><br>  &#123;reply, ok, State&#125;.<br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @private</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% Handling cast messages</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(handle_cast(Request :: term(), State :: #state&#123;&#125;) -&gt;</span><br><span class="hljs-params">  &#123;noreply, NewState :: #state&#123;&#125;&#125; |</span><br><span class="hljs-params">  &#123;noreply, NewState :: #state&#123;&#125;, timeout() | hibernate&#125; |</span><br><span class="hljs-params">  &#123;stop, Reason :: term(), NewState :: #state&#123;&#125;&#125;)</span>.<br><span class="hljs-function"><span class="hljs-title">handle_cast</span><span class="hljs-params">(init_china, State=#state&#123;china_graph = ChinaGraph, china_tid = ChinaTid&#125;)</span> -&gt;</span><br>  ChinaVertexFileName = filename:join(code:lib_dir(detonate_server, priv), <span class="hljs-string">&quot;china_province_code.csv&quot;</span>),<br>  ChinaEdgeFileName = filename:join(code:lib_dir(detonate_server, priv), <span class="hljs-string">&quot;china_province_border.csv&quot;</span>),<br>  initialize_graph(china, ChinaGraph, ChinaTid, ChinaVertexFileName, ChinaEdgeFileName),<br>  &#123;noreply, State&#125;;<br><span class="hljs-function"><span class="hljs-title">handle_cast</span><span class="hljs-params">(init_world, State=#state&#123;world_graph = WorldGraph, world_tid = WorldTid&#125;)</span> -&gt;</span><br>  WorldVertexFileName = filename:join(code:lib_dir(detonate_server, priv), <span class="hljs-string">&quot;world_country_code.csv&quot;</span>),<br>  WorldEdgeFileName = filename:join(code:lib_dir(detonate_server, priv), <span class="hljs-string">&quot;world_country_border.csv&quot;</span>),<br>  initialize_graph(world, WorldGraph, WorldTid, WorldVertexFileName, WorldEdgeFileName),<br>  &#123;noreply, State&#125;;<br><span class="hljs-function"><span class="hljs-title">handle_cast</span><span class="hljs-params">(_Request, State)</span> -&gt;</span><br>  &#123;noreply, State&#125;.<br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @private</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% Handling all non call/cast messages</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @spec handle_info(Info, State) -&gt; &#123;noreply, State&#125; |</span><br><span class="hljs-comment">%%                                   &#123;noreply, State, Timeout&#125; |</span><br><span class="hljs-comment">%%                                   &#123;stop, Reason, State&#125;</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(handle_info(Info :: timeout() | term(), State :: #state&#123;&#125;) -&gt;</span><br><span class="hljs-params">  &#123;noreply, NewState :: #state&#123;&#125;&#125; |</span><br><span class="hljs-params">  &#123;noreply, NewState :: #state&#123;&#125;, timeout() | hibernate&#125; |</span><br><span class="hljs-params">  &#123;stop, Reason :: term(), NewState :: #state&#123;&#125;&#125;)</span>.<br><span class="hljs-function"><span class="hljs-title">handle_info</span><span class="hljs-params">(_Info, State)</span> -&gt;</span><br>  &#123;noreply, State&#125;.<br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @private</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% This function is called by a gen_server when it is about to</span><br><span class="hljs-comment">%% terminate. It should be the opposite of Module:init/1 and do any</span><br><span class="hljs-comment">%% necessary cleaning up. When it returns, the gen_server terminates</span><br><span class="hljs-comment">%% with Reason. The return value is ignored.</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @spec terminate(Reason, State) -&gt; void()</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(terminate(Reason :: (normal | shutdown | &#123;shutdown, term()&#125; | term()),</span><br><span class="hljs-params">    State :: #state&#123;&#125;)</span> -&gt; term<span class="hljs-params">()</span>).<br><span class="hljs-function"><span class="hljs-title">terminate</span><span class="hljs-params">(_Reason, _State)</span> -&gt;</span><br>  ok.<br><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-comment">%% @private</span><br><span class="hljs-comment">%% @doc</span><br><span class="hljs-comment">%% Convert process state when code is changed</span><br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%% @spec code_change(OldVsn, State, Extra) -&gt; &#123;ok, NewState&#125;</span><br><span class="hljs-comment">%% @end</span><br><span class="hljs-comment">%%--------------------------------------------------------------------</span><br><span class="hljs-keyword">-spec</span><span class="hljs-params">(code_change(OldVsn :: term() | &#123;down, term()&#125;, State :: #state&#123;&#125;,</span><br><span class="hljs-params">    Extra :: term()) -&gt;</span><br><span class="hljs-params">  &#123;ok, NewState :: #state&#123;&#125;&#125; | &#123;error, Reason :: term()&#125;)</span>.<br><span class="hljs-function"><span class="hljs-title">code_change</span><span class="hljs-params">(_OldVsn, State, _Extra)</span> -&gt;</span><br>  &#123;ok, State&#125;.<br><br><span class="hljs-comment">%%%===================================================================</span><br><span class="hljs-comment">%%% Internal functions</span><br><span class="hljs-comment">%%%===================================================================</span><br><span class="hljs-function"><span class="hljs-title">initialize_graph</span><span class="hljs-params">(china, Graph, Tid, VertexFileName, EdgeFileName)</span>-&gt;</span><br>  &#123;ok, VertexIoDevice&#125; = file:open(VertexFileName, [read, binary]),<br>  add_vertex(china, Graph, Tid, VertexIoDevice),<br>  file:close(VertexIoDevice),<br>  &#123;ok, EdgeIoDevice&#125; = file:open(EdgeFileName, [read, binary]),<br>  add_edge(china, Graph, Tid, EdgeIoDevice),<br>  file:close(EdgeIoDevice);<br><span class="hljs-function"><span class="hljs-title">initialize_graph</span><span class="hljs-params">(world, Graph, Tid, VertexFileName, EdgeFileName)</span>-&gt;</span><br>  &#123;ok, VertexIoDevice&#125; = file:open(VertexFileName, [read, binary]),<br>  add_vertex(world, Graph, Tid, VertexIoDevice),<br>  file:close(VertexIoDevice),<br>  &#123;ok, EdgeIoDevice&#125; = file:open(EdgeFileName, [read, binary]),<br>  add_edge(world, Graph, Tid, EdgeIoDevice),<br>  file:close(EdgeIoDevice).<br><br><span class="hljs-function"><span class="hljs-title">add_vertex</span><span class="hljs-params">(china, Graph, Tid, VertexIoDevice)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> file:read_line(VertexIoDevice) <span class="hljs-keyword">of</span><br>    &#123;ok, Line&#125; -&gt;<br>      <span class="hljs-keyword">case</span> binary:split(Line, [&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&gt;&gt;, &lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&gt;&gt;], [global]) <span class="hljs-keyword">of</span><br>        [Province, DeliverSite | _] -&gt;<br>          ets:insert(Tid, &#123;Province, DeliverSite&#125;),<br>          digraph:add_vertex(Graph, DeliverSite),<br>          add_vertex(china, Graph, Tid, VertexIoDevice);<br>        _ -&gt;<br>          ok<br>      <span class="hljs-keyword">end</span>;<br>    eof -&gt;<br>      ok<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-function"><span class="hljs-title">add_vertex</span><span class="hljs-params">(world, Graph, Tid, VertexIoDevice)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> file:read_line(VertexIoDevice) <span class="hljs-keyword">of</span><br>    &#123;ok, Line&#125; -&gt;<br>      <span class="hljs-keyword">case</span> binary:split(Line, [&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&gt;&gt;, &lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&gt;&gt;], [global]) <span class="hljs-keyword">of</span><br>        [_Continent,&lt;&lt;&gt;&gt;] -&gt;<br>          add_vertex(world, Graph, Tid, VertexIoDevice);<br>        [CountryCode, CountryChineseName, CountryEnglishName | _] -&gt;<br>          ets:insert(Tid, &#123;CountryCode, CountryChineseName, CountryEnglishName&#125;),<br>          digraph:add_vertex(Graph, CountryCode),<br>          add_vertex(world, Graph, Tid, VertexIoDevice);<br>        _ -&gt;<br>          ok<br>      <span class="hljs-keyword">end</span>;<br>    eof -&gt;<br>      ok<br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">add_edge</span><span class="hljs-params">(china, Graph, Tid, EdgeIoDevice)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> file:read_line(EdgeIoDevice) <span class="hljs-keyword">of</span><br>    &#123;ok, Line&#125; -&gt;<br>      <span class="hljs-keyword">case</span> binary:split(Line, [&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&gt;&gt;, &lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&gt;&gt;], [global]) <span class="hljs-keyword">of</span><br>        [Province1, Province2 | _] -&gt;<br>          [&#123;_, DeliverSite1&#125;] = ets:lookup(Tid, Province1),<br>          [&#123;_, DeliverSite2&#125;] = ets:lookup(Tid, Province2),<br>          digraph:add_edge(Graph, DeliverSite1, DeliverSite2),<br>          digraph:add_edge(Graph, DeliverSite2, DeliverSite1),<br>          add_edge(china, Graph, Tid, EdgeIoDevice);<br>        _ -&gt;<br>          ok<br>      <span class="hljs-keyword">end</span>;<br>    eof -&gt;<br>      ok<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-function"><span class="hljs-title">add_edge</span><span class="hljs-params">(world, Graph, Tid, EdgeIoDevice)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> file:read_line(EdgeIoDevice) <span class="hljs-keyword">of</span><br>    &#123;ok, Line&#125; -&gt;<br>      <span class="hljs-keyword">case</span> binary:split(Line, [&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&gt;&gt;, &lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>&gt;&gt;], [global]) <span class="hljs-keyword">of</span><br>        [_Continent,&lt;&lt;&gt;&gt;] -&gt;<br>          add_edge(world, Graph, Tid, EdgeIoDevice);<br>        [_CountryCode1, CountryCode2 | _] <span class="hljs-keyword">when</span> byte_size(CountryCode2) =/= <span class="hljs-number">2</span> -&gt;<br>          add_edge(world, Graph, Tid, EdgeIoDevice);<br>        [CountryCode1, CountryCode2 | _] -&gt;<br>          digraph:add_edge(Graph, CountryCode1, CountryCode2),<br>          digraph:add_edge(Graph, CountryCode2, CountryCode1),<br>          add_edge(world, Graph, Tid, EdgeIoDevice);<br>        _ -&gt;<br>          ok<br>      <span class="hljs-keyword">end</span>;<br>    eof -&gt;<br>      ok<br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">lookup_deliver_node</span><span class="hljs-params">(lookup_province, ChinaGraph, Tid, Province)</span> -&gt;</span><br>  [&#123;_, DeliverSite&#125;] = ets:lookup(Tid, Province),<br>  <span class="hljs-keyword">case</span> bfs(lookup_province, ChinaGraph, DeliverSite) <span class="hljs-keyword">of</span><br>    not_found -&gt;<br>      &#123;ok, ?HANGZHOU&#125;;<br>    &#123;ok, RecentDeliverSite&#125; -&gt;<br>      &#123;ok, RecentDeliverSite&#125;<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-function"><span class="hljs-title">lookup_deliver_node</span><span class="hljs-params">(lookup_country, WorldGraph, _Tid, CountryCode)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> bfs(lookup_country, WorldGraph, CountryCode) <span class="hljs-keyword">of</span><br>    not_found -&gt;<br>      &#123;ok, ?TOKYO&#125;;<br>    &#123;ok, RecentDeliverSite&#125; -&gt;<br>      &#123;ok, RecentDeliverSite&#125;<br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">bfs</span><span class="hljs-params">(Graph, Queue, NodeList, VisitedList)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> queue:is_empty(Queue) <span class="hljs-keyword">of</span><br>    <span class="hljs-literal">true</span> -&gt;<br>      not_found;<br>    _ -&gt;<br>      &#123;&#123;value, Vertex&#125; ,NewQueue&#125; = queue:out(Queue),<br>      NewVisitedList = lists:append(VisitedList, [Vertex]),<br>      <span class="hljs-keyword">case</span> find(Vertex, NodeList) <span class="hljs-keyword">of</span><br>        not_found -&gt;<br>          VertexList = find_vertex_list(Graph, Vertex),<br>          NotVisitedVertexList = filter(VertexList, NewVisitedList),<br>          NewQueue1 = in_queue(NotVisitedVertexList, NewQueue),<br>          bfs(Graph, NewQueue1, NodeList, NewVisitedList);<br>        &#123;ok, DeliverSite&#125; -&gt;<br>          &#123;ok, DeliverSite&#125;<br>      <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">bfs</span><span class="hljs-params">(lookup_province, Graph, Vertex)</span> -&gt;</span><br>  Queue = queue:new(),<br>  &#123;ok, SupportedNodeList&#125; = application:get_env(china_deliver_sites),<br>  NewQueue = in_queue(Vertex, Queue),<br>  bfs(Graph, NewQueue, SupportedNodeList, []);<br><span class="hljs-function"><span class="hljs-title">bfs</span><span class="hljs-params">(lookup_country, Graph, Vertex)</span> -&gt;</span><br>  Queue = queue:new(),<br>  &#123;ok, SupportedNodeList&#125; = application:get_env(world_deliver_sites),<br>  NewQueue = in_queue(Vertex, Queue),<br>  bfs(Graph, NewQueue, SupportedNodeList, []).<br><br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(_Element, [])</span> -&gt;</span><br>  not_found;<br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(Element, [&#123;CountryCode, DeliverSite&#125;|Tail])</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> string:equal(Element, CountryCode) <span class="hljs-keyword">of</span><br>    <span class="hljs-literal">true</span> -&gt;<br>      &#123;ok, DeliverSite&#125;;<br>    _ -&gt;<br>      find(Element, Tail)<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(Element, [DeliverSite|Tail])</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> string:equal(Element, DeliverSite) <span class="hljs-keyword">of</span><br>    <span class="hljs-literal">true</span> -&gt;<br>      &#123;ok, DeliverSite&#125;;<br>    _ -&gt;<br>      find(Element, Tail)<br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">is_visited</span><span class="hljs-params">(Element, List)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> find(Element, List) <span class="hljs-keyword">of</span><br>    not_found -&gt;<br>      <span class="hljs-literal">false</span>;<br>    _ -&gt;<br>      <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">(VertexList, VisitedList)</span> -&gt;</span><br>  filter(VertexList, VisitedList, []).<br><br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">([Head|Tail], VisitedList, ResultList)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> is_visited(Head, VisitedList) <span class="hljs-keyword">of</span><br>    <span class="hljs-literal">false</span> -&gt;<br>      filter(Tail, VisitedList, ResultList ++ [Head]);<br>    _ -&gt;<br>      filter(Tail, VisitedList, ResultList)<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">([], _VisitedList, ResultList)</span> -&gt;</span><br>  ResultList.<br><br><span class="hljs-function"><span class="hljs-title">find_vertex_list</span><span class="hljs-params">(Graph, Vertex)</span> -&gt;</span><br>  Edges = digraph:edges(Graph, Vertex),<br>  find_vertex_list(Graph, Vertex, Edges, []).<br><br><span class="hljs-function"><span class="hljs-title">find_vertex_list</span><span class="hljs-params">(Graph, Vertex, [Head|Tail], VertexList)</span> -&gt;</span><br>  &#123;_, V1, V2, _&#125; = digraph:edge(Graph, Head),<br>  <span class="hljs-keyword">case</span> string:equal(V1, Vertex) <span class="hljs-keyword">of</span><br>    <span class="hljs-literal">true</span> -&gt;<br>      find_vertex_list(Graph, Vertex, Tail, VertexList ++ [V2]);<br>    _ -&gt;<br>      find_vertex_list(Graph, Vertex, Tail, VertexList)<br>  <span class="hljs-keyword">end</span>;<br><span class="hljs-function"><span class="hljs-title">find_vertex_list</span><span class="hljs-params">(_Graph, _Vertex, [], VertexList)</span> -&gt;</span><br>  VertexList.<br><br><span class="hljs-function"><span class="hljs-title">in_queue</span><span class="hljs-params">([], Queue)</span> -&gt;</span><br>  Queue;<br><span class="hljs-function"><span class="hljs-title">in_queue</span><span class="hljs-params">([Head|Tail], Queue)</span> -&gt;</span><br>  NewQueue = queue:in(Head, Queue),<br>  in_queue(Tail, NewQueue);<br><span class="hljs-function"><span class="hljs-title">in_queue</span><span class="hljs-params">(Item, Queue)</span> -&gt;</span><br>  queue:in(Item, Queue).<br><br></code></pre></td></tr></table></figure><p>代码到此为止，关于ip数据库的查询部分可以参见<code>ipip.net</code>。</p><hr><p>附录：</p><ul><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/deliver_site_graph/world_country_code.csv">个人整理的世界地图的各个国家（中英文，简写）</a></li><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/deliver_site_graph/world_country_border.csv">个人整理的世界地图的各个国家的粗略相邻关系</a></li><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/deliver_site_graph/china_province_code.csv">个人整理的中国地图的各个省份（中英文）</a></li><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/deliver_site_graph/china_province_border.csv">个人整理的中国地图的各个省份的相邻关系</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFS</tag>
      
      <tag>剪枝</tag>
      
      <tag>搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Google翻译Api</title>
    <link href="/2018/03/22/%E4%BD%BF%E7%94%A8google%E7%BF%BB%E8%AF%91api/"/>
    <url>/2018/03/22/%E4%BD%BF%E7%94%A8google%E7%BF%BB%E8%AF%91api/</url>
    
    <content type="html"><![CDATA[<p>使用Google翻译Api</p><h3 id="安装Google翻译库"><a href="#安装Google翻译库" class="headerlink" title="安装Google翻译库"></a>安装Google翻译库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install --upgrade google-cloud-translate<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="设置验证"><a href="#设置验证" class="headerlink" title="设置验证"></a>设置验证</h3><p>要运行客户端库，必须首先创建服务帐户并设置环境变量来设置身份验证。</p><ol><li>转到Google Cloud Platform控制台中创建服务帐户密钥页面</li><li>从服务帐户下拉列表中选择新建服务帐户。</li><li>在服务帐户名称字段中输入一个名称。</li><li>从角色下拉列表中，选择项目&gt;所有者。</li><li>点击创建。 密钥就会下载到您的计算机的JSON文件</li></ol><p>将环境变量<code>GOOGLE_APPLICATION_CREDENTIALS</code>设置为包含服务帐户密钥的JSON文件的文件路径。在Linux或macOS系统中设置方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GOOGLE_APPLICATION_CREDENTIALS=&quot;/home/user/Downloads/service-account-file.json&quot;<br></code></pre></td></tr></table></figure><h3 id="使用客户端库调用翻译Api"><a href="#使用客户端库调用翻译Api" class="headerlink" title="使用客户端库调用翻译Api"></a>使用客户端库调用翻译Api</h3><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Imports the Google Cloud client library</span><br><span class="hljs-keyword">from</span> google.cloud <span class="hljs-keyword">import</span> translate<br><br><span class="hljs-comment"># Instantiates a client</span><br>translate_client = translate.Client()<br><br><span class="hljs-comment"># The text to translate</span><br>text = <span class="hljs-string">u&#x27;Hello, world!&#x27;</span><br><span class="hljs-comment"># The target language</span><br>target = <span class="hljs-string">&#x27;ru&#x27;</span><br><br><span class="hljs-comment"># Translates some text into Russian</span><br>translation = translate_client.translate(<br>    text,<br>    target_language=target)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">u&#x27;Text: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(text))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">u&#x27;Translation: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(translation[<span class="hljs-string">&#x27;translatedText&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>要想将文件中的国家名称批量翻译并输出，可以写出下面这样的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#encoding: utf-8</span><br><br><span class="hljs-comment"># Imports the Google Cloud client library</span><br><span class="hljs-keyword">from</span> google.cloud <span class="hljs-keyword">import</span> translate<br><br><span class="hljs-comment"># Instantiates a client</span><br>translate_client = translate.Client()<br><br><span class="hljs-comment"># The target language</span><br>target = <span class="hljs-string">&#x27;en&#x27;</span><br><br>d = &#123;&#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;world_country_code.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fpr:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fpr.readlines():<br>        country = line.strip()<br>        <span class="hljs-keyword">if</span> country.endswith(<span class="hljs-string">&#x27;:&#x27;</span>):<br>            result_line = country<br>        <span class="hljs-keyword">elif</span> country <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;&#x27;</span>:<br>            result_line = country<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Translates some text into Russian</span><br>            translation = translate_client.translate(country, target_language=target)<br>            result_line = translation[<span class="hljs-string">&#x27;translatedText&#x27;</span>]<br>            result_line = <span class="hljs-string">&#x27;&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(country, result_line)<br>        <span class="hljs-built_in">print</span> result_line<br></code></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><code>https://cloud.google.com/translate/docs/reference/libraries#client-libraries-usage-python</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排查rtmp协议推流时握手bug</title>
    <link href="/2018/03/20/%E6%8E%92%E6%9F%A5rtmp%E5%8D%8F%E8%AE%AE%E6%8E%A8%E6%B5%81%E6%97%B6%E6%8F%A1%E6%89%8Bbug/"/>
    <url>/2018/03/20/%E6%8E%92%E6%9F%A5rtmp%E5%8D%8F%E8%AE%AE%E6%8E%A8%E6%B5%81%E6%97%B6%E6%8F%A1%E6%89%8Bbug/</url>
    
    <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>转推流程序的过程：从一个观看地址拉流，然后推流到另一个推流地址。主要用于cdn之间转推，目前市面上大多数cdn厂商都愿意不支持动态转推，因此只能通过转推流程序进行转推。</p><p>bug现象：使用obs studio推流到微赞可以成功，但是使用Erlang版本的转推流程序推流到微赞却失败。</p><p>日志如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">14</span>:<span class="hljs-number">12:35.926</span> [debug] payload [&#123;amf,[&quot;onBWDone&quot;,<span class="hljs-number">0</span>,null]&#125;], msgtype[command_msg_4_amf0] <br><span class="hljs-number">14</span>:<span class="hljs-number">12:35.949</span> [debug] play succ ======&gt; url [&quot;/live-sz/w15209<span class="hljs-number">93434573948</span>&quot;] <br><span class="hljs-number">14</span>:<span class="hljs-number">12:35.949</span> [debug] &#123;rtmp_msg,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,data_msg_4_amf0,<span class="hljs-number">1</span>,&#123;amf,[&quot;|RtmpSampleAccess&quot;,true,true]&#125;&#125;<br><span class="hljs-number">14</span>:<span class="hljs-number">12:35.949</span> [debug] &#123;rtmp_msg,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,data_msg_4_amf0,<span class="hljs-number">1</span>,&#123;amf,[&quot;onStatus&quot;,&#123;object,[&#123;&quot;code&quot;,&quot;NetStream.Data.Start&quot;&#125;]&#125;]&#125;&#125;<br><span class="hljs-number">14</span>:<span class="hljs-number">12:36.038</span> [error] gen_server &lt;<span class="hljs-number">0.122.0</span>&gt; terminated with reason: no match of right hand value &lt;&lt;<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">113,142,194,240</span>,<span class="hljs-number">185,25,41,180</span>,<span class="hljs-number">242,33,5,112</span>,<span class="hljs-number">128,97,178,8</span>,<span class="hljs-number">79,179,28,53</span>,<span class="hljs-number">152,242,82,43</span>,<span class="hljs-number">234,104,113,246</span>,<span class="hljs-number">170,189,182,146</span>,<span class="hljs-number">122,36,155,3</span>,<span class="hljs-number">152,180,226,122</span>,<span class="hljs-number">36,97,52,67</span>,<span class="hljs-number">53,158,107,170</span>,<span class="hljs-number">178,119,209,132</span>,<span class="hljs-number">40,233,102,182</span>,<span class="hljs-number">142,233,218,71</span>,<span class="hljs-number">55,8,121,67</span>,<span class="hljs-number">117,58,130,91</span>,<span class="hljs-number">107,224,202,5</span>,<span class="hljs-number">1,132,37,245</span>,<span class="hljs-number">143,231,20,198</span>,<span class="hljs-number">121,204,57,80</span>,<span class="hljs-number">102,165,104,245</span>,<span class="hljs-number">79,71,254,169</span>,<span class="hljs-number">15,3,166,12</span>,<span class="hljs-number">148,45,24,62</span>,<span class="hljs-number">253,66,93,139</span>,<span class="hljs-number">84,139,54,236</span>,<span class="hljs-number">47,5,98,95</span>,<span class="hljs-number">51,231,222,144</span>,<span class="hljs-number">8,153,232,166</span>,<span class="hljs-number">227,151,57,98</span>,<span class="hljs-number">214,63,238,167</span>,<span class="hljs-number">212,49,51,160</span>,<span class="hljs-number">83,248,246,199</span>,...&gt;&gt; in rtmp_handshake:create_c2/<span class="hljs-number">2</span> line <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>很显然是<code>rtmp_handshake:create_c2/2</code>函数出现匹配错误，对应代码如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-spec</span> create_c2<span class="hljs-params">(C0C1, S0S1S2)</span> -&gt; Result when<br>          C0C1 :: iodata<span class="hljs-params">()</span>,<br>          S0S1S2 :: binary<span class="hljs-params">()</span>,<br>          Result :: &#123;ok, C2&#125;,<br>          C2 :: iolist<span class="hljs-params">()</span>.<br><span class="hljs-function"><span class="hljs-title">create_c2</span><span class="hljs-params">(C0C1, S0S1S2)</span> <span class="hljs-title">when</span> <span class="hljs-title">is_list</span><span class="hljs-params">(C0C1)</span> -&gt;</span><br>    create_c2(iolist_to_binary(C0C1), S0S1S2);<br><span class="hljs-function"><span class="hljs-title">create_c2</span><span class="hljs-params">(&lt;&lt;_C0:<span class="hljs-number">1</span>/binary, C1:<span class="hljs-number">16#600</span>/binary&gt;&gt;, &lt;&lt;S0:<span class="hljs-number">1</span>/binary, S1:<span class="hljs-number">16#600</span>/binary, S2:<span class="hljs-number">16#600</span>/binary&gt;&gt;)</span> -&gt;</span><br>    &lt;&lt;<span class="hljs-number">3</span>&gt;&gt; = S0,<br>    <span class="hljs-keyword">case</span> C1 <span class="hljs-keyword">of</span><br>        &lt;&lt;_:<span class="hljs-number">32</span>, <span class="hljs-number">0</span>:<span class="hljs-number">32</span>, _/binary&gt;&gt; -&gt;<br>            S2 = C1,<br>            &#123;ok, S1&#125;;<br>        _ -&gt;<br>            &#123;ok, S1DigestData&#125; = verify_s1(S1),    <br>            DigestKey = crypto:hmac(sha256, ?C2_PUBLIC_KEY, S1DigestData),<br>            C2Len = <span class="hljs-number">16#600</span>,<br>            C2DigestDataLen = <span class="hljs-number">32</span>,<br>            RandomBin = random_binary(C2Len - <span class="hljs-number">8</span> - C2DigestDataLen),<br>            &#123;T1, T2, _&#125; = now(),<br>            Epoch = &lt;&lt;(<span class="hljs-number">1000000</span> * T1 + T2):<span class="hljs-number">32</span>/little&gt;&gt;,<br>            Data = [Epoch, binary:part(S1, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>), RandomBin],<br>            S2DigestData = crypto:hmac(sha256, DigestKey, Data),<br>            &#123;ok, [Data, S2DigestData]&#125;<br>    <span class="hljs-keyword">end</span>.<br></code></pre></td></tr></table></figure><p>rtmp握手过程中C1数据包匹配<code>&lt;&lt;_:32, 0:32, _/binary&gt;&gt;</code>格式后和S2数据包匹配不成功，程序直接crash dump。因此需要弄清楚rtmp握手过程中是否有对S2和C1进行匹配验证。</p><h1 id="Rtmp握手过程"><a href="#Rtmp握手过程" class="headerlink" title="Rtmp握手过程"></a>Rtmp握手过程</h1><p>此处重点关注rtmp握手过程中的C1和S2数据包。</p><p>先看官方文档中的握手过程，中文翻译版本可以参见：<a href="https://suncle.me/2018/03/09/rtmp%E8%A7%84%E8%8C%831-0/">rtmp规范1.0</a>。 官方文档中对于是否要保证C1和S2完全一致，并没有明确说法。因此可以先参见obs studio依赖的**<code>librtmp</code><strong>库，看握手过程是如何处理的。obs studio依赖的</strong><code>librtmp</code>**的代码如下连接：</p><ol><li><a href="https://github.com/obsproject/obs-studio/blob/master/plugins/obs-outputs/librtmp/rtmp.c">https://github.com/obsproject/obs-studio/blob/master/plugins/obs-outputs/librtmp/rtmp.c</a></li><li><a href="https://github.com/obsproject/obs-studio/blob/master/plugins/obs-outputs/librtmp/handshake.h">https://github.com/obsproject/obs-studio/blob/master/plugins/obs-outputs/librtmp/handshake.h</a></li></ol><p>第一个链接rtmp.c中的代码是推流地址中没有加密串的情况下的握手过程代码，第二个链接handshake.h中的代码是推流地址中有加密串的情况下的握手过程代码。代码中使用条件编译<code>CRYPTO</code>宏来选择编译不同的代码。其中<code>HandShake</code>函数属于客户端的握手函数，<code>SHandShake</code>属于服务端的握手函数。非加密版本具体C语言代码如下（已添加对应的中文注释进行说明）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CRYPTO</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">HandShake</span><span class="hljs-params">(RTMP *r, <span class="hljs-type">int</span> FP9HandShake)</span><br>&#123;<br>    <span class="hljs-comment">//C0,C1 -- S0, S1, S2 -- C2 消息握手协议</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> uptime, suptime;<br>    <span class="hljs-type">int</span> bMatch;<br>    <span class="hljs-type">char</span> type;<br>    <span class="hljs-type">char</span> clientbuf[RTMP_SIG_SIZE + <span class="hljs-number">1</span>], *clientsig = clientbuf + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> serversig[RTMP_SIG_SIZE];<br><br>    clientbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0x03</span>;  <span class="hljs-comment">//C0, 一个字节。03代表协议版本号为3 /* not encrypted */</span><br><br>    uptime = htonl(RTMP_GetTime());  <span class="hljs-comment">//这是一个时间戳，放在C1消息头部  </span><br>    <span class="hljs-built_in">memcpy</span>(clientsig, &amp;uptime, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">memset</span>(&amp;clientsig[<span class="hljs-number">4</span>], <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);  <span class="hljs-comment">//后面放4个字节的空数据然后就是随机数据  </span><br><br>    <span class="hljs-comment">//后面是随机数据，总共1536字节的C1消息 </span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _DEBUG</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">8</span>; i &lt; RTMP_SIG_SIZE; i++)<br>        clientsig[i] = <span class="hljs-number">0xff</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">8</span>; i &lt; RTMP_SIG_SIZE; i++)<br>        clientsig[i] = (<span class="hljs-type">char</span>)(rand() % <span class="hljs-number">256</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//发送C0， C1消息  </span><br>    <span class="hljs-keyword">if</span> (!WriteN(r, clientbuf, RTMP_SIG_SIZE + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    <span class="hljs-comment">//下面读一个字节也就是S0消息，看协议是否一样  </span><br>    <span class="hljs-keyword">if</span> (ReadN(r, &amp;type, <span class="hljs-number">1</span>) != <span class="hljs-number">1</span>)<span class="hljs-comment">/* 0x03 or 0x06 */</span><br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    RTMP_Log(RTMP_LOGDEBUG, <span class="hljs-string">&quot;%s: Type Answer   : %02X&quot;</span>, __FUNCTION__, type);<br><br>    <span class="hljs-keyword">if</span> (type != clientbuf[<span class="hljs-number">0</span>])  <span class="hljs-comment">//C/S版本不一致 </span><br>        RTMP_Log(RTMP_LOGWARNING, <span class="hljs-string">&quot;%s: Type mismatch: client sent %d, server answered %d&quot;</span>,<br>                 __FUNCTION__, clientbuf[<span class="hljs-number">0</span>], type);<br><br>    <span class="hljs-comment">//读取S1消息，里面有服务器运行时间  </span><br>    <span class="hljs-keyword">if</span> (ReadN(r, serversig, RTMP_SIG_SIZE) != RTMP_SIG_SIZE)<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    <span class="hljs-comment">/* decode server response */</span><br><br>    <span class="hljs-built_in">memcpy</span>(&amp;suptime, serversig, <span class="hljs-number">4</span>);<br>    suptime = ntohl(suptime);<br><br>    RTMP_Log(RTMP_LOGDEBUG, <span class="hljs-string">&quot;%s: Server Uptime : %d&quot;</span>, __FUNCTION__, suptime);<br>    RTMP_Log(RTMP_LOGDEBUG, <span class="hljs-string">&quot;%s: FMS Version   : %d.%d.%d.%d&quot;</span>, __FUNCTION__,<br>             serversig[<span class="hljs-number">4</span>], serversig[<span class="hljs-number">5</span>], serversig[<span class="hljs-number">6</span>], serversig[<span class="hljs-number">7</span>]);<br><br>    <span class="hljs-comment">/* 2nd part of handshake */</span><br>    <span class="hljs-keyword">if</span> (!WriteN(r, serversig, RTMP_SIG_SIZE))  <span class="hljs-comment">//发送C2消息，内容就等于S1消息的内容。  </span><br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    <span class="hljs-comment">//读取S2消息  </span><br>    <span class="hljs-keyword">if</span> (ReadN(r, serversig, RTMP_SIG_SIZE) != RTMP_SIG_SIZE)<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    <span class="hljs-comment">//服务端返回的S2消息和C1消息进行了比对，但是即使没有match，也是返回TRUE，只是打印了log </span><br>    bMatch = (<span class="hljs-built_in">memcmp</span>(serversig, clientsig, RTMP_SIG_SIZE) == <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!bMatch)<br>    &#123;<br>        RTMP_Log(RTMP_LOGWARNING, <span class="hljs-string">&quot;%s, client signature does not match!&quot;</span>, __FUNCTION__);<br>    &#125;<br><br>    <span class="hljs-comment">/* er, totally unused? */</span><br>    (<span class="hljs-type">void</span>)FP9HandShake;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">SHandShake</span><span class="hljs-params">(RTMP *r)</span><br>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>rtmp握手过程中确实存在对S2和C1进行匹配验证的操作，但是这个操作并不影响握手是否是成功的，只是添加了一条warnning日志而已。因此obs studio还是能推流成功。相对应的在我们的转推流程序中，需要针对这个情况不进行强认证，删除掉匹配的操作即可。</p><h1 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h1><p>以微赞和网宿为例</p><ul><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/rtmp_deliver/file/obs-netcenter-handshake-success.pcapng">obs推流网宿握手成功的包点此下载</a></li><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/rtmp_deliver/file/obs-vzan-handshake-success.pcapng">obs推流微赞握手成功的包点此下载</a></li></ul><p>网宿推流没有走加密流程，S2和C1匹配，具体数据包截图如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/rtmp_deliver/image/obs-netcenter-handshake-success.jpg" alt="obs-netcenter-handshake-success.jpg"></p><p>微赞推流走加密流程，S2和C1不匹配，具体数据包截图如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/rtmp_deliver/image/obs-vzan-handshake-success.jpg" alt="obs-vzan-handshake-success.jpg"></p><p>到此，整个rtmp推流握手过程就比较清楚了。</p><p>因此只需要将Erlang代码的流程更改下即可（删除S2和C1的匹配过程），见下面的Erlang代码：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-spec</span> create_c2<span class="hljs-params">(C0C1, S0S1S2)</span> -&gt; Result when<br>          C0C1 :: iodata<span class="hljs-params">()</span>,<br>          S0S1S2 :: binary<span class="hljs-params">()</span>,<br>          Result :: &#123;ok, C2&#125;,<br>          C2 :: iolist<span class="hljs-params">()</span>.<br><span class="hljs-function"><span class="hljs-title">create_c2</span><span class="hljs-params">(C0C1, S0S1S2)</span> <span class="hljs-title">when</span> <span class="hljs-title">is_list</span><span class="hljs-params">(C0C1)</span> -&gt;</span><br>    create_c2(iolist_to_binary(C0C1), S0S1S2);<br><span class="hljs-function"><span class="hljs-title">create_c2</span><span class="hljs-params">(&lt;&lt;_C0:<span class="hljs-number">1</span>/binary, C1:<span class="hljs-number">16#600</span>/binary&gt;&gt;, &lt;&lt;S0:<span class="hljs-number">1</span>/binary, S1:<span class="hljs-number">16#600</span>/binary, _S2:<span class="hljs-number">16#600</span>/binary&gt;&gt;)</span> -&gt;</span><br>    &lt;&lt;<span class="hljs-number">3</span>&gt;&gt; = S0,<br>    <span class="hljs-keyword">case</span> C1 <span class="hljs-keyword">of</span><br>        &lt;&lt;_:<span class="hljs-number">32</span>, <span class="hljs-number">0</span>:<span class="hljs-number">32</span>, _/binary&gt;&gt; -&gt;<br>          &#123;ok, S1&#125;;<br>        _ -&gt;<br>            &#123;ok, S1DigestData&#125; = verify_s1(S1),    <br>            DigestKey = crypto:hmac(sha256, ?C2_PUBLIC_KEY, S1DigestData),<br>            C2Len = <span class="hljs-number">16#600</span>,<br>            C2DigestDataLen = <span class="hljs-number">32</span>,<br>            RandomBin = random_binary(C2Len - <span class="hljs-number">8</span> - C2DigestDataLen),<br>            &#123;T1, T2, _&#125; = now(),<br>            Epoch = &lt;&lt;(<span class="hljs-number">1000000</span> * T1 + T2):<span class="hljs-number">32</span>/little&gt;&gt;,<br>            Data = [Epoch, binary:part(S1, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>), RandomBin],<br>            S2DigestData = crypto:hmac(sha256, DigestKey, Data),<br>            &#123;ok, [Data, S2DigestData]&#125;<br>    <span class="hljs-keyword">end</span>.<br></code></pre></td></tr></table></figure><p>至此，转推流成功，示例图如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/rtmp_deliver/image/rtmp_deliver_success.jpg" alt="rtmp_deliver_success.jpg"></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>虽然Adobe公司自己出的rtmp协议不是iso标准的，但是你们这些公司好歹也尽量按照规定来啊，贼鸡儿坑。</p><hr><p>参考：</p><ul><li>obs-studio: <a href="https://github.com/obsproject/obs-studio">https://github.com/obsproject/obs-studio</a></li><li>obs studio握手：<a href="https://github.com/obsproject/obs-studio/blob/master/plugins/obs-outputs/librtmp/handshake.h">https://github.com/obsproject/obs-studio/blob/master/plugins/obs-outputs/librtmp/handshake.h</a></li><li>RTMPdump（libRTMP）握手源代码：<a href="https://blog.csdn.net/leixiaohua1020/article/details/12954329">https://blog.csdn.net/leixiaohua1020/article/details/12954329</a></li><li>rtmp协议过程分析：<a href="https://www.cnblogs.com/lidabo/p/7355262.html">https://www.cnblogs.com/lidabo/p/7355262.html</a></li><li>librtmp使用示例： <a href="https://github.com/leixiaohua1020/simplest_librtmp_example">https://github.com/leixiaohua1020/simplest_librtmp_example</a></li><li>rtmplib rtmp协议过程分析：<a href="https://www.cnblogs.com/lidabo/p/7355262.html">https://www.cnblogs.com/lidabo/p/7355262.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rtmp</tag>
      
      <tag>握手</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用模块集锦</title>
    <link href="/2018/03/12/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9B%86%E9%94%A6/"/>
    <url>/2018/03/12/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<p>Python常用模块集锦</p><p>常用模块主要分为以下几类（缺失的后续再补充）：</p><ul><li>时间转换</li><li>时间计算</li><li>序列化和反序列化：<code>json</code>，<code>pickle</code></li><li>编解码：<code>unicode</code>，<code>base64</code></li><li>加解密：<code>md5</code>，<code>sha1</code>，<code>hmac_sha1</code>，<code>aes</code></li><li>常见装饰器：<ul><li>计算执行时间装饰器</li><li>缓存装饰器</li><li>错误重试装饰器</li><li>延迟装饰器</li><li>尾递归优化装饰器</li></ul></li><li><code>ini</code>配置文件读取</li></ul><span id="more"></span><p>代码整合如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 9/21/17 1:46 PM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: python常用模块集锦，util.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> ConfigParser<br><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> b2a_hex, a2b_hex<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br>BEFORE = <span class="hljs-number">1</span><br>LATER = <span class="hljs-number">2</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Python通用单元：不好归类但常用的方法此处添加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeTransferUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;时间相关的常见转换方法&quot;&quot;&quot;</span><br><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;时间相关的常见计算方法&quot;&quot;&quot;</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_date</span>():<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializeUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;序列化和反序列化：json, pickle&quot;&quot;&quot;</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">json_loads</span>(<span class="hljs-params">json_str, encoding=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            obj = json.loads(s=json_str, encoding=encoding)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, obj<br>        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">json_dumps</span>(<span class="hljs-params">obj</span>):<br>        <span class="hljs-keyword">try</span>:<br>            json_str = json.dumps(obj=obj)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, json_str<br>        <span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickle_loads</span>(<span class="hljs-params">pickle_str</span>):<br>        <span class="hljs-keyword">try</span>:<br>            obj = pickle.loads(pickle_str)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, obj<br>        <span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pickle_dumps</span>(<span class="hljs-params">obj</span>):<br>        <span class="hljs-keyword">try</span>:<br>            pickle_str = pickle.dumps(obj)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, pickle_str<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CodecUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编解码相关常见方法：base64 unicode&quot;&quot;&quot;</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_encode</span>(<span class="hljs-params">data</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, base64.b64encode(data)<br>        <span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_decode</span>(<span class="hljs-params">encoded_data</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, base64.b64decode(encoded_data)<br>        <span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_unicode</span>(<span class="hljs-params">s, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span></span>):<br>        <span class="hljs-keyword">return</span> s <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, unicode) <span class="hljs-keyword">else</span> unicode(s, encoding)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unicode_to</span>(<span class="hljs-params">unicode_s, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span></span>):<br>        <span class="hljs-keyword">return</span> unicode_s.encode(encoding)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CryptoUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;加解密相关常见方法： md5 aes&quot;&quot;&quot;</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">str_object</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;md5&quot;&quot;&quot;</span><br>        m = hashlib.md5()<br>        m.update(str_object)<br>        <span class="hljs-keyword">return</span> m.hexdigest()<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt</span>(<span class="hljs-params">s, key, salt, mode=AES.MODE_CBC</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        aes加密</span><br><span class="hljs-string">        :param s: 待加密字符串</span><br><span class="hljs-string">        :param key: 密钥</span><br><span class="hljs-string">        :param salt: 盐, 16bit eg. b&#x27;0000000101000000&#x27;</span><br><span class="hljs-string">        :param mode: AES模式</span><br><span class="hljs-string">        :return: 加密后的字符串</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt)<br>        n_text = s + (<span class="hljs-string">&#x27;\0&#x27;</span> * (<span class="hljs-number">16</span> - (<span class="hljs-built_in">len</span>(s) % <span class="hljs-number">16</span>)))<br>        <span class="hljs-keyword">return</span> b2a_hex(cipher.encrypt(n_text))<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">s, key, salt, mode=AES.MODE_CBC</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        aes解密</span><br><span class="hljs-string">        :param s: 待解密字符串</span><br><span class="hljs-string">        :param key: 密钥</span><br><span class="hljs-string">        :param salt: 盐, 16bit eg. b&#x27;0000000101000000&#x27;</span><br><span class="hljs-string">        :param mode: AES模式</span><br><span class="hljs-string">        :return: 解密后的字符串</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt)<br>        <span class="hljs-keyword">return</span> cipher.decrypt(a2b_hex(s)).rstrip(<span class="hljs-string">&#x27;\0&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TailRecurseException</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;尾递归异常&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, args, kwargs</span>):<br>        self.args = args<br>        self.kwargs = kwargs<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;常见装饰器： 执行时间timeit，缓存cache，错误重试retry&quot;&quot;&quot;</span><br><br>    __cache_dict = &#123;&#125;<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算执行时间&quot;&quot;&quot;</span><br><span class="hljs-meta">        @wraps(<span class="hljs-params">fn</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            start = time.time()<br>            ret = fn(*args, **kwargs)<br>            end = time.time()<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;@timeit: &#123;0&#125; tasks, &#123;1&#125; secs&quot;</span>.<span class="hljs-built_in">format</span>(fn.__name__, <span class="hljs-built_in">str</span>(end - start))<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__is_expired</span>(<span class="hljs-params">entry, duration</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;是否过期&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> duration == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> time.time() - entry[<span class="hljs-string">&#x27;time&#x27;</span>] &gt; duration<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__compute_key</span>(<span class="hljs-params">fn, args, kw</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;序列化并求其哈希值&quot;&quot;&quot;</span><br>        key = pickle.dumps((fn.__name__, args, kw))<br>        <span class="hljs-keyword">return</span> hashlib.sha1(key).hexdigest()<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cache</span>(<span class="hljs-params">cls, expired_time=-<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        缓存</span><br><span class="hljs-string">        :param expired_time: 过期时间，-1 表示不过期</span><br><span class="hljs-string">        :return: 返回缓存的结果或者计算的结果</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_cache</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">            @wraps(<span class="hljs-params">fn</span>)</span><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>                key = cls.__compute_key(fn, args, kwargs)<br>                <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> cls.__cache_dict:<br>                    <span class="hljs-keyword">if</span> cls.__is_expired(cls.__cache_dict[key], expired_time) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>                        <span class="hljs-keyword">return</span> cls.__cache_dict[key][<span class="hljs-string">&#x27;value&#x27;</span>]<br>                ret = fn(*args, **kwargs)<br>                cls.__cache_dict[key] = &#123;<br>                    <span class="hljs-string">&#x27;value&#x27;</span>: ret,<br>                    <span class="hljs-string">&#x27;time&#x27;</span>: time.time()<br>                &#125;<br>                <span class="hljs-keyword">return</span> ret<br>            <span class="hljs-keyword">return</span> wrap<br>        <span class="hljs-keyword">return</span> _cache<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retry</span>(<span class="hljs-params">exceptions, retry_times=<span class="hljs-number">3</span>, time_pause=<span class="hljs-number">3</span>, time_offset=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        错误重试</span><br><span class="hljs-string">        :param exceptions: 单个异常比如ValueError, 或者tuple,元组元素是异常，比如(ValueError, TypeError)</span><br><span class="hljs-string">        :param retry_times: 重试次数</span><br><span class="hljs-string">        :param time_pause: 初始暂停时间</span><br><span class="hljs-string">        :param time_offset: 暂停时间的偏移倍数，默认不偏移</span><br><span class="hljs-string">        :return: 返回成功的值，或者重拾次数结束时抛出异常</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_retry</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">            @wraps(<span class="hljs-params">fn</span>)</span><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>                retry_times_tmp, time_pause_tmp = retry_times, time_pause<br>                <span class="hljs-keyword">while</span> retry_times_tmp &gt; <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-keyword">return</span> fn(*args, **kwargs)<br>                    <span class="hljs-keyword">except</span> exceptions:<br>                        time.sleep(time_pause_tmp)<br>                        retry_times_tmp -= <span class="hljs-number">1</span><br>                        time_pause_tmp *= time_offset<br>                <span class="hljs-keyword">return</span> fn(*args, **kwargs)<br>            <span class="hljs-keyword">return</span> wrap<br>        <span class="hljs-keyword">return</span> _retry<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delay_time=<span class="hljs-number">3</span>, mode=BEFORE</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        延迟装饰器，支持在函数执行之前和之后加延时，如果想在前后同时加，可以使用两次装饰。</span><br><span class="hljs-string">        time.sleep只会阻塞当前线程不会阻塞整个进程，其它线程不受影响</span><br><span class="hljs-string">        :param delay_time: 延迟时间，是float类型</span><br><span class="hljs-string">        :param mode: 模式，指定是在函数执行之前加延时还是在执行之后加，值为BEFORE(1)或者LATER(2)</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_delay</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">            @wraps(<span class="hljs-params">fn</span>)</span><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>                <span class="hljs-keyword">if</span> mode == BEFORE:<br>                    time.sleep(delay_time)<br>                ret = fn(*args, **kwargs)<br>                <span class="hljs-keyword">if</span> mode == LATER:<br>                    time.sleep(delay_time)<br>                <span class="hljs-keyword">return</span> ret<br>            <span class="hljs-keyword">return</span> wrap<br>        <span class="hljs-keyword">return</span> _delay<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tail_call_optimized</span>(<span class="hljs-params">fn</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;尾递归优化装饰器，如果被装饰函数不是尾递归函数则会报错&quot;&quot;&quot;</span><br><span class="hljs-meta">        @wraps(<span class="hljs-params">fn</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            f = sys._getframe()<br>            <span class="hljs-keyword">if</span> f.f_back <span class="hljs-keyword">and</span> f.f_back.f_back <span class="hljs-keyword">and</span> f.f_back.f_back.f_code == f.f_code:<br>                <span class="hljs-keyword">raise</span> TailRecurseException(args, kwargs)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-keyword">return</span> fn(*args, **kwargs)<br>                    <span class="hljs-keyword">except</span> TailRecurseException <span class="hljs-keyword">as</span> e:<br>                        args = e.args<br>                        kwargs = e.kwargs<br>        <span class="hljs-keyword">return</span> wrap<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IniConfigParserUtil</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;ini配置文件读取&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *file_names</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        init</span><br><span class="hljs-string">        :param file_names: 包含多个元素的可迭代对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.config = ConfigParser.ConfigParser()<br>        <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> file_names:<br>            <span class="hljs-keyword">try</span>:<br>                self.config.readfp(<span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;rb&#x27;</span>))<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> IOError:<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            sys.exit(<span class="hljs-string">&#x27;All files have failed to read&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_string</span>(<span class="hljs-params">self, section, option</span>):<br>        <span class="hljs-keyword">return</span> self.config.get(section, option)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_int</span>(<span class="hljs-params">self, section, option</span>):<br>        <span class="hljs-keyword">return</span> self.config.getint(section, option)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_float</span>(<span class="hljs-params">self, section, option</span>):<br>        <span class="hljs-keyword">return</span> self.config.getfloat(section, option)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_boolean</span>(<span class="hljs-params">self, section, option</span>):<br>        <span class="hljs-keyword">return</span> self.config.getboolean(section, option)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">self, section, option</span>):<br>        <span class="hljs-keyword">return</span> ast.literal_eval(self.config.get(section, option))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dict</span>(<span class="hljs-params">self, section, option</span>):<br>        <span class="hljs-keyword">return</span> ast.literal_eval(self.config.get(section, option))<br></code></pre></td></tr></table></figure><p>缺失部分后续待添加，记得填坑。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rtmp规范1.0</title>
    <link href="/2018/03/09/rtmp%E8%A7%84%E8%8C%831-0/"/>
    <url>/2018/03/09/rtmp%E8%A7%84%E8%8C%831-0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/rtmp_illustration.jpg"></p><p>RTMP（real time messaging protocol）协议</p><p>本文为Adobe rtmp规范1.0的中文介绍，其中内容大部分都是翻译自rtmp官方文档<a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf">rtmp_specification_1.0.pdf</a></p><blockquote><p>具体文章目录参见文章内侧边栏</p></blockquote><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Adobe的实时消息传输协议（<code>RTMP</code>）通过可靠的流传输（如<code>TCP [RFC0793]</code>）提供双向消息多路传输服务，用于在端到端之间传输带有时序信息的视频，音频和数据消息的并行流。 穿过多层流，<code>RTMP</code>消息块流不提供任何控制的优先级别和相似形式，但是可以用于高层协议提供这样的优先级，例如：一段实时视频服务会选择丢弃给缓慢的客户的视频信息确保音频信息可以及时被接收。<code>RTMP消息块流</code>包含它自己的入队协议控制消息，也提供一个高层协议机制用于嵌入用户的控制消息。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>有效负载：Payload</strong></p><p>包含在包中的数据，就像音频样本或者压缩的视频数据。</p><p><strong>包：Packet</strong></p><p>一个数据包由固定的包头和有效负载数据组成，一些底层协议或许需要包的封装来被定义。</p><p><strong>端口：Port</strong></p><p>在<code>TCP/IP</code>协议中定义的用正整数表示的端口号用于在传输中提取以区分目标主机的不同应用，用于<code>OSI</code>传输层的传输选择（<code>TSEL</code>）就是端口。</p><p><strong>传输地址：Transport address</strong></p><p>网络地址和端口的组合识别一个传输层终端端口，例如一个IP地址和TCP端口，数据包从一个源传输层地址传送到目标段的传输层地址。</p><p><strong>消息流：Message stream</strong></p><p>一个通信的逻辑通道，允许消息流通。</p><p><strong>消息流ID：Message stream ID</strong></p><p>每一个消息拥有一个分配的ID识别跟随的消息流。</p><p><strong>消息块：Chunk</strong></p><p>消息的片段，消息被分成小的部分，在他们在网络中发送之前交叉存储。消息块确保定制时间戳的端到端全消息传送，穿过多层流。</p><p><strong>消息块流：Chunk stream</strong></p><p>一个通信的逻辑通道，允许消息块在一个特定的方向上流通，消息块流可以从客户端传送到服务器，也可以相反。</p><p><strong>消息块流ID：Chunk stream ID</strong></p><p>每一个消息块有一个分配的ID用于识别更随的消息块流。</p><p><strong>复合技术：Multiplexing</strong></p><p>把分开的音视频数据组合成一条音视频流的过程，使同时传送许多音视频数据成为可能。</p><p><strong>逆复合技术：DeMultiplexing</strong></p><p>复合的反向过程，交叉存取组装的音频视频数据，使他们成为最初的音视频数据</p><p><strong>远程过程调用：Remote Procedure Call (RPC)</strong></p><p>允许客户端或服务器在对等端调用子例程或过程的请求。</p><p><strong>Action Message Format (AMF)</strong></p><p>一种紧凑的二进制格式，用于序列化<code>ActionScript object graphs</code>。 可以透过 <code>AMF overHTTP</code>的方式将<code>flash</code>端资料编码后传回server，server端的<code>remoting adaptor</code>接收到资料后则会译码回正确的<code>native</code>对象，交给正确的程序处理。</p><h1 id="字节顺序，对齐和时间格式"><a href="#字节顺序，对齐和时间格式" class="headerlink" title="字节顺序，对齐和时间格式"></a>字节顺序，对齐和时间格式</h1><p>所有的整数字段都被引入到了字节顺序当中，字节0是第一个显示出来的，也是一个词和一个字段中最重要的。这种顺序就是通常所说的“大端”。如果没有特殊说明，在本文档中数字常量都是用十进制表示。</p><p>除另有规定外，<code>RTMP</code>中的所有数据都是字节对齐的。例如，一个16位字段可能处于奇数字节偏移处。 在指定填充的地方，填充字节应该是0。</p><p><code>RTMP</code>中的时间戳相对于未指定的时期是以整数毫秒为单位给出的。 通常，每个流将以时间戳0开始，但这不是必需的，只要两个终端在时间点上达成一致。 请注意，这意味着跨多个流（尤其是来自不同主机）的任何同步都需要一些<code>RTMP</code>外的其他机制。</p><p>时间戳必须始终在线性的增加，允许应用程序处理异步传输，带宽度量，检测，和流控制。</p><p>由于时间戳长度为32位，因此它们每隔49天，17小时，2分钟，47.296秒滚动一次。 由于流可以连续运行，可能持续数年，<code>RTMP</code>应用程序应该在处理时间戳时使用序列号算法<code>[RFC1982]</code>，并且应该能够处理回绕。 例如，假定所有相邻的时间戳都在<code>2^31 - 1</code>毫秒之间，所以10000会在4000000000之后，而3000000000会在4000000000之前。</p><p>时间戳增量delta也被指定为相对于先前时间戳的无符号整数毫秒数。 时间戳增量delta可以是24位或32位。</p><h1 id="RTMP块流"><a href="#RTMP块流" class="headerlink" title="RTMP块流"></a>RTMP块流</h1><p>本节介绍实时消息传送协议块流（<code>RTMP块流</code>）。 它为更高级别的多媒体流协议提供复用和打包服务。 虽然<code>RTMP Chunk Stream</code>旨在与实时消息传送协议配合使用，但它可以处理发送消息流的任何协议。 每条消息都包含时间戳和有效负载类型标识。 <code>RTMP Chunk Stream</code>和<code>RTMP</code>一起适用于各种音频 - 视频应用，从一对一和一对多实时广播到视频点播服务，再到交互式会议应用。</p><p>当与可靠的传输协议（如<code>TCP [RFC0793]</code>）一起使用时，<code>RTMP块流</code>提供了保证所有消息在多个流中按时间排序的端到端传送。 <code>RTMP块流</code>不提供任何优先级或类似的控制形式，但可以由更高级别的协议提供这种优先级。</p><h2 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h2><p>可以拆分成块以支持复用的消息格式取决于更高级别的协议。 但是，消息格式应该包含下列创建块所必需的字段。</p><p><strong>时间戳：</strong></p><p>消息的时间戳，这个字段可以传输4个字节。</p><p><strong>长度：</strong></p><p>消息的有效负载的长度，如果消息头不能被省略，它应该包含在长度中，这个字段在消息块包头中占有3个字节。</p><p><strong>类型ID：</strong></p><p>协议控制消息的类型字段的范围是被保留的，这些传播信息的消息由<code>RTMP消息块</code>和高层协议处理，所有其他的类型ID可被高层协议使用，对<code>RTMP消息块</code>来说当做不透明的值，实际上，<code>RTMP Chunk Stream</code>中的任何内容都不需要将这些值用作类型; 所有（非协议）消息可以是相同类型的，或者应用程序可以使用类型id来区分同步踪迹而不是类型。 该字段占用块头中的1个字节。</p><p><strong>消息流ID:</strong></p><p>消息流ID可以是任意的值。 复合到相同块流上的不同消息流可以基于它们的消息流ID进行逆复合操作。 除此之外，就<code>RTMP</code>块流而言，这是一个不透明的值。 该字段以小尾数格式占用块头中的4个字节。</p><h2 id="握手"><a href="#握手" class="headerlink" title="握手"></a>握手</h2><p><code>RTMP</code>连接始于握手。 <code>rtmp</code>握手与其他协议的握手不同; 它由三个相同大小的块组成，而不是由可变大小的块组成。</p><p>客户端（连接已初始化的终端）和服务器都发送相同的三个块。 为了说明，由客户端发送的3个块分别为<code>C0</code>, <code>C1</code>, <code>C2</code>，由服务端发送的3个块分别为<code>S0</code>, <code>S1</code>, <code>S2</code>。</p><h3 id="握手的顺序"><a href="#握手的顺序" class="headerlink" title="握手的顺序"></a>握手的顺序</h3><p>握手以客户端发送<code>C0</code>和<code>C1</code>消息块位开始，客户端必须等到<code>S1</code>到达在发送<code>C2</code>。客户端必须等到<code>S2</code>接收到才可以发送其他的数据；服务端必须等到<code>C0</code>到达才发送<code>S0</code>和<code>S1</code>，在<code>C1</code>之后也会等待。服务端必须等到<code>C1</code>到达才发送<code>S2</code>，服务端必须等到<code>C2</code>到达后才发送其他数据。</p><h3 id="C0和S0格式"><a href="#C0和S0格式" class="headerlink" title="C0和S0格式"></a>C0和S0格式</h3><p><code>C0</code>和<code>S0</code>都是单个8位字节，可以看成一个8位整形字段。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/C0_and_S0_bits.jpg"></p><p>8比特版本：在C0中，这个字段识别客户端需求的RTMP的版本，在S0中，这个字段识别服务器端选择的RTMP的版本，被定义的是版本3，0到2是早前的版本使用的，4到31保留用于未来使用，32到255还没有被允许。不能区分客户的请求的版本的服务应该以3返回，客户端可以选择降级到版本3，或放弃握手。</p><h3 id="C1和S1格式"><a href="#C1和S1格式" class="headerlink" title="C1和S1格式"></a>C1和S1格式</h3><p><code>C1</code>和<code>S1</code>包长度为1536个8位字节，包含以下字段：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/C1_and_S1_bits.jpg"></p><p><strong>time（4个字节）</strong>：这个字段包含时间戳，被当做后续消息块从终端发送的时间点，也许是0，或者一些任意的值。为了同步多路消息块流，终端或许希望发送其他消息块流的时间戳的当前值。</p><p><strong>zero（4各个字节）</strong>：这个字段必须全0。</p><p><strong>random data（1528个字节）</strong>：这个字段可以包含任何任意的值，因为每个终端必须区分自己初始化的握手的返回数据和对方初始化的握手的返回数据，这个数据应该发送一些随机数。但是没有必要用密码保护随机数和动态值。</p><h3 id="C2和S2格式"><a href="#C2和S2格式" class="headerlink" title="C2和S2格式"></a>C2和S2格式</h3><p><code>C2</code>和<code>S2</code>包长度为1536个8位字节，分别类似于<code>S1</code>和<code>C1</code>的原样返回，由一下几个字段组成：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/C2_and_S2_bits.jpg"></p><p><strong>time（4个字节）</strong>：</p><p>这个字段必须包含由对端发送的<code>S1</code>（对应<code>C2</code>）或者<code>C1</code>（对应<code>S2</code>）的时间戳.</p><p><strong>time2（4个字节）</strong>：</p><p>这个字段必须包含先前的由对端发送的数据包（<code>S1</code>或者<code>C1</code>）被读取的时间戳。</p><p><strong>random echo（1528个字节）</strong>：</p><p>这个字段必须包含在对端发送的<code>S1</code>（对应<code>C2</code>）或<code>S2</code>（对应<code>C1</code>）数据包中的随机数据字段。 任何一方都可以使用<code>time</code>和<code>time2</code>字段与当前时间戳一起快速估算连接的带宽和&#x2F;或延迟，但这不太可能有用。</p><h3 id="握手过程图"><a href="#握手过程图" class="headerlink" title="握手过程图"></a>握手过程图</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Pictorial_Representation_of_Handshake.jpg"></p><p>下面的表格描述了握手过程的几个阶段</p><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td>未初始化</td><td>协议版本在此阶段发送。 客户端和服务器都未初始化。 客户端发送数据包<code>C0</code>中的协议版本。 如果服务器支持该版本，则发送<code>S0</code>和<code>S1</code>作为响应。 否则，服务器将采取适当的措施进行响应。 在<code>RTMP</code>中，此操作正在终止连接。</td></tr><tr><td>版本发送</td><td>在未初始化状态之后，客户端和服务器都处于版本已发送状态。 客户端正在等待数据包<code>S1</code>，服务器正在等待数据包<code>C1</code>。 在接收到等待的数据包时，客户端发送<code>C2</code>并且服务器发送<code>S2</code>。 状态然后变成<code>Ack</code>发送。</td></tr><tr><td><code>ACK</code>发送</td><td>客户端和服务端分别等待<code>S2</code>和<code>C2</code>。</td></tr><tr><td>握手完成</td><td>客户端和服务交换消息。</td></tr></tbody></table><h2 id="消息分块"><a href="#消息分块" class="headerlink" title="消息分块"></a>消息分块</h2><p>握手后，连接复用一个或多个消息块流。每个块流从一个消息流携带一种类型的消息。每个创建的块都有一个与其关联的唯一ID，称为块流ID。这些块通过网络传输。发送时，每个块必须在下一个块之前全部发送。在接收端，根据块流ID将块组合成消息。</p><p>分块允许将较高级别协议中的大的型消息分解为较小的消息，例如防止较大的低优先级消息（例如视频）阻塞较小的高优先级消息（如音频或控制）。</p><p>分块还允许以较少的开销发送小消息，因为分块头包含信息的压缩表示信息，这些压缩消息本来应该包含在消息本身的。</p><p>块大小是可配置的。它可以使用<code>Set Chunk Size</code>控制消息进行设置。</p><h3 id="消息块格式"><a href="#消息块格式" class="headerlink" title="消息块格式"></a>消息块格式</h3><p>每一个消息块有头部和数据组成，头部自身可以被分割成三个部分：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_Header.jpg"></p><p><strong>消息块基本头（1到3个字节）</strong>：这个字段编码了消息块流的ID和消息块的类型，消息块类型决定了消息包头的编码格式，长度完全取决于可变长的消息块流ID。</p><p><strong>消息块消息头（0,3,7或11字节）</strong>：这个字段编码正在传送的消息的信息，长度可以利用在消息块头中详细的消息块类型来决定。</p><p><strong>扩展时间戳（0或4字节）</strong>：此字段在某些情况下是存在的，取决于消息块消息头中的编码时间戳或时间戳增量字段。</p><p><strong>消息块块数据（可变大小）</strong>：该块的有效负载，直至配置的最大块大小。</p><h4 id="消息块基本头"><a href="#消息块基本头" class="headerlink" title="消息块基本头"></a>消息块基本头</h4><p>消息块基本头对消息块流的ID和消息块的类型进行编码（在下面的图表中用<code>fmt</code>表示），消息块类型决定了编码的消息头的格式，消息块基本头字段可以是1,2或者3个字节长，取决于消息块流ID。</p><p>该协议支持多达65597个ID为3-65599的流。 ID0,1和2被保留。 值0指示2字节形式和64-319范围内的ID（<code>the second byte + 64</code>）。 值1表示3字节形式，ID在64-65599（<code>(the third byte) * 256 + the second byte + 64</code>）范围内。 在3-63范围内的值表示完整的流ID。 块ID为2的流ID保留，用于低级别的协议控制消息和命令。</p><p>在消息块基本头中0-5比特(最不重要的)代表了消息块流ID。</p><p>消息块流ID 2-63 可以被编码成这个字段的单字节的版本号。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_basic_header_1.jpg"></p><p>块流ID 64-319可以以2字节的形式被编码。 ID计算为（第二个字节+ 64）。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_basic_header_2.jpg"></p><p>可以在此字段的3字节版本中对块流ID 64-65599进行编码。 ID计算为（（第三字节）* 256 +（第二字节）+64）。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_basic_header_3.jpg"></p><p><strong>cs id（6比特）</strong>：这个字段包含了消息块流ID，值从2到63，值0和1用于代表这个字段的2个或者3个字节的版本号。</p><p><strong>fmt（2比特）</strong>：这个字段标识消息块消息头使用的四种格式之一。见下一小节</p><p><strong>cs id -64（8或者16个比特）</strong>：</p><p>这个字段包含了消息块流ID减64，例如ID 365在<code>cs id</code>段用1表示，在16比特的<code>cs id -64</code>段用301表示。</p><p>值为64到319的消息块流ID可以被2字节或者3字节的版本号来表示。</p><h4 id="消息块消息头"><a href="#消息块消息头" class="headerlink" title="消息块消息头"></a>消息块消息头</h4><p>在消息块消息头中有四种不同的格式，由消息块基本头的<code>fmt</code>字段选择。应该使用最简洁的表达方式表示每一个消息块消息头。</p><h5 id="类型0"><a href="#类型0" class="headerlink" title="类型0"></a>类型0</h5><p>类型0的消息块有11个字节长，这个类型必须在消息块流开始时和消息流的时间戳回溯时使用</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_Message_Header_Type_0.jpg"></p><p><strong>时间戳（3个字节）</strong>：对于类型0的块，消息的绝对时间戳发送到此处。 如果时间戳大于或等于16777215（十六进制<code>0xFFFFFF</code>），则该字段必须是16777215，表示存在扩展时间戳字段以编码完整的32位时间戳。 否则，这个字段应该是整个时间戳。</p><h5 id="类型1"><a href="#类型1" class="headerlink" title="类型1"></a>类型1</h5><p>类型1的消息块有7个字节长，消息流ID没有被包含，这个消息块得到和先前消息块同样的流ID，带有可变长的消息的流（例如许多视频格式）在类型0消息块后应该使用这种格式作为每一个消息的第一个消息块。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_Message_Header_Type_1.jpg"></p><h5 id="类型2"><a href="#类型2" class="headerlink" title="类型2"></a>类型2</h5><p>类型2块头长度为3个字节。 流ID和消息长度都不包含在内; 该块与前面的块具有相同的流ID和消息长度。 具有固定大小消息的流（例如，某些音频和数据格式）应该在第一个消息之后使用这种格式作为每个消息的第一个块。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Chunk_Message_Header_Type_2.jpg"></p><h5 id="类型3"><a href="#类型3" class="headerlink" title="类型3"></a>类型3</h5><p>类型3 的消息块没有头，流ID，消息长度和时间戳delta，这个类型的消息块在之前的消息块中取值，当单一的消息被分裂成消息块，所有的消息块除了第一个，其余都应该使用这种类型，流由同样大小的消息组成。</p><h5 id="公共头字段"><a href="#公共头字段" class="headerlink" title="公共头字段"></a>公共头字段</h5><p>块消息头中每个字段的描述：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>timestamp delta (3 bytes)</td><td>对于类型1或类型2块，此处可以看到发送前一个块的时间戳和当前块的时间戳之间的差异。 如果增量大于或等于16777215（十六进制<code>0xFFFFFF</code>），则该字段必须是16777215，表示扩展时间戳字段以编码完整的32位增量的形式存在。 否则，这个字段应该是实际的增量。</td></tr><tr><td>message length (3 bytes)</td><td>对于类型0和类型1的消息块，消息的长度会出现在这里。注意这一般和消息块有效负载长度是不一样的。消息块的有效负载长度是除了最后一个消息块的所有消息块的最大的长度。</td></tr><tr><td>message type id (1 byte)</td><td>对于类型0和类型1的消息块，消息的类型出现在这里。</td></tr><tr><td>message stream id (4 bytes)</td><td>对于类型为0的块，存储消息流ID。 消息流ID以<code>little-endian</code>格式存储。 通常，同一块流中的所有消息将来自同一个消息流。 虽然可以将单独的消息流多路复用到同一个块流中，但这会破坏头压缩的优点。 但是，如果一个消息流关闭并且另一个随后打开，则没有理由通过发送新的类型为0的块来重新使用现有的块流。</td></tr></tbody></table><h4 id="扩展时间戳"><a href="#扩展时间戳" class="headerlink" title="扩展时间戳"></a>扩展时间戳</h4><p><code>Extended Timestamp</code>字段用于编码大于16777215（<code>0xFFFFFF</code>）的时间戳或时间戳增量; 也就是说，对于时间戳或时间戳增量，它们不适合类型0,1或2块的24位字段。 该字段对完整的32位时间戳或时间戳增量进行编码。 这个字段用于表示将类型0块的时间戳字段或类型1或2块的时间戳增量字段设置为16777215（<code>0xFFFFFF</code>）。 当相同块流ID的最新类型0,1或2的块指示存在扩展时间戳字段时，该字段出现在类型3的块中。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>共有2个示例</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>本例给出了一个简单的音频消息流，这个例子示范了信息的冗余。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Sample_audio_messages_to_be_made_into_chunks.jpg"></p><p>下表显示了在此流中生成的块。 从消息3开始，数据传输得到优化。 除此之外，每消息只有1字节的开销。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Format_of_each_of_the_chunks_of_audio_messages.jpg"></p><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>本例说明一个很长的消息被分割成很多消息块。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Sample_Message_to_be_broken_to_chunks.jpg"></p><p>这里是分割出来的消息块</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Format_of_each_of_the_chunks.jpg"></p><p>消息块1的包头数据详细介绍了307个字节的消息的全部。</p><p>注意这两个例子，类型3消息块可以用作两种不同的方式，第一种是表示一条消息的延续，第二种是表示一条新消息的开始，这个新消息可以从已经存在的数据中衍生出来。</p><h2 id="协议控制消息"><a href="#协议控制消息" class="headerlink" title="协议控制消息"></a>协议控制消息</h2><p><code>RTMP</code>块流使用消息类型ID 1,2,3,5和6作为协议控制消息。 这些消息包含<code>RTMP Chunk Stream</code>协议所需的信息。</p><p>这些协议控制消息务必具有消息流ID 0 （称为控制流）并且以块流ID 2 发送。协议控制消息一旦被接收就会立即生效，同时时间戳被忽略。</p><h3 id="设置消息块大小"><a href="#设置消息块大小" class="headerlink" title="设置消息块大小"></a>设置消息块大小</h3><p>协议控制消息1：设置消息块大小。用来通知对方新的最大的消息块大小。</p><p>消息块的大小可以被设置成一个默认的值，128字节，但是客户端或者服务端可以改变这个值，并且发送消息通知对方更新。例如：假设一个客户端想要发送131字节的音频数据，消息块的大小为128字节，在这种情况下，客户端可以发送这个协议控制消息给服务端以通知消息块的大小被设置成了131字节，那么客户端就可以用一个消息块发送音频数据。</p><p>最大块大小应该不能小于128个字节，并且必须不能小于1个字节。 每个方向的最大块大小都是独立维护的。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Payload_for_the_Set_Chunk_Size_protocol_message.jpg"></p><p><strong>0</strong>： 这一位必须为0。</p><p><strong>chunk size 块大小（31位）</strong>：该字段保存新的最大块大小（以字节为单位），这将用于发件人的所有后续块，直至另行通知。 有效大小为1到2147483647（<code>0x7FFFFFFF</code>）（含）; 但是，大于16777215（<code>0xFFFFFF</code>）的所有大小都是等效的，因为没有块大于一条消息，并且没有消息大于16777215字节。</p><h3 id="中断消息"><a href="#中断消息" class="headerlink" title="中断消息"></a>中断消息</h3><p>协议控制消息2：中止消息。用于通知对方是否正在等待块完成消息，然后丢弃部分接收到的消息。 对方接收块流ID作为该协议消息的有效载荷。 应用程序可能会在关闭时发送此消息，以指示不需要进一步处理消息。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Payload_for_the_Abort_Message_protocol_message.jpg"></p><p><strong><code>chunk stream ID</code> 块流ID （32 位）</strong>：  该字段保存块流ID，对应的当前消息将被丢弃。</p><h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><p>客户端或服务器在收到等于窗口大小的字节后，必须向对端发送<code>Acknowledgement</code>确认。 窗口大小是发送方未收到接收方确认而发送的最大字节数。 该消息指定了序列号，它是到当前为止收到的字节数。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Payload_for_the_Acknowledgement_protocol_message.jpg"></p><p><strong><code>sequence number</code> 序列号（32 位）</strong>：字段表示到当前为止收到的字节数。</p><h3 id="Window-Acknowledgement-Size"><a href="#Window-Acknowledgement-Size" class="headerlink" title="Window Acknowledgement Size"></a>Window Acknowledgement Size</h3><p>客户端或服务器发送此消息以通知对方在发送<code>Acknowledgement</code> 确认之间使用的窗口大小。 发送人希望在发送窗口大小字节后得到对方的确认。 </p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Payload_for_the_Window_Acknowledgement_Size_protocol_message.jpg"></p><h3 id="设置对等带宽"><a href="#设置对等带宽" class="headerlink" title="设置对等带宽"></a>设置对等带宽</h3><p>客户端或服务器发送此消息来限制另一方的输出带宽。 收到此消息的另一方通过将已发送但未确认的数据量限制为此消息中指示的窗口大小这种方式用来限制其输出带宽。如果窗口大小与发送给此消息发送者的最后一个窗口大小不同，那么接收此消息的另一方应该使用<code>&quot;Window Acknowledgement Size&quot;</code>消息进行响应。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Payload_for_the_Set_Peer_Bandwidth_protocol_message.jpg"></p><p>限制类型<code>Limit Type</code>是以下值之一：</p><ul><li>0 - Hard：对方应该限制其输出带宽到指定的窗口大小。</li><li>1 - Soft：对方应该限制其输出带宽到本消息中指示的窗口或已经生效的限制，以较小者为准。</li><li>2 - Dynamic：如果以前的限制类型是Hard，请将此消息视为Hard类型消息，否则可以直接忽视。</li></ul><h1 id="RTMP消息格式"><a href="#RTMP消息格式" class="headerlink" title="RTMP消息格式"></a>RTMP消息格式</h1><p>本部分主要介绍<code>RTMP</code>消息的格式，在网络实体之间使用较低级传输层（如<code>RTMP块流</code>）传输这些消息。</p><p>虽然<code>RTMP</code>旨在与<code>RTMP块流</code>一起使用，但它可以使用任何其他传输协议发送消息。 <code>RTMP Chunk Stream</code>和<code>RTMP</code>一起适用于各种音视频应用，从一对一和一对多实时广播到视频点播服务，再到交互式会议应用。</p><h2 id="RTMP消息格式-1"><a href="#RTMP消息格式-1" class="headerlink" title="RTMP消息格式"></a>RTMP消息格式</h2><p>服务器和客户端通过网络发送<code>RTMP</code>消息以相互通信。 消息可能包括音频，视频，数据或任何其他消息。</p><p><code>RTMP</code>消息有两部分，头部和有效负载。</p><h3 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h3><p>消息头包含以下字段：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Message Type</td><td>一个字节的字段来表示消息类型。 一系列的类型ID（1-6）被保留用于协议控制消息</td></tr><tr><td>Length</td><td>三字节字段，以字节表示有效负载的大小。 它以<code>big-endian</code>格式设置。</td></tr><tr><td>Timestamp</td><td>包含消息时间戳的四字节字段。 这4个字节按<code>big-endian</code>顺序排列。</td></tr><tr><td>Message Stream Id</td><td>标识消息流的三字节字段。 这些字节以<code>big-endian</code>格式设置。</td></tr></tbody></table><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Message_Header.jpg"></p><h3 id="消息有效负载"><a href="#消息有效负载" class="headerlink" title="消息有效负载"></a>消息有效负载</h3><p>消息的另一部分是有效负载，它是消息中包含的实际数据。 例如，它可能是一些音频样本或压缩的视频数据。</p><h2 id="用户控制消息"><a href="#用户控制消息" class="headerlink" title="用户控制消息"></a>用户控制消息</h2><p>RTMP使用消息类型ID 4 作为用户控制消息。 这些消息包含RTMP流层使用的信息。 带有ID 1,2,3,5和6的协议消息由RTMP块流协议使用。</p><p>用户控制消息应该使用消息流ID 0（称为控制流），并且当通过RTMP块流发送时，在消息流ID 2上发送。用户控制消息在流中被接收时生效， 他们的时间戳被忽略。</p><p>客户端或服务器发送此消息以通知对端用户控制事件。 该消息携带事件类型和事件数据。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Payload_for_the_User_Control_protocol_message.jpg"></p><p>消息数据<code>Event Data</code>的前2个字节用于标识事件类型<code>Event Type</code>。 事件类型后面跟着事件数据。 事件数据字段的大小是可变的。 但是，在消息必须通过RTMP块流层的情况下，最大块的大小应该足够大，以允许这些消息适合单个块。</p><h1 id="RTMP命令消息"><a href="#RTMP命令消息" class="headerlink" title="RTMP命令消息"></a>RTMP命令消息</h1><p>本节介绍在服务器和客户端之间用于相互通信的不同类型的消息和命令。</p><p>在服务器和客户端之间交换的不同类型的消息包括用于发送音频数据的音频消息，用于发送视频数据的视频消息，用于发送任何用户数据的数据消息，共享对象消息和命令消息。 共享对象消息提供了一种通用的方式来管理多个客户端和服务器之间的分布式数据。 命令消息在客户端和服务器之间传送<code>AMF</code>编码的命令。 客户端或服务器可以通过流使用命令消息请求对方的远程过程调用（<code>RPC</code>）。</p><h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><p>服务器和客户端通过网络发送消息以相互通信。 消息可以是任何类型，包括音频消息，视频消息，命令消息，共享对象消息，数据消息和用户控制消息。</p><h3 id="命令消息"><a href="#命令消息" class="headerlink" title="命令消息"></a>命令消息</h3><p>命令消息在客户端和服务器之间传送<code>AMF</code>编码命令。 这些消息的<code>AMF0</code>编码的消息类型值为20，<code>AMF3</code>编码的消息类型值为17。 这些消息被发送来执行一些操作，例如<code>connect</code>，<code>createStream</code>，<code>publish</code>， <code>play</code>， <code>pause</code>等。 诸如<code>onstatus</code>，<code>result</code>等命令消息用于通知发送者有关请求的命令的状态。 命令消息由命令名称，事务ID和包含相关参数的命令对象组成。 客户端或服务器可以通过流使用命令消息请求对方的远程过程调用（<code>RPC</code>）。</p><h3 id="数据消息"><a href="#数据消息" class="headerlink" title="数据消息"></a>数据消息</h3><p>客户端或服务器发送此消息用于向对方发送元数据或任何用户数据。 元数据包括有关数据（音频，视频等）的详细信息，如创建时间，持续时间，主题等。 <code>AMF0</code>的消息类型值为18，<code>AMF3</code>的消息类型值为15。</p><h3 id="共享对象消息"><a href="#共享对象消息" class="headerlink" title="共享对象消息"></a>共享对象消息</h3><p>共享对象是一个Flash对象（name-value对的集合），在多个客户端，实例等之间同步的。 <code>AMF0</code>的消息类型19和<code>AMF3</code>的消息类型16保留用于共享对象事件。 每条消息可以包含多个事件。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_shared_object_message_format.jpg"></p><p>支持以下事件类型：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/supported_event_type.jpg"></p><h3 id="音频消息"><a href="#音频消息" class="headerlink" title="音频消息"></a>音频消息</h3><p>客户端或服务器发送此消息来向对等方发送音频数据。 消息类型值8保留给音频消息。</p><h3 id="视频消息"><a href="#视频消息" class="headerlink" title="视频消息"></a>视频消息</h3><p>客户端或服务器发送此消息以向对等方发送视频数据。 消息类型值9保留给视频消息。</p><h3 id="聚合消息"><a href="#聚合消息" class="headerlink" title="聚合消息"></a>聚合消息</h3><p>聚合消息是单个消息。消息类型22用于聚合消息。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_Aggregate_Message_format.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_Aggregate_Message_body_format.jpg"></p><p>聚合消息的消息流ID会覆盖聚合内的子消息的消息流ID。</p><p>聚合消息的时间戳与第一个子消息之间的差异是用于将子消息的时间戳重新归一化为流时间尺度的偏移量。 将偏移量添加到每个子消息的时间戳以达到标准化的流时间。 第一个子消息的时间戳应该与聚合消息的时间戳相同，所以偏移量应该为零。</p><p>后向指针包含前一个消息的大小，包括其头部。 它被包含来匹配<code>FLV</code>文件的格式并用于向后搜索。</p><p>使用聚合消息有几个性能优势：</p><ul><li>消息块流最多可以在块内发送单个完整的消息。 因此，增加块大小并使用聚合消息可减少发送的块的数量。</li><li>子消息可以连续地存储在内存中。 在进行系统调用向网络上发送数据时效率更高。</li></ul><h3 id="用户控制消息事件"><a href="#用户控制消息事件" class="headerlink" title="用户控制消息事件"></a>用户控制消息事件</h3><p>客户端或服务器发送此消息以通知对端关于用户控制事件。</p><p>支持以下用户控制事件类型：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/supported_user_control_event_types.jpg"></p><h2 id="命令类型"><a href="#命令类型" class="headerlink" title="命令类型"></a>命令类型</h2><p>客户端和服务器交换<code>AMF</code>编码的命令。发送方发送一条命令消息，其中包含命令名称，事务ID和包含相关参数的命令对象。例如，<code>connect</code>命令包含<code>&#39;app&#39;</code>参数，它告诉客户端连接到的服务器应用程序名称。接收方处理该命令并以相同的事务ID发送响应。响应字符串可以是<code>_result</code>，<code>_error</code>或方法名称，例如<code>verifyClient</code>或<code>contactExternalServer</code>。</p><p><code>_result</code>或<code>_error</code>命令字符串表示响应。事务ID指示响应引用的未完成的命令。它与<code>IMAP</code>和许多其他协议中的标签相同。命令字符串中的方法名称指示发送方正试图在接收方端运行方法。</p><p>以下类对象用于发送各种命令：</p><ul><li><code>NetConnection</code>：一个对象，它是服务器和客户端之间连接的更高级别表示。</li><li><code>NetStream</code>：表示发送音频流，视频流和其他相关数据的通道的对象。我们还发送控制数据流的播放，暂停等命令。</li></ul><h3 id="NetConnection命令"><a href="#NetConnection命令" class="headerlink" title="NetConnection命令"></a>NetConnection命令</h3><p><code>NetConnection</code>管理客户端应用程序和服务器之间的双向连接。 另外，它为异步远程方法调用提供支持。</p><p>以下命令可以在<code>NetConnection</code>上发送：</p><ul><li><code>connect</code></li><li><code>call</code></li><li><code>close</code></li><li><code>createStream</code></li></ul><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>客户端向服务端发送连接（<code>connect</code>）命令请求连接一个服务器应用实例。以下为命令的结构：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/connect_command_structure.jpg"></p><p>以下是连接命令的命令对象中使用的<code>name-value</code>对的描述：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/description_of_the_name-value_pairs_used_in_Command_Object_of_the_connect_command.jpg"></p><p><code>audioCodecs</code>属性的标志值：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Flag_values_for_the_audioCodecs_property.jpg"></p><p><code>videoCodecs</code>属性的标志值：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Flag_values_for_the_videoCodecs_Property.jpg"></p><p><code>videoFunction</code>属性的标志值：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Flag_values_for_the_videoFunction_property.jpg"></p><p>对象编码(<code>object Encoding</code>)属性的值：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Values_for_the_object_encoding_property.jpg"></p><p>以下是服务端到客户端命令的结构：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_connect_command_from_server_to_client.jpg"></p><p>以下是连接命令中的消息流：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Message_flow_in_the_connect_command.jpg"></p><p>命令执行期间的消息流是：</p><ol><li>客户端将连接命令发送到服务器以请求连接服务器应用程序实例。</li><li>接收到连接命令后，服务器将协议消息<code>&#39;Window Acknowledgement Size&#39;</code>发送给客户端。 服务器还连接到connect命令中提到的应用程序。</li><li>服务器将协议消息 <code>&#39;Set Peer Bandwidth&#39;</code> 发送给客户端。</li><li>在处理协议消息<code>&#39;Set Peer Bandwidth&#39;</code>后，客户端向服务器发送协议消息<code>&#39;Window Acknowledgement Size&#39;</code>。</li><li>服务器将类型为<code>User Control Message(StreamBegin)</code>的另一个协议消息发送给客户端。</li><li>服务器发送结果命令消息，通知客户端连接状态（成功&#x2F;失败）。 该命令指定事务ID（连接命令始终等于1）。 该消息还指定了属性，例如<code>Flash Media Server</code>版本（字符串）。 此外，它还指定其他连接响应相关信息，如级别（字符串），代码（字符串），描述（字符串），对象编码（数字）等。</li></ol><h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><p><code>NetConnection</code>对象的调用方法在接收端运行远程过程调用（<code>RPC</code>）。 被调用的<code>RPC</code>名称作为参数传递给<code>call</code>命令。</p><p>从发送方到接收方的命令结构如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_from_the_sender_to_the_receiver.jpg"></p><p>响应的命令结构如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_the_response.jpg"></p><h4 id="createStream"><a href="#createStream" class="headerlink" title="createStream"></a>createStream</h4><p>客户端将此命令发送到服务器以创建用于消息通信的逻辑通道。音频，视频和元数据的发布是通过使用<code>createStream</code>命令创建的流通道执行的。</p><p><code>NetConnection</code>是默认通信通道，其流ID为0。协议和一些命令消息（包括<code>createStream</code>）使用默认通信通道。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_createStream_command_from_the_client_to_the_server.jpg"></p><p>从服务器到客户端的命令结构如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_createStream_command_from_the_server_to_the_client.jpg"></p><h3 id="NetStream命令"><a href="#NetStream命令" class="headerlink" title="NetStream命令"></a>NetStream命令</h3><p><code>NetStream</code>定义了流式音频，视频和数据消息可以通过将客户端连接到服务器的<code>NetConnection</code>流动的通道。 一个<code>NetConnection</code>对象可以为多个数据流支持多个<code>NetStream</code>。</p><p>以下命令可以由客户端在<code>NetStream</code>上发送到服务器：</p><ul><li><code>play</code></li><li><code>play2</code></li><li><code>deleteStream</code></li><li><code>closeStream</code></li><li><code>receiveAudio</code></li><li><code>receiveVideo</code></li><li><code>publish</code></li><li><code>seek</code></li><li><code>pause</code></li></ul><p>服务器使用<code>&#39;onStatus&#39;</code>命令将<code>NetStream</code>状态更新发送到客户端：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Format_of_NetStream_status_message_commands.jpg"></p><h4 id="play"><a href="#play" class="headerlink" title="play"></a>play</h4><p>客户端将此命令发送到服务器以播放流。 播放列表也可以使用此命令多次创建。</p><p>如果您想要创建一个可在不同直播流或录像流之间切换的动态播放列表，请多次调用<code>play</code>，每次给<code>reset</code>传递<code>false</code>。相反，如果要立即播放指定的数据流，请清空播放队列中的其他流，给<code>reset</code>传递<code>true</code>。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_play_command_from_the_client_to_the_server.jpg"></p><p><code>Play</code>命令中的消息流：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Message_flow_in_the_play_command.jpg"></p><p>命令执行期间的消息流是：</p><ol><li>在客户端收到服务器返回的<code>createStream</code>命令的成功结果后，客户端就开始发送<code>play</code>命令。</li><li>在收到<code>play</code>命令后，服务器发送协议消息来设置块大小。</li><li>服务器发送另一个协议消息（用户控制），用于指定事件<code>&#39;StreamIsRecorded&#39;</code>的和该消息中的流ID。 该消息在前2个字节中携带事件类型，在最后4个字节中携带流ID。</li><li>服务器发送另一个指定事件<code>&#39;StreamBegin&#39;</code>的协议消息（用户控制），以指示流传输到客户端的开始。</li><li>如果客户端发送的播放命令成功了，则服务器发送<code>onStatus</code>命令消息<code>NetStream.Play.Start</code>和<code>NetStream.Play.Reset</code>。 <code>NetStream.Play.Reset</code>只有在客户端发送的播放命令设置了重置标志时才由服务器发送。 如果没有找到要播放的流，则服务器发送<code>onStatus</code>消息<code>NetStream.Play.StreamNotFound</code>。</li><li>在此之后，服务器发送客户端播放所需的音频和视频数据。</li></ol><h4 id="play2"><a href="#play2" class="headerlink" title="play2"></a>play2</h4><p>与播放命令不同，<code>play2</code>可以切换到不同的比特率流，而不改变播放内容的时间线。 服务器维护多个文件，用于支持客户端在<code>play2</code>中请求的所有比特率。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_play2_command_from_the_client_to_the_server.jpg"></p><p>在<code>ActionScript 3</code>语言参考[<code>AS3</code>]中描述了<code>NetStreamPlayOptions</code>对象的公共属性。</p><p>下图显示了该命令的消息流：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Message_flow_in_the_play2_command.jpg"></p><h4 id="deleteStream"><a href="#deleteStream" class="headerlink" title="deleteStream"></a>deleteStream</h4><p>当<code>NetStream</code>对象被破坏时，<code>NetStream</code>发送<code>deleteStream</code>命令。</p><p>从客户端到服务器的命令结构如下所示：</p><p>![](<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_deleteStream_command_from_the_client_to_the">https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_deleteStream_command_from_the_client_to_the</a> server.jpg)</p><p>服务器不发送任何响应。</p><h4 id="receiveAudio"><a href="#receiveAudio" class="headerlink" title="receiveAudio"></a>receiveAudio</h4><p><code>NetStream</code>发送<code>receiveAudio</code>消息以通知服务器是否将音频发送给客户端。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_receiveAudio_command_from_the_client_to_the_server.jpg"></p><p>如果在将<code>Bool Flag</code>设置为false的情况下发送<code>receiveAudio</code>命令，则服务器不会发送任何响应。 如果<code>Bool Flag</code>设置为true，则服务器会使用状态消息<code>NetStream.Seek.Notify</code>和<code>NetStream.Play.Start</code>作为响应。</p><h4 id="receiveVideo"><a href="#receiveVideo" class="headerlink" title="receiveVideo"></a>receiveVideo</h4><p><code>NetStream</code>发送<code>receiveVideo</code>消息以通知服务器是否将视频发送给客户端。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_receiveVideo_command_from_the_client_to_the_server.jpg"></p><p>如果在将<code>Bool Flag</code>设置为false的情况下发送<code>receiveVideo</code>命令，则服务器不会发送任何响应。 如果<code>Bool Flag</code>设置为true，则服务器会使用状态消息<code>NetStream.Seek.Notify</code>和<code>NetStream.Play.Start</code>作为响应。</p><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><p>客户端发送<code>publish</code>命令以将已命名的流发布到服务器。 使用该名称，任何客户端都可以播放此流并接收已发布的音频，视频和数据消息。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_publish_command_from_the_client_to_the_server.jpg"></p><p>服务器使用<code>onStatus</code>命令进行响应以标记<code>publish</code>的开始。</p><h4 id="seek"><a href="#seek" class="headerlink" title="seek"></a>seek</h4><p>客户端发送<code>seek</code>命令来查找媒体文件或播放列表中的偏移量（以毫秒为单位）。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_seek_command_from_the_client_to_the_server.jpg"></p><p>当<code>seek</code>成功时，服务器发送状态消息<code>NetStream.Seek.Notify</code>。 如果失败，它将返回一个<code>_error</code>消息。</p><h4 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h4><p>客户端发送暂停命令以通知服务器暂停或开始播放。</p><p>从客户端到服务器的命令结构如下所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/The_command_structure_of_pause_command_from_the_client_to_the_server.jpg"></p><p>当流暂停时，服务器发送状态消息<code>NetStream.Pause.Notify</code>。当流处于未暂停状态时发送<code>NetStream.Unpause.Notify</code>。 如果失败，将返回一个<code>_error</code>消息。</p><h2 id="消息交换示例"><a href="#消息交换示例" class="headerlink" title="消息交换示例"></a>消息交换示例</h2><p>以下是几个解释RTMP消息交换的示例。</p><h3 id="发布录制的视频"><a href="#发布录制的视频" class="headerlink" title="发布录制的视频"></a>发布录制的视频</h3><p>此示例说明发布者如何发布流并将视频流式传输到服务器。 其他客户端可以订阅此发布的流并播放视频。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Message_flow_in_publishing_a_video_stream.jpg"></p><h3 id="广播共享对象消息"><a href="#广播共享对象消息" class="headerlink" title="广播共享对象消息"></a>广播共享对象消息</h3><p>此示例说明在创建和更改共享对象期间交换的消息。 它还说明了共享对象消息广播的过程。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Shared_object_message_broadcast.jpg"></p><h3 id="从录像的流发布元数据"><a href="#从录像的流发布元数据" class="headerlink" title="从录像的流发布元数据"></a>从录像的流发布元数据</h3><p>本示例描述了发布元数据的消息交换。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/rtmp_img/Publishing_metadata.jpg"></p><blockquote><p>FMS: Flash Media Server</p></blockquote><hr><p>参考：</p><ul><li><a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf">rtmp_specification_1.0.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rtmp</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年终总结</title>
    <link href="/2018/02/11/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2018/02/11/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>2017年以年中的离职为分界线，前半年在税友软件做运维和运维开发的工作，离职后在趣看科技做后端开发。整体来说开发层面并没有太大的变化，区别就在于从悠闲的工作环境变得紧凑而已。其实经过一次离职之后更加的明白其实在哪里都是开始很新鲜，技术很赞，过了一段时间之后就发现每天做的也都是重复乏味的工作，不过就看能否在重复性的工作中做得更好，能否找到技术提升点，能否拓展感兴趣行业内的人脉，能否发现潜在的商机。工作当然必须要做好，这是基础。</p><blockquote><p>不管在什么行业，即使你再怎么想做生意（或者贸易），也脱离不了最熟悉的技术，也可以说是专业知识。</p><p>—-一位越南家纺行业哥们的经验之谈</p></blockquote><span id="more"></span><p>至于这次离职的原因大致列举如下：</p><ul><li>税友属于外包性质的软件公司，极大的受限于税务局，而且环境极度不统一，程序需要做的适配工作太多,运维开发环境极差，最终无法落地。此外需要维护过多的测试验证环境，经常开发的过程会被维护性工作打断。</li><li>钱没到位。涨薪过少。</li><li>心委屈了。提出的采用新技术栈不被采纳，过分依赖于传统的shell scripts。</li></ul><p>两个公司的感受</p><blockquote><p>税友软件整体来说较为轻松，每天实际工作的时间很少，但成长也较为缓慢，自学成分较多，而且公司局限于税务行业，对于自己的职业发展不太合适。但是最大的好处是适合养老，喜欢稳定的人可以选择。</p><p>相对而言趣看科技工作节奏较为紧凑，属于比较有活力的互联网公司，新一代的媒体行业的采编录播也属于互联网创新技术，但是在公司主要做的事情是数据类，cdn类以及琐事居多，接触不到太多核心技术，而且整个公司的工作氛围较为压抑，员工在群里讨论经常还得匿名。但是公司也比较有前景，适合努力奋斗几年想要拿股份的人。</p><p>此外，对于那些说离职穷三月的人，我只想拖出去暴打一顿，TMD明明是穷一年，离职需谨慎啊。</p></blockquote><p>下面简要的罗列一下一整年的工作情况。</p><h2 id="工作汇总"><a href="#工作汇总" class="headerlink" title="工作汇总"></a>工作汇总</h2><p>包括在税友和趣看两家公司的工作，汇总如下</p><ol><li>DevOps：实现自动化升级部署系统（bash scripts）还有自动化监控报表系统的服务端</li><li>运维工作：维护统一接入平台团队10套测试和验证环境</li><li>weblogic：wlst脚本库的构建</li><li>数据项目：整改已存在的3个数据相关项目，编写4个新增的数据相关项目。具体包括：cdn信息收集，cdn日志收集，并发统计，ping统计分析，实时数据统计，推流实时质量分析数据统计，各项目的历史数据清理</li><li>监控项目：包括监控所有数据项目的内部报错以及运行状态，监控阿里ECS服务器增长情况。解决所有的监控报警错误，最终使得数据部分的项目趋于稳定</li><li>cdn调度：参与编写cdn调度程序（削峰）的python部分</li><li>基础服务：提供4000左右QPS的ip查询的http服务，方便其他项目调用</li><li>公共模块：python部分的qk_common模块增加以及单元测试的编写</li><li>腾讯cdn：接入腾讯cdn的对接工作</li><li>cdn网关：新增腾讯cdn网关，合并网宿、阿里、帝联、腾讯四家cdn网关程序并增加数据收集等新需求</li><li>总结文档：除各项目的设计文档之外，还有程序埋点思考，python项目规范性整改以及ubuntu安全等方面的文档</li></ol><p>所有工作均能准时规范的完成。工作的同时也学习到了不少心的知识，下面简要列举一下能力提升的情况。</p><h2 id="能力提升"><a href="#能力提升" class="headerlink" title="能力提升"></a>能力提升</h2><p>主要能力提升列举如下：</p><ol><li>深入Python：对Python项目的稳定性和性能问题有更深层次的理解，对python语言以及库的熟练程度进一步提高，使用时得心应手。目前主要方向为数据分析和Web。</li><li>掌握Erlang：学习Erlang语言，掌握基础的Erlang&#x2F;OTP编程套件，深入理解基于消息传递的并发模型：Actor和CSP。并能在短时间内贡献Erlang业务代码</li><li>CDN融合：了解各家cdn的使用以及cdn融合调度的方法</li><li>进一步深入Weblogic和Oracle，了解相关相关DevOps操作</li><li>基本使用React+Mobx</li></ol><h2 id="一些言论"><a href="#一些言论" class="headerlink" title="一些言论"></a>一些言论</h2><p>这一年里面除了工作，自己也了解了很多商业类的信息，比如投资、贸易等等。也与年长的成功人士交流过一些生意经，也有不少的口嗨成员畅想各种可能。和不同行业不同层次的人交流实在是可以学到很多，其中有一些言论比较有意思或者说比较深刻，但是并不是所有人都能理解。下面列举几条言论和自己的切身感悟。</p><ul><li><p>你不是人民币，不可能得到每个人的支持，所以做你认为对的事情。</p></li><li><p>最大的动力来源不是兴趣而是需求，有压力才会有动力。</p></li><li><p>28岁之前的男生没有资格追求稳定的工作，稳定的工作无异于自杀。</p></li><li><p>勤劳致富是我这辈子听信过最久的谎言，勤劳最多脱贫并不能致富。</p></li></ul><p>这些言论可能看起来很消极，也可能看起来不合理，但是只有深入思考过并且经历过一些事情的人才能体会得到，但是即使这些言论想法和现在的主流有些格格不入，也是没有关系的，不需要所有人能懂，就像不需要所有的人都是富豪。</p><p>即使我深深的明白这些道理，但是仍然会努力的工作，因为生活需要面包。立足现在，展望未来。</p><h2 id="最后的感悟"><a href="#最后的感悟" class="headerlink" title="最后的感悟"></a>最后的感悟</h2><p>工作贡献再多能力提升再多也远远比不上时间流逝的代价，珍惜时间，做好准备，把握机会，10亿身家和环游世界不再是遥不可及的梦想。</p><p>人嘛，在彻底适应孤独的时候还是得有点野心啊。</p><p>大致写这么多，其他的想法就看2018年怎么做了。</p><p>关于2018年要做的事情要去的地方参见以下随笔：</p><ul><li><a href="https://suncle.me/2018/12/31/2018-must-do-and-must-go/">https://suncle.me/2018/12/31/2018-must-do-and-must-go/</a></li></ul><p>That’s all!</p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>2017</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Google Protocol Buffer</title>
    <link href="/2018/02/06/python-google-protocol-buffer/"/>
    <url>/2018/02/06/python-google-protocol-buffer/</url>
    
    <content type="html"><![CDATA[<p>本篇主要介绍如何在Python语言中使用Google Protocol Buffer（后续都简写为PB）， 包括以下几个部分：</p><ul><li>为什么要使用PB？</li><li>安装Google PB</li><li>自定义.proto 文件</li><li>编译.proto文件</li><li>解析目标py文件</li><li>序列化和反序列化</li><li>更复杂的Message</li><li>动态编译</li></ul><h1 id="为什么要使用PB？"><a href="#为什么要使用PB？" class="headerlink" title="为什么要使用PB？"></a>为什么要使用PB？</h1><p>PB（Protocol Buffer）是 Google 开发的用于结构化数据交换格式，作为腾讯云日志服务标准写入格式。因此用于写入日志数据前，需要将日志原始数据序列化为 PB 数据流后通过 API 写入服务端。而各个端类程序中不便操作PB格式，因此需要在端类和日志服务之间加入一层PB转化层。</p><p>当然PB格式也有自己的优点，主要是简单和快，具体测试结果参见<a href="https://github.com/eishay/jvm-serializers/wiki">Google序列化基准分析</a></p><span id="more"></span><h1 id="安装Google-PB"><a href="#安装Google-PB" class="headerlink" title="安装Google PB"></a>安装Google PB</h1><p>如果要想在Python中使用PB，需要先安装PB编译器protoc去编译你的.proto文件，安装方法如下：</p><p>下载最新的protobuf release包安装即可，当前版本为3.5.1，安装步骤如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.tar.gz<br>tar xvfz protobuf-all-3.5.1.tar.gz<br><span class="hljs-built_in">cd</span> protobuf-3.5.1/<br>./configure --prefix=/usr<br>make<br>make check<br>make install<br></code></pre></td></tr></table></figure><p>check步骤全部通过即表示编译通过。</p><p>继续安装protobuf的python模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./python <br>python setup.py build <br>python setup.py <span class="hljs-built_in">test</span> <br>python setup.py install<br></code></pre></td></tr></table></figure><p>安装完成验证<code>protoc</code>命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@ubuntu:~# protoc --version<br><span class="hljs-attribute">libprotoc</span> <span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>protobuf的默认安装位置是 &#x2F;usr&#x2F;local，&#x2F;usr&#x2F;local&#x2F;lib 不在Ubuntu系统默认的 LD_LIBRARY_PATH 里，如果在Ubuntu系统中configure时未指定安装路径为<code>/usr</code>， 则会出现以下错误</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">protoc: <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> loading shared libraries: libprotoc.<span class="hljs-keyword">so</span>.8: cannot <span class="hljs-keyword">open</span> shared object <span class="hljs-keyword">file</span>: <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br></code></pre></td></tr></table></figure><p>可以使用<code>ldconfig</code>命令解决，参考<a href="https://stackoverflow.com/questions/25518701/protobuf-cannot-find-shared-libraries">Protobuf cannot find shared libraries</a>，这个错误在安装包的README中有提到。当然重新安装也可以</p><p>验证Python模块是否被正确安装 </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> google.protobuf<br></code></pre></td></tr></table></figure><p>在python解释器中如果上面的import没有报错，说明安装正常。</p><h1 id="自定义-proto-文件"><a href="#自定义-proto-文件" class="headerlink" title="自定义.proto 文件"></a>自定义.proto 文件</h1><p>首先我们需要编写一个 proto 文件，定义我们程序中需要处理的结构化数据，在 protobuf 的术语中，结构化数据被称为 Message。proto 文件非常类似 java 或者 C++ 语言的数据定义。proto示例文件<code>cls.Log.proto</code>如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto2&quot;</span>;<br><span class="hljs-keyword">package</span> cls;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">Log</span><br>&#123;<br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">uint64</span> time = <span class="hljs-number">1</span>; <span class="hljs-comment">// UNIX Time Format</span><br>    <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> topic_id = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> content = <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>.proto文件开头是包的声明，为了帮助防止在不同的工程中命名冲突。在Python中，包通常由目录结构决定的，所以这个.proto文件定义的包，在实际Python代码中是没有效果的。但是，按照官方的建议是坚持声明这条语句，主要作用是为了在PB的命名空间中防止名称冲突。package 名字叫做 cls，定义了一个消息 Log，该消息有三个成员，各个成员的含义如下：</p><table><thead><tr><th>字段名</th><th>类型</th><th>位置</th><th>是否必须</th><th>含义</th></tr></thead><tbody><tr><td>time</td><td>uint64</td><td>body</td><td>否</td><td>日志时间，不指定，则使用服务器收到请求的时间</td></tr><tr><td>topic_id</td><td>string</td><td>body</td><td>是</td><td>日志上报到的日志主题id</td></tr><tr><td>content</td><td>string</td><td>body</td><td>是</td><td>日志内容</td></tr></tbody></table><p>一个比较好的习惯是认真对待 proto 文件的文件名。比如将命名规则定为：<code> packageName.MessageName.proto</code></p><h1 id="编译-proto文件"><a href="#编译-proto文件" class="headerlink" title="编译.proto文件"></a>编译.proto文件</h1><p>使用编译器protoc直接编译即可，需要指定源文件路径和目标文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">SRC_DIR=/tmp/src_dir<br>DST_DIR=/tmp/dst_dir<br>protoc -I=$SRC_DIR --python_out=$DST_DIR $SRC_DIR/cls.Log.proto<br></code></pre></td></tr></table></figure><p>生成Python类就使用<code>--python_out</code>选项，如果要生成C++类时使用<code>--cpp_out</code>选项</p><h1 id="解析目标py文件"><a href="#解析目标py文件" class="headerlink" title="解析目标py文件"></a>解析目标py文件</h1><p>在目标文件夹中生成的文件目录对应如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ubuntu:/tmp/dst_dir<span class="hljs-comment"># tree</span><br>.<br>└── cls<br>    └── Log_pb2.py<br><br>1 directory, 1 file<br></code></pre></td></tr></table></figure><p>其中Log_pb2.py文件的内容如下（不允许编辑）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Generated by the protocol buffer compiler.  DO NOT EDIT!</span><br><span class="hljs-comment"># source: cls.Log.proto</span><br><br><span class="hljs-keyword">import</span> sys<br>_b=sys.version_info[<span class="hljs-number">0</span>]&lt;<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">lambda</span> x:x) <span class="hljs-keyword">or</span> (<span class="hljs-keyword">lambda</span> x:x.encode(<span class="hljs-string">&#x27;latin1&#x27;</span>))<br><span class="hljs-keyword">from</span> google.protobuf <span class="hljs-keyword">import</span> descriptor <span class="hljs-keyword">as</span> _descriptor<br><span class="hljs-keyword">from</span> google.protobuf <span class="hljs-keyword">import</span> message <span class="hljs-keyword">as</span> _message<br><span class="hljs-keyword">from</span> google.protobuf <span class="hljs-keyword">import</span> reflection <span class="hljs-keyword">as</span> _reflection<br><span class="hljs-keyword">from</span> google.protobuf <span class="hljs-keyword">import</span> symbol_database <span class="hljs-keyword">as</span> _symbol_database<br><span class="hljs-keyword">from</span> google.protobuf <span class="hljs-keyword">import</span> descriptor_pb2<br><span class="hljs-comment"># @@protoc_insertion_point(imports)</span><br><br>_sym_db = _symbol_database.Default()<br><br><br><br><br>DESCRIPTOR = _descriptor.FileDescriptor(<br>  name=<span class="hljs-string">&#x27;cls.Log.proto&#x27;</span>,<br>  package=<span class="hljs-string">&#x27;cls&#x27;</span>,<br>  syntax=<span class="hljs-string">&#x27;proto2&#x27;</span>,<br>  serialized_pb=_b(<span class="hljs-string">&#x27;\n\rcls.Log.proto\x12\x03\x63ls\&quot;6\n\x03Log\x12\x0c\n\x04time\x18\x01 \x01(\x04\x12\x10\n\x08topic_id\x18\x02 \x02(\t\x12\x0f\n\x07\x63ontent\x18\x03 \x02(\t&#x27;</span>)<br>)<br><br><br><br><br>_LOG = _descriptor.Descriptor(<br>  name=<span class="hljs-string">&#x27;Log&#x27;</span>,<br>  full_name=<span class="hljs-string">&#x27;cls.Log&#x27;</span>,<br>  filename=<span class="hljs-literal">None</span>,<br>  file=DESCRIPTOR,<br>  containing_type=<span class="hljs-literal">None</span>,<br>  fields=[<br>    _descriptor.FieldDescriptor(<br>      name=<span class="hljs-string">&#x27;time&#x27;</span>, full_name=<span class="hljs-string">&#x27;cls.Log.time&#x27;</span>, index=<span class="hljs-number">0</span>,<br>      number=<span class="hljs-number">1</span>, <span class="hljs-built_in">type</span>=<span class="hljs-number">4</span>, cpp_type=<span class="hljs-number">4</span>, label=<span class="hljs-number">1</span>,<br>      has_default_value=<span class="hljs-literal">False</span>, default_value=<span class="hljs-number">0</span>,<br>      message_type=<span class="hljs-literal">None</span>, enum_type=<span class="hljs-literal">None</span>, containing_type=<span class="hljs-literal">None</span>,<br>      is_extension=<span class="hljs-literal">False</span>, extension_scope=<span class="hljs-literal">None</span>,<br>      options=<span class="hljs-literal">None</span>, file=DESCRIPTOR),<br>    _descriptor.FieldDescriptor(<br>      name=<span class="hljs-string">&#x27;topic_id&#x27;</span>, full_name=<span class="hljs-string">&#x27;cls.Log.topic_id&#x27;</span>, index=<span class="hljs-number">1</span>,<br>      number=<span class="hljs-number">2</span>, <span class="hljs-built_in">type</span>=<span class="hljs-number">9</span>, cpp_type=<span class="hljs-number">9</span>, label=<span class="hljs-number">2</span>,<br>      has_default_value=<span class="hljs-literal">False</span>, default_value=_b(<span class="hljs-string">&quot;&quot;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),<br>      message_type=<span class="hljs-literal">None</span>, enum_type=<span class="hljs-literal">None</span>, containing_type=<span class="hljs-literal">None</span>,<br>      is_extension=<span class="hljs-literal">False</span>, extension_scope=<span class="hljs-literal">None</span>,<br>      options=<span class="hljs-literal">None</span>, file=DESCRIPTOR),<br>    _descriptor.FieldDescriptor(<br>      name=<span class="hljs-string">&#x27;content&#x27;</span>, full_name=<span class="hljs-string">&#x27;cls.Log.content&#x27;</span>, index=<span class="hljs-number">2</span>,<br>      number=<span class="hljs-number">3</span>, <span class="hljs-built_in">type</span>=<span class="hljs-number">9</span>, cpp_type=<span class="hljs-number">9</span>, label=<span class="hljs-number">2</span>,<br>      has_default_value=<span class="hljs-literal">False</span>, default_value=_b(<span class="hljs-string">&quot;&quot;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),<br>      message_type=<span class="hljs-literal">None</span>, enum_type=<span class="hljs-literal">None</span>, containing_type=<span class="hljs-literal">None</span>,<br>      is_extension=<span class="hljs-literal">False</span>, extension_scope=<span class="hljs-literal">None</span>,<br>      options=<span class="hljs-literal">None</span>, file=DESCRIPTOR),<br>  ],<br>  extensions=[<br>  ],<br>  nested_types=[],<br>  enum_types=[<br>  ],<br>  options=<span class="hljs-literal">None</span>,<br>  is_extendable=<span class="hljs-literal">False</span>,<br>  syntax=<span class="hljs-string">&#x27;proto2&#x27;</span>,<br>  extension_ranges=[],<br>  oneofs=[<br>  ],<br>  serialized_start=<span class="hljs-number">22</span>,<br>  serialized_end=<span class="hljs-number">76</span>,<br>)<br><br>DESCRIPTOR.message_types_by_name[<span class="hljs-string">&#x27;Log&#x27;</span>] = _LOG<br>_sym_db.RegisterFileDescriptor(DESCRIPTOR)<br><br>Log = _reflection.GeneratedProtocolMessageType(<span class="hljs-string">&#x27;Log&#x27;</span>, (_message.Message,), <span class="hljs-built_in">dict</span>(<br>  DESCRIPTOR = _LOG,<br>  __module__ = <span class="hljs-string">&#x27;cls.Log_pb2&#x27;</span><br>  <span class="hljs-comment"># @@protoc_insertion_point(class_scope:cls.Log)</span><br>  ))<br>_sym_db.RegisterMessage(Log)<br><br><br><span class="hljs-comment"># @@protoc_insertion_point(module_scope)</span><br><br></code></pre></td></tr></table></figure><blockquote><p>关于pb生成的py文件的源代码的解析暂时搁置，可以参见附件中的资料</p></blockquote><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 1/30/18 4:23 PM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: pb test</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">import</span> Log_pb2<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">serialize_to_string</span>(<span class="hljs-params">msg_obj</span>):<br>    ret_str = msg_obj.SerializeToString()<br>    <span class="hljs-keyword">return</span> ret_str<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_from_string</span>(<span class="hljs-params">s</span>):<br>    log = Log_pb2.Log()<br>    log.ParseFromString(s)<br>    <span class="hljs-keyword">return</span> log<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># serialize_to_string</span><br>    content_dict = &#123;<span class="hljs-string">&quot;live_id&quot;</span>: <span class="hljs-string">&quot;1239182389648923&quot;</span>, <span class="hljs-string">&quot;identify&quot;</span>: <span class="hljs-string">&quot;zxc_unique&quot;</span>&#125;<br>    tencent_log = Log_pb2.Log()<br>    tencent_log.time = <span class="hljs-number">1510109254</span><br>    tencent_log.topic_id = <span class="hljs-string">&quot;John Doe&quot;</span><br>    tencent_log.content = json.dumps(content_dict)<br>    ret_s = serialize_to_string(tencent_log)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ret_s))<br>    <span class="hljs-built_in">print</span>(ret_s)<br><br>    <span class="hljs-comment"># parse_from_string</span><br>    log_obj = parse_from_string(ret_s)<br>    <span class="hljs-built_in">print</span>(log_obj)<br><br></code></pre></td></tr></table></figure><p>其中关键的操作在于message对象的写入和读取以及序列化函数<code>SerializeToString</code>和反序列化函数<code>ParseFromString</code></p><h1 id="更复杂的Message"><a href="#更复杂的Message" class="headerlink" title="更复杂的Message"></a>更复杂的Message</h1><p>到这里为止，我们只给出了一个简单的上传日志的例子。在实际应用中，人们往往需要定义更加复杂的 Message。我们用“复杂”这个词，不仅仅是指从个数上说有更多的 fields 或者更多类型的 fields，而是指更加复杂的数据结构：</p><ul><li>Message嵌套</li><li>Import Message</li></ul><p>下面分别介绍</p><h2 id="Message嵌套"><a href="#Message嵌套" class="headerlink" title="Message嵌套"></a>Message嵌套</h2><p>嵌套是一个神奇的概念，一旦拥有嵌套能力，消息的表达能力就会非常强大。具体的嵌套 Message 的例子如下</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">message </span><span class="hljs-title class_">Person</span> &#123; <br> <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>; <br> <span class="hljs-keyword">required</span> <span class="hljs-type">int32</span> id = <span class="hljs-number">2</span>;        <span class="hljs-comment">// Unique ID number for this person. </span><br> <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> email = <span class="hljs-number">3</span>; <br> <br> <span class="hljs-keyword">enum </span><span class="hljs-title class_">PhoneType</span> &#123; <br>   MOBILE = <span class="hljs-number">0</span>; <br>   HOME = <span class="hljs-number">1</span>; <br>   WORK = <span class="hljs-number">2</span>; <br> &#125; <br> <br> <span class="hljs-keyword">message </span><span class="hljs-title class_">PhoneNumber</span> &#123; <br>   <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> number = <span class="hljs-number">1</span>; <br>   <span class="hljs-keyword">optional</span> PhoneType type = <span class="hljs-number">2</span> [default = HOME]; <br> &#125; <br> <span class="hljs-keyword">repeated</span> PhoneNumber phone = <span class="hljs-number">4</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>在 Message Person 中，定义了嵌套消息 PhoneNumber，并用来定义 Person 消息中的 phone 域。这使得人们可以定义更加复杂的数据结构。</p><h2 id="Import-Message"><a href="#Import-Message" class="headerlink" title="Import Message"></a>Import Message</h2><p>在一个 .proto 文件中，还可以用 Import 关键字引入在其他 .proto 文件中定义的消息，这可以称做 Import Message，或者 Dependency Message。具体的import message的例子如下</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">import</span> common.header; <br> <br><span class="hljs-keyword">message </span><span class="hljs-title class_">youMsg</span>&#123; <br> <span class="hljs-keyword">required</span> common.info_header header = <span class="hljs-number">1</span>; <br> <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> youPrivateData = <span class="hljs-number">2</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>其中 ,<code>common.info_header</code>定义在<code>common.header</code>包内。</p><p>Import Message 的用处主要在于提供了方便的代码管理机制，类似 C 语言中的头文件。您可以将一些公用的 Message 定义在一个 package 中，然后在别的 .proto 文件中引入该 package，进而使用其中的消息定义。</p><p>Google Protocol Buffer 可以很好地支持嵌套 Message 和引入 Message，从而让定义复杂的数据结构的工作变得非常轻松愉快。</p><h1 id="动态编译"><a href="#动态编译" class="headerlink" title="动态编译"></a>动态编译</h1><p>一般情况下，使用 Protobuf 的人们都会先写好 .proto 文件，再用 Protobuf 编译器生成目标语言所需要的源代码文件。将这些生成的代码和应用程序一起编译。</p><p>可是在某且情况下，人们无法预先知道 .proto 文件，他们需要动态处理一些未知的 .proto 文件。比如一个通用的消息转发中间件，它不可能预知需要处理怎样的消息。这需要动态编译 .proto 文件，并使用其中的 Message。</p><p>详细解释参见：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/">Google Protocol Buffer 的使用和原理</a></p><hr><p>参考：</p><ol><li><a href="https://developers.google.com/protocol-buffers/docs/reference/python/">https://developers.google.com/protocol-buffers/docs/reference/python/</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/reference/python-generated">https://developers.google.com/protocol-buffers/docs/reference/python-generated</a></li><li><a href="http://hzy3774.iteye.com/blog/2323428">http://hzy3774.iteye.com/blog/2323428</a></li><li><a href="https://github.com/google/protobuf/tree/master/python">https://github.com/google/protobuf/tree/master/python</a></li><li><a href="https://github.com/google/protobuf/tree/master/examples">https://github.com/google/protobuf/tree/master/examples</a></li><li><a href="https://blog.csdn.net/losophy/article/details/17006573">https://blog.csdn.net/losophy/article/details/17006573</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/">https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/</a></li><li><a href="https://github.com/google/protobuf">https://github.com/google/protobuf</a></li><li><a href="https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.tar.gz">https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.tar.gz</a></li><li>Python Google Protocol Buffer： <a href="https://developers.google.com/protocol-buffers/docs/pythontutorial">https://developers.google.com/protocol-buffers/docs/pythontutorial</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Google</tag>
      
      <tag>PB</tag>
      
      <tag>Protocol Buffer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ab和wrk对腾讯CLS进行benchmark测试</title>
    <link href="/2018/02/01/%E4%BD%BF%E7%94%A8ab%E5%92%8Cwrk%E5%AF%B9%E8%85%BE%E8%AE%AFcls%E8%BF%9B%E8%A1%8Cbenchmark%E6%B5%8B%E8%AF%95/"/>
    <url>/2018/02/01/%E4%BD%BF%E7%94%A8ab%E5%92%8Cwrk%E5%AF%B9%E8%85%BE%E8%AE%AFcls%E8%BF%9B%E8%A1%8Cbenchmark%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ab和wrk对CLS进行benchmark测试"><a href="#使用ab和wrk对CLS进行benchmark测试" class="headerlink" title="使用ab和wrk对CLS进行benchmark测试"></a>使用ab和wrk对CLS进行benchmark测试</h1><p>使用ab和wrk对腾讯云日志服务CLS进行压力测试，以此为例对ab和wrk进行说明</p><h1 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h1><p>ab，全称是apache benchmark，是apache官方推出的工具。该工具是用来测试Apache服务器的性能的。查看安装的apache的服务器能提供的服务能力，每秒可以处理多少次请求。ab 执行时常用的选项如下表：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>并发数， 一次发送的总请求数，默认是一次发一个请求。</td></tr><tr><td>-k</td><td>打开keep-alive，在一个HTTP Session中请求多次。默认是关闭的。</td></tr><tr><td>-n</td><td>请求数， 整个benchmark测试过程中需要发送的请求次数。默认是一次，默认情况下得到的性能参数没有代表性。</td></tr><tr><td>-t</td><td>最大时间，benchmark测试最长时间，默认没有限制。</td></tr><tr><td>-u</td><td>上传文件，PUT操作时使用，需要设置-T选项</td></tr><tr><td>-T</td><td>设置上传文件的Content-Type</td></tr><tr><td>-p</td><td>postfile，指定包含post数据的文件</td></tr><tr><td>-r</td><td>当接收到socket错误的时候ab不退出</td></tr></tbody></table><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install apache2-utils<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>观察测试工具ab所在机器，以及被测试的前端机的CPU，内存，网络等都不超过最高限度的75%。</li><li>测试中可能出现端口不足导致的测试失败</li></ul><p>需要调整内核参数以支持端口重用，在Linux平台下需要在<code>/etc/sysctl.conf</code>文件中添加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">net.ipv4.tcp_syncookies</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_tw_reuse</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_tw_recycle</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_fin_timeout</span> = <span class="hljs-number">30</span><br><span class="hljs-attr">kernel.printk</span> = <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>然后运行<code>sudo sysctl –p</code>生效</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ab -c 50 -t 60 -n 300000 -k -T &#x27;application/x-protobuf&#x27; -p /tmp/post_data.txt -H &#x27;Host: ap-shanghai.cls.myqcloud.com&#x27; -H &#x27;Authorization: q-sign-algorithm=sha1&amp;q-ak=AKIDMfonbuXfqpcFicn3YrzwivMelfNwFWcW&amp;q-sign-time=1517472219;1517493819&amp;q-key-time=1517472219;1517493819&amp;q-header-list=content-type;host&amp;q-url-param-list=&amp;q-signature=4a4ed6ddc8ba1dfea73d2bee62def9dce8b0ca3c&#x27; http://ap-shanghai.cls.myqcloud.com/log<br></code></pre></td></tr></table></figure><p>&#x2F;tmp&#x2F;post_data.txt数据为google protocol buffer格式的数据</p><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs tap">This is ApacheBench, Version 2.3 &lt;$Revision:<span class="hljs-number"> 1796539 </span>$&gt;<br>Copyright<span class="hljs-number"> 1996 </span>Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/<br>Licensed to The Apache Software Foundation, https://www.apache.org/<br><br>Benchmarking ap-shanghai.cls.myqcloud.com (be patient)<br>Completed<span class="hljs-number"> 30000 </span>requests<br>Completed<span class="hljs-number"> 60000 </span>requests<br>Completed<span class="hljs-number"> 90000 </span>requests<br>Completed<span class="hljs-number"> 120000 </span>requests<br>Completed<span class="hljs-number"> 150000 </span>requests<br>Completed<span class="hljs-number"> 180000 </span>requests<br>Completed<span class="hljs-number"> 210000 </span>requests<br>Finished<span class="hljs-number"> 223877 </span>requests<br><br><br>Server Software:        openresty<br>Server Hostname:        ap-shanghai.cls.myqcloud.com<br>Server Port:            80<br><br>Document Path:          /log<br>Document Length:       <span class="hljs-number"> 0 </span>bytes<br><br>Concurrency Level:      50<br>Time taken for tests:   60.001 seconds<br>Complete requests:      223877<br>Failed requests:        0<br>Keep-Alive requests:    223027<br>Total transferred:     <span class="hljs-number"> 38726471 </span>bytes<br>Total body sent:        108604595<br>HTML transferred:      <span class="hljs-number"> 0 </span>bytes<br>Requests per second:    3731.24 [<span class="hljs-comment">#/sec] (mean)</span><br>Time per request:       13.400 [ms] (mean)<br>Time per request:       0.268 [ms] (mean, across all concurrent requests)<br>Transfer rate:          630.31 [Kbytes/sec] received<br>                        1767.63 kb/s sent<br>                        2397.94 kb/s total<br><br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:       <span class="hljs-number"> 0 </span>  <span class="hljs-number"> 0 </span>  0.5     <span class="hljs-number"> 0 </span>     34<br>Processing:    <span class="hljs-number"> 9 </span> <span class="hljs-number"> 13 </span>  3.8    <span class="hljs-number"> 13 </span>    164<br>Waiting:       <span class="hljs-number"> 8 </span> <span class="hljs-number"> 13 </span>  3.8    <span class="hljs-number"> 13 </span>    164<br>Total:         <span class="hljs-number"> 9 </span> <span class="hljs-number"> 13 </span>  3.8    <span class="hljs-number"> 13 </span>    164<br><br>Percentage of the requests served within a certain time (ms)<br>  50%     13<br>  66%     14<br>  75%     14<br>  80%     14<br>  90%     15<br>  95%     17<br>  98%     22<br>  99%     26<br> 100%   <span class="hljs-number"> 164 </span>(longest request)<br></code></pre></td></tr></table></figure><p>从测试结果，我们可以看到</p><ul><li>在50个并发请求的情况下，请求60秒，平均每秒可以处理3731次（也就是说，客户端在这种压力下，看到的QPS为3731）</li><li>平均每次请求处理的Latency为13.4ms</li><li>由于开启了keep-alive，连接几乎不耗时间</li><li>99%的请求都在26ms内完成，最长的请求是164ms</li></ul><p>使用腾讯云主机测试结果如下</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs tap">This is ApacheBench, Version 2.3 &lt;$Revision:<span class="hljs-number"> 1706008 </span>$&gt;<br>Copyright<span class="hljs-number"> 1996 </span>Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/<br>Licensed to The Apache Software Foundation, https://www.apache.org/<br><br>Benchmarking ap-shanghai.cls.myqcloud.com (be patient)<br><br>Completed<span class="hljs-number"> 30000 </span>requests<br>Completed<span class="hljs-number"> 60000 </span>requests<br>Completed<span class="hljs-number"> 90000 </span>requests<br>Completed<span class="hljs-number"> 120000 </span>requests<br>Completed<span class="hljs-number"> 150000 </span>requests<br>Completed<span class="hljs-number"> 180000 </span>requests<br>Completed<span class="hljs-number"> 210000 </span>requests<br>Completed<span class="hljs-number"> 240000 </span>requests<br>Completed<span class="hljs-number"> 270000 </span>requests<br>Completed<span class="hljs-number"> 300000 </span>requests<br>Finished<span class="hljs-number"> 300000 </span>requests<br><br><br>Server Software:        openresty<br>Server Hostname:        ap-shanghai.cls.myqcloud.com<br>Server Port:            80<br><br>Document Path:          /log<br>Document Length:       <span class="hljs-number"> 0 </span>bytes<br><br>Concurrency Level:      50<br>Time taken for tests:   40.095 seconds<br>Complete requests:      300000<br>Failed requests:        0<br>Keep-Alive requests:    298850<br>Total transferred:     <span class="hljs-number"> 51894250 </span>bytes<br>Total body sent:        145500000<br>HTML transferred:      <span class="hljs-number"> 0 </span>bytes<br>Requests per second:    7482.21 [<span class="hljs-comment">#/sec] (mean)</span><br>Time per request:       6.683 [ms] (mean)<br>Time per request:       0.134 [ms] (mean, across all concurrent requests)<br>Transfer rate:          1263.94 [Kbytes/sec] received<br>                        3543.82 kb/s sent<br>                        4807.77 kb/s total<br>                       <br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:       <span class="hljs-number"> 0 </span>  <span class="hljs-number"> 0 </span>  0.1     <span class="hljs-number"> 0 </span>      6<br>Processing:    <span class="hljs-number"> 4 </span>  <span class="hljs-number"> 7 </span>  2.9     <span class="hljs-number"> 6 </span>    157<br>Waiting:       <span class="hljs-number"> 4 </span>  <span class="hljs-number"> 7 </span>  2.9     <span class="hljs-number"> 6 </span>    157<br>Total:         <span class="hljs-number"> 4 </span>  <span class="hljs-number"> 7 </span>  2.9     <span class="hljs-number"> 6 </span>    157<br><br>Percentage of the requests served within a certain time (ms)<br>  50%      6<br>  66%      7<br>  75%      7<br>  80%      8<br>  90%      9<br>  95%     10<br>  98%     14<br>  99%     18<br> 100%   <span class="hljs-number"> 157 </span>(longest request)<br></code></pre></td></tr></table></figure><p>从结果我们可以看到，QPS是非腾讯云主机的2倍，为7482</p><h1 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h1><p>wrk是一个用来做HTTP benchmark测试的工具。可以产生显著的压力。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install libssl-dev<br>git clone https://github.com/wg/wrk.git<br>cd wrk<br>make<br>cp wrk /usr/sbin<br></code></pre></td></tr></table></figure><h2 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wrk -c 50 -d 60 -t 5 -s /tmp/wrk_post.lua http://ap-shanghai.cls.myqcloud.com<br></code></pre></td></tr></table></figure><p>请求的内容在<code>/tmp/wrk_post.lua</code>中规定，有5个线程，开启的连接有50个，运行60秒</p><p>其中<code>/tmp/wrk_post.lua</code>中的内容是</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">request = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>  mypath = <span class="hljs-string">&quot;/tmp/post_data.txt&quot;</span>;<br>  <span class="hljs-keyword">local</span> file = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(mypath, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-built_in">assert</span>(file);<br>  <span class="hljs-keyword">local</span> body = file:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*a&quot;</span>);      <span class="hljs-comment">-- 读取所有内容</span><br>  file:<span class="hljs-built_in">close</span>();<br>  wrk.body = body<br>  <span class="hljs-built_in">path</span> = <span class="hljs-string">&quot;/log&quot;</span><br>  wrk.headers[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&quot;application/x-protobuf&quot;</span><br>  wrk.headers[<span class="hljs-string">&quot;Host&quot;</span>] = <span class="hljs-string">&quot;ap-shanghai.cls.myqcloud.com&quot;</span><br>  wrk.headers[<span class="hljs-string">&quot;Authorization&quot;</span>] = <span class="hljs-string">&quot;q-sign-algorithm=sha1&amp;q-ak=AKIDMfonbuXfqpcFicn3YrzwivMelfNwFWcW&amp;q-sign-time=1517472219;1517493819&amp;q-key-time=1517472219;1517493819&amp;q-header-list=content-type;host&amp;q-url-param-list=&amp;q-signature=4a4ed6ddc8ba1dfea73d2bee62def9dce8b0ca3c&quot;</span><br>  <span class="hljs-keyword">return</span> wrk.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-built_in">path</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Running</span> <span class="hljs-number">1</span>m test @ http://ap-shanghai.cls.myqcloud.com<br>  <span class="hljs-attribute">5</span> threads and <span class="hljs-number">50</span> connections<br>  <span class="hljs-attribute">Thread</span> Stats   Avg      Stdev     Max   +/- Stdev<br>    <span class="hljs-attribute">Latency</span>    <span class="hljs-number">15</span>.<span class="hljs-number">91</span>ms   <span class="hljs-number">25</span>.<span class="hljs-number">52</span>ms <span class="hljs-number">880</span>.<span class="hljs-number">85</span>ms   <span class="hljs-number">98</span>.<span class="hljs-number">05</span>%<br>    <span class="hljs-attribute">Req</span>/Sec   <span class="hljs-number">745</span>.<span class="hljs-number">32</span>    <span class="hljs-number">105</span>.<span class="hljs-number">11</span>   <span class="hljs-number">848</span>.<span class="hljs-number">00</span>     <span class="hljs-number">94</span>.<span class="hljs-number">79</span>%<br>  <span class="hljs-attribute">221561</span> requests in <span class="hljs-number">1</span>.<span class="hljs-number">00</span>m, <span class="hljs-number">36</span>.<span class="hljs-number">55</span>MB read<br><span class="hljs-attribute">Requests</span>/sec:   <span class="hljs-number">3688</span>.<span class="hljs-number">17</span><br><span class="hljs-attribute">Transfer</span>/sec:    <span class="hljs-number">623</span>.<span class="hljs-number">03</span>KB<br></code></pre></td></tr></table></figure><p>从测试结果，我们可以看到</p><ul><li>在5个并发请求的情况下，开启50个连接，请求60秒，平均每秒可以处理3688次（也就是说，客户端在这种压力下，看到的QPS为3688）</li><li>平均每次请求处理的Latency为15.91ms</li></ul><p>使用腾讯云主机测试结果如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Running</span> <span class="hljs-number">1</span>m test @ http://ap-shanghai.cls.myqcloud.com<br>  <span class="hljs-attribute">5</span> threads and <span class="hljs-number">50</span> connections<br>  <span class="hljs-attribute">Thread</span> Stats   Avg      Stdev     Max   +/- Stdev<br>    <span class="hljs-attribute">Latency</span>     <span class="hljs-number">6</span>.<span class="hljs-number">77</span>ms    <span class="hljs-number">3</span>.<span class="hljs-number">42</span>ms  <span class="hljs-number">90</span>.<span class="hljs-number">45</span>ms   <span class="hljs-number">94</span>.<span class="hljs-number">82</span>%<br>    <span class="hljs-attribute">Req</span>/Sec     <span class="hljs-number">1</span>.<span class="hljs-number">53</span>k   <span class="hljs-number">119</span>.<span class="hljs-number">04</span>     <span class="hljs-number">1</span>.<span class="hljs-number">74</span>k    <span class="hljs-number">79</span>.<span class="hljs-number">27</span>%<br>  <span class="hljs-attribute">457574</span> requests in <span class="hljs-number">1</span>.<span class="hljs-number">00</span>m, <span class="hljs-number">75</span>.<span class="hljs-number">48</span>MB read<br><span class="hljs-attribute">Requests</span>/sec:   <span class="hljs-number">7623</span>.<span class="hljs-number">03</span><br><span class="hljs-attribute">Transfer</span>/sec:      <span class="hljs-number">1</span>.<span class="hljs-number">26</span>MB<br></code></pre></td></tr></table></figure><p>从结果我们可以看到，QPS是非腾讯云主机的2倍，为7623</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是用开源的benchmark工具来从客户端的角度来衡量所能获取的QPS以及Latency。但从客户端看到的性能会受到各种因素的影响，例如请求的方式，本机的资源（CPU，内存，网络），CLS的网络状况，CLS的负载等都会影响客户端看到的性能指标。需要根据实际情况来查看性能瓶颈是来自于CLS还是来自于本机。</p><hr><p>参考：</p><ol><li><a href="https://yq.aliyun.com/articles/35251">使用ab和wrk对OSS进行benchmark测试</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>benchmark</tag>
      
      <tag>ab</tag>
      
      <tag>wrk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HmacSHA1和原生SHA1的比较</title>
    <link href="/2018/02/01/hmacsha1%E5%92%8C%E5%8E%9F%E7%94%9Fsha1%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <url>/2018/02/01/hmacsha1%E5%92%8C%E5%8E%9F%E7%94%9Fsha1%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>首先来看一段HmacSHA1加密和SHA1加密的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 1/31/18 10:03 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: HmacSHA1 vs SHA1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> hmac<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    sha1加密</span><br><span class="hljs-string">    :param msg:</span><br><span class="hljs-string">    :return: 长度40位的摘要信息</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    sha = hashlib.sha1()<br>    sha.update(msg)<br>    <span class="hljs-keyword">return</span> sha.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_sha1</span>(<span class="hljs-params">key, msg</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    hmac sha1加密</span><br><span class="hljs-string">    :param key: 密钥</span><br><span class="hljs-string">    :param msg: 待加密消息</span><br><span class="hljs-string">    :return: 长度40位的摘要信息</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    m = hmac.new(key, msg, hashlib.sha1)<br>    <span class="hljs-keyword">return</span> m.hexdigest()<br><br><br><span class="hljs-built_in">print</span> hmac_sha1(<span class="hljs-string">&#x27;FKEwTiz9Te0FWlqkS4g8hEdqAsPZfdR4&#x27;</span>, <span class="hljs-string">&#x27;me&#x27;</span>)<br><span class="hljs-built_in">print</span> sha1(<span class="hljs-string">&#x27;me&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>db<span class="hljs-number">0e9132</span>a<span class="hljs-number">8</span>dff<span class="hljs-number">51e3</span>a<span class="hljs-number">4</span>d<span class="hljs-number">47497e29</span>a<span class="hljs-number">500087</span>da<span class="hljs-number">9</span>a<br>b<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<span class="hljs-number">8736</span>f<span class="hljs-number">20</span>db<span class="hljs-number">3</span>fb<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">66</span>bb<span class="hljs-number">1455</span>ed<span class="hljs-number">43909</span>f<span class="hljs-number">0</span>d<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>从结果中可以发现，HmacSHA1算法和SHA1算法都可以为任意长的消息生成一个20字节(160bit)的固定大小的输出，那么他们的区别在哪儿呢？</p><p>其实答案是很简单的。</p><p>在<a href="http://dev.ionous.net/2009/03/hmac-vs-raw-sha-1.html">HMAC vs. raw SHA-1</a>这篇文章中有一个有趣的解释，翻译过来大意如下</p><span id="more"></span><p>写在前面，请不要在意具体的摘要计算结果，重点在于解释的趣味性和简洁明了</p><blockquote><p>假设你想向你喜欢的人表白，你很想拿出一首美丽的14行诗，但是最后你决定只说一句简单的<code>&quot;i love you&quot;</code>。</p><p>你要表白的信息能够完好无损的传达给喜欢的妹子，但是你又不想其他的人知道，那么可以了解一些关于密码哈希的知识，使用SHA-1算法从消息中生成一个摘要。</p><p><code>&quot;i love you&quot;</code>对应的SHA-1摘要是：<code>bb7b1901d99e8b26bb91d2debdb7d7f24b3158cf</code></p><p>你喜欢的妹子接收到消息后，使用SHA-1算法重新计算出摘要和你发送的摘要进行比较。如果匹配就表示消息正确。</p><p>但是总有那么些刁民打算拦截你的信息，然后用另一个消息<code>&quot;don&#39;t call me anymore&quot;</code>替代掉，然后生成一个全新的摘要：<code>e267e18f05cb6ea3b10b761bbac21a0f92bb8d0d</code>。你喜欢的妹子收到消息之后摘要信息无法匹配得上，都有些难以置信了。</p><p>事情看起来很严峻，但是你向妹子解释了一番，保证以后再也不会发生这样类似的事情，你和妹子约定在计算hash摘要信息时在消息前面加上文本<code>&quot;our secret key.&quot;</code>，也就是新的完整的信息是<code>&quot;our secret key.i love you&quot;</code>。就这样相同的消息就会产生下面这样的摘要信息：</p><p><code>e0759e9b59bdd6d864d29ce3a502adb6257f7615</code>， 原文的这个值计算有错，评论中有提出。</p><p>这时候如果那些刁民只是简单的替换摘要信息就不生效了。因为你妹子使用key+msg的方式得到的结果和替换之后的摘要信息匹配不上。这样只要别人不知道你的密钥就没有办法产生虚假的消息。</p><p>但是还有一个问题，问题在于SHA-1和HMAC之间的区别。</p><p>SHA-1是使用迭代算法进行计算的，首先一个接一个地将消息分成64个字节的块，然后把这些块组合在一起来产生20个字节的摘要信息。 但是，由于你的消息可以是任意长度的，并且由于SHA通过其迭代性质在64字节的块之后继续计算块，这时候问题就出现了。</p><p>那些刁民打算再次改变你的信息，他们可能只是将更多的数据添加你的消息里面，由于你的密钥在前面的块中已经经过了计算，这时候添加在后面的消息不会受到你的密钥影响。</p><p>如果在消息后面简单的添加上”but please don’t call me anymore”，计算新的摘要并发送给你喜欢的妹子，妹子会以为整段消息就是你的意思。（此处具体计算方法需要参照sha1算法的实现）</p><p>就这样一个大写的GG刻在了你的脸上（欲哭无泪）！！！</p><p>但是也不用慌，我们还有HMAC，HMAC解决了这个问题，HMAC在整个hash过程中能有效的密封消息隐藏密钥，并且不能在尾部追加数据。具体的解决办法参见HMAC的实现。</p><p>根据维基百科，没有发现任何已知的HMAC消息扩展攻击。</p><p>恭喜你，妹子到手了，请开始你的性福之旅吧（啊呸，傻逼输入法，是幸福）！！！</p></blockquote><p>到这里其实HmacSHA1加密和SHA1加密的区别就很明显了，希望大家也都能理解。</p><hr><p>参考：</p><ol><li><a href="http://dev.ionous.net/2009/03/hmac-vs-raw-sha-1.html">HMAC vs. raw SHA-1</a></li><li><a href="https://wiki.jikexueyuan.com/project/explore-python/Standard-Modules/hmac.html">极客学院-hmac</a></li><li><a href="https://wiki.jikexueyuan.com/project/explore-python/Standard-Modules/hashlib.html">极客学院-hashlib</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hmac</tag>
      
      <tag>sha</tag>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Erlang测试全集(挖坑)</title>
    <link href="/2018/01/29/erlang%E6%B5%8B%E8%AF%95%E5%85%A8%E9%9B%86-%E6%8C%96%E5%9D%91/"/>
    <url>/2018/01/29/erlang%E6%B5%8B%E8%AF%95%E5%85%A8%E9%9B%86-%E6%8C%96%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Erlang测试全集-挖坑"><a href="#Erlang测试全集-挖坑" class="headerlink" title="Erlang测试全集(挖坑)"></a>Erlang测试全集(挖坑)</h1><p>本次只是简要列举Erlang测试相关的框架和概念，Erlang测试的详细使用在实际使用时再进行补充（<strong>挖坑</strong>），目前所有的Erlang程序中除部分公共基础app需要写单元测试和覆盖率报告之外其他都不需要写。</p><p>后续会按照以下四个部分介绍Erlang测试相关知识</p><ul><li>EUnit</li><li>Common Test</li><li>Cover</li><li>Quality Control</li></ul><span id="more"></span><h1 id="EUnit"><a href="#EUnit" class="headerlink" title="EUnit"></a>EUnit</h1><p>白盒测试，使用EUnit框架，主要参考以下资料：</p><ol><li><a href="https://github.com/rebar/rebar/wiki/Getting-started">rebar的开始wiki-使用EUnit为例讲解</a></li><li><a href="https://www.cnblogs.com/panfeng412/archive/2011/08/14/compile-erlang-with-rebar.html">博客园-Rebar：Erlang构建工具</a></li></ol><h1 id="Common-Test"><a href="#Common-Test" class="headerlink" title="Common Test"></a>Common Test</h1><p>Common Test简写为CT</p><p>黑盒测试，使用CT框架，趣看公司所有的单元测试都是基于CT，即只写黑盒</p><ol><li><a href="https://github.com/Eonblast/Trinity">CT入门示例-Erlang Common Test Examples</a></li><li><a href="http://blog.yufeng.info/archives/1711">淘宝储霸-rebar和common_test使用实践和疑惑澄清</a></li><li><a href="https://www.google.com/url?q=http://blog.yufeng.info/wp-content/uploads/2009/11/Erlang%25E5%25BC%2580%25E5%258F%2591%25E5%25AE%259E%25E8%25B7%25B5.pptx&sa=U&ved=0ahUKEwjBzo-OxvLYAhVXHGMKHZuNAzQQFggTMAU&client=internal-uds-cse&cx=011994216034381653247:b54vq7hrjse&usg=AOvVaw0WIFSQAi_m-43HdKJGEZcl"><strong>淘宝储霸-Erlang开发实践-可重点阅读</strong></a></li><li><a href="https://www.erlang.org/doc/apps/common_test/run_test_chapter.html">Erlang官方-Running Tests and Analyzing Results</a></li><li><a href="http://www.erlang-factory.com/upload/presentations/204/EUC2009-CommonTestPresentation.pdf">EUC2009-CommonTestPresentation.pdf</a></li></ol><h1 id="Cover"><a href="#Cover" class="headerlink" title="Cover"></a>Cover</h1><p>代码测试覆盖率，代码覆盖率的意义在于：</p><ol><li>分析未覆盖部分的代码，从而反推在前期测试设计是否充分，没有覆盖到的代码是否是测试设计的盲点，为什么没有考虑到？需求&#x2F;设计不够清晰，测试设计的理解有误，工程方法应用后的造成的策略性放弃等等，之后进行补充测试用例设计。</li><li>检测出程序中的废代码，可以逆向反推在代码设计中思维混乱点，提醒设计&#x2F;开发人员理清代码逻辑关系，提升代码质量。</li><li>代码覆盖率高不能说明代码质量高，但是反过来看，代码覆盖率低，代码质量不会高到哪里去，可以作为测试自我审视的重要工具之一。</li></ol><p>EUnit和Common Test都可以产生coverage report，参考：</p><ol><li><a href="https://github.com/rebar/rebar/wiki/Getting-started">rebar的开始wiki-使用EUnit为例讲解</a></li><li><a href="https://stackoverflow.com/questions/28969405/cover-report-from-common-test-when-using-rebar">Stack Overflow-Cover report from Common Test when using rebar</a></li></ol><h1 id="Quality-Control"><a href="#Quality-Control" class="headerlink" title="Quality Control"></a>Quality Control</h1><p>QC，即质量控制，主要是压力测试，可以使用Tsung压力测试工具（由Erlang编写）</p><ul><li>api</li><li>mysql</li><li>console</li></ul><h1 id="Erlang的优点"><a href="#Erlang的优点" class="headerlink" title="Erlang的优点"></a>Erlang的优点</h1><p>偶然间看到淘宝储霸关于Erlang的优点的阐述，觉得很精辟，所以写在最后</p><p>Erlang的优点（为什么选择使用Erlang实现）</p><ul><li>高并发、高性能、集群易扩展</li><li>时间检验的高可靠</li><li>强大的管理功能，方便的问题定位支持</li><li>强大的交互性，与其他系统整合能力</li><li>Erlang独特的世界观<ul><li>世界是并行的</li><li>万物皆独善其身</li><li>万物皆通讯</li><li>天有不测风云</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>erlang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Erlang</tag>
      
      <tag>测试</tag>
      
      <tag>EUnit</tag>
      
      <tag>Common Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于冷热数据备份和恢复的思考</title>
    <link href="/2018/01/22/%E5%85%B3%E4%BA%8E%E5%86%B7%E7%83%AD%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2018/01/22/%E5%85%B3%E4%BA%8E%E5%86%B7%E7%83%AD%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="关于冷热数据备份和恢复的思考"><a href="#关于冷热数据备份和恢复的思考" class="headerlink" title="关于冷热数据备份和恢复的思考"></a>关于冷热数据备份和恢复的思考</h1><p>数据库：Mysql InnoDB</p><p>目标：备份指定数据表指定时间段的全字段数据到数据文件，并删除掉数据库中已备份数据</p><p>说明：这里说的数据备份不是灾备，而且通过备份基本不会使用的数据来缓解数据库压力，要求备份的数据是可以恢复的</p><p>持久化存储：文本格式的数据文件，存储于oss中</p><p>思考：不同表中可能含有多个时间字段，可能的组合如下</p><ul><li><code>update_time</code></li><li><code>create_time</code> &amp; <code>update_time</code></li><li><code>create_time</code> &amp; <code>update_time</code> &amp; 业务时间（由程序插入，可能是datetime可能是date可能是timestamp）</li></ul><p>一般数据表设计时都会带上创建时间和修改时间。</p><ul><li>数据一般都是快速增长，较少或者几乎不更新，属于记录型的数据</li></ul><span id="more"></span><p>以下数据表都是示例表</p><h1 id="探索replace导致的时间变化"><a href="#探索replace导致的时间变化" class="headerlink" title="探索replace导致的时间变化"></a>探索replace导致的时间变化</h1><p>由于之前的数据库数据插入时，不同项目可能都使用了replace，因此需要看下replace的影响</p><p>创建测试表tb_user</p><p>insert插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `tb_user`(`mail`, `username`, `password`) VALUES(&#x27;572924509@qq.com&#x27;, &#x27;suncle&#x27;, &#x27;123456&#x27;);<br></code></pre></td></tr></table></figure><p>replace更新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">REPLACE INTO `tb_user`(`mail`, `username`, `password`) VALUES(&#x27;572924509@qq.com&#x27;, &#x27;suncle&#x27;, &#x27;abcdef&#x27;);<br></code></pre></td></tr></table></figure><p>replace操作是先删除已存在的数据然后插入新的数据，因此<code>id</code>，<code>create_time</code>，<code>update_time</code>都变化了。</p><p>另外，当插入数据失败时（比如遇到唯一键冲突），主键id也会自动增大，此处不验证。</p><h1 id="探索insert时自动更新字段的变化"><a href="#探索insert时自动更新字段的变化" class="headerlink" title="探索insert时自动更新字段的变化"></a>探索insert时自动更新字段的变化</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `tb_user`(`mail`, `username`, `password`, `create_time`, `update_time`) VALUES(&#x27;5729245012@qq.com&#x27;, &#x27;suncle1&#x27;, &#x27;123456&#x27;, &#x27;2018-02-02 00:00:00&#x27;, &#x27;2018-02-02 00:00:01&#x27;);<br></code></pre></td></tr></table></figure><p>create_time和update_time都会自动更新，默认值分别为：</p><ul><li>create_time： CURRENT_TIMESTAMP</li><li>update_time： CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</li></ul><p>指定两个自动更新字段后，该字段的结果为指定值，而不是自动更新的值，即手动插入什么就是什么。</p><h1 id="备份方案列举比较"><a href="#备份方案列举比较" class="headerlink" title="备份方案列举比较"></a>备份方案列举比较</h1><p>从备份的简洁性和恢复的便利性来比较</p><p>关于时间的获取：<strong>程序插入时间，update_time</strong>两者时间取最大值表示这条数据的最后修改时间</p><ul><li><code>create_time</code>，<code>update_time</code>字段都没有索引</li></ul><h2 id="时间维度"><a href="#时间维度" class="headerlink" title="时间维度"></a>时间维度</h2><h3 id="基于主键id"><a href="#基于主键id" class="headerlink" title="基于主键id"></a>基于主键id</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>查询1000条数据，如果要从指定id开始，则绑定min_id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM tb_stream_computer_concurrency WHERE id &gt; :min_id LIMIT 1000;<br></code></pre></td></tr></table></figure><p>然后用获取到的最大的id去查询所有时间字段，并通过程序取最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT `time`, `create_time`, `update_time` AS max_time FROM tb_stream_computer_concurrency WHERE id = :max_id<br></code></pre></td></tr></table></figure><p>具体步骤：每次1000条数据，没有处理到指定时间则继续循环处理后面1000条，如果最后一条数据最大时间超过指定时间，则基于主键id进行二分查找找到小于指定时间并且最接近指定时间的数据，处理完成。</p><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><p>当次备份结束，需要开始clean数据库，可以根据id直接批量删除，直至删除结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM tb_stream_computer_concurrency WHERE id &lt; :max_id LIMIT 1000<br></code></pre></td></tr></table></figure><p>为了保证数据一致性，之前处理的数据不能立马删除，因此采用下面的处理方式不合理，速度慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM tb_stream_computer_concurrency WHERE id &lt; :max_id AND `time` &lt; &#x27;2017-08-01 15:30:00&#x27; AND update_time &lt; &#x27;2017-08-01 15:30:00&#x27;<br></code></pre></td></tr></table></figure><p>假设’2017-08-01 15:30:00’为指定的时间，max_id为最后一次处理的max_id</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：</p><ol><li>主键有索引，所有基于id的sql都不会进行全表扫描，速度较快</li><li>使用二分查找的方法毕竟限制时间点能最大程度的满足时间限制的要求</li></ol><p>缺点：</p><ol><li>二分查找时查找到的最终的id对应的时间有多条数据，需要排除掉这几条数据，从尾部开始做一个filter</li><li>此方案适合少更新的数据，对于id小，但是时间大的数据可能会出现误备份</li></ol><h3 id="基于指定时刻"><a href="#基于指定时刻" class="headerlink" title="基于指定时刻"></a>基于指定时刻</h3><p>比如60天，找到指定时刻之前的所有数据中时间最小的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT MIN(`time`), MIN(`update_time`) FROM `tb_stream_computer_concurrency`<br></code></pre></td></tr></table></figure><p>然后从最小的时间开始按照<strong>基于时间段</strong>的方法批次处理数据（查找sql速度太慢），直到处理到指定时刻</p><h3 id="基于指定时间段"><a href="#基于指定时间段" class="headerlink" title="基于指定时间段"></a>基于指定时间段</h3><p>寻找位于时间段内的数据进行批次备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM `tb_stream_computer_concurrency` WHERE `time` &gt; :min_time AND `time` &lt; :max_time AND `id` &gt; :min_id ORDER BY `date_time`,`id` LIMIT 1000<br></code></pre></td></tr></table></figure><p>所有数据备份完成按照时间段进行删除，删除方式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM `tb_stream_computer_concurrency` WHERE `time` &lt; :max_time LIMIT 100<br></code></pre></td></tr></table></figure><h3 id="基于指定空间阈值"><a href="#基于指定空间阈值" class="headerlink" title="基于指定空间阈值"></a>基于指定空间阈值</h3><p>比如备份mysql数据空间占用的大小指定空间最高阈值之下</p><p>对于阿里云rds可以调用接口判断当前数据库已占用空间大小，也可以使用sql查询数据库表的占用空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DATA_LENGTH+INDEX_LENGTH FROM information_schema.TABLES WHERE TABLE_SCHEMA=&#x27;qk_real_time_data&#x27; AND TABLE_NAME=&#x27;tb_stream_computer_concurrency&#x27;<br></code></pre></td></tr></table></figure><p>查询结果单位为字节Byte，转化为M需要除以2个1024。</p><p>然后按照基于主键id的方式进行备份删除，直至数据表占用空间降到指定阈值以下即可停止当次处理。</p><h2 id="业务层唯一标识维度"><a href="#业务层唯一标识维度" class="headerlink" title="业务层唯一标识维度"></a>业务层唯一标识维度</h2><p>即基于唯一标识live_id，取得最老的一个live_id，然后根据live_id查询所有的指定时间之前的记录，进行备份和清理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT live_id FROM tb_stream_computer_concurrency ORDER BY id LIMIT 1;<br>SELECT * FROM tb_stream_computer_concurrency WHERE live_id=:live_id<br></code></pre></td></tr></table></figure><p>对查询出来的数据进行备份，如果担心数据量过大，可以对查询出来的数据进行limit分批备份清理。此方案的速度较快。</p><h2 id="混合维度"><a href="#混合维度" class="headerlink" title="混合维度"></a>混合维度</h2><p>基于一定时间段内的唯一标识对应的所有记录进行备份（查询时有索引的在前）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tb_stream_computer_concurrency <span class="hljs-keyword">WHERE</span> live_id=:live_id <span class="hljs-keyword">AND</span> <span class="hljs-built_in">GREATEST</span>(<span class="hljs-symbol">`time`</span>, <span class="hljs-symbol">`create_time`</span>, <span class="hljs-symbol">`update_time`</span>) &gt;= :datetime1 <span class="hljs-keyword">AND</span> <span class="hljs-built_in">GREATEST</span>(<span class="hljs-symbol">`time`</span>, <span class="hljs-symbol">`create_time`</span>, <span class="hljs-symbol">`update_time`</span>) &lt; :datetime2<br></code></pre></td></tr></table></figure><p>如果去掉偏移区间，速度会更快</p><h2 id="备份方案结论"><a href="#备份方案结论" class="headerlink" title="备份方案结论"></a>备份方案结论</h2><ol><li>在各个时间字段没有加索引的情况下使用基于主键id的方式备份数据库数据是最合适的</li><li>在各个时间字段加了索引的情况下可以使用基于时间点和时间段的方式处理，这样程序更简洁，逻辑更清楚</li><li>基于指定空间阈值只有在确实需要此种处理时采取执行，具体底层选择基于什么处理按第一点和第二点分析</li><li>不考虑oss文件数量较多，最推荐的方案是基于业务层的唯一标识，便于精准恢复</li></ol><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>oss存储时的文件名，备份时的文件名决定恢复时的策略</p><p>主要两种：</p><ul><li>基于时间段恢复数据，可以是按天，周，月为单位</li><li>基于唯一标识信息恢复数据，此处为live_id</li></ul><h2 id="时间维度-1"><a href="#时间维度-1" class="headerlink" title="时间维度"></a>时间维度</h2><p>oss文件名称：OssPrefix&#x2F;EnvName&#x2F;Datetime</p><p>获取指定前缀的所有文件解析即可，如果要做到精确恢复，需要逐个文件下载再分析。</p><h2 id="业务层唯一标识维度-1"><a href="#业务层唯一标识维度-1" class="headerlink" title="业务层唯一标识维度"></a>业务层唯一标识维度</h2><p>在直播业务场景中，直播id即live_id是可以唯一标识一场活动的，因此基于live_id恢复是能达到精准恢复的。当然对于不同的表，如果数据量快速增长，可以肯定都是有业务层的唯一标识的。因此对于不同的表是可以基于唯一标识进行备份恢复的。</p><p>需要确认唯一标识的数据量，因为一个唯一标识就会对应一个oss文件。</p><p>oss文件名称：OssPrefix&#x2F;EnvName&#x2F;UniqueKey&#x2F;UUID</p><p>具体的uuid可以随意指定，具有唯一标示性即可，建议使用当前datetime和32位的uuid组成即可</p><p>如果业务层唯一标识在不同的环境中也是全局唯一的，那么就可以省掉EnvName这个前缀</p><p>如果需要恢复指定时间段时的数据则需要遍历所有的UniqueKey并匹配UUID，但是由于恢复操作较少，对于oss和数据库的操作都不会太多，因此恢复指定时间段的数据也是可以实现的</p><h2 id="混合维度-1"><a href="#混合维度-1" class="headerlink" title="混合维度"></a>混合维度</h2><p>oss文件命名时同时考虑时间段和唯一标识，时间段量小，因此时间段筛选在前，唯一标识在后</p><p>oss文件名称：OssPrefix&#x2F;EnvName&#x2F;Datetime&#x2F;UniqueKey&#x2F;UUID</p><p>恢复指定id时需要遍历所有的时间前缀，然后找对应的UniqueKey</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>兼顾到数据备份和基于唯一标识恢复基于时间恢复的精确度，因此本次采用业务层唯一标识维度和时间维度（按天为段）混合的方式，主要优势在于基于时间恢复可以很快，基于唯一标识的恢复虽然复杂一点但是也较快</p><p>（即需要在oss文件名中体现时间段和唯一标识，时间段长度固定，用结束时间表示）</p><p>最终的执行方式：</p><ul><li>备份自动执行</li><li>恢复提供按业务唯一标识和时间段，分别提供接口</li></ul><p>后续如果恢复要求较高，改用外部表的方式重写</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>对于mysql千万级别的表，如果冷热数据明显，则可以直接使用本篇文章中讨论的备份方法备份到oss上</li><li>除了直接全部持久化冷数据的方式之外，可以采用外部表的方案，比如<strong>冷数据转存RDS PostgreSQL版 + OSS</strong>， 此方案在恢复时优于全冷备的方式，但结构也较为复杂，但在恢复时较为迅速</li><li>除分库分表，分区表，外部表外还有历史拉链表和闪回数据归档FDA等方式（饮水大神介绍）</li></ol><p>参考：</p><ol><li><a href="https://yq.aliyun.com/articles/66856">云栖社区-云上如何做冷热数据分离</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备份</tag>
      
      <tag>恢复</tag>
      
      <tag>数据</tag>
      
      <tag>设计思想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于消息传递的并发模型</title>
    <link href="/2017/12/18/%E5%9F%BA%E4%BA%8E%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    <url>/2017/12/18/%E5%9F%BA%E4%BA%8E%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<blockquote>An object oriented language is a language with good support for objects.<br>A concurrency oriented language has good support for concurrency.<br><br>--Joe Armstrong</blockquote><p>两类通用并发模型：参考七周七并发模型</p><ul><li><p>共享内存型Shared Memory</p><ul><li>线程Threads</li><li>锁Locks</li><li>互斥l量Mutexes</li></ul></li><li><p>消息传送型（CSP和Actor模型）</p><ul><li>进程Processes</li><li>消息Messages</li><li>不共享数据(状态)No shared data</li></ul></li></ul><p>重点介绍消息传送型的两种模型Actor和CSP（Communicating Sequential Process）的各项对比</p><p>主要目的：除了常用的Python、Java等用的并发模型之外，还存在这么个东西</p><span id="more"></span><p>先看两段代码</p><h1 id="代码示例对比"><a href="#代码示例对比" class="headerlink" title="代码示例对比"></a>代码示例对比</h1><p>使用Erlang代码和Go代码分别实现打印服务print_server，用来对比模型使用差异</p><p><strong>Actor模型-Erlang代码</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-comment">%%% @author Suncle</span><br><span class="hljs-comment">%%% @doc</span><br><span class="hljs-comment">%%% print_server</span><br><span class="hljs-comment">%%% @end</span><br><span class="hljs-comment">%%% Created : 2017/12/18 14:53</span><br><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-keyword">-module</span><span class="hljs-params">(print_server)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;Flowsnow&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([print_server/<span class="hljs-number">0</span>, start_print_server/<span class="hljs-number">0</span>, send_msg/<span class="hljs-number">2</span>])</span>.<br><br><br><span class="hljs-function"><span class="hljs-title">print_server</span><span class="hljs-params">()</span> -&gt;</span><br>  <span class="hljs-keyword">receive</span><br>    Msg -&gt;<br>      io:format(<span class="hljs-string">&quot;print_server received msg: ~p~n&quot;</span>, [Msg]),<br>      print_server()<br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">start_print_server</span><span class="hljs-params">()</span> -&gt;</span><br>  Pid = spawn(?MODULE, print_server, []),<br>  Pid.<br><br><span class="hljs-function"><span class="hljs-title">send_msg</span><span class="hljs-params">(Msg, Pid)</span> -&gt;</span><br>  Pid ! Msg,<br>  io:format(<span class="hljs-string">&quot;send_normal_msg: ~p~n&quot;</span>, [Msg]).<br><br></code></pre></td></tr></table></figure><p>Erlang shell输出结果如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; c(<span class="hljs-string">&quot;print_server.erl&quot;</span>).<br>&#123;ok,print_server&#125;<br><span class="hljs-number">2</span>&gt; Pid = print_server:start_print_server().<br>&lt;<span class="hljs-number">0.39</span>.<span class="hljs-number">0</span>&gt;<br><span class="hljs-number">3</span>&gt; print_server:send_msg(<span class="hljs-string">&quot;hello&quot;</span>, Pid).<br>send_normal_msg: <span class="hljs-string">&quot;hello&quot;</span><br>print_server received msg: <span class="hljs-string">&quot;hello&quot;</span><br>ok<br></code></pre></td></tr></table></figure><p>以上print_server使用的是最原始的Erlang语法实现的，也可以使用OTP gen_server原语实现更加清晰易懂</p><p><strong>CSP模型-Go代码</strong></p><p>print函数从channel读取消息并阻塞，直到主函数向channel写入hello消息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-built_in">print</span>(c)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>fmt.Println(<span class="hljs-string">&quot;main function: start writing msg&quot;</span>)<br>c &lt;- <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-keyword">var</span> input <span class="hljs-type">string</span><br>fmt.Scanln(&amp;input)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">print</span><span class="hljs-params">(c &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;print function: start reading&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;print function: reading: &quot;</span> + &lt;-c)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">D:\workspace\Go&gt;<span class="hljs-keyword">go</span> run print_server.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">print</span> <span class="hljs-keyword">function</span>: start reading<br>main <span class="hljs-keyword">function</span>: start writing msg<br><span class="hljs-keyword">print</span> <span class="hljs-keyword">function</span>: reading: hello<br></code></pre></td></tr></table></figure><h1 id="模型图对比"><a href="#模型图对比" class="headerlink" title="模型图对比"></a>模型图对比</h1><p><strong>Actor</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/work/ConcurrencyModel/actor_illustration1.png"></p><blockquote><p>Actor1发送消息到Actor2的邮箱中，邮箱本质是队列，由Actor2消费</p></blockquote><p><strong>CSP</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/work/ConcurrencyModel/csp_illustration1.png"></p><blockquote><p>Process1在Channel的写入端添加消息，Process2在channel的读取端读取消息</p></blockquote><h1 id="基本特性对比"><a href="#基本特性对比" class="headerlink" title="基本特性对比"></a>基本特性对比</h1><p><strong>Actor</strong></p><ol><li>基于消息传递message-passing</li><li>消息和信箱机制：消息异步发送</li><li>保留可变状态但不共享</li><li>失败检测和任其崩溃</li><li>重点在于发送消息时的实体</li></ol><p><strong>CSP</strong></p><ol><li>基于消息传递message-passing</li><li>顺序进程Sequential processes</li><li>通过channel同步通信Synchronous communication through channels</li><li>频道交替复用Multiplexing of channels with alternation</li><li>重点在于发送消息时使用的通道channel</li></ol><h1 id="通信语义对比"><a href="#通信语义对比" class="headerlink" title="通信语义对比"></a>通信语义对比</h1><p><strong>Actor</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/work/ConcurrencyModel/actor_illustration2.png"></p><blockquote><p>Actor1等待消息并阻塞，直到Actor2发送消息给Actor1</p><p>Actor2发送消息给Actor3，暂存在Actor3的Mailbox中，直到Actor3接受并处理</p></blockquote><p><strong>CSP</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/work/ConcurrencyModel/csp_illustration2.png"></p><blockquote><p>Process1读取channel因没有消息阻塞，直到Process2向该channel添加消息</p><p>process2向channel添加消息并阻塞，直到Process3读取该channel消息</p></blockquote><h1 id="Erlang实现简易银行账户"><a href="#Erlang实现简易银行账户" class="headerlink" title="Erlang实现简易银行账户"></a>Erlang实现简易银行账户</h1><p>使用Erlang原语，代码如下：</p><ul><li><a href="https://gist.github.com/suncle1993/5da4565718bb6c3ec3f0a79cfedf0b00">https://gist.github.com/suncle1993/5da4565718bb6c3ec3f0a79cfedf0b00</a></li></ul><p>使用OTP的gen_server，代码如下：</p><ul><li><a href="https://gist.github.com/suncle1993/18a580313ac0b7ea54e5eddd9e2b2265">https://gist.github.com/suncle1993/18a580313ac0b7ea54e5eddd9e2b2265</a></li></ul><h1 id="Erlang小项目：IP数据库"><a href="#Erlang小项目：IP数据库" class="headerlink" title="Erlang小项目：IP数据库"></a>Erlang小项目：IP数据库</h1><p>使用Erlang&#x2F;OTP实现的IP数据库，可以根据IP查询到具体的国家省份等，代码如下：</p><ul><li><a href="https://github.com/Flowsnow/ip_db">https://github.com/Flowsnow/ip_db</a></li></ul><h1 id="不一样的Erlang特性"><a href="#不一样的Erlang特性" class="headerlink" title="不一样的Erlang特性"></a>不一样的Erlang特性</h1><ol><li>Let it crash思想：值得借鉴</li></ol><ul><li><a href="https://www.zhihu.com/question/21325941/answer/173370966">https://www.zhihu.com/question/21325941/answer/173370966</a></li></ul><blockquote><p> 比如：执行算术异常崩溃</p></blockquote><ol start="2"><li>变量是不可变的，变量一旦赋予值就无法再改变：带来的好处就是没有可变状态，就不需要内存共享，也就不需要有锁</li><li>Erlang进程之间的唯一交互方式就是消息传递：Erlang中没有像C++那样，进程间拥有多种不同的交互方式（管道、消息队列、存储共享等等）。</li></ol><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>为什么没有容量自动增大的缓冲区？</p><blockquote><p>即使现在有一个看上去永不枯竭的资源，总有一天这个资源还是会被用尽的。可能是因为时过境迁，当初的老程序现在需要解决更大规模的问题；也可能是存在一个bug，消息没有被及时处理，导致被堆积。如果没有思考缓冲区塞满时的对策，那么在未来的某个时间就有可能出现一个破坏性极强，隐蔽性极深且难以诊断的bug。最好的策略是在现在就思考如何处理缓存区被塞满的情况，将问题消灭在萌芽阶段。</p><p>因此常用的缓存区类型有三种：阻塞型(blocking)，弃用新值型(dropping)，移出旧值型(sliding)</p></blockquote><p>Python有什么消息传递并发模型？</p><blockquote><p>Actor模型pykka：<a href="https://github.com/jodal/pykka">https://github.com/jodal/pykka</a></p><p>CSP模型pycsp：<a href="https://github.com/runefriborg/pycsp/wiki/Getting_Started_With_PyCSP">https://github.com/runefriborg/pycsp/wiki/Getting_Started_With_PyCSP</a></p></blockquote><hr><p>图片均来源于<a href="https://arild.github.io/csp-presentation/#1">here</a>！</p><hr><p>参考：</p><ul><li><a href="https://arild.github.io/csp-presentation/">Communicating Sequential Processes (CSP)-An alternative to the actor model</a></li><li><a href="http://www.guug.de/veranstaltungen/ffg2003/papers/ffg2003-armstrong.pdf">Concurrency Oriented Programming In Erlang-Joe Armstrong.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>Actor</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Erlang入门路线</title>
    <link href="/2017/12/14/erlang%E5%85%A5%E9%97%A8%E8%B7%AF%E7%BA%BF/"/>
    <url>/2017/12/14/erlang%E5%85%A5%E9%97%A8%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>间歇性的学了一些Erlang，写了一个直播cdn网关的程序，也算是贡献了代码，完成了第一个项目。结束之际写一个入门路线，记录学习过程。</p><p>主要根据个人经验介绍最佳的学习路线，包括环境，Erlang语法，OTP和rebar构建调试打包过程等几个部分。</p><span id="more"></span><h1 id="Erlang环境"><a href="#Erlang环境" class="headerlink" title="Erlang环境"></a>Erlang环境</h1><p>主要是Erlang环境搭建和Erlang shell的使用</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在<a href="https://www.erlang.org/downloads">Erlang官网下载</a>Erlang源码包或者二进制包进行安装，因项目需要选择OTP18&#x2F;erl7.3。</p><p>从源码安装Erlang&#x2F;OTP的方法参见<a href="https://github.com/erlang/otp/blob/maint/HOWTO/INSTALL.md">github仓库</a></p><blockquote><p>windows安装完成之后需要配置环境变量，最终以在命令行输入erl能进入erlang shell为准</p></blockquote><h2 id="Erlang-shell"><a href="#Erlang-shell" class="headerlink" title="Erlang shell"></a>Erlang shell</h2><p>开始第一个程序：Erlang程序的编写，编译，执行。</p><p>输入下面的程序，把它存成一个叫做 hello.erl 的文件。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(hello)</span>.<br><span class="hljs-keyword">-compile</span><span class="hljs-params">(export_all)</span>.<br><span class="hljs-function"><span class="hljs-title">start</span><span class="hljs-params">()</span> -&gt;</span><br>  <span class="hljs-string">&quot;hello world&quot;</span>.<br></code></pre></td></tr></table></figure><p>启动 erlang shell，输入以下命令：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erlang">root@ubuntu:/tmp# erl<br>Erlang/OTP <span class="hljs-number">18</span> [erts-<span class="hljs-number">7.3</span>] [source] [<span class="hljs-number">64</span>-bit] [async-threads:<span class="hljs-number">10</span>] [kernel-poll:<span class="hljs-literal">false</span>]<br><br>Eshell V7.<span class="hljs-number">3</span>  (abort with ^G)<br><span class="hljs-number">1</span>&gt; c(hello).<br>&#123;ok,hello&#125;<br><span class="hljs-number">2</span>&gt; hello:start().<br><span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>第一句是编译这个程序。第二句是执行命令，这就是所有要做的。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="学习语法"><a href="#学习语法" class="headerlink" title="学习语法"></a>学习语法</h2><p>推荐阅读Erlang之父Joe Armstrong编写的<strong>Erlang程序设计</strong>这本书，网上有pdf版本。也可参见<a href="https://suncle.me/2017/08/11/Erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/">Erlang学习笔记1</a>。 </p><p>需要重点掌握Erlang内置数据结构如tuple，list，record，function，case&#x2F;if等知识点的使用。</p><p>此外需要学习以下几项：</p><ol><li>ets</li><li>dets</li><li>gen_tcp</li><li>database</li></ol><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>学习基础语法之后需要做一些练习题，练习题来源有</p><ol><li><strong>Erlang程序设计</strong>书后练习题</li><li><a href="https://www.erlang.org/course/exercises.html">Erlang 官方练习题</a></li><li>常用oj上的简单算法题使用Erlang实现</li></ol><p>后续更新一些习题（<strong>挖坑</strong>）</p><h1 id="OTP"><a href="#OTP" class="headerlink" title="OTP"></a>OTP</h1><p>什么是OTP？和Erlang的区别是什么？</p><blockquote><p>OTP即Open Telecom Platform（开放电信平台），不用理会OTP的名称，OTP的本质是一个应用程序操作系统，还包含大量库和程序用来构建大规模的分布式容错系统（这就是OTP的目的）。使用OTP写程序关键在于OTP中的行为（即behavior）。一个行为封装了某种常见的行为模糊。可以把这些行为理解为常见的编程套件，或者程序框架，只是使用这些框架方式是通过回调模块。</p><p>直接使用Erlang原语而不使用OTP编写Erlang程序是完全可行的，只是需要自己考虑容错、扩容和动态代码升级等等非功能性特性。也就是使用OTP编写Erlang程序，OTP的行为解决问题的非功能性部分，功能性的部分留给程序猿根据业务自己写回调模块来实现——因为对于所有的系统来说，非功能性的部分都是一样的。</p></blockquote><p>需要掌握的OTP常见的行为有：</p><ol><li>gen_server：服务器&#x2F;客户端模型</li><li>supervisor：监控树</li><li>application：应用</li><li>gen_fsm：有限状态机</li><li>gen_event：事件处理器</li></ol><p>掌握前三项就可以写普通的服务，包括tcp，http服务，amqp消息处理的服务等等。</p><h1 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h1><p>分为使用rebar从零构建Erlang项目和调试打包发布这2块。</p><h2 id="使用rebar从零构建Erlang项目"><a href="#使用rebar从零构建Erlang项目" class="headerlink" title="使用rebar从零构建Erlang项目"></a>使用rebar从零构建Erlang项目</h2><p>开发环境推荐使用IDEA + Erlang + rebar:</p><ul><li>Erlang&#x2F;OTP语言</li><li>rebar工具构建Erlang项目</li><li>IDE选择IDEA</li></ul><p>OTP的application构建时需要遵循一定的约定来组织项目，具体的约定参考：<a href="https://www.erlang.org/doc/design_principles/applications.html">OTP应用设计原则</a>。rebar遵循OTP设计原则，因此rebar构建的项目目录需要下列子文件夹：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake">─ <span class="hljs-variable">$&#123;application&#125;</span><br>      ├── doc<br>      ├── <span class="hljs-keyword">include</span><br>      ├── priv<br>      ├── src<br>      │   └── <span class="hljs-variable">$&#123;application&#125;</span>.app.src<br>      └── <span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p>rebar具体的构建方法参见：<a href="https://www.cnblogs.com/panfeng412/archive/2011/08/14/compile-erlang-with-rebar.html"><strong>Rebar：Erlang构建工具</strong></a></p><p>构建完成之后，加上自己编写的模块，一个完整的Erlang示例项目目录结构如下（有省略）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cdn_gateway<br>├── app<span class="hljs-selector-class">.config</span><br>├── build<br>├── cdn_gateway<span class="hljs-selector-class">.cmd</span><br>├── cdn_gateway<span class="hljs-selector-class">.iml</span><br>├── deps<br>│   ├── amqp_client<br>│   ├── erldis<br>│   ├── goldrush<br>│   ├── lager<br>│   ├── meck<br>│   ├── rabbit_common<br>│   └── rfc4627_jsonrpc<br>├── ebin<br>├── include<br>├── Makefile<br>├── priv<br>├── rebar<span class="hljs-selector-class">.config</span><br>├── rel<br>├── reltool<span class="hljs-selector-class">.config</span><br>├── run<span class="hljs-selector-class">.bat</span><br>├── <span class="hljs-attribute">src</span><br>│   ├── cdn_gateway_app<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gateway<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.src</span><br>│   ├── cdn_gateway<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gateway<span class="hljs-selector-class">.hrl</span><br>│   ├── cdn_gateway_sup<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_amqp_agent<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_cluster<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_http_acceptor<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_live_operator<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_live_plan_auth_mgr<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_live_plan_online_mgr<span class="hljs-selector-class">.erl</span><br>│   ├── cdn_gw_notice_http_handler<span class="hljs-selector-class">.erl</span><br>│   └── cdn_gw_notice_http_handler_sup<span class="hljs-selector-class">.erl</span><br>└── vm<span class="hljs-selector-class">.args</span><br><br><span class="hljs-number">211</span> directories, <span class="hljs-number">1799</span> files<br><br></code></pre></td></tr></table></figure><h2 id="调试打包"><a href="#调试打包" class="headerlink" title="调试打包"></a>调试打包</h2><p>调试脚本run.bat的功能主要是编译源代码，开启Erlang shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">call rebar compile skip_deps=<span class="hljs-literal">true</span><br><span class="hljs-built_in">cd</span> ..<br>start werl -name cdn_gateway@127.0.0.1 -setcookie cdn_gateway -pa cdn_gateway\ebin cdn_gateway\deps\amqp_client\ebin cdn_gateway\deps\qk_ipdb\ebin cdn_gateway\deps\erldis\ebin cdn_gateway\deps\gen_server3\ebin cdn_gateway\deps\goldrush\ebin deps\mysql_agent\ebin cdn_gateway\deps\lager\ebin cdn_gateway\deps\mysql\ebin cdn_gateway\deps\pb\ebin cdn_gateway\deps\protobuffs\ebin cdn_gateway\deps\qukan_lib\ebin cdn_gateway\deps\rabbit_common\ebin cdn_gateway\deps\rfc4627_jsonrpc\ebin cdn_gateway\deps\qk_odbc_pool\ebin cdn_gateway\deps\qk_json\ebin -s cdn_gateway<br><span class="hljs-built_in">cd</span> cdn_gateway<br></code></pre></td></tr></table></figure><p>打包的makefile文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs makefile">node_name := cdn_gateway<br><br><span class="hljs-section">release:</span><br>rm -rf deps<br>rm -rf test/logs<br>rm -rf build<br>rm -f test/*.beam<br>rebar clean<br>rebar get-deps compile ct<br>mkdir -p ./build/<span class="hljs-variable">$(node_name)</span>;cp -rf ./ebin ./build/<span class="hljs-variable">$(node_name)</span>/;cp -rf ./priv ./build/<span class="hljs-variable">$(node_name)</span>/;cp -rf ./<span class="hljs-keyword">include</span> ./build/<span class="hljs-variable">$(node_name)</span>/<br>mkdir -p ./rel;cd ./rel;rm -rf *;rebar create-node nodeid=<span class="hljs-variable">$(node_name)</span>;cp ../reltool.config ./;rebar generate;tar -cjf <span class="hljs-variable">$(node_name)</span>.tar.bz2 <span class="hljs-variable">$(node_name)</span><br>mkdir -p ../build_linux<br>mv rel/<span class="hljs-variable">$(node_name)</span>.tar.bz2 ../build_linux<br></code></pre></td></tr></table></figure><p>windows上调试，打包最好再对应的生产环境系统（比如ubuntu16.04）中打包，避免有坑。</p><hr><p>参考：</p><ul><li><a href="https://www.yuanmas.com/info/nmaW66VBz3.html">erlang工作前新手学习指引路线</a></li><li><a href="https://blog.csdn.net/wwh578867817/article/details/49774169">Erlang 中的并发 – Actor 模型</a></li><li><a href="https://yq.aliyun.com/articles/83126">云栖社区-Erlang入门（二）—并发编程</a></li><li><a href="https://yq.aliyun.com/articles/229322?spm=5176.8067842.tagmain.121.dwjreE">为什么我们放弃了Erlang技术栈</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>erlang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Erlang</tag>
      
      <tag>总结</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unix domain socket</title>
    <link href="/2017/12/11/unix-domain-socket/"/>
    <url>/2017/12/11/unix-domain-socket/</url>
    
    <content type="html"><![CDATA[<h1 id="unix-domain-socket"><a href="#unix-domain-socket" class="headerlink" title="unix domain socket"></a>unix domain socket</h1><p>unix domain socket 是在socket架构上发展起来的用于同一台主机的进程间通讯（IPC: Inter-Process Communication），它不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。UNIX Domain Socket有SOCK_DGRAM或SOCK_STREAM两种工作模式，类似于UDP和TCP，但是面向消息的UNIX Domain Socket也是可靠的，消息既不会丢失也不会顺序错乱。</p><p>UNIX Domain Socket可用于两个没有亲缘关系的进程，是全双工的，是目前使用最广泛的IPC机制，比如X Window服务器和GUI程序之间就是通过UNIX Domain Socket通讯的。</p><p>UNIX Domain socket与网络socket类似，可以与网络socket对比应用。</p><p>上述二者编程的不同如下：</p><ul><li>address family为AF_UNIX</li><li>因为应用于IPC，所以UNIXDomain socket不需要IP和端口，取而代之的是文件路径来表示“网络地址”。这点体现在下面两个方面。</li><li>地址格式不同，UNIXDomain socket用结构体sockaddr_un表示，是一个socket类型的文件在文件系统中的路径，这个socket文件由bind()调用创建，如果调用bind()时该文件已存在，则bind()错误返回。</li><li>UNIX Domain Socket客户端一般要显式调用bind函数，而不象网络socket一样依赖系统自动分配的地址。客户端bind的socket文件名可以包含客户端的pid，这样服务器就可以区分不同的客户端。</li></ul><p>下面用python代码演示uds的使用</p><span id="more"></span><h1 id="Python代码演示"><a href="#Python代码演示" class="headerlink" title="Python代码演示"></a>Python代码演示</h1><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 12/11/17 11:55 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: socket_echo_server_uds</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><br>server_address = <span class="hljs-string">&#x27;./uds_socket&#x27;</span><br><br><span class="hljs-comment"># Make sure the socket does not already exist</span><br><span class="hljs-keyword">try</span>:<br>    os.unlink(server_address)<br><span class="hljs-keyword">except</span> OSError:<br>    <span class="hljs-keyword">if</span> os.path.exists(server_address):<br>        <span class="hljs-keyword">raise</span><br><br><span class="hljs-comment"># Create a UDS socket</span><br>sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)<br><br><span class="hljs-comment"># Bind the socket to the address</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;starting up on &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(server_address))<br>sock.bind(server_address)<br><br><span class="hljs-comment"># Listen for incoming connections</span><br>sock.listen(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># Wait for a connection</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;waiting for a connection&#x27;</span>)<br>    connection, client_address = sock.accept()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;connection from&#x27;</span>, client_address)<br><br>        <span class="hljs-comment"># Receive the data in small chunks and retransmit it</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = connection.recv(<span class="hljs-number">16</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;received &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data))<br>            <span class="hljs-keyword">if</span> data:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sending data back to the client&#x27;</span>)<br>                connection.sendall(data)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no data from&#x27;</span>, client_address)<br>                <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># Clean up the connection</span><br>        connection.close()<br><br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 12/11/17 11:55 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: socket_echo_client_uds</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># Create a UDS socket</span><br>sock = socket.socket(family=socket.AF_UNIX, <span class="hljs-built_in">type</span>=socket.SOCK_STREAM)<br><br><span class="hljs-comment"># Connect the socket to the port where the server is listening</span><br>server_address = <span class="hljs-string">&#x27;./uds_socket&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;connecting to &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(server_address))<br><span class="hljs-keyword">try</span>:<br>    sock.connect(server_address)<br><span class="hljs-keyword">except</span> socket.error <span class="hljs-keyword">as</span> msg:<br>    <span class="hljs-built_in">print</span>(msg)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">try</span>:<br><br>    <span class="hljs-comment"># Send data</span><br>    message = <span class="hljs-string">b&#x27;This is the message.  It will be repeated.&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sending &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(message))<br>    sock.sendall(message)<br><br>    amount_received = <span class="hljs-number">0</span><br>    amount_expected = <span class="hljs-built_in">len</span>(message)<br><br>    <span class="hljs-keyword">while</span> amount_received &lt; amount_expected:<br>        data = sock.recv(<span class="hljs-number">16</span>)<br>        amount_received += <span class="hljs-built_in">len</span>(data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;received &#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data))<br><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;closing socket&#x27;</span>)<br>    sock.close()<br><br></code></pre></td></tr></table></figure><p>客户端一次发送，服务端分批返回。</p><p>服务端输出结果如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">root@ubuntu:~/PycharmProjects/python_scripts<span class="hljs-comment"># python socket_echo_server_uds.py </span><br>starting up <span class="hljs-keyword">on</span> ./<span class="hljs-title">uds_socket</span><br>waiting <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> connection<br>(<span class="hljs-string">&#x27;connection from&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>received <span class="hljs-string">&#x27;This is the mess&#x27;</span><br>sending data back <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> client<br>received <span class="hljs-string">&#x27;age.  It will be&#x27;</span><br>sending data back <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> client<br>received <span class="hljs-string">&#x27; repeated.&#x27;</span><br>sending data back <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> client<br>received <span class="hljs-string">&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;no data from&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>waiting <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> connection<br></code></pre></td></tr></table></figure><p>客户端输出结果如下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/PycharmProjects/python_scripts</span><span class="hljs-comment"># python socket_echo_client_uds.py </span><br>connecting to ./uds_socket<br>sending <span class="hljs-string">&#x27;This is the message.  It will be repeated.&#x27;</span><br>received <span class="hljs-string">&#x27;This is the mess&#x27;</span><br>received <span class="hljs-string">&#x27;age.  It will be&#x27;</span><br>received <span class="hljs-string">&#x27; repeated.&#x27;</span><br>closing socket<br></code></pre></td></tr></table></figure><p>查看套接字文件的类型如下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/PycharmProjects/python_scripts</span><span class="hljs-comment"># ls -l ./uds_socket</span><br>srwxr-xr-x <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span> ./uds_socket<br></code></pre></td></tr></table></figure><p>可见<strong>uds文件是socket类型</strong>。具体的linux文件类型有以下几种：</p><p>Linux的文件类型有以下几种:</p><table><thead><tr><th>文件类型</th><th><code>ls -l</code>显示</th></tr></thead><tbody><tr><td>普通文件</td><td><code>-</code></td></tr><tr><td>目录</td><td><code>d</code></td></tr><tr><td>符号链接</td><td><code>l</code></td></tr><tr><td>字符设备</td><td><code>c</code></td></tr><tr><td>块设备</td><td><code>b</code></td></tr><tr><td>套接字</td><td><code>s</code></td></tr><tr><td>命名管道</td><td><code>p</code></td></tr></tbody></table><hr><p><strong>参考：</strong></p><ul><li><a href="https://blog.csdn.net/taiyang1987912/article/details/46774319">Python实例浅谈之九使用本地socket文件</a></li><li><a href="https://blog.csdn.net/guxch/article/details/7041052">Linux下的IPC－UNIX Domain Socket</a></li><li><a href="https://pymotw.com/3/socket/uds.html">pymotw3 unix domain socket</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
      <tag>unix</tag>
      
      <tag>IPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Erlang设计原则Behaviour</title>
    <link href="/2017/11/20/erlang%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99behaviour/"/>
    <url>/2017/11/20/erlang%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99behaviour/</url>
    
    <content type="html"><![CDATA[<p>标准 Erlang&#x2F;OTP 行为有</p><table><thead><tr><th>Behaviour</th><th>功能</th></tr></thead><tbody><tr><td>gen_server</td><td>用于实现 C&#x2F;S 结构中的服务端</td></tr><tr><td>gen_fsm</td><td>用于实现有限状态机</td></tr><tr><td>gen_event</td><td>用于实现事件处理功能</td></tr><tr><td>supervisor</td><td>用于实现监督树中的督程</td></tr><tr><td>gen_statem</td><td>新版本中的有限状态机实现</td></tr></tbody></table><p>平时使用最多的是<code>gen_server</code>和<code>supervisor</code></p><h1 id="gen-server"><a href="#gen-server" class="headerlink" title="gen_server"></a>gen_server</h1><p>erlang gen_server的使用：以银行账户服务为例</p><span id="more"></span><p><code>bank_account.erl</code>如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-comment">%%% @author Flowsnow</span><br><span class="hljs-comment">%%% @copyright (C) 2017, &lt;COMPANY&gt;</span><br><span class="hljs-comment">%%% @doc</span><br><span class="hljs-comment">%%% http://www.kongqingquan.com/archives/403</span><br><span class="hljs-comment">%%% @end</span><br><span class="hljs-comment">%%% Created : 13. 十一月 2017 17:19</span><br><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-keyword">-module</span><span class="hljs-params">(bank_account)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;Flowsnow&quot;</span>)</span>.<br><br><span class="hljs-comment">%% 指定behaviour</span><br><span class="hljs-keyword">-behaviour</span><span class="hljs-params">(gen_server)</span>.<br><br><span class="hljs-comment">%% 回调接口</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([init/<span class="hljs-number">1</span>,</span><br><span class="hljs-params">  handle_call/<span class="hljs-number">3</span>,</span><br><span class="hljs-params">  handle_cast/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  handle_info/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  code_change/<span class="hljs-number">3</span>,</span><br><span class="hljs-params">  terminate/<span class="hljs-number">2</span></span><br><span class="hljs-params">])</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([start_link/<span class="hljs-number">3</span>,</span><br><span class="hljs-params">  withdraw/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  deposit/<span class="hljs-number">2</span>,</span><br><span class="hljs-params">  print/<span class="hljs-number">1</span>,</span><br><span class="hljs-params">  stop/<span class="hljs-number">1</span>])</span>.<br><br><span class="hljs-keyword">-record</span><span class="hljs-params">(account,&#123;</span><br><span class="hljs-params">  id :: integer(),      <span class="hljs-comment">%% ID</span></span><br><span class="hljs-params">  name :: string(),     <span class="hljs-comment">%% 帐号名</span></span><br><span class="hljs-params">  money :: integer()    <span class="hljs-comment">%% 帐号余额</span></span><br><span class="hljs-params">&#125;)</span>.<br><br><span class="hljs-keyword">-define</span><span class="hljs-params">(PRINT(Msg)</span>,io:format<span class="hljs-params">(Msg ++ <span class="hljs-string">&quot;\n&quot;</span>)</span>).<br><span class="hljs-keyword">-define</span><span class="hljs-params">(PRINT(Format,Msg)</span>,io:format<span class="hljs-params">(Format ++ <span class="hljs-string">&quot;\n&quot;</span>,Msg)</span>).<br><br><br><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">([Id, Name, Money])</span> -&gt;</span><br>  ?PRINT(<span class="hljs-string">&quot;bank account init,ID:~w,Name:~p,Money:~w&quot;</span>,[Id,Name,Money]),<br>  State = #account&#123;id = Id, name = Name, money = Money&#125;,<br>  &#123;ok,State&#125;.<br><br><span class="hljs-comment">%% asynchronous operation</span><br><span class="hljs-comment">%% handle_cast接收gen_server:cast消息</span><br><span class="hljs-comment">%% 打印帐号信息</span><br><span class="hljs-function"><span class="hljs-title">handle_cast</span><span class="hljs-params">(print, State = #account&#123;id = Id, name = Name, money = Money&#125;)</span> -&gt;</span><br>  ?PRINT(<span class="hljs-string">&quot;account info, id: ~w, name: ~p, money: ~w&quot;</span>, [Id, Name, Money]),<br>  &#123;noreply, State&#125;;<br><span class="hljs-comment">%% 返回stop，进程将停止，调用terminate</span><br><span class="hljs-function"><span class="hljs-title">handle_cast</span><span class="hljs-params">(stop, State)</span> -&gt;</span><br>  ?PRINT(<span class="hljs-string">&quot;handle cast stop&quot;</span>),<br>  &#123;stop, normal, State&#125;.<br><br><span class="hljs-comment">%% synchronous operation</span><br><span class="hljs-comment">%% handle_call接收gen_server:call消息</span><br><span class="hljs-comment">%% 取款</span><br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(&#123;withdraw, Num&#125;, _From, State = #account&#123;name = Name,money = Money&#125;)</span> <span class="hljs-title">when</span> N<span class="hljs-title">um</span> &gt; 0, N<span class="hljs-title">um</span> =&lt; M<span class="hljs-title">oney</span> -&gt;</span><br>  NewMoney = Money - Num,<br>  NewState = State#account&#123;money = NewMoney&#125;,<br>  ?PRINT(<span class="hljs-string">&quot;~p withdraw:~w,NewMoney:~w&quot;</span>,[Name, Num, NewMoney]),<br>  &#123;reply, true, NewState&#125;;<br><span class="hljs-comment">%% 存款</span><br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(&#123;deposit, Num&#125;, _From, State = #account&#123;name = Name,money = Money&#125;)</span> -&gt;</span><br>  NewMoney = Money + Num,<br>  NewState = State#account&#123;money = NewMoney&#125;,<br>  ?PRINT(<span class="hljs-string">&quot;~p withdraw:~w,NewMoney:~w&quot;</span>,[Name, Num, NewMoney]),<br>  &#123;reply, true, NewState&#125;.<br><br><span class="hljs-comment">%% handle_info，处理直接发给进程的消息</span><br><span class="hljs-function"><span class="hljs-title">handle_info</span><span class="hljs-params">(Info, State)</span> -&gt;</span><br>  ?PRINT(<span class="hljs-string">&quot;handle_info receive msg:~p&quot;</span>,[Info]),<br>  &#123;noreply,State&#125;.<br><br><span class="hljs-function"><span class="hljs-title">code_change</span><span class="hljs-params">(_OldVsn, State, _Extra)</span> -&gt;</span><br>  &#123;ok,State&#125;.<br><br><span class="hljs-comment">%% 进程停止时，回调terminate</span><br><span class="hljs-function"><span class="hljs-title">terminate</span><span class="hljs-params">(Reason, #account&#123;id = ID,name = Name,money = Money&#125;)</span> -&gt;</span><br>  ?PRINT(<span class="hljs-string">&quot;process stop,Reason:~p&quot;</span>,[Reason]),<br>  ?PRINT(<span class="hljs-string">&quot;account Info,ID:~w,Name:~p,Money:~w&quot;</span>,[ID,Name,Money]),<br>  ok.<br><br><span class="hljs-comment">%% 开启帐号进程，将回调init/1函数，返回&#123;ok,Pid&#125;</span><br><span class="hljs-function"><span class="hljs-title">start_link</span><span class="hljs-params">(Id, Name, Money)</span> -&gt;</span><br>  gen_server:start_link(&#123;local, ?MODULE&#125;, ?MODULE, [Id, Name, Money], []).<br><br><span class="hljs-function"><span class="hljs-title">withdraw</span><span class="hljs-params">(Pid,Num)</span> -&gt;</span><br>  gen_server:call(Pid,&#123;withdraw,Num&#125;).<br><br><span class="hljs-function"><span class="hljs-title">deposit</span><span class="hljs-params">(Pid,Num)</span> -&gt;</span><br>  gen_server:call(Pid,&#123;deposit,Num&#125;).<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(Pid)</span> -&gt;</span><br>  gen_server:cast(Pid,print).<br><br><span class="hljs-function"><span class="hljs-title">stop</span><span class="hljs-params">(Pid)</span> -&gt;</span><br>  gen_server:cast(Pid,stop).<br></code></pre></td></tr></table></figure><h1 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h1><p><strong>SupFlags参数{Type, Times, Sec}</strong></p><ul><li>Type: 重启策略<ul><li>one_for_one: 一个子进程终止，只重启该进程，在init的时候会启动参数内的子进程</li><li>simple_one_for_one: 同one_for_one，但是在init的时候不会启动子进程，需要动态调用启动</li><li>one_for_all: 一个子进程终止，将重启所有子进程</li><li>rest_for_one: 一个子进程终止，将按顺序重启这个子进程和之后顺序的子进程</li></ul></li><li>Times: 次数(监控频率)</li><li>Sec: 秒数(监控频率)，如果在Sec秒内重启次数超过Times，则终止所有进程，并终止监控树，将由父进程决定它的命运</li></ul><p><strong>ChildSpec参数{Id, StartFunc, Restart, Shutdown, Type, Modules}</strong></p><ul><li>Id 子进程ID标识符</li><li>StartFunc &#x3D; {M, F, A}: 子程序启动入口</li><li>Restart: 重启方案<ul><li><code>permanent</code>: 如果app终止了，整个系统都会停止工作（application:stop&#x2F;1除外）。</li><li><code>transient</code>: 如果app以normal的原因终止，没有影响。任何其它终止原因都谁导致整个系统关闭。</li><li><code>temporary</code>: app可以以任何原因终止。只产生报告，没有其它任何影响。</li></ul></li><li>Shutdown: 终止策略<ul><li><code>brutal_kill</code>: 无条件终止</li><li>超时值(毫秒): 终止时，如果超时，则强制终止</li><li><code>infinity</code>: 如果子进程是监控树，设置为无限大，等待其终止为止</li></ul></li><li>Type:<ul><li><code>worker</code>: 普通子进程</li><li><code>supervisor</code>: 子进程是监控树</li></ul></li><li>Modules:<ul><li><code>dynamic</code>: 当子进程是gen_event</li><li><code>[Module]</code>: 当子进程是监控树、gen_server或者gen_fsm，表示回调模块名称</li></ul></li></ul><p>使用宏定义解决重复的ChildSpec指定：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-define</span><span class="hljs-params">(CHILD(I, Type)</span>, &#123;I, &#123;I, start_link, []&#125;, permanent, 5000, Type, [I]&#125;).<br></code></pre></td></tr></table></figure><p><strong>cdn控制服务器的sup模块示例</strong>如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(control_server_sup)</span>.<br><br><span class="hljs-keyword">-behaviour</span><span class="hljs-params">(supervisor)</span>.<br><span class="hljs-keyword">-include</span><span class="hljs-params">(<span class="hljs-string">&quot;ctrl_internal.hrl&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([start_link/<span class="hljs-number">0</span>, start_child/<span class="hljs-number">0</span>])</span>.<br><br><span class="hljs-comment">%% Supervisor callbacks</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([init/<span class="hljs-number">1</span>])</span>.<br><br><span class="hljs-comment">%% Helper macro for declaring children of supervisor</span><br><span class="hljs-keyword">-define</span><span class="hljs-params">(CHILD(I, Type)</span>, &#123;I, &#123;I, start_link, []&#125;, permanent, 5000, Type, [I]&#125;).<br><br><span class="hljs-comment">%% ===================================================================</span><br><span class="hljs-comment">%% API functions</span><br><span class="hljs-comment">%% ===================================================================</span><br><br><span class="hljs-function"><span class="hljs-title">start_link</span><span class="hljs-params">()</span> -&gt;</span><br>  supervisor:start_link(&#123;local, ?MODULE&#125;, ?MODULE, []).<br><br><span class="hljs-function"><span class="hljs-title">start_child</span><span class="hljs-params">()</span> -&gt;</span><br>  supervisor:start_child(?MODULE, ?CHILD(ctrl_concurrency_mgr, worker)),<br>  supervisor:start_child(?MODULE, ?CHILD(ctrl_hls_writer_mgr, worker)),<br>  supervisor:start_child(?MODULE, ?CHILD(ctrl_record_writer_mgr, worker)),<br>  supervisor:start_child(?MODULE, ?CHILD(ctrl_live_mgr, worker)),<br>  supervisor:start_child(?MODULE, ?CHILD(ctrl_live_analyser_mgr, worker)).<br><br><span class="hljs-comment">%% ===================================================================</span><br><span class="hljs-comment">%% Supervisor callbacks</span><br><span class="hljs-comment">%% ===================================================================</span><br><br><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">([])</span> -&gt;</span><br>  timer:apply_after(<span class="hljs-number">1000</span>, control_server_sup, start_child, []),<br>  &#123;ok, ErlOdbcConnectStr&#125; = application:get_env(erl_odbc_connect_str),<br>  &#123;ok, _&#125; = qk_odbc_pool:start_odbc_pool(?ERL_ODBC_POOL_ID, ErlOdbcConnectStr, <span class="hljs-number">1</span>),<br>  Children = [<br>    ?CHILD(ctrl_cluster, worker),<br>    ?CHILD(ctrl_plan, worker),<br>    ?CHILD(ctrl_amqp_agent, worker)<br>  ],<br>  &#123;ok, &#123;&#123;one_for_one, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>&#125;, Children&#125;&#125;.<br><br><br></code></pre></td></tr></table></figure><p>start_child动态添加子进程和start_link添加的监控树的区别在于：监控树退出并重启后，动态添加的子进程会丢失。</p><hr><p>参考：</p><ol><li><a href="http://erlang.group.iteye.com/group/wiki/1451-otp-design-principles-gen_server-behaviour">OTP Design Principles: Gen_Server Behaviour</a></li><li><a href="https://www.erlang.org/doc/design_principles/sup_princ.html">Erlang-Supervisor Behaviour</a></li><li><a href="http://erlang.group.iteye.com/group/wiki/1454-otp-design-principles-supervisor-behaviour">OTP Design Principles: Supervisor Behaviour</a></li><li><a href="https://www.cnblogs.com/rond/p/6234765.html">erlang supervisor(监控树)的重启策略</a></li><li><a href="http://www.0x01f.com/post/OTP_Design_Principle_3/">OTP设计原则——第三部分</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>erlang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Erlang</tag>
      
      <tag>OTP</tag>
      
      <tag>Behaviour</tag>
      
      <tag>gen_server</tag>
      
      <tag>supervisor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python单元测试</title>
    <link href="/2017/11/14/python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2017/11/14/python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>什么是单元测试, 维基百科上是这么定义的： unit testing is a method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine if they are fit for use.[1] Intuitively, one can view a unit as the smallest testable part of an application. 简而言之，就是验证系统中最小可测试单元的功能是否正确的自动化测试。因此，单元测试的目地就是“对被测试对象的职责进行验证”, 在写单元测试之前，先识别出被测试对象的职责，就知道该怎么写这个单元测试了。</p><p>根据被测试对象，单元测试可以分为两大类：</p><ul><li>对不依赖于外部资源的组件的单元测试：使用unittest基本功能即可</li><li>对依赖于外部资源的组件的单元测试：需要使用mock</li></ul><span id="more"></span><h1 id="unittest使用"><a href="#unittest使用" class="headerlink" title="unittest使用"></a>unittest使用</h1><p>python单元测试库unittest的基本使用参见<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143191629979802b566644aa84656b50cd484ec4a7838000">廖雪峰Python单元测试</a></p><p>具体使用参考以下资料</p><ol><li><a href="https://pm.readthedocs.io/unittest/python.html">Python中的单元测试</a></li><li><a href="http://ningning.today/2016/11/22/python/flask-unittest/">ningning.today-flask项目单元测试实践</a></li><li><a href="https://docs.python.org/2/library/unittest.html">Python unittest官方文档</a></li><li><a href="https://wiki.jikexueyuan.com/project/explore-python/Testing/README.html">极客学院-单元测试</a></li><li><a href="http://nicholas.ren/2012/10/21/my-understanding-on-unit-testing.html">nicholas-怎样写单元测试</a></li></ol><h1 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h1><p>为什么要用mock？</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/blog/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95mock%E5%A4%A7%E7%89%9B%E5%9B%9E%E5%A4%8D.png"></p><p>看了很多篇mock的讲解，写的最好的一篇是[<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">Naftuli Kay-An Introduction to Mocking in Python</a>，以删除文件为例组成深入讲解mock的使用。其他资料可以参见：</p><ol><li><a href="http://andrewliu.in/2015/12/12/Python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8CMock%E6%B5%8B%E8%AF%95/">Python单元测试和Mock测试</a></li><li><a href="http://www.voidspace.org.uk/python/mock/helpers.html#autospeccing">mock-autospec</a></li></ol><p>仿照这篇文章改写qk_log日志模块，qk_log.py代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> logging.handlers<br><br>_console_logger = <span class="hljs-literal">None</span><br>_warn_logger = <span class="hljs-literal">None</span><br>_error_logger = <span class="hljs-literal">None</span><br><br>CONSOLE_FILENAME = <span class="hljs-string">&#x27;log/console.log&#x27;</span><br>WARNING_FILENAME = <span class="hljs-string">&#x27;log/warn.log&#x27;</span><br>ERROR_FILENAME = <span class="hljs-string">&#x27;log/error.log&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log_init</span>():<br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;log/&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        os.mkdir(<span class="hljs-string">&#x27;log/&#x27;</span>)<br>    <span class="hljs-keyword">global</span> _console_logger, _warn_logger, _error_logger<br>    handler = logging.handlers.RotatingFileHandler(<br>        CONSOLE_FILENAME, maxBytes=<span class="hljs-number">20</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>, backupCount=<span class="hljs-number">5</span>)<br>    hdr = logging.StreamHandler()<br>    _console_logger = logging.getLogger(<span class="hljs-string">&#x27;debug&#x27;</span>)<br>    _console_logger.addHandler(handler)<br>    _console_logger.addHandler(hdr)<br>    _console_logger.setLevel(logging.DEBUG)<br><br>    handler = logging.handlers.RotatingFileHandler(<br>        WARNING_FILENAME, maxBytes=<span class="hljs-number">20</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>, backupCount=<span class="hljs-number">5</span>)<br>    hdr = logging.StreamHandler()<br>    _warn_logger = logging.getLogger(<span class="hljs-string">&#x27;warn&#x27;</span>)<br>    _warn_logger.addHandler(handler)<br>    _warn_logger.addHandler(hdr)<br>    _warn_logger.setLevel(logging.WARN)<br><br>    handler = logging.handlers.RotatingFileHandler(<br>        ERROR_FILENAME, maxBytes=<span class="hljs-number">20</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>, backupCount=<span class="hljs-number">5</span>)<br>    hdr = logging.StreamHandler()<br>    _error_logger = logging.getLogger(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    _error_logger.addHandler(handler)<br>    _error_logger.addHandler(hdr)<br>    _error_logger.setLevel(logging.ERROR)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dlog</span>(<span class="hljs-params">msg</span>):<br>    file_name, file_no, unused = find_caler()<br>    time_str = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    _console_logger.debug(<span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (time_str, <span class="hljs-string">&#x27;debug&#x27;</span>, file_name, file_no, msg))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ilog</span>(<span class="hljs-params">msg</span>):<br>    file_name, file_no, unused = find_caler()<br>    time_str = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    _console_logger.info(<span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (time_str, <span class="hljs-string">&#x27;info&#x27;</span>, file_name, file_no, msg))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wlog</span>(<span class="hljs-params">msg</span>):<br>    file_name, file_no, unused = find_caler()<br>    time_str = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    _console_logger.warn(<span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (time_str, <span class="hljs-string">&#x27;warning&#x27;</span>, file_name, file_no, msg))<br>    _warn_logger.warn(<span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (time_str, <span class="hljs-string">&#x27;warning&#x27;</span>, file_name, file_no, msg))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">elog</span>(<span class="hljs-params">msg</span>):<br>    file_name, file_no, unused = find_caler()<br>    time_str = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    _console_logger.error(<span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (time_str, <span class="hljs-string">&#x27;error&#x27;</span>, file_name, file_no, msg))<br>    _error_logger.error(<span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (time_str, <span class="hljs-string">&#x27;error&#x27;</span>, file_name, file_no, msg))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_caler</span>():<br>    f = sys._getframe(<span class="hljs-number">2</span>)<br>    co = f.f_code<br>    <span class="hljs-keyword">return</span> (os.path.basename(co.co_filename), f.f_lineno, co.co_name) <span class="hljs-keyword">if</span> co != <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> (<span class="hljs-string">&#x27;unknown&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;unknown&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    log_init()<br>    dlog(<span class="hljs-string">&#x27;test.log %d&#x27;</span>%(<span class="hljs-number">123</span>))<br>    ilog(<span class="hljs-string">&#x27;test.log %d&#x27;</span> % (<span class="hljs-number">123</span>))<br>    wlog(<span class="hljs-string">&#x27;test.log %d&#x27;</span> % (<span class="hljs-number">123</span>))<br>    elog(<span class="hljs-string">&#x27;test.log %d&#x27;</span> % (<span class="hljs-number">123</span>))<br><br></code></pre></td></tr></table></figure><p>单元测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 10/10/17 11:27 AM</span><br><span class="hljs-string">@author: Chen Liang</span><br><span class="hljs-string">@function: 日志模块  单元测试</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> sys<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">import</span> mock<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> qk_log <span class="hljs-keyword">import</span> log_init, dlog, ilog, wlog, elog<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestQkLog</span>(unittest.TestCase):<br>    dt_str = datetime.datetime.strptime(<span class="hljs-string">&#x27;2017-10-11 11:08:59&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.os.path&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.datetime.datetime&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.logging&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.find_caler&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_dlog</span>(<span class="hljs-params">self, mock_caler, mock_logging, mock_datetime, mock_path</span>):<br>        mock_path.exists.return_value = <span class="hljs-literal">True</span><br>        log_init()<br>        self.assertFalse(mock_logging.getLogger(<span class="hljs-string">&#x27;debug&#x27;</span>).debug.called, <span class="hljs-string">&quot;Failed to not write log.&quot;</span>)<br><br>        mock_caler.return_value = (<span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        mock_datetime.now.return_value = self.dt_str<br>        dlog(<span class="hljs-string">&#x27;any msg&#x27;</span>)<br>        mock_logging.getLogger(<span class="hljs-string">&#x27;debug&#x27;</span>).debug.assert_called_with(<br>            <span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (<span class="hljs-string">&#x27;2017-10-11 11:08:59&#x27;</span>, <span class="hljs-string">&#x27;debug&#x27;</span>, <span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;any msg&#x27;</span>))<br><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.os.path&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.datetime.datetime&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.logging&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.find_caler&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_ilog</span>(<span class="hljs-params">self, mock_caler, mock_logging, mock_datetime, mock_path</span>):<br>        mock_path.exists.return_value = <span class="hljs-literal">True</span><br>        log_init()<br>        self.assertFalse(mock_logging.getLogger(<span class="hljs-string">&#x27;debug&#x27;</span>).info.called, <span class="hljs-string">&quot;Failed to not write log.&quot;</span>)<br>        mock_caler.return_value = (<span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        mock_datetime.now.return_value = self.dt_str<br>        ilog(<span class="hljs-string">&#x27;any msg&#x27;</span>)<br>        mock_logging.getLogger(<span class="hljs-string">&#x27;debug&#x27;</span>).info.assert_called_with(<br>            <span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (<span class="hljs-string">&#x27;2017-10-11 11:08:59&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;any msg&#x27;</span>))<br><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.os.path&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.datetime.datetime&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.logging&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.find_caler&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_wlog</span>(<span class="hljs-params">self, mock_caler, mock_logging, mock_datetime, mock_path</span>):<br>        mock_path.exists.return_value = <span class="hljs-literal">True</span><br>        log_init()<br>        self.assertFalse(mock_logging.getLogger(<span class="hljs-string">&#x27;warn&#x27;</span>).info.called, <span class="hljs-string">&quot;Failed to not write log.&quot;</span>)<br>        mock_caler.return_value = (<span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        mock_datetime.now.return_value = self.dt_str<br>        wlog(<span class="hljs-string">&#x27;any msg&#x27;</span>)<br>        mock_logging.getLogger(<span class="hljs-string">&#x27;warn&#x27;</span>).warn.assert_called_with(<br>            <span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (<span class="hljs-string">&#x27;2017-10-11 11:08:59&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;any msg&#x27;</span>))<br><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.os.path&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.datetime.datetime&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.logging&#x27;</span></span>)</span><br><span class="hljs-meta">    @mock.patch(<span class="hljs-params"><span class="hljs-string">&#x27;qk_log.find_caler&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_elog</span>(<span class="hljs-params">self, mock_caler, mock_logging, mock_datetime, mock_path</span>):<br>        mock_path.exists.return_value = <span class="hljs-literal">True</span><br>        log_init()<br>        self.assertFalse(mock_logging.getLogger(<span class="hljs-string">&#x27;error&#x27;</span>).info.called, <span class="hljs-string">&quot;Failed to not write log.&quot;</span>)<br>        mock_caler.return_value = (<span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        mock_datetime.now.return_value = self.dt_str<br>        elog(<span class="hljs-string">&#x27;any msg&#x27;</span>)<br>        mock_logging.getLogger(<span class="hljs-string">&#x27;error&#x27;</span>).error.assert_called_with(<br>            <span class="hljs-string">&#x27;[%s] [%s] [%s,%d] %s&#x27;</span> % (<span class="hljs-string">&#x27;2017-10-11 11:08:59&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;qk_log_test&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;any msg&#x27;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br><br></code></pre></td></tr></table></figure><h1 id="对单元测试的看法"><a href="#对单元测试的看法" class="headerlink" title="对单元测试的看法"></a>对单元测试的看法</h1><p>在一次整体改造Python数据统计分析项目时打算引进单元测试，在写完公共库的单元测试之后发现花费在单元测试上的时间较多，而且公共库不常改动，业务逻辑有比较混乱，因此团队决定放弃单元测试。对于以快速上线的初创公司和初创团队的项目来说，可以不用急着写单元测试，因为在一切改动都可能发生的情况下，再代码丢弃的时候对应的单元测试也就被丢弃了，浪费了过多的人力。</p><p>因此，初创团队不建议写单元测试，做好程序埋点和监控报警即可。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灵魂独旅之壮美黄山</title>
    <link href="/2017/11/13/%E7%81%B5%E9%AD%82%E7%8B%AC%E6%97%85%E4%B9%8B%E5%A3%AE%E7%BE%8E%E9%BB%84%E5%B1%B1/"/>
    <url>/2017/11/13/%E7%81%B5%E9%AD%82%E7%8B%AC%E6%97%85%E4%B9%8B%E5%A3%AE%E7%BE%8E%E9%BB%84%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p>越来越喜欢一个人到处走走，没有目的，没有理由，说走就走，到未曾到过的远方，散散步，也散散心，给充实而又枯燥的生活添加一点内心深处独有的染色剂。</p><p>出行的前一天下午才临时决定买的票，本以为会有一个晚上的时间去准备出行的相关事宜，忙碌了一天后，临下班又来了紧急的任务，等到回去的时候不知不觉已经很晚很晚，晚到都没有时间去填充双十一的购物车。现在回想起来，都不知道为什么3点才开始睡觉，虽然只休息了两个小时，但也不觉得有困意，带着期待的心情，早早出门，开始美好周末的旅行。</p><p>一直以来，恐高症都非常的严重，坐在缆车上会觉得随时都会掉下去，也完全不敢回头看黄山的深谷，但是这些都阻挡不了我登山的脚步，我会用足迹证明nothing is impossible。</p><p><strong>关于奇松</strong>，虚胖浮肿的身体，爬数百米的台阶早已气喘吁吁，终于，在玉屏锋的左侧见到了黄山五绝之一的迎客松，他就像一位英姿飒爽的老人屹立在嶙峋怪石之中，万丈悬崖之上。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_135436.jpg" alt="IMG_20171111_135436.jpg"></p><span id="more"></span><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_135252.jpg" alt="IMG_20171111_135252.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_141045.jpg" alt="IMG_20171111_141045.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_135837.jpg" alt="IMG_20171111_135837.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_142348.jpg" alt="IMG_20171111_142348.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_104411.jpg" alt="IMG_20171112_104411.jpg"></p><p><strong>关于怪石</strong>，黄山和华山一样，都是巨大的花岗岩形成的，也只有花岗岩才经受得住上亿年的风吹雨打。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_154926.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_143509.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_142756.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_143742.jpg"></p><p><strong>关于日落</strong>，天气晴朗，日落很美，晚霞很艳丽。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_170159.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_170056.jpg"></p><p>只可惜夜晚山里下起了大雨，第二天凌晨起了个大早却没有看到日出。</p><p><strong>关于云海</strong>，很幸运，由于下雨云雾弥漫整个西海大峡谷，早晨太阳出来的刹那间，整个峡谷宛如在放映山水画卷式的电影。我倚靠在悬崖边的栏杆上，为大自然的神奇所折服。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_084217.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_094542.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_085703.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_085352.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_085131.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_085652.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_092457.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_090152.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_085657.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_085921.jpg"></p><p><strong>关于一览众山小</strong>，始信峰上的视野尤其开阔，远远看去，白云横向切断了蓝天。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_110850.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_110934.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_111118.jpg"></p><p><strong>关于随拍</strong>，总有一些细微处的景色特别的美，却又只能定格在那一瞬间。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_162551.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_162432.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_151729.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171112_105726.jpg"></p><p>从细微处，独自一人过好现在的生活，不负时光，才能对得起那些过去的日子，也才有机会和重要的人一起做还未到来的疯狂又有趣的事情。或许这些就是生活中全部的意义。</p><p>至此，黄山独旅结束。每一次旅行都有一些特殊的收获，感谢旅途中遇到的朋友们，感谢大叔和阿姨，一路上的教诲使我受益匪浅，也明白了怎样才算过好自己的青春，即使已成为大叔，也不要因为一些小事停止脚步而错误万里路上的无限美好。感谢红琳和丹杰，坚持到最后的姑娘最美，也让我意识到自己很多的不足，从此好好锻炼，好好生活，好好睡觉，身体才是最重要的——来自美女医生的劝诫。</p><p>附上红琳和丹杰的照片。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/mmexport1510492408730.jpg" alt="mmexport1510492408730.jpg"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/mmexport1510495348659.jpg" alt="mmexport1510495348659.jpg"></p><p>人只有经历了很长一段时间的独处之后才能明白什么才是最可贵的，人啊，还是群居的好。来自一条单身狗的亲身体验。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/huangshan/IMG_20171111_163323.jpg" alt="IMG_20171111_163323.jpg"></p><hr><p><strong>附</strong></p><p><strong>黄山游玩路线</strong>：</p><ol><li>前山到后山：慈光阁-玉屏峰索道-玉屏峰-鳌鱼峰-光明顶-西海大峡谷-黑虎松-始信峰-白鹅岭-步行下山到云谷寺</li><li>后山到前山：步行线路，山脚-云谷寺-始信峰-西海大峡谷-峡谷缆车-光明顶-玉屏峰-下山-温泉</li></ol><blockquote><p>我知道我还会再来一次黄山，在这里，备下第二条线。</p><p>黄山，请等我来赏冬雪泡温泉。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>灵魂独旅</tag>
      
      <tag>游记</tag>
      
      <tag>黄山</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04安全小结-01</title>
    <link href="/2017/11/10/ubuntu16-04%E5%AE%89%E5%85%A8%E5%B0%8F%E7%BB%93-01/"/>
    <url>/2017/11/10/ubuntu16-04%E5%AE%89%E5%85%A8%E5%B0%8F%E7%BB%93-01/</url>
    
    <content type="html"><![CDATA[<p>本篇主要介绍以下三个部分：</p><ol><li>反病毒引擎clamav的安装和使用</li><li>ubuntu ufw限制访问地址</li><li>ubuntu用户连接失败锁定指定时间</li></ol><span id="more"></span><h1 id="反病毒引擎clamav的安装和使用"><a href="#反病毒引擎clamav的安装和使用" class="headerlink" title="反病毒引擎clamav的安装和使用"></a>反病毒引擎clamav的安装和使用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> ClamAV是一款开源的反病毒引擎，用于检测病毒，特洛伊木马，恶意软件和其他威胁。 它支持多种文件格式（文档，可执行文件或存档），利用多线程扫描器功能，并且每天至少3-4次接收其签名数据库的更新。</p><blockquote><p>Linux发行版并没有太多的病毒，因此大多数使用这种系统的人甚至都懒得使用防病毒软件。 如果确实需要，可以使用ClamAV。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>安装clamav</strong></p><p>安装时需要root权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install clamav<br></code></pre></td></tr></table></figure><p><strong>更新病毒库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">freshclam<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>查看clamav帮助文档</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clamscan --help<br></code></pre></td></tr></table></figure><p><strong>使用clamav扫描系统</strong></p><p>如果要扫描<code>/tmp</code>，则使用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clamscan -r -i /tmp<br></code></pre></td></tr></table></figure><blockquote><p>-r表示递归</p><p>-i只输出被感染文件</p></blockquote><p>如果要全盘扫描，则更换目录为根目录即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clamscan -r -i /tmp<br></code></pre></td></tr></table></figure><p>所有病毒扫描出来之后手动删除，不推荐使用<code>--remove</code>参数直接删除。也可以使用<code>--move</code>参数移动到一个集中的目录。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>示例结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/tmp# clamscan -r -i /tmp<br><br>----------- SCAN SUMMARY -----------<br>Known viruses: 6336991<br>Engine version: 0.99.2<br>Scanned directories: 17<br>Scanned files: 25<br>Infected files: 0<br>Data scanned: 3.95 MB<br>Data read: 2.09 MB (ratio 1.89:1)<br>Time: 20.427 sec (0 m 20 s)<br></code></pre></td></tr></table></figure><p>Infected files字段显示为0，即表示没有感染（一般情况下都不会存在病毒）。</p><h1 id="ubuntu-ufw限制访问地址"><a href="#ubuntu-ufw限制访问地址" class="headerlink" title="ubuntu ufw限制访问地址"></a>ubuntu ufw限制访问地址</h1><h2 id="确保ubuntu防火墙处于活跃状态"><a href="#确保ubuntu防火墙处于活跃状态" class="headerlink" title="确保ubuntu防火墙处于活跃状态"></a>确保ubuntu防火墙处于活跃状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/tmp# ufw status<br>Status: inactive<br>root@ubuntu:/tmp# ufw enable<br>Command may disrupt existing ssh connections. Proceed with operation (y|n)? y<br>Firewall is active and enabled on system startup<br>root@ubuntu:/tmp# ufw status<br>Status: active<br><br>To                         Action      From<br>--                         ------      ----<br>5000                       ALLOW       Anywhere                  <br>5000 (v6)                  ALLOW       Anywhere (v6)  <br></code></pre></td></tr></table></figure><p>ufw处于active状态即表示防火墙处于活跃状态</p><h2 id="禁用指定ip"><a href="#禁用指定ip" class="headerlink" title="禁用指定ip"></a>禁用指定ip</h2><p>使用以下命令禁用指定ip，以192.168.1.45为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/tmp# ufw deny from 192.168.1.45<br>Rule added<br></code></pre></td></tr></table></figure><p>加上之后来自192.168.1.45的新连接是无法连上的，原来已经连上的连接并不受影响。如果需要断开原有连接，需要kill。</p><h2 id="指定ip取消禁用"><a href="#指定ip取消禁用" class="headerlink" title="指定ip取消禁用"></a>指定ip取消禁用</h2><p>使用以下命令取消指定ip的禁用，以192.168.1.45为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/tmp# ufw allow from 192.168.1.45<br>Rule updated<br></code></pre></td></tr></table></figure><p>也可以使用以下命令查看所有的防火墙规则，按照编号删除想删除的规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ufw status numbered<br></code></pre></td></tr></table></figure><p>防火墙的具体使用可以参考后续的参考资料。</p><h1 id="ubuntu用户连接失败锁定指定时间"><a href="#ubuntu用户连接失败锁定指定时间" class="headerlink" title="ubuntu用户连接失败锁定指定时间"></a>ubuntu用户连接失败锁定指定时间</h1><p>faillog命令：With faillog you can lock a user’s account after x number of failed log in attempts.</p><p>具体faillog的选项可以使用以下man命令查看</p><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p><strong>修改 <code>/etc/pam.d/common-auth</code></strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">auth required pam_tally.so per_user magic_root <span class="hljs-attribute">onerr</span>=fail<br></code></pre></td></tr></table></figure><p>在顶部加入上面这句话</p><p><strong>修改<code>vim /etc/pam.d/sshd</code></strong></p><p>在<code>@include common-auth</code>上方添加，如下所示</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">auth required pam_tally.so per_user onerr<span class="hljs-operator">=</span>fail<br><br># Standard Un*<span class="hljs-keyword">x</span> authentication.<br><span class="hljs-title">@include</span> <span class="hljs-keyword">common</span>-auth<br></code></pre></td></tr></table></figure><p><strong>修改<code>etc/ssh/sshd_config</code></strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ChallengeResponseAuthentication</span> <span class="hljs-literal">yes</span><br><br>UsePAM <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>阿里云ubuntu16.04中UsePAM已经默认为yes</p><p><strong>设置失败次数和锁定时长</strong></p><p>使用faillog命令即可，具体使用参见man</p><p>以下命令设定失败三次后锁定用户，锁定时间为3600秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">faillog -m 3 -l 3600<br></code></pre></td></tr></table></figure><p><strong>手动解锁</strong></p><p>root修改为你需要解锁的用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">faillog -u root -r<br></code></pre></td></tr></table></figure><p><strong>查看当前锁定的所有用户即时长等信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">faillog -a<br></code></pre></td></tr></table></figure><p><strong>废除锁定机制</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">faillog -m 0<br></code></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><a href="https://www.howtoing.com/how-to-set-up-a-firewall-with-ufw-on-ubuntu-16-04">如何在Ubuntu 16.04上使用UFW设置防火墙</a></li><li><a href="http://blog.bodhizazen.com/linux/ubuntu-how-to-faillog/">Ubuntu how to faillog</a></li><li><a href="https://www.howtoforge.com/tutorial/clamav-ubuntu/">How to scan for viruses with ClamAV on Ubuntu</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>ubuntu</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新认识HTTP3xx重定向机制</title>
    <link href="/2017/11/08/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86http3xx%E9%87%8D%E5%AE%9A%E5%90%91%E6%9C%BA%E5%88%B6/"/>
    <url>/2017/11/08/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86http3xx%E9%87%8D%E5%AE%9A%E5%90%91%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>前段时间做数据收集时需要下载网宿cdn的日志进行分析。而网宿对日志下载的接口搞得很复杂，又没有提供相应的sdk，只是提供了一个shell脚本，虽然在ubuntu上使用很方便，但是脚本里面的各种重定向分析非常复杂。故此想对重定向在深入了解一点。</p><p><strong>查询网宿日志列表的脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>TMP_FILE=<span class="hljs-string">&quot;/tmp/wslog_query_client.log&quot;</span><br><span class="hljs-comment">#Usage</span><br><span class="hljs-function"><span class="hljs-title">Usage</span></span>() &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;wslog_query_client.sh [query_url] [user] [passwd] [start_time] [end_time] [channels]&quot;</span><br><span class="hljs-built_in">return</span> 0<br>&#125;<br><span class="hljs-comment">#check input parameters</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -eq 1 ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = <span class="hljs-string">&quot;-h&quot;</span> ]; <span class="hljs-keyword">then</span><br>Usage<br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">else</span><br>Usage<br><span class="hljs-built_in">exit</span> -1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$#</span> -ne 6 ]; <span class="hljs-keyword">then</span><br>Usage<br><span class="hljs-built_in">exit</span> -1<br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#params set</span><br>url=<span class="hljs-variable">$1</span><br>user=<span class="hljs-variable">$2</span><br>passwd=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$3</span> | sed <span class="hljs-string">&#x27;s/&amp;/%26/g&#x27;</span> `<br>start_time=<span class="hljs-variable">$4</span><br>end_time=<span class="hljs-variable">$5</span><br>channels=<span class="hljs-variable">$6</span><br><span class="hljs-comment">#access logQuery access API</span><br>curl -s -D <span class="hljs-variable">$TMP_FILE</span> <span class="hljs-variable">$1</span><br><span class="hljs-built_in">cat</span> <span class="hljs-variable">$TMP_FILE</span> | grep <span class="hljs-string">&quot;HTTP/&quot;</span> | grep <span class="hljs-string">&quot;302&quot;</span> &gt; /dev/null<br><span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> -2<br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#redirect to verify url with user and passwd</span><br>TMP_URL=`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$TMP_FILE</span> | grep <span class="hljs-string">&quot;Location: &quot;</span>|sed <span class="hljs-string">&#x27;s/\r//&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/http:/https:/&#x27;</span>`<br>TMP_URL=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TMP_URL&#125;</span>?u=<span class="hljs-variable">$user</span>&amp;p=<span class="hljs-variable">$passwd</span>&amp;channel=<span class="hljs-variable">$channels</span>&quot;</span><br>curl -s -k -D <span class="hljs-variable">$TMP_FILE</span> <span class="hljs-variable">$TMP_URL</span><br><span class="hljs-built_in">cat</span> <span class="hljs-variable">$TMP_FILE</span> | grep <span class="hljs-string">&quot;HTTP/&quot;</span> | grep <span class="hljs-string">&quot;302&quot;</span> &gt; /dev/null<br><span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> -3<br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#redirect to query url with start_time, end_time and channels</span><br>TMP_URL=`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$TMP_FILE</span> | grep <span class="hljs-string">&quot;Location: &quot;</span>|sed <span class="hljs-string">&#x27;s/\r//&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>TMP_URL=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TMP_URL&#125;</span>&amp;start_time=<span class="hljs-variable">$start_time</span>&amp;end_time=<span class="hljs-variable">$end_time</span>&amp;channels=<span class="hljs-variable">$channels</span>&quot;</span><br>curl -s -D <span class="hljs-variable">$TMP_FILE</span> <span class="hljs-variable">$TMP_URL</span><br><span class="hljs-comment">#check query result</span><br><span class="hljs-built_in">cat</span> <span class="hljs-variable">$TMP_FILE</span> | grep <span class="hljs-string">&quot;HTTP/&quot;</span> | grep <span class="hljs-string">&quot;200&quot;</span> &gt; /dev/null<br><span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> <br><span class="hljs-built_in">cat</span> <span class="hljs-variable">$TMP_FILE</span> | grep <span class="hljs-string">&quot;HTTP/&quot;</span> | grep <span class="hljs-string">&quot;404&quot;</span> &gt; /dev/null<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">exit</span> -404<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">exit</span> -4<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><span id="more"></span><p>脚本调用命令和结果（用户名，密码，domain，wskey均已处理，调用结果只有参考作用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@sz3:/tmp# sh /root/wslog_query_client.sh &quot;http://dx.wslog.chinanetcenter.com/logQuery/access&quot; user1 passwd1 2017-08-30-0000 2017-08-30-2359 &quot;rtmp-wsz.enterprise.com&quot;<br>&#123;&quot;logs&quot;: [&#123;&quot;domain&quot;: &quot;rtmp-wsz.enterprise.com&quot;, &quot;files&quot;: [&#123;&quot;size&quot;: 4320, &quot;end_time&quot;: &quot;2017-08-30-1159&quot;, &quot;start_time&quot;: &quot;2017-08-30-0000&quot;, &quot;url&quot;: &quot;http://dx.wslog.chinanetcenter.com/log/qukan/rtmp-wsz.enterprise.com/2017-08-30-0000-1130_rtmp-wsz.enterprise.com.cn.log.gz?wskey=e4030060bdfe9d5600a77726c5900d07aa3adae00e8b2&quot;&#125;, &#123;&quot;size&quot;: 8006, &quot;end_time&quot;: &quot;2017-08-30-2359&quot;, &quot;start_time&quot;: &quot;2017-08-30-1200&quot;, &quot;url&quot;: &quot;http://dx.wslog.chinanetcenter.com/log/qukan/rtmp-wsz.enterprise.com/2017-08-30-1200-2330_rtmp-wsz.enterprise.com.cn.log.gz?wskey=3772006094880e8300a73cc2c59006bfeea33ae00d9da&quot;&#125;]&#125;]&#125;<br></code></pre></td></tr></table></figure><p>脚本的调用过程是根据参数一步一步的进行302重定向，重定向时会依赖于参数，每次重定向依赖的参数都不相同，不仅仅是url跳转，如果直接使用以下http链接则无法跳转到，因此需要按照shell脚本那样一层一层解析。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://dx.wslog.chinanetcenter.com/logQuery/access?user=user1&amp;passwd=passwd1&amp;channels=rtmp-wsz.enterprise.com&amp;start_time=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">30</span>-<span class="hljs-number">0000</span>&amp;end_time=<span class="hljs-number">2017</span>-<span class="hljs-number">08</span>-<span class="hljs-number">30</span>-<span class="hljs-number">2359</span><br></code></pre></td></tr></table></figure><h1 id="HTTP重定向的原理"><a href="#HTTP重定向的原理" class="headerlink" title="HTTP重定向的原理"></a>HTTP重定向的原理</h1><p><img src="https://mdn.mozillademos.org/files/13785/HTTPRedirect.png"></p><p>客户端发起http请求，如果服务端返回http重定向响应，那么客户端会请求返回的新url，这就是重定向的过程，这个过程就是重定向。在客户端和服务端之间自动完成，用户不可见。</p><p>不同类型的重定向映射可以划分为三个类别：永久重定向、临时重定向和特殊重定向。</p><p>如果你想把自己的网站永久更改为一个新的域名，则应该使用301永久重定向，搜索引擎机器人会在遇到该状态码时触发更新操作，在其索引库中修改与该资源相关的 URL 。</p><h1 id="HTTP重定向的使用"><a href="#HTTP重定向的使用" class="headerlink" title="HTTP重定向的使用"></a>HTTP重定向的使用</h1><p>主要以Python和shell两种语言来介绍http重定向的使用。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python常用的http库urllib，urllib2，requests都支持http重定向。以requests库为例做介绍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_final_link</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        r = requests.get(url=url, allow_redirects=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">302</span> <span class="hljs-keyword">or</span> r.status_code == <span class="hljs-number">301</span>:<br>            <span class="hljs-keyword">return</span> get_final_link(r.headers[<span class="hljs-string">&#x27;Location&#x27;</span>])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> r.url<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> url<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_final_link1</span>(<span class="hljs-params">url</span>):<br>    r = requests.get(url=url, allow_redirects=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> rsp <span class="hljs-keyword">in</span> r.history:<br>        <span class="hljs-built_in">print</span> rsp.url<br>    <span class="hljs-keyword">return</span> r.url<br><br><span class="hljs-built_in">print</span> get_final_link(url=<span class="hljs-string">&#x27;http://runreport.dnion.com/DCC/logDownLoad.do?user=user1&amp;password=password1&amp;domain=rtmpdist-d.quklive.com&amp;date=20171026&amp;hour=10&#x27;</span>)<br><span class="hljs-built_in">print</span> get_final_link(url=<span class="hljs-string">&#x27;https://github.com&#x27;</span>)<br><span class="hljs-built_in">print</span> get_final_link(url=<span class="hljs-string">&#x27;http://github.com&#x27;</span>)<br><span class="hljs-built_in">print</span> get_final_link1(url=<span class="hljs-string">&#x27;http://github.com&#x27;</span>)  <span class="hljs-comment"># 会发生301重定向</span><br></code></pre></td></tr></table></figure><p>如果确定重定向的过程中全部都是http(s)请求，则allow_redirects参数设置成True即可得到最终的http链接。如果不是则需要自己进行递归解析。</p><p>如果是要简单的下载文件，则可以使用<code>urllib.urlretrieve</code>轻松胜任，即使最终链接是ftp。</p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>使用curl命令模拟</p><blockquote><p>-L参数，当页面有跳转的时候，输出跳转到的页面</p><p>-I参数  header信息  当有跳转时，可以通过 curl -L -I URL|grep Location 来确定跳转到的新url地址</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@sz3:~# curl -L -I &quot;http://runreport.dnion.com/DCC/logDownLoad.do?user=user1&amp;password=password1&amp;domain=rtmpdist-d.quklive.com&amp;date=20171026&amp;hour=10&quot;<br>HTTP/1.1 302 Moved Temporarily<br>Server: Apache-Coyote/1.1<br>Set-Cookie: JSESSIONID=0F11668F6EBF4DC16B43E322CCF16C85; Path=/DCC<br>Location: http://runreport.dnion.com/logDownLoad.do?user=qukan&amp;password=0cddcbf6d292fab5de0aas931bf19c&amp;domain=rtmpdist-d.quklive.com&amp;date=20171026&amp;hour=10<br>Content-Type: text/html;charset=GBK<br>Content-Length: 0<br>Date: Mon, 06 Nov 2017 09:46:44 GMT<br><br>HTTP/1.1 302 Moved Temporarily<br>Server: Apache-Coyote/1.1<br>Location: ftp://ABA606843D412DAE34F28CDB23F7A31E:0687B16F2F5D0A2637FACDB23FAC982179411FA7466F10B2E7D0F4AA2D7F6AD42536F122549D0A6E40337E896@125.39.237.48:55621/rtmpdist-d.quklive.com_20171026_10_11.gz<br>Content-Type: text/html;charset=GBK<br>Content-Length: 0<br>Date: Mon, 06 Nov 2017 09:46:44 GMT<br><br>Last-Modified: Thu, 26 Oct 2017 02:30:13 GMT<br>Content-Length: 1932<br>Accept-ranges: bytes<br></code></pre></td></tr></table></figure><p>最后跳转到需要的ftp链接。</p><h1 id="HTTP重定向抓包验证"><a href="#HTTP重定向抓包验证" class="headerlink" title="HTTP重定向抓包验证"></a>HTTP重定向抓包验证</h1><p>使用wireshark抓包结果如下：</p><p>第一次跳转过程如下图</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/blog/dnion_http302_first%E8%B7%B3%E8%BD%AC.jpg"></p><p>第二次跳转过程如下图</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/blog/dnion_http302_final%E8%B7%B3%E8%BD%AC.jpg"></p><p>所以通过抓包可以清晰的看到302跳转的过程</p><hr><p>参考：</p><ol><li><a href="https://www.cnblogs.com/sunada2005/p/3829772.html">csdn-curl命令的常见参数使用</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections">mozilla-HTTP 的重定向</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
      <tag>重定向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思考一次整体调整Python项目规范性的过程</title>
    <link href="/2017/10/31/%E6%80%9D%E8%80%83%E4%B8%80%E6%AC%A1%E6%95%B4%E4%BD%93%E8%B0%83%E6%95%B4python%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83%E6%80%A7%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <url>/2017/10/31/%E6%80%9D%E8%80%83%E4%B8%80%E6%AC%A1%E6%95%B4%E4%BD%93%E8%B0%83%E6%95%B4python%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83%E6%80%A7%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要是记录整体调整Python数据统计分析项目规范性的过程，以及自己的一些思考。</p><h1 id="为什么要调整？"><a href="#为什么要调整？" class="headerlink" title="为什么要调整？"></a>为什么要调整？</h1><ol><li>主要是为了解决数据类程序不容易测试发现错误的现状。调整公共模块出错时抛出错误到业务层，便于报警模块上传错误信息到kafka，最后能主动发出报警邮件。以及方便加入报警之外的其他程序埋点。</li><li>调整所有Python数据统计分析程序满足pep8规范和Google Python风格规范，减少IDE提示。</li><li>完善代码注释和文档便于后续维护（之前的开发人员是Erlang风格，主张不写或者少写注释）。</li></ol><span id="more"></span><h1 id="认清程序当前现状"><a href="#认清程序当前现状" class="headerlink" title="认清程序当前现状"></a>认清程序当前现状</h1><ol><li>项目结构：目前整个数据统计分析项目的整体模式是各个以数据业务为导向的统计分析程序之间互相独立。各个数据统计分析程序几乎都依赖于底层的各个公共模块。包括数据库模块，日志模块，cdn相关模块、心跳模块、封装的阿里云各个产品的模块，封装的网宿云各个产品模块等等。</li><li>各个公共模块和各个统计分析程序前前后后经过熟人编写，风格完全不同，有C++风格，有Erlang风格，有Python，在IDE中出现各种不符合规范的提示。</li><li>对于公共模块中出现的错误，为了不影响业务层（原因是猜的），通常在本模块就直接捕获掉了，并没有抛出到业务层，也没有做过多处理，导致错误非常难以被发现。</li><li>有不少函数的返回值在处理成功和处理失败时，返回值的个数并不一致，导致低概率程序出现各种unpack错误。这类多返回值语言常见的bug错误全部需要调整。</li></ol><h1 id="确定程序调整原则"><a href="#确定程序调整原则" class="headerlink" title="确定程序调整原则"></a>确定程序调整原则</h1><ol><li>底层公共模块返回值需要保持个数一致。</li><li>和外界交互（数据库，oss，日志服务等等）的公共模块必须返回是否执行成功的状态，如果错误需要返回错误状态和错误原因到上一层。</li><li>公共模块封装的时候可以使用类，但是对外提供的功能接口优先使用函数形式。</li><li>所有的类统一调整成新式类。</li><li>删除公共模块中的无效代码。</li><li>完善注释。</li><li>完善文档。</li></ol><h1 id="记录程序调整过程"><a href="#记录程序调整过程" class="headerlink" title="记录程序调整过程"></a>记录程序调整过程</h1><ol><li>qk_agent_praser改名为qk_agent_parser，需要在使用到此模块的地方进行一个调整。原因：拼写错误需要及时调整。qk_agent_praser对外函数接口没有调整，只有内部调整（减少split解析次数），对外无影响。</li><li>check_up只改动少量格式（由于使用loop调度，程序退出后，存在sock绑定的addr没有释放的问题，导致下次单元测试时需要等待sock回收）。</li><li>qk_email提供函数式对外接口，因此需要修改监控程序中使用到邮件的部分代码。</li><li>qk_heartbeat增加两个函数式对外接口。修改心跳间隔为可配置，因此使用心跳模块需要调整调用方式。</li><li>qk_ipdb调整类名和返回值，使用到ip数据库对应方法的地方都需要修改（ip查询以及数据统计程序）。</li><li>数据库连接池初始化返回值改动（返回连接池是否成功创建标志和创建失败的返回）。mysql_query的返回值有修改，查询失败时不是返回空列表而是返回False, str(e)。</li><li>aliyun_oss：oss相关的返回格式，全部修改（对应的使用到oss的程序改动较大）。</li><li>aliyun_cdn：返回值中返回请求状态码，请求text。</li><li>aliyun_kafka：生产和消费都有返回值。</li><li>aliyun其余各个模块返回值都有修改。</li><li>网宿查询带宽模块增加指定时间段查询，但时间不宜过长，否则会出现数据不完全（网速接口导致）。</li><li>根据公告模块修改对应的调用方法</li><li>调整所有的模块、类、方法、函数的注释，明确参数含义和返回值</li><li>补全文档</li></ol><h1 id="思考与感悟"><a href="#思考与感悟" class="headerlink" title="思考与感悟"></a>思考与感悟</h1><p>或许以上的这些调整在现在看来是理所当然，是一开始写程序的时候就应该全部考虑到的，但是现实却由于各种原因，导致程序成为一个需要整体调整的鬼样子。</p><p>在调整的过程中，也会发现之前指定的一些调整原则存在某种程度的问题，导致最后弃用。比如其中的一个原则：</p><ul><li>业务层需要全部封装成类的形式，不能是纯函数，方便MixIn新增的额外功能，比如数据埋点接口、添加日志、属性检查等等任何你想MixIn的功能</li></ul><p>乍一想来这个原则带来的好处很多，但是实际上带来的改动很大，这包括整个程序结构以及程序的表现形式和调用方法。最终还是弃用了这项原则。</p><p>最后，所有的开发人员都应该尽可能的参与需求分析，理解需求，明确自己要做的目的，牢记需求分析时女神李若彤的模样，而不是到验收交付时小笼包陈妍希的模样。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/blog/%E9%9C%80%E6%B1%82%E5%92%8C%E9%AA%8C%E6%94%B6%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="需求和验收的区别"></p><hr><p>参考：</p><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">Google-Python风格规范</a></p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于程序埋点的思考</title>
    <link href="/2017/10/31/%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E5%9F%8B%E7%82%B9%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2017/10/31/%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E5%9F%8B%E7%82%B9%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="埋点目的"><a href="#埋点目的" class="headerlink" title="埋点目的"></a>埋点目的</h1><p>对于本次修改的数据统计分析程序的埋点，只是为了统计数据中出现的一些不易发现的错误，全部让程序主动跑出来。但是只要是主动抛出统计数据，都属于埋点。</p><p>数据埋点是数据分析的准备工作，只有埋点了才可以获得数据进行分析。在做足数据埋点之后，才能拿到想要的目标数据：</p><ol><li>行为数据：时间、地点、人物、交互、交互的内容；</li><li>质量数据：浏览器加载情况、错误异常等；</li><li>环境数据：浏览器相关的元数据以及地理、运营商等；</li><li>运营数据：PV、UV、转化率、留存率（很直观的数据）</li></ol><p>整体调整Python项目规范性之后加入错误数据埋点就属于质量数据部分。</p><span id="more"></span><h1 id="埋点方案"><a href="#埋点方案" class="headerlink" title="埋点方案"></a>埋点方案</h1><p>埋点分为前端埋点和后端埋点，常见的埋点方案有</p><ol><li>前端代码埋点：直接在前端嵌入代码收集目标数据</li><li>前端无埋点：常见的前端埋点技术。全部采集，按需选取</li><li>后端代码埋点：直接在后端嵌入代码收集目标数据</li></ol><p>此次主要针对不使用第三方数据分析平台的项目进行的后端代码埋点（适用于数据统计分析监控程序这种场景）</p><p><strong>后端埋点</strong>的设计必然要考虑以下几点：</p><ol><li>高灵活：可以随时随地手工埋点</li><li>小影响：对源代码侵入少</li><li>已更新：埋点内容变化时，只需要修改埋点接口，而不能去代码中一处一处的修改</li></ol><p>在一些公共库或者封装的自定义框架里面不进行埋点，所有的埋点都在业务层。比如数据库连接池出现连接数溢出的时候错误需要经过处理，然后按照自定义的统一风格抛出相关信息到业务层，便于业务层判断公共库和自定义框架执行时是否有错误。</p><h1 id="后端埋点具体实施方案"><a href="#后端埋点具体实施方案" class="headerlink" title="后端埋点具体实施方案"></a>后端埋点具体实施方案</h1><p>直接在后端指定位置处写入埋点代码收集数据。每个方法中在共享共有信息这一块有一些不同。</p><ol><li>每个需要用到发送消息的文件中都import一份配置信息，然后在需要的地方，根据配置信息手动埋点。</li><li>将消息发送封装成一个MixIn类，使用继承混入到各个类中。每次都需要经过建立连接发送消息断开连接。</li><li>将埋点信息封装成一个模块，提供全局的初始化函数和埋点消息生成函数，在程序入口处调用初始化模块的初始化函数进行初始化，然后在程序的任何地方都可以消息生成函数。此种方法类似于使用第三方数据分析平台提供sdk时的使用方法。</li></ol><p>方案选取：</p><ul><li>由于项目是python编写的，埋点数据发送到kafka，封装好的第三方python模块可以采集自己需要一切信息。因此采用最后一种方式，写成可插拔的第三方sdk的形式，可以直接封装一些新增的方法，包含一些可以用的信息，例如自动采集报错信息所在行数。</li><li>对于非python项目，提供python脚本供其他语言程序进行调用。例如Erlang编写的转推流服务中调用Python脚本抛出报错信息及其他数据。</li></ul><hr><p>参考：</p><ul><li><a href="http://www.prnasia.com/story/172595-1.shtml">神策数据：埋点套路深，千万别掉“坑”</a></li><li><a href="https://mp.weixin.qq.com/s/VSIQ9SuizaBo8KTCXQxZkQ">数据分析产品的下一个进化：基于无埋点的有埋点</a></li><li><a href="https://tech.meituan.com/mt-mobile-analytics-practice.html">美团点评前端无痕埋点实践</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>埋点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Python调用堆栈获取行号等信息</title>
    <link href="/2017/10/31/%E4%BB%8Epython%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E8%8E%B7%E5%8F%96%E8%A1%8C%E5%8F%B7%E7%AD%89%E4%BF%A1%E6%81%AF/"/>
    <url>/2017/10/31/%E4%BB%8Epython%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E8%8E%B7%E5%8F%96%E8%A1%8C%E5%8F%B7%E7%AD%89%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>程序中的日志打印，或者消息上传，比如kafka消息等等。经常上传的消息中需要上传堆栈信息中的文件名、行号、上层调用者等具体用于定位的消息。Python提供了以下两种方法：</p><ul><li><code>sys._getframe</code>， 基础方法</li><li><code>inspect.currentframe</code>， 推荐方法，提供除了<code>sys._getframe</code>方法之外更多的frame相关的方法</li></ul><span id="more"></span><p>具体使用如下</p><h1 id="使用sys-getframe私有方法"><a href="#使用sys-getframe私有方法" class="headerlink" title="使用sys._getframe私有方法"></a>使用<code>sys._getframe</code>私有方法</h1><p>具体使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cur_info</span>():<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取调用时的文件名，行号，上层调用者的名称</span><br><span class="hljs-string">        :return: 文件名，行号，上层调用者名称</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">try</span>:<br>current_frame = sys._getframe(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> os.path.basename(current_frame.f_code.co_filename), current_frame.f_lineno, current_frame.f_code.co_name<br><span class="hljs-keyword">except</span> ValueError:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;unknown&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;unknown&#x27;</span><br><br></code></pre></td></tr></table></figure><p>具体的函数输出结果演示可以参见下面的inspect模块结果</p><h1 id="使用inspect模块（推荐）"><a href="#使用inspect模块（推荐）" class="headerlink" title="使用inspect模块（推荐）"></a>使用<code>inspect</code>模块（推荐）</h1><p>相比于sys的内置私有方法，更推荐inspect模块。inspect模块的具体使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> inspect<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cur_info</span>():<br><span class="hljs-keyword">try</span>:<br>current_frame = inspect.currentframe(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> os.path.basename(current_frame.f_code.co_filename), current_frame.f_lineno, current_frame.f_code.co_name<br><span class="hljs-keyword">except</span> ValueError:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;unknown&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;unknown&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">produce</span>():<br><span class="hljs-keyword">return</span> get_cur_info()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">business</span>():<br><span class="hljs-keyword">return</span> produce()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-built_in">print</span>(get_cur_info())  <span class="hljs-comment"># 输出 (&#x27;unknown&#x27;, 0, &#x27;unknown&#x27;)</span><br><br><span class="hljs-built_in">print</span>(produce())  <span class="hljs-comment"># 输出 (&#x27;a.py&#x27;, 22, &#x27;&lt;module&gt;&#x27;)</span><br><br><span class="hljs-built_in">print</span>(business())  <span class="hljs-comment"># 输出 (&#x27;a.py&#x27;, 16, &#x27;business&#x27;)</span><br><br></code></pre></td></tr></table></figure><p>主要依赖inspect.currentframe方法，关于inspect.currentframe方法的使用见帮助文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(inspect.currentframe)<br>Help on built-<span class="hljs-keyword">in</span> function _getframe <span class="hljs-keyword">in</span> module sys:<br><br>_getframe(...)<br>    _getframe([depth]) -&gt; frameobject<br>    <br>    Return a frame <span class="hljs-built_in">object</span> <span class="hljs-keyword">from</span> the call stack.  If optional integer depth <span class="hljs-keyword">is</span><br>    given, <span class="hljs-keyword">return</span> the frame <span class="hljs-built_in">object</span> that many calls below the top of the stack.<br>    If that <span class="hljs-keyword">is</span> deeper than the call stack, ValueError <span class="hljs-keyword">is</span> raised.  The default<br>    <span class="hljs-keyword">for</span> depth <span class="hljs-keyword">is</span> zero, returning the frame at the top of the call stack.<br>    <br>    This function should be used <span class="hljs-keyword">for</span> internal <span class="hljs-keyword">and</span> specialized<br>    purposes only.<br></code></pre></td></tr></table></figure><p>从调用堆栈返回一个帧对象。深度为整数，默认为0，返回调用堆栈顶部的帧。如果指定深度比调用堆栈深，会抛出ValueError异常。该功能应该只用于内部和专业目的。</p><p>inspect.currentframe方法的实现见内置库inspect.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(sys, <span class="hljs-string">&#x27;_getframe&#x27;</span>):<br>    currentframe = sys._getframe<br><span class="hljs-keyword">else</span>:<br>    currentframe = <span class="hljs-keyword">lambda</span> _=<span class="hljs-literal">None</span>: <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>所以本质上inspect.currentframe方法等同于sys._getframe方法</p><blockquote><p>currentframe &#x3D; lambda _&#x3D;None: None 等同于 currentframe &#x3D; lambda _: None ，即lambda函数接收一个参数，返回None</p></blockquote><hr><p>参考：</p><ol><li><p><a href="http://farmdev.com/src/secrets/framehack/index.html">Python frame hack</a></p></li><li><p><a href="https://stackoverflow.com/questions/1140194/in-python-how-do-i-obtain-the-current-frame">StackOverFlow-In Python, how do I obtain the current frame?</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>inspect</tag>
      
      <tag>堆栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解supervisor进程管理</title>
    <link href="/2017/09/25/%E8%AF%A6%E8%A7%A3supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2017/09/25/%E8%AF%A6%E8%A7%A3supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h1><p>使用Python编写的进程管理程序supervisor来管理Python程序那是最合适不过了，supervisor基于CS架构，主要有以下两个组成部分：</p><ol><li><strong>supervisord</strong>：supervisord是supervisor的服务端程序。负责启动子程序，应答客户端命令，子程序日志记录，对进程变化发送事件通知等</li><li><strong>supervisorctl：</strong> 客户端命令行工具，可以连接服务器端，进行进程的启动、关闭、重启、状态查看等。重要的一点是，supervisorctl不仅可以连接到本机上的supervisord，还可以连接到远程的supervisord，当然在本机上面是通过UNIX socket连接的，远程是通过TCP socket连接的。supervisorctl和supervisord之间的通信，是通过xml_rpc完成的。 相应的配置在[supervisorctl]块里面</li></ol><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>基于ubuntu16.04，不同linux发行版均可使用包管理器进行安装，也可以使用源码安装和pip安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install python-setuptools<br>apt-<span class="hljs-built_in">get</span> install supervisor<br></code></pre></td></tr></table></figure><p>pip安装方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install supervisor<br></code></pre></td></tr></table></figure><p>当前最新版本3.3.3，supervisord.conf 和supervisord.d文件夹已自动生成在&#x2F;etc&#x2F;supervisor&#x2F;目录下。可以使用echo_supervisord_conf命令将配置信息重定向到制定目录，比如&#x2F;etc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf<br></code></pre></td></tr></table></figure><p>服务端启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">supervisord -c /etc/supervisor/supervisord.conf<br></code></pre></td></tr></table></figure><p>查看supervisord是否在运行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> supervisord<br></code></pre></td></tr></table></figure><h1 id="supervisord-conf详解"><a href="#supervisord-conf详解" class="headerlink" title="supervisord.conf详解"></a>supervisord.conf详解</h1><p>使用echo_supervisord_conf查看supervisord.conf可选的配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo_supervisord_conf help<br></code></pre></td></tr></table></figure><p>详情如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; Sample supervisor config file.</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; For more information on the config file, please see:</span><br><span class="hljs-comment">; http://supervisord.org/configuration.html</span><br><span class="hljs-comment">;</span><br><span class="hljs-comment">; Notes:</span><br><span class="hljs-comment">;  - Shell expansion (&quot;~&quot; or &quot;$HOME&quot;) is not supported.  Environment</span><br><span class="hljs-comment">;    variables can be expanded using this syntax: &quot;%(ENV_HOME)s&quot;.</span><br><span class="hljs-comment">;  - Comments must have a leading space: &quot;a=b ;comment&quot; not &quot;a=b;comment&quot;.</span><br><br><span class="hljs-section">[unix_http_server]</span><br><span class="hljs-attr">file</span>=/tmp/supervisor.sock   <span class="hljs-comment">; socket 文件路径</span><br><span class="hljs-comment">;chmod=0700                 ; socket 文件 模式 (默认 0700)</span><br><span class="hljs-comment">;chown=nobody:nogroup       ; socket file uid:gid owner</span><br><span class="hljs-comment">;username=user              ; 使用supervisorctl连接的用户,默认没有用户</span><br><span class="hljs-comment">;password=123               ; 使用supervisorctl连接的用户密码,默认没有密码</span><br><br><span class="hljs-comment">;[inet_http_server]         ; Web Server和远程的supervisorctl 配置块(默认关闭)</span><br><span class="hljs-comment">;port=127.0.0.1:9001        ; 监听的地址和端口</span><br><span class="hljs-comment">;username=user              ; 登录用户，默认没有用户</span><br><span class="hljs-comment">;password=123               ; 登录密码，默认没有密码</span><br><br><span class="hljs-section">[supervisord]</span><br><span class="hljs-attr">logfile</span>=/tmp/supervisord.log <span class="hljs-comment">; supervisord进程日志路径</span><br><span class="hljs-attr">logfile_maxbytes</span>=<span class="hljs-number">50</span>MB        <span class="hljs-comment">; supervisord进程单个日志文件大小，默认为50M</span><br><span class="hljs-attr">logfile_backups</span>=<span class="hljs-number">10</span>           <span class="hljs-comment">; 日志文件个数，默认为10个</span><br><span class="hljs-attr">loglevel</span>=info                <span class="hljs-comment">; 日志级别，默认为info，还支持debug,warn,trace)</span><br><span class="hljs-attr">pidfile</span>=/tmp/supervisord.pid <span class="hljs-comment">; supervisord的pid文件路径。</span><br><span class="hljs-attr">nodaemon</span>=<span class="hljs-literal">false</span>               <span class="hljs-comment">; 如果是true，supervisord进程将在前台运行 默认为false(后台运行)</span><br><span class="hljs-attr">minfds</span>=<span class="hljs-number">1024</span>                  <span class="hljs-comment">; 这个是最少系统空闲的文件描述符，低于这个值supervisor将不会启动</span><br><span class="hljs-attr">minprocs</span>=<span class="hljs-number">200</span>                 <span class="hljs-comment">; 最小可用的进程描述符，低于这个值supervisor也将不会正常启动</span><br><span class="hljs-comment">;umask=022                   ; 进程创建文件的掩码 (默认 022)</span><br><span class="hljs-comment">;user=chrism                 ; user参数指定的用户也可以对supervisord进行管理</span><br><span class="hljs-comment">;identifier=supervisor       ; supervisord的标识符，默认supervisor</span><br><span class="hljs-comment">;directory=/tmp              ; 当supervisord以守护进程运行的时候，启动supervisord进程之前，会先切换到这个目录</span><br><span class="hljs-comment">;nocleanup=true              ; false的时候 supervisord进程启动的时候 会在把以前子进程产生的临时文件清除掉(true不清除)</span><br><span class="hljs-comment">;childlogdir=/tmp            ; 当子进程日志路径为AUTO的时候，子进程日志文件的存放路径 (默认 $TMP)</span><br><span class="hljs-comment">;environment=KEY=&quot;value&quot;     ; 这个是用来设置环境变量的，supervisord在linux中启动默认继承了linux的 环境变量，在这里可以设置supervisord进程特有的其他环境变量supervisord启动子进程时，子进程会拷贝父进程的内存空间内容。 所以设置的这些环境变量也会被子进程继承 (默认不设置)</span><br><span class="hljs-comment">;strip_ansi=false            ; 默认为falsh，如果设置为true，会清除子进程日志中的所有ANSI(\n,\t) 序列</span><br><br><span class="hljs-comment">; 这个选项是给XML_RPC用的，如果想使用supervisord或者web server 必须要开启</span><br><span class="hljs-section">[rpcinterface:supervisor]</span><br><span class="hljs-attr">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface<br><br><span class="hljs-section">[supervisorctl]</span><br><span class="hljs-attr">serverurl</span>=unix:///tmp/supervisor.sock <span class="hljs-comment">; supervisorctl本地连接supervisord，使用本地UNIX socket</span><br><span class="hljs-comment">;serverurl=http://127.0.0.1:9001 ; supervisorctl远程连接supervisord的时候，用到的地址和端口</span><br><span class="hljs-comment">;username=chris              ; 连接登录的用户名，需要和http_username一致</span><br><span class="hljs-comment">;password=123                ; 连接登录的密码，需要和http_password一致</span><br><span class="hljs-comment">;prompt=mysupervisor         ; 输入用户名密码时候的提示符 默认:mysupervisor </span><br><span class="hljs-comment">;history_file=~/.sc_history  ; 指定历史命令的文件</span><br><br><br><span class="hljs-comment">;[program:theprogramname]      ; 指定program配置</span><br><span class="hljs-comment">;command=/bin/cat              ; 要执行的进程 可带参数 $1 $2 $3  注意!! 执行的进程不能是守护进程 ! !</span><br><span class="hljs-comment">;process_name=%(program_name)s ; numprocs参数为1时，就不用管这个参数 默认值%(program_name)s也就是上面的那个program冒号后面的名字</span><br><span class="hljs-comment">;numprocs=1                    ; 启动进程的数目。当不为1时，就是进程池的概念，默认为1</span><br><span class="hljs-comment">;directory=/tmp                ; 进程运行前，会前切换到这个目录</span><br><span class="hljs-comment">;umask=022                     ; 进程掩码 (default None)</span><br><span class="hljs-comment">;priority=999                  ; 子进程启动关闭优先级，优先级低的，最先启动，关闭的时候最后关闭 (default 999)</span><br><span class="hljs-comment">;autostart=true                ; 设置为true 子进程将在supervisord启动后被自动启动，默认为true</span><br><span class="hljs-comment">;startsecs=1                   ; 设置子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功</span><br><span class="hljs-comment">;startretries=3                ; 进程启动失败后，最大尝试启动的次数 当超过3次后，supervisor将把此进程的状态置为FAIL</span><br><span class="hljs-comment">;autorestart=unexpected        ; 设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在上面的exitcodes里面定义的退出码的时候，&amp;gt;才会被自动重启。当为true的时候，只要子进程挂掉，将会被无条件的重启。默认为unexpected</span><br><span class="hljs-comment">;exitcodes=0,2                 ; 注意和上面的的autorestart=unexpected对应 exitcodes里面的定义的退出码是expected的。</span><br><span class="hljs-comment">;stopsignal=QUIT               ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号 默认为TERM 当用设定的信号去杀掉进程，退出码会被认为是expected</span><br><span class="hljs-comment">;stopwaitsecs=10               ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该子进程发送一个强制kill的信号(默认10秒)</span><br><span class="hljs-comment">;stopasgroup=false             ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有子进程 那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程有可能会变成孤儿进程 所以咱们可以设置这个选项，把整个该子进程的整个进程组都干掉  设置为true的话，一般killasgroup也会被设置为true 该选项发送的是stop信号(def false)</span><br><span class="hljs-comment">;killasgroup=false             ; 这个和上面的stopasgroup类似，不过发送的是kill信号(def false)</span><br><span class="hljs-comment">;user=chrism                   ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来管理该program 默认不设置</span><br><span class="hljs-comment">;redirect_stderr=true          ; 为true，则stderr的日志会被写入stdout日志文件中 (default false)</span><br><span class="hljs-comment">;stdout_logfile=/a/path        ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被清空。当 redirect_stderr=true的时候，sterr也会写进这个日志文件</span><br><span class="hljs-comment">;stdout_logfile_maxbytes=1MB   ; 日志文件最大大小，和[supervisord]中定义的一样 (default 50MB)</span><br><span class="hljs-comment">;stdout_logfile_backups=10     ; 和[supervisord]定义的一样 (0 means none, default 10)</span><br><span class="hljs-comment">;stdout_capture_maxbytes=1MB   ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout发送信息，而supervisor可以根据信息，发送相应的event  (default 0)</span><br><span class="hljs-comment">;stdout_events_enabled=false   ; 为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将触发supervisord发送PROCESS_LOG_STDOUT类型的event(default false)</span><br><span class="hljs-comment">;stderr_logfile=/a/path        ; 设置stderr写的日志路径，当redirect_stderr=true。这个就不用设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中 default AUTO(随便找个地存，supervisord重启被清空)</span><br><span class="hljs-comment">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="hljs-comment">;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)</span><br><span class="hljs-comment">;stderr_capture_maxbytes=1MB   ; number of bytes in &#x27;capturemode&#x27; (default 0)</span><br><span class="hljs-comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span><br><span class="hljs-comment">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; 这个是该子进程的环境变量，和别的子进程是不共享的</span><br><span class="hljs-comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br><br><span class="hljs-comment">;[eventlistener:theeventlistenername]    ; eventlistener其实和program的地位是一样的，也是suopervisor启动的子进程，不过它干的活是订阅supervisord发送的event。他的名字就叫listener了。我们可以在listener里面做一系列处理，比如报警....</span><br><span class="hljs-comment">;command=/bin/eventlistener    ; 和上面的program一样，表示listener的可执行文件的路径</span><br><span class="hljs-comment">;process_name=%(program_name)s ; 这个也一样，进程名，当下面的numprocs为多个的时候，才需要。否则默认就OK了</span><br><span class="hljs-comment">;numprocs=1                    ; 相同的listener启动的个数，默认1</span><br><span class="hljs-comment">;events=EVENT                  ; event event事件的类型，也就是说，只有写在这个地方的事件类型。才会被发送</span><br><span class="hljs-comment">;buffer_size=10                ; event队列缓存大小 (default 10)</span><br><span class="hljs-comment">;directory=/tmp                ; 进程执行前，会切换到这个目录下执行 (def no cwd)</span><br><span class="hljs-comment">;umask=022                     ; umask for process (default None)</span><br><span class="hljs-comment">;priority=-1                   ; 启动优先级 (default -1)</span><br><span class="hljs-comment">;autostart=true                ; supervisord启动时一起启动 (default: true)</span><br><span class="hljs-comment">;startsecs=1                   ; 设置子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了 (def. 1)</span><br><span class="hljs-comment">;startretries=3                ; 失败最大尝试次数 (default 3)</span><br><span class="hljs-comment">;autorestart=unexpected        ; 和program一样 (def: unexpected)</span><br><span class="hljs-comment">;exitcodes=0,2                 ; &#x27;expected&#x27; exit codes used with autorestart (default 0,2)</span><br><span class="hljs-comment">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span><br><span class="hljs-comment">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="hljs-comment">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span><br><span class="hljs-comment">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span><br><span class="hljs-comment">;user=chrism                   ; setuid to this UNIX account to run the program</span><br><span class="hljs-comment">;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners</span><br><span class="hljs-comment">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</span><br><span class="hljs-comment">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="hljs-comment">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</span><br><span class="hljs-comment">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span><br><span class="hljs-comment">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</span><br><span class="hljs-comment">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="hljs-comment">;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)</span><br><span class="hljs-comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span><br><span class="hljs-comment">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions</span><br><span class="hljs-comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br><br><span class="hljs-comment">;[group:thegroupname]          ; 给programs分组，划分到组里面的program。我们就不用一个一个去操作了 我们可以对组名进行统一的操作。 注意：program被划分到组里面之后，就相当于原来的配置从supervisor的配置文件里消失了supervisor只会对组进行管理，而不再会对组里面的单个program进行管理了</span><br><span class="hljs-comment">;programs=progname1,progname2  ; 组成员，用逗号分开</span><br><span class="hljs-comment">;priority=999                  ; 优先级，相对于组和组之间 (default 999)</span><br><br><span class="hljs-comment">;[include]                     ;包含的程序配置文件</span><br><span class="hljs-comment">;files = relative/directory/*.ini</span><br></code></pre></td></tr></table></figure><h1 id="提取supervisord-conf模板"><a href="#提取supervisord-conf模板" class="headerlink" title="提取supervisord.conf模板"></a>提取supervisord.conf模板</h1><p>采用supervisord.conf和program.conf分离的方式进行本机进程管理，从默认配置中抽取出常用的supervisord模板</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; supervisor config file</span><br><br><span class="hljs-section">[unix_http_server]</span><br><span class="hljs-attr">file</span>=/var/run/supervisor.sock   <span class="hljs-comment">; (the path to the socket file)</span><br><br><span class="hljs-section">[inet_http_server]</span>         <span class="hljs-comment">; inet (TCP) server disabled by default</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9001</span>        <span class="hljs-comment">; (ip_address:port specifier, *:port for all iface)</span><br><span class="hljs-attr">username</span>=erow              <span class="hljs-comment">; (default is no username (open server))</span><br><span class="hljs-attr">password</span>=j                 <span class="hljs-comment">; (default is no password (open server))</span><br><br><span class="hljs-section">[supervisord]</span><br><span class="hljs-attr">logfile</span>=/var/log/supervisor/supervisord.log <span class="hljs-comment">; (main log file;default $CWD/supervisord.log)</span><br><span class="hljs-attr">pidfile</span>=/var/run/supervisord.pid <span class="hljs-comment">; (supervisord pidfile;default supervisord.pid)</span><br><span class="hljs-attr">loglevel</span>=debug               <span class="hljs-comment">; (log level;default info; others: debug,warn,trace)</span><br><span class="hljs-attr">logfile_maxbytes</span>=<span class="hljs-number">10</span>MB        <span class="hljs-comment">; (max main logfile bytes b4 rotation;default 50MB)</span><br><span class="hljs-attr">logfile_backups</span>=<span class="hljs-number">10</span>           <span class="hljs-comment">; (num of main logfile rotation backups;default 10)</span><br><br><span class="hljs-section">[rpcinterface:supervisor]</span><br><span class="hljs-attr">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface<br><br><span class="hljs-section">[supervisorctl]</span><br><span class="hljs-attr">serverurl</span>=unix:///var/run/supervisor.sock <span class="hljs-comment">; use a unix:// URL  for a unix socket</span><br><br><span class="hljs-section">[include]</span><br><span class="hljs-attr">files</span> = /etc/supervisor/conf.d/*.ini<br></code></pre></td></tr></table></figure><p>模板抽取基于以下考虑</p><ul><li>必填选项不可少</li><li>服务端支持本地supervisorctl客户端连接也支持远程连接</li><li>测试环境日志级别设置为debug，生产环境日志级别设置为info，修改loglevel字段即可</li><li>日志文件大小和个数需要参考服务端所在机器的磁盘大小，会产生stderr和stdout两种日志</li><li>pid文件和log文件都不建议存放在&#x2F;tmp下面，容易被误删除，因此放在var目录下</li></ul><h1 id="提取program-conf模板"><a href="#提取program-conf模板" class="headerlink" title="提取program.conf模板"></a>提取program.conf模板</h1><p>从默认配置中抽取出常用的program模板</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:concurrency_statistician]</span><br><span class="hljs-attr">directory</span> = /root/qk_python/data/statistic/concurrency_statistician<br><span class="hljs-attr">command</span> = python concurrency_statistician.py<br><span class="hljs-attr">autostart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">startsecs</span> = <span class="hljs-number">5</span><br><span class="hljs-attr">autorestart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">startretries</span> = <span class="hljs-number">3</span><br><span class="hljs-attr">user</span> = root<br></code></pre></td></tr></table></figure><p>如果单独调整program日志大小和个数，则加入stdout和stderr四个参数，新的配置文件如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:concurrency_statistician]</span><br><span class="hljs-attr">directory</span> = /root/qk_python/data/statistic/concurrency_statistician<br><span class="hljs-attr">command</span> = python concurrency_statistician.py<br><span class="hljs-attr">autostart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">startsecs</span> = <span class="hljs-number">5</span><br><span class="hljs-attr">autorestart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">startretries</span> = <span class="hljs-number">3</span><br><span class="hljs-attr">user</span> = root<br><span class="hljs-attr">stdout_logfile_maxbytes</span> = <span class="hljs-number">10</span>MB<br><span class="hljs-attr">stdout_logfile_backups</span> = <span class="hljs-number">10</span><br><span class="hljs-attr">stderr_logfile_maxbytes</span> = <span class="hljs-number">10</span>MB<br><span class="hljs-attr">stderr_logfile_backups</span> = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>一般情况下，不需要指定日志文件名称，默认的日志文件名称组成为</p><ul><li>程序名称+日志类型（stdout和stderr）+ supervisor+进程号+日志编号</li></ul><p>文件名称示例：concurrency_statistician-stderr—supervisor-OpZ5di.log.2</p><blockquote><p>需要注意：supervisor服务端程序supervisord重新启动之后，会产生新的pid。因此日志只会在新的进程日志中产生，老的子进程日志不会被删除。因此如果需要重新启动supervisord，则需要注意是否要保留老进程日志，以免超过磁盘大小。</p><p>一般情况下，生产环境中不会经常重启supervisord</p></blockquote><h1 id="常用supervisorctl命令"><a href="#常用supervisorctl命令" class="headerlink" title="常用supervisorctl命令"></a>常用supervisorctl命令</h1><p>可以进入 supervisorctl 的 shell 界面，也可以直接在 bash 终端运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">停止某一个进程，program_name 为 [program:x] 里的 x</span><br>supervisorctl stop program_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动某个进程</span><br>supervisorctl start program_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启某个进程</span><br>supervisorctl restart program_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止全部进程，注：start、restart、stop 都不会载入最新的配置文件</span><br>supervisorctl stop all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br>supervisorctl reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br>supervisorctl update<br></code></pre></td></tr></table></figure><p>关于program groups的命令使用较少暂不介绍</p><hr><p>参考资料：</p><ol><li><a href="http://supervisord.org/">supervisor 官方文档</a></li><li><a href="http://wangshengzhuang.com/2017/05/26/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/Supervisor/Supervisor%E7%AE%80%E4%BB%8B/"> 小强斋太-Supervisor简介、安装、配置</a></li><li><a href="http://liyangliang.me/posts/2015/06/using-supervisor/">使用supervisor管理进程</a></li><li><a href="https://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000">廖雪峰-Linux后台进程管理利器：supervisor</a></li><li><a href="https://wuguiyunwei.com/index.php/2017/06/26/1028.html">乌龟运维-Supervisor 安装及配置</a></li><li><a href="https://my.oschina.net/crooner/blog/395069">oschina-SUPERVISOR进程管理器配置指南</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>supervisor</tag>
      
      <tag>进程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python时间模块常用操作总结</title>
    <link href="/2017/09/07/python%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <url>/2017/09/07/python%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>时间模块常用操作总结为下列各个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> sys<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> calendar<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">second_to_datetime_string</span>(<span class="hljs-params">seconds</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将从公元0年开始的秒数转换为datetime的string形式</span><br><span class="hljs-string">    :param seconds: 从公元0年开始的秒数</span><br><span class="hljs-string">    :return: datetime的string形式</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    s = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(<span class="hljs-built_in">float</span>(seconds)))<br>    year = s.split(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>    rest = s.split(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br>    year = <span class="hljs-built_in">int</span>(year) - <span class="hljs-number">1970</span>  <span class="hljs-comment"># datetime是从1970开始的，因此计算时需要减去1970</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(year), rest)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gregorian_date_to_str</span>(<span class="hljs-params">year, month, day</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将公元日期转换成字符串，year占4位，month占2位，day占2位，位数不足补0</span><br><span class="hljs-string">    :param year: 年份，例如2017</span><br><span class="hljs-string">    :param month: 月份，例如8或者08</span><br><span class="hljs-string">    :param day: 天，例如12或者02或者2</span><br><span class="hljs-string">    :return: 返回位数固定的字符串，例如2017-08-22</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;-&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        year,<br>        month <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(month)) == <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(month),<br>        day <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(day)) == <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(day)<br>    )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gregorian_date_to_str_1</span>(<span class="hljs-params">year, month, day</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将公元日期转换成字符串，year占4位，month占2位，day占2位，位数不足补0</span><br><span class="hljs-string">    :param year: 年份，例如2017</span><br><span class="hljs-string">    :param month: 月份，例如8或者08</span><br><span class="hljs-string">    :param day: 天，例如12或者02或者2</span><br><span class="hljs-string">    :return: 返回位数固定的字符串，不带-，例如20170822</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        year,<br>        month <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(month)) == <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(month),<br>        day <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(day)) == <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(day)<br>    )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_element_from_date_str</span>(<span class="hljs-params">date_str</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取一个日期字符串的年月日&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> date_str[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>], date_str[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>], date_str[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid_date</span>(<span class="hljs-params">date_str</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断是否是一个有效的日期字符串&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        time.strptime(date_str, <span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_latter_1_day_str</span>(<span class="hljs-params">date_str</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取data_str后一天的日期字符串</span><br><span class="hljs-string">    :param date_str: 指定日期字符串</span><br><span class="hljs-string">    :return: 返回指定日期字符串后一天的日期字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    dt = datetime.datetime.strptime(date_str, <span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>    one_day = datetime.timedelta(days=<span class="hljs-number">1</span>)<br>    former_day = dt + one_day<br>    <span class="hljs-keyword">return</span> former_day.strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_latter_n_day_str</span>(<span class="hljs-params">date_str, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取data_str后n天的日期字符串</span><br><span class="hljs-string">    :param date_str: 指定日期字符串</span><br><span class="hljs-string">    :return: 返回指定日期字符串后n天的日期字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    dt = datetime.datetime.strptime(date_str, <span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>    one_day = datetime.timedelta(days=days)<br>    former_day = dt + one_day<br>    <span class="hljs-keyword">return</span> former_day.strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_yesterday_str</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取昨天的日期字符串</span><br><span class="hljs-string">    :return: 返回昨天日期字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    today = datetime.date.today()<br>    one_day = datetime.timedelta(days=<span class="hljs-number">1</span>)<br>    yesterday = today - one_day<br>    <span class="hljs-keyword">return</span> yesterday.strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_former_1_day_str</span>(<span class="hljs-params">date_str</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取data_str前一天的日期字符串</span><br><span class="hljs-string">    :param date_str: 指定日期字符串</span><br><span class="hljs-string">    :return: 返回指定日期字符串前一天的日期字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    dt = datetime.datetime.strptime(date_str, <span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>    one_day = datetime.timedelta(days=<span class="hljs-number">1</span>)<br>    former_day = dt - one_day<br>    <span class="hljs-keyword">return</span> former_day.strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_former_n_day_str</span>(<span class="hljs-params">date_str, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取data_str前n天的日期字符串</span><br><span class="hljs-string">    :param date_str: 指定日期字符串</span><br><span class="hljs-string">    :param n: number of day</span><br><span class="hljs-string">    :return: 返回指定日期字符串前n天的日期字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    dt = datetime.datetime.strptime(date_str, <span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>    n_day = datetime.timedelta(days=n)<br>    former_n_day = dt - n_day<br>    <span class="hljs-keyword">return</span> former_n_day.strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_universal_time</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取当前时间</span><br><span class="hljs-string">    :return: 返回当前时间，格式：2017-08-29 02:43:19</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    t = time.gmtime()<br>    time_tuple = (t.tm_year, t.tm_mon, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec)<br>    dt = datetime.datetime(*time_tuple)<br>    <span class="hljs-keyword">return</span> dt.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">datetime_to_gregorian_seconds</span>(<span class="hljs-params">dt</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取从公元0年1月1日开始到当天0点所经过的秒数</span><br><span class="hljs-string">    :param dt: datetime.datetime类型</span><br><span class="hljs-string">    :return: 返回从公元0年1月1日开始到当天0点所经过的秒数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    d = dt.date()<br>    t = dt.time()<br>    <span class="hljs-comment"># toordinal 从1年1月1日开始, erlang 的datetime_to_gregorian_seconds和date_to_gregorian_days从0年1月1日开始</span><br>    <span class="hljs-comment"># 当天不算所以需要减1天</span><br>    <span class="hljs-keyword">return</span> (d.toordinal() + <span class="hljs-number">365</span> - <span class="hljs-number">1</span>) * <span class="hljs-number">86400</span> + time_to_second(t.hour, t.minute, t.second)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">time_to_second</span>(<span class="hljs-params">time_h, time_m, time_s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据给定的time_h, time_m, time_s计算当天已过去的时间，秒为单位</span><br><span class="hljs-string">    :param time_h: 小时</span><br><span class="hljs-string">    :param time_m: 分</span><br><span class="hljs-string">    :param time_s: 秒</span><br><span class="hljs-string">    :return: 返回计算的second</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(time_h) * <span class="hljs-number">3600</span> + <span class="hljs-built_in">int</span>(time_m) * <span class="hljs-number">60</span> + <span class="hljs-built_in">int</span>(time_s)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">utc_time_to_second</span>(<span class="hljs-params">utc_time</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据给定的utc_time计算当天已过去的时间，秒为单位</span><br><span class="hljs-string">    :param utc_time: utc时间戳，类似1464830584</span><br><span class="hljs-string">    :return: 返回计算的second</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    t = datetime.datetime.fromtimestamp(<span class="hljs-built_in">int</span>(utc_time))<br>    <span class="hljs-keyword">return</span> t.hour * <span class="hljs-number">3600</span> + t.minute * <span class="hljs-number">60</span> + t.second<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_today_start_time</span>():<br><span class="hljs-string">&quot;&quot;&quot;获取当天开始时间&quot;&quot;&quot;</span><br>dt = datetime.datetime.combine(datetime.date.today(), datetime.time.<span class="hljs-built_in">min</span>)<br><span class="hljs-keyword">return</span> dt.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_today_end_time</span>():<br><span class="hljs-string">&quot;&quot;&quot;获取当天结束时间&quot;&quot;&quot;</span><br>dt = datetime.datetime.combine(datetime.date.today(), datetime.time.<span class="hljs-built_in">max</span>)<br><span class="hljs-keyword">return</span> dt.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_final_day_of_current_week</span>():<br><span class="hljs-string">&quot;&quot;&quot;获取本周最后一天：周天&quot;&quot;&quot;</span><br>today = datetime.date.today()<br>sunday = today + datetime.timedelta(<span class="hljs-number">6</span> - today.weekday())<br><span class="hljs-keyword">return</span> sunday.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_final_day_of_current_month</span>():<br><span class="hljs-string">&quot;&quot;&quot;获取本月最后一天&quot;&quot;&quot;</span><br>today = datetime.date.today()<br>_, last_day_num = calendar.monthrange(today.year, today.month)<br>last_day = datetime.date(today.year, today.month, last_day_num)<br><span class="hljs-keyword">return</span> last_day.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_final_day_of_last_month</span>():<br><span class="hljs-string">&quot;&quot;&quot;获取上月最后一天，可能会跨年，需要用timedelta&quot;&quot;&quot;</span><br>today = datetime.date.today()<br>first = datetime.date(day=<span class="hljs-number">1</span>, month=today.month, year=today.year)<br>final_day_of_last_month = first - datetime.timedelta(days=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> final_day_of_last_month.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_final_day_of_current_month</span>(<span class="hljs-params">year, month</span>):<br><span class="hljs-string">&quot;&quot;&quot;获取指定年指定月的最后一天&quot;&quot;&quot;</span><br>_, last_day_num = calendar.monthrange(year, month)<br><span class="hljs-keyword">return</span> last_day_num<br><span class="hljs-comment"># last_day = datetime.date(year, month, last_day_num)</span><br><span class="hljs-comment"># return last_day.strftime(&#x27;%Y-%m-%d&#x27;)</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>Python</tag>
      
      <tag>时间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04配置samba解决linux的svn使用舒适问题</title>
    <link href="/2017/09/02/ubuntu16-04%E9%85%8D%E7%BD%AEsamba%E8%A7%A3%E5%86%B3linux%E7%9A%84svn%E4%BD%BF%E7%94%A8%E8%88%92%E9%80%82%E9%97%AE%E9%A2%98/"/>
    <url>/2017/09/02/ubuntu16-04%E9%85%8D%E7%BD%AEsamba%E8%A7%A3%E5%86%B3linux%E7%9A%84svn%E4%BD%BF%E7%94%A8%E8%88%92%E9%80%82%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>个人感觉，svn的命令行使用起来没有git那么舒适，但是windows上的svn GUI客户端TortoiseSVN 使用非常方便。因此对于经常在虚拟机中做服务程序开发但是又不得不用svn的同学来说，结合linux开发环境和TortoiseSVN 来管理代码版本就显得尤其有用。</p><h1 id="安装配置samba"><a href="#安装配置samba" class="headerlink" title="安装配置samba"></a>安装配置samba</h1><p>ubuntu上使用apt-get安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install samba samba-common<br></code></pre></td></tr></table></figure><span id="more"></span><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop ufw<br></code></pre></td></tr></table></figure><p>使用<code>vim /etc/samba/smb.conf</code>命令编辑samba配置文件，在配置文件最后添加即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[homes]</span><br>   <span class="hljs-attr">comment</span> = qk_python Directories<br>   <span class="hljs-attr">browseable</span> = <span class="hljs-literal">no</span><br>   <span class="hljs-attr">path</span> = /root/qk_python<br>   valid <span class="hljs-attr">users</span> = root<br>   read <span class="hljs-attr">only</span> = <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>添加用户，除了root用户外也可以输入其他的存在用户名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">smbpasswd -a root<br></code></pre></td></tr></table></figure><p>重启samba服务生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart smbd<br></code></pre></td></tr></table></figure><p>在Windows下运行窗口输入<code>\\</code>加上IP，例如：<code>\\192.168.1.177\root</code>。在弹出的窗口，输入刚刚添加的用户名和密码，就可以访问Linux的文件目录了。</p><h1 id="配置svn"><a href="#配置svn" class="headerlink" title="配置svn"></a>配置svn</h1><p>由于配置samba的时候配置成了非只读的，因此可以直接checkout相应的svn项目到Linux文件目录中。完成之后对svn做以下配置：</p><p>勾选svn的网络驱动类型</p><blockquote><p>TortoiseSVN-&gt;Settings-&gt;Icon Overlays  勾选Driver Types中的”Network drives”</p></blockquote><p>显示svn项目绿色图标：</p><blockquote><p>TortoiseSVN-&gt;Settings-&gt;Icon Overlays 选择Shell</p></blockquote><p>然后就可以显示绿色图标了，接下来就愉快的使用TortoiseSVN管理Linux代码吧。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>samba</tag>
      
      <tag>linux</tag>
      
      <tag>ubuntu</tag>
      
      <tag>svn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计一个基于flask的高并发高可用的查询ip的http服务</title>
    <link href="/2017/08/16/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eflask%E7%9A%84%E9%AB%98%E5%B9%B6%E5%8F%91%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E6%9F%A5%E8%AF%A2ip%E7%9A%84http%E6%9C%8D%E5%8A%A1/"/>
    <url>/2017/08/16/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eflask%E7%9A%84%E9%AB%98%E5%B9%B6%E5%8F%91%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E6%9F%A5%E8%AF%A2ip%E7%9A%84http%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h1><p>基础架构为flask+gunicorn+负载均衡，负载均衡分为阿里云硬件负载均衡服务和软负载nginx。gunicorn使用supervisor进行管理。</p><p><strong>使用nginx软件负载结构图</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/python/%E4%BD%BF%E7%94%A8nginx%E8%BD%AF%E4%BB%B6%E8%B4%9F%E8%BD%BD%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"></p><p><strong>使用阿里云硬件负载均衡服务结构图</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/python/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%A1%AC%E4%BB%B6%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"></p><p>因为flask app需要在内存中保存ip树以及国家、省份、城市相关的字典，因此占用内存较高。gunicorn的1个worker需要占用300M内存，nginx的4个worker内存占用较小（不到100M），因此占用1.3G的内存（即需要一个2G内存的服务器）。当gunicorn任意一个节点挂断或者升级时，另外一个节点仍然在使用，不会影响整体服务</p><span id="more"></span><h1 id="ip数据库"><a href="#ip数据库" class="headerlink" title="ip数据库"></a>ip数据库</h1><p>IP库(也叫IP地址数据库)，是由专业技术人员经过长时间通过多种技术手段收集而来的，并且长期有专业人员进行更新、维护、补充。</p><p><strong>ip数据库解析查询代码</strong></p><p>基于二叉查找树实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> inet_aton, inet_ntoa<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>sys.setrecursionlimit(<span class="hljs-number">1000000</span>)<br><br>_unpack_V = <span class="hljs-keyword">lambda</span> b: struct.unpack(<span class="hljs-string">&quot;&lt;L&quot;</span>, b)<br>_unpack_N = <span class="hljs-keyword">lambda</span> b: struct.unpack(<span class="hljs-string">&quot;&gt;L&quot;</span>, b)<br>_unpack_C = <span class="hljs-keyword">lambda</span> b: struct.unpack(<span class="hljs-string">&quot;B&quot;</span>, b)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IpTree</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.ip_dict = &#123;&#125;<br>        self.country_codes = &#123;&#125;<br>        self.china_province_codes = &#123;&#125;<br>        self.china_city_codes = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_country_codes</span>(<span class="hljs-params">self, file_name</span>):<br>        <span class="hljs-keyword">try</span>:<br>            path = os.path.abspath(file_name)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>                    data = line.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                    self.country_codes[data[<span class="hljs-number">0</span>]] = data[<span class="hljs-number">1</span>]<br>                    <span class="hljs-comment"># print self.country_codes</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;cannot open file %s: %s&quot;</span> % (file, ex)<br>            <span class="hljs-built_in">print</span> ex.message<br>            exit(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_china_province_codes</span>(<span class="hljs-params">self, file_name</span>):<br>        <span class="hljs-keyword">try</span>:<br>            path = os.path.abspath(file_name)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>                    data = line.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                    provinces = data[<span class="hljs-number">2</span>].split(<span class="hljs-string">&#x27;\r&#x27;</span>)<br>                    self.china_province_codes[provinces[<span class="hljs-number">0</span>]] = data[<span class="hljs-number">0</span>]<br>                    <span class="hljs-comment"># print self.china_province_codes</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;cannot open file %s: %s&quot;</span> % (file, ex)<br>            <span class="hljs-built_in">print</span> ex.message<br>            exit(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_china_city_codes</span>(<span class="hljs-params">self, file_name</span>):<br>        <span class="hljs-keyword">try</span>:<br>            path = os.path.abspath(file_name)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>                    data = line.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                    cities = data[<span class="hljs-number">3</span>].split(<span class="hljs-string">&#x27;\r&#x27;</span>)<br>                    self.china_city_codes[cities[<span class="hljs-number">0</span>]] = data[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;cannot open file %s: %s&quot;</span> % (file, ex)<br>            <span class="hljs-built_in">print</span> ex.message<br>            exit(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loadfile</span>(<span class="hljs-params">self, file_name</span>):<br>        <span class="hljs-keyword">try</span>:<br>            ipdot0 = <span class="hljs-number">254</span><br>            path = os.path.abspath(file_name)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                local_binary0 = f.read()<br>                local_offset, = _unpack_N(local_binary0[:<span class="hljs-number">4</span>])<br>                local_binary = local_binary0[<span class="hljs-number">4</span>:local_offset]<br>                <span class="hljs-comment"># 256 nodes</span><br>                <span class="hljs-keyword">while</span> ipdot0 &gt;= <span class="hljs-number">0</span>:<br>                    middle_ip = <span class="hljs-literal">None</span><br>                    middle_content = <span class="hljs-literal">None</span><br>                    lis = []<br>                    <span class="hljs-comment"># offset</span><br>                    begin_offset = ipdot0 * <span class="hljs-number">4</span><br>                    end_offset = (ipdot0 + <span class="hljs-number">1</span>) * <span class="hljs-number">4</span><br>                    <span class="hljs-comment"># index</span><br>                    start_index, = _unpack_V(local_binary[begin_offset:begin_offset + <span class="hljs-number">4</span>])<br>                    start_index = start_index * <span class="hljs-number">8</span> + <span class="hljs-number">1024</span><br>                    end_index, = _unpack_V(local_binary[end_offset:end_offset + <span class="hljs-number">4</span>])<br>                    end_index = end_index * <span class="hljs-number">8</span> + <span class="hljs-number">1024</span><br>                    <span class="hljs-keyword">while</span> start_index &lt; end_index:<br>                        content_offset, = _unpack_V(local_binary[start_index + <span class="hljs-number">4</span>: start_index + <span class="hljs-number">7</span>] +<br>                                                    <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>                        content_length, = _unpack_C(local_binary[start_index + <span class="hljs-number">7</span>])<br>                        content_offset = local_offset + content_offset - <span class="hljs-number">1024</span><br>                        content = local_binary0[content_offset:content_offset + content_length]<br>                        <span class="hljs-keyword">if</span> middle_content != content <span class="hljs-keyword">and</span> middle_content <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                            contents = middle_content.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                            lis.append((middle_ip, (contents[<span class="hljs-number">0</span>], self.lookup_country_code(contents[<span class="hljs-number">0</span>]),<br>                                                    contents[<span class="hljs-number">1</span>], self.lookup_china_province_code(contents[<span class="hljs-number">1</span>]),<br>                                                    contents[<span class="hljs-number">2</span>], self.lookup_china_city_code(contents[<span class="hljs-number">2</span>]),<br>                                                    contents[<span class="hljs-number">3</span>], contents[<span class="hljs-number">4</span>])))<br>                        middle_content, = content,<br>                        middle_ip = inet_ntoa(local_binary[start_index:start_index + <span class="hljs-number">4</span>])<br>                        start_index += <span class="hljs-number">8</span><br>                    self.ip_dict[ipdot0] = self.generate_tree(lis)<br>                    ipdot0 -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;cannot open file %s: %s&quot;</span> % (file, ex)<br>            <span class="hljs-built_in">print</span> ex.message<br>            exit(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_country</span>(<span class="hljs-params">self, country_code</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> item_country, item_country_code <span class="hljs-keyword">in</span> self.country_codes.items():<br>                <span class="hljs-keyword">if</span> country_code == item_country_code:<br>                    <span class="hljs-keyword">return</span> item_country, item_country_code<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span><br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_country_code</span>(<span class="hljs-params">self, country</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self.country_codes[country]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_china_province</span>(<span class="hljs-params">self, province_code</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> item_province, item_province_code, <span class="hljs-keyword">in</span> self.china_province_codes.items():<br>                <span class="hljs-keyword">if</span> province_code == item_province_code:<br>                    <span class="hljs-keyword">return</span> item_province, item_province_code<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span><br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_china_province_code</span>(<span class="hljs-params">self, province</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self.china_province_codes[province.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_china_city</span>(<span class="hljs-params">self, city_code</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> item_city, item_city_code <span class="hljs-keyword">in</span> self.china_city_codes.items():<br>                <span class="hljs-keyword">if</span> city_code == item_city_code:<br>                    <span class="hljs-keyword">return</span> item_city, item_city_code<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span><br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_china_city_code</span>(<span class="hljs-params">self, city</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self.china_city_codes[city]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;None&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup</span>(<span class="hljs-params">self, ip</span>):<br>        ipdot = ip.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>        ipdot0 = <span class="hljs-built_in">int</span>(ipdot[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> ipdot0 &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> ipdot0 &gt; <span class="hljs-number">255</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(ipdot) != <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">try</span>:<br>            d = self.ip_dict[<span class="hljs-built_in">int</span>(ipdot[<span class="hljs-number">0</span>])]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> d <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self.lookup1(inet_aton(ip), d)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup1</span>(<span class="hljs-params">self, net_ip, (<span class="hljs-params">net_ip1, content, lefts, rights</span>)</span>):<br>        <span class="hljs-keyword">if</span> net_ip &lt; net_ip1:<br>            <span class="hljs-keyword">if</span> lefts <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> content<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> self.lookup1(net_ip, lefts)<br>        <span class="hljs-keyword">elif</span> net_ip &gt; net_ip1:<br>            <span class="hljs-keyword">if</span> rights <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> content<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> self.lookup1(net_ip, rights)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> content<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_tree</span>(<span class="hljs-params">self, ip_list</span>):<br>        length = <span class="hljs-built_in">len</span>(ip_list)<br>        <span class="hljs-keyword">if</span> length &gt; <span class="hljs-number">1</span>:<br>            lefts = ip_list[:length / <span class="hljs-number">2</span>]<br>            rights = ip_list[length / <span class="hljs-number">2</span>:]<br>            (ip, content) = lefts[length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">return</span> inet_aton(ip), content, self.generate_tree(lefts), self.generate_tree(rights)<br>        <span class="hljs-keyword">elif</span> length == <span class="hljs-number">1</span>:<br>            (ip, content) = ip_list[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">return</span> inet_aton(ip), content, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">import</span> sys<br><br>    reload(sys)<br>    sys.setdefaultencoding(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    ip_tree = IpTree()<br>    ip_tree.load_country_codes(<span class="hljs-string">&quot;doc/country_list.txt&quot;</span>)<br>    ip_tree.load_china_province_codes(<span class="hljs-string">&quot;doc/china_province_code.txt&quot;</span>)<br>    ip_tree.load_china_city_codes(<span class="hljs-string">&quot;doc/china_city_code.txt&quot;</span>)<br>    ip_tree.loadfile(<span class="hljs-string">&quot;doc/mydata4vipday2.dat&quot;</span>)<br>    <span class="hljs-built_in">print</span> ip_tree.lookup(<span class="hljs-string">&#x27;123.12.23.45&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h1><p>提供ip查询服务的GET请求和POST请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@ip_app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/ip_query&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ip_query</span>():<br>    <span class="hljs-keyword">try</span>:<br>        ip = request.json[<span class="hljs-string">&#x27;ip&#x27;</span>]<br>    <span class="hljs-keyword">except</span> KeyError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;bad request: no key ip in your request json body. &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e), status_code=<span class="hljs-number">400</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_ip(ip):<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;&#123;&#125; is not a ip&#x27;</span>.<span class="hljs-built_in">format</span>(ip), status_code=<span class="hljs-number">400</span>)<br>    <span class="hljs-keyword">try</span>:<br>        res = ip_tree.lookup(ip)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;internal error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e), status_code=<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">if</span> res <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> jsonify(res)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;no ip info in ip db for ip: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip), status_code=<span class="hljs-number">501</span>)<br><br><br><span class="hljs-meta">@ip_app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/ip_query&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ip_query_get</span>():<br>    <span class="hljs-keyword">try</span>:<br>        ip = request.values.get(<span class="hljs-string">&#x27;ip&#x27;</span>)<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;bad request: no param ip in your request. &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e), status_code=<span class="hljs-number">400</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_ip(ip):<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;&#123;&#125; is not a ip&#x27;</span>.<span class="hljs-built_in">format</span>(ip), status_code=<span class="hljs-number">400</span>)<br>    <span class="hljs-keyword">try</span>:<br>        res = ip_tree.lookup(ip)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;internal error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e), status_code=<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">if</span> res <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> jsonify(res)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> InvalidUsage(<span class="hljs-string">&#x27;no ip info in ip db for ip: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip), status_code=<span class="hljs-number">501</span>)<br></code></pre></td></tr></table></figure><p>POST请求需要在请求体中包含类似下面的json字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;165.118.213.9&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>GET请求的形式如：<a href="http://127.0.0.1:5000/api/ip_query?ip=165.118.213.9">http://127.0.0.1:5000/api/ip_query?ip=165.118.213.9</a></p><h1 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h1><p><strong>安装依赖库</strong></p><p>依赖的库requirements.txt如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">certifi</span>==<span class="hljs-number">2017.7</span>.<span class="hljs-number">27.1</span><br><span class="hljs-attr">chardet</span>==<span class="hljs-number">3.0</span>.<span class="hljs-number">4</span><br><span class="hljs-attr">click</span>==<span class="hljs-number">6.7</span><br><span class="hljs-attr">Flask</span>==<span class="hljs-number">0.12</span>.<span class="hljs-number">2</span><br><span class="hljs-attr">gevent</span>==<span class="hljs-number">1.1</span>.<span class="hljs-number">1</span><br><span class="hljs-attr">greenlet</span>==<span class="hljs-number">0.4</span>.<span class="hljs-number">12</span><br><span class="hljs-attr">gunicorn</span>==<span class="hljs-number">19.7</span>.<span class="hljs-number">1</span><br><span class="hljs-attr">idna</span>==<span class="hljs-number">2.5</span><br><span class="hljs-attr">itsdangerous</span>==<span class="hljs-number">0.24</span><br><span class="hljs-attr">Jinja2</span>==<span class="hljs-number">2.9</span>.<span class="hljs-number">6</span><br><span class="hljs-attr">locustio</span>==<span class="hljs-number">0.7</span>.<span class="hljs-number">5</span><br><span class="hljs-attr">MarkupSafe</span>==<span class="hljs-number">1.0</span><br><span class="hljs-attr">meld3</span>==<span class="hljs-number">1.0</span>.<span class="hljs-number">2</span><br><span class="hljs-attr">msgpack-python</span>==<span class="hljs-number">0.4</span>.<span class="hljs-number">8</span><br><span class="hljs-attr">requests</span>==<span class="hljs-number">2.18</span>.<span class="hljs-number">3</span><br><span class="hljs-attr">supervisor</span>==<span class="hljs-number">3.3</span>.<span class="hljs-number">3</span><br><span class="hljs-attr">urllib3</span>==<span class="hljs-number">1.22</span><br><span class="hljs-attr">Werkzeug</span>==<span class="hljs-number">0.12</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>安装方法：<code>pip install -r requirements.txt</code></p><p><strong>配置supervisor</strong></p><p><code>vim /etc/supervisor/conf.d/ip_query_http_service.conf</code>，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:ip_query_http_service]</span><br><span class="hljs-attr">directory</span> = /root/qk_python/ip_query<br><span class="hljs-attr">command</span> = gunicorn -w10 -b0.<span class="hljs-number">0.0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">8080</span> ip_query_app:ip_app --worker-class gevent<br><span class="hljs-attr">autostart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">startsecs</span> = <span class="hljs-number">5</span><br><span class="hljs-attr">autorestart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">startretries</span> = <span class="hljs-number">3</span><br><span class="hljs-attr">user</span> = root<br><span class="hljs-attr">stdout_logfile</span>=/root/qk_python/ip_query/log/gunicorn.log<br><span class="hljs-attr">stderr_logfile</span>=/root/qk_python/ip_query/log/gunicorn.err<br></code></pre></td></tr></table></figure><p>内容添加完成之后，需要创建stdout_logfile和stderr_logfile这两个目录，否则supervisor启动会报错。然后更新supervisor启动ip_query_http_service进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动supervisor</span><br>supervisord -c /etc/supervisor/supervisord.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新supervisor服务</span><br>supervisorctl update<br></code></pre></td></tr></table></figure><p>关于supervisor的常用操作参见最后面的参考资料。</p><p><strong>安装nginx</strong></p><p>如果是软负载的形式需要安装nginx，编译安装nginx的方法参见最后面的参考资料。</p><p><strong>配置nginx</strong></p><p><code>vim /usr/local/nginx/nginx.conf</code>，修改配置文件内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-comment">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">4</span>;<br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="hljs-attribute">error_log</span>  logs/<span class="hljs-literal">error</span>.log  <span class="hljs-literal">info</span>;<br><span class="hljs-comment">#进程文件</span><br><span class="hljs-attribute">pid</span>        logs/nginx.pid;<br><span class="hljs-comment">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class="hljs-attribute">worker_rlimit_nofile</span> <span class="hljs-number">65535</span>;<br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-comment">#参考事件模型 linux 下使用epoll</span><br>    <span class="hljs-attribute">use</span> <span class="hljs-literal">epoll</span>;<br>    <span class="hljs-comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">65535</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>    <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>    <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br>    <span class="hljs-attribute">access_log</span>  logs/access.log  main;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br>    <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>; <span class="hljs-comment">#防止网络阻塞</span><br>    <span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>; <span class="hljs-comment">#防止网络阻塞</span><br>    <span class="hljs-comment">#gzip  on;</span><br>    <span class="hljs-section">server</span> &#123;<br><span class="hljs-comment">#这里配置衔接服务提供的代理端口.</span><br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">9000</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-comment">#charset koi8-r;</span><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-comment">#            root   html;</span><br>            <span class="hljs-comment">#            index  index.html index.htm;</span><br>            <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8000;<br>            <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">10m</span>; <span class="hljs-comment">#允许客户端请求的最大单文件字节数</span><br>            <span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">128k</span>; <span class="hljs-comment">#缓冲区代理缓冲用户端请求的最大字节数，</span><br>            <span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">4k</span>; <span class="hljs-comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br>            <span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64k</span>;       <span class="hljs-comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p>做压力测试，选择正确的工具是前提。以下工具中，jmeter运行在windows机器较多，其他工具建议都运行在<code>*nix</code>机器上。</p><h2 id="压力测试工具选择"><a href="#压力测试工具选择" class="headerlink" title="压力测试工具选择"></a>压力测试工具选择</h2><table><thead><tr><th>工具名称</th><th>优缺点</th><th>建议</th></tr></thead><tbody><tr><td>ApacheBench(ab)</td><td>命令使用简单，效率高，统计信息完善，施压机器内存压力小</td><td>推荐</td></tr><tr><td>locust</td><td>python编写，效率低，受限于GIL，需要编写python测试脚本</td><td>不推荐</td></tr><tr><td>wrk</td><td>命令使用简单，效率高，统计信息精炼，坑少，少报错</td><td>最推荐</td></tr><tr><td>jmeter</td><td>基于java，Apache开源，图形化界面，操作简便</td><td>推荐</td></tr><tr><td>webbench</td><td>使用简单，但是不支持POST请求</td><td>一般</td></tr><tr><td>tsung</td><td>erlang编写，配置模板较多，较复杂</td><td>不推荐</td></tr></tbody></table><p>上述六种工具全部亲身使用过，下面选择ab、wrk、jmeter三种工具简单说明安装使用方法，其他工具的使用方法如有需要，自行google</p><h3 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h3><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install apache2-utils <br></code></pre></td></tr></table></figure><p><strong>常见options</strong></p><table><thead><tr><th>option</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>当接收到socket错误的时候ab不退出</td></tr><tr><td>-t</td><td>发送请求的最长时间</td></tr><tr><td>-c</td><td>并发数，一次构造的请求数量</td></tr><tr><td>-n</td><td>发送的请求数量</td></tr><tr><td>-p</td><td>postfile，指定包含post数据的文件</td></tr><tr><td>-T</td><td>content-type,指定post和put发送请求时请求体的类型</td></tr></tbody></table><p><strong>使用</strong></p><p>测试GET请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ab -r -t 120 -c 5000 http://127.0.0.1:8080/api/ip_query?ip=165.118.213.9<br></code></pre></td></tr></table></figure><p>测试POST请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ab -r -t 120 -c 5000 -p /tmp/post_data.txt -T &#x27;application/json&#x27; http://127.0.0.1:8080/api/ip_query<br></code></pre></td></tr></table></figure><p>其中<code>/tmp/post_data.txt</code>文件的内容为待发送的-T指定格式的数据，在此处为json格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;125.118.213.9&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h3><p><a href="http://www.restran.net/2016/09/27/wrk-http-benchmark/">http://www.restran.net/2016/09/27/wrk-http-benchmark/</a></p><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install libssl-dev<br>git clone https://github.com/wg/wrk.git<br>cd wrk<br>make<br>cp wrk /usr/sbin<br></code></pre></td></tr></table></figure><p><strong>常见options</strong></p><table><thead><tr><th>option</th><th>含义</th></tr></thead><tbody><tr><td>-c</td><td>打开的连接数，即并发数</td></tr><tr><td>-d</td><td>压力测试时间：发送请求的最长时间</td></tr><tr><td>-t</td><td>施压机器使用的线程数量</td></tr><tr><td>-s</td><td>指定要加载的lua脚本</td></tr><tr><td>–latency</td><td>打印延迟统计信息</td></tr></tbody></table><p><strong>使用</strong></p><p>测试GET请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wrk -t10 -c5000 -d120s --latency http://127.0.0.1:8080/api/ip_query?ip=165.118.213.9<br></code></pre></td></tr></table></figure><p>测试POST请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wrk -t50 -c5000 -d120s --latency -s /tmp/wrk_post.lua http://127.0.0.1:8080<br></code></pre></td></tr></table></figure><p>其中<code>/tmp/wrk_post.lua</code>文件的内容为待加载的lua脚本，指定post的path，header，body</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">request = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>  <span class="hljs-built_in">path</span> = <span class="hljs-string">&quot;/api/ip_query&quot;</span><br>  wrk.headers[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&quot;application/json&quot;</span><br>  wrk.body = <span class="hljs-string">&quot;&#123;\&quot;ip\&quot;:\&quot;125.118.213.9\&quot;&#125;&quot;</span><br>  <span class="hljs-keyword">return</span> wrk.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-built_in">path</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h3><p><strong>安装</strong></p><p>安装jmeter前需要先安装jdk1.8。然后在Apache官网可以下载jmeter，<a href="http://archive.apache.org/dist/jmeter/binaries/">点此下载</a></p><p><strong>使用</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/jmeterjmeter%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86xmind.jpg" alt="xmind-jmeter"></p><p>以上图片来自一个测试大牛，非常详细，完整的xmind文件下载见：<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/xmind/jmeter/jmeter.xmind">jmeter-张蓓.xmind</a></p><p>jmeter的入门级使用也可以参考最后面的参考资料部分：<strong>使用Apache Jmeter进行并发压力测试</strong></p><h2 id="压力测试结果分析"><a href="#压力测试结果分析" class="headerlink" title="压力测试结果分析"></a>压力测试结果分析</h2><p><strong>wrk GET请求压测结果</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@ubuntu:/tmp# wrk -t10 -c5000 -d60s --latency http://<span class="hljs-number">127.0.0.1:8080</span>/api/ip_query?ip=<span class="hljs-number">165.118.213.9</span><br><span class="hljs-attribute">Running</span> <span class="hljs-number">1</span>m test @ http://<span class="hljs-number">127.0.0.1:8080</span>/api/ip_query?ip=<span class="hljs-number">165.118.213.9</span><br>  <span class="hljs-attribute">10</span> threads and <span class="hljs-number">5000</span> connections<br>  <span class="hljs-attribute">Thread</span> Stats   Avg      Stdev     Max   +/- Stdev<br>    <span class="hljs-attribute">Latency</span>   <span class="hljs-number">897</span>.<span class="hljs-number">19</span>ms  <span class="hljs-number">322</span>.<span class="hljs-number">83</span>ms   <span class="hljs-number">1</span>.<span class="hljs-number">99</span>s    <span class="hljs-number">70</span>.<span class="hljs-number">52</span>%<br>    <span class="hljs-attribute">Req</span>/Sec   <span class="hljs-number">318</span>.<span class="hljs-number">80</span>    <span class="hljs-number">206</span>.<span class="hljs-number">03</span>     <span class="hljs-number">2</span>.<span class="hljs-number">14</span>k    <span class="hljs-number">68</span>.<span class="hljs-number">84</span>%<br>  <span class="hljs-attribute">Latency</span> Distribution<br>     <span class="hljs-attribute">50</span>%  <span class="hljs-number">915</span>.<span class="hljs-number">29</span>ms<br>     <span class="hljs-attribute">75</span>%    <span class="hljs-number">1</span>.<span class="hljs-number">11</span>s <br>     <span class="hljs-attribute">90</span>%    <span class="hljs-number">1</span>.<span class="hljs-number">29</span>s <br>     <span class="hljs-attribute">99</span>%    <span class="hljs-number">1</span>.<span class="hljs-number">57</span>s <br>  <span class="hljs-attribute">187029</span> requests in <span class="hljs-number">1</span>.<span class="hljs-number">00</span>m, <span class="hljs-number">51</span>.<span class="hljs-number">01</span>MB read<br>  <span class="hljs-attribute">Socket</span> errors: connect <span class="hljs-number">0</span>, read <span class="hljs-number">0</span>, write <span class="hljs-number">0</span>, timeout <span class="hljs-number">38</span><br><span class="hljs-attribute">Requests</span>/sec:   <span class="hljs-number">3113</span>.<span class="hljs-number">27</span><br><span class="hljs-attribute">Transfer</span>/sec:    <span class="hljs-number">869</span>.<span class="hljs-number">53</span>KB<br></code></pre></td></tr></table></figure><p><strong>ab GET请求压测结果</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">root@ubuntu:/tmp#</span> <span class="hljs-string">ab</span> <span class="hljs-string">-r</span> <span class="hljs-string">-t</span> <span class="hljs-number">60</span> <span class="hljs-string">-c</span> <span class="hljs-number">5000 </span><span class="hljs-string">http://127.0.0.1:8080/api/ip_query?ip=165.118.213.9</span><br><span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">ApacheBench,</span> <span class="hljs-string">Version</span> <span class="hljs-number">2.3</span> <span class="hljs-string">&lt;$Revision:</span> <span class="hljs-number">1796539</span> <span class="hljs-string">$&gt;</span><br><span class="hljs-string">Copyright</span> <span class="hljs-number">1996 </span><span class="hljs-string">Adam</span> <span class="hljs-string">Twiss,</span> <span class="hljs-string">Zeus</span> <span class="hljs-string">Technology</span> <span class="hljs-string">Ltd,</span> <span class="hljs-string">http://www.zeustech.net/</span><br><span class="hljs-string">Licensed</span> <span class="hljs-string">to</span> <span class="hljs-string">The</span> <span class="hljs-string">Apache</span> <span class="hljs-string">Software</span> <span class="hljs-string">Foundation,</span> <span class="hljs-string">https://www.apache.org/</span><br><br><span class="hljs-string">Benchmarking</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-string">(be</span> <span class="hljs-string">patient)</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">5000 </span><span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">10000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">15000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">20000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">25000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">30000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">35000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">40000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">45000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Completed</span> <span class="hljs-number">50000</span> <span class="hljs-string">requests</span><br><span class="hljs-string">Finished</span> <span class="hljs-number">50000</span> <span class="hljs-string">requests</span><br><br><br><span class="hljs-attr">Server Software:</span>        <span class="hljs-string">gunicorn/19.7.1</span><br><span class="hljs-attr">Server Hostname:</span>        <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-attr">Server Port:</span>            <span class="hljs-number">8080</span><br><br><span class="hljs-attr">Document Path:</span>          <span class="hljs-string">/api/ip_query?ip=165.118.213.9</span><br><span class="hljs-attr">Document Length:</span>        <span class="hljs-number">128</span> <span class="hljs-string">bytes</span><br><br><span class="hljs-attr">Concurrency Level:</span>      <span class="hljs-number">5000</span><br><span class="hljs-attr">Time taken for tests:</span>   <span class="hljs-number">19.617</span> <span class="hljs-string">seconds</span><br><span class="hljs-attr">Complete requests:</span>      <span class="hljs-number">50000</span><br><span class="hljs-attr">Failed requests:</span>        <span class="hljs-number">2</span><br>   <span class="hljs-string">(Connect:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">Receive:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">Length:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">Exceptions:</span> <span class="hljs-number">1</span><span class="hljs-string">)</span><br><span class="hljs-attr">Total transferred:</span>      <span class="hljs-number">14050000</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">HTML transferred:</span>       <span class="hljs-number">6400000</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">Requests per second:</span>    <span class="hljs-number">2548.85</span> [<span class="hljs-comment">#/sec] (mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">1961.668</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">0.392</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span><br><span class="hljs-attr">Transfer rate:</span>          <span class="hljs-number">699.44</span> [<span class="hljs-string">Kbytes/sec</span>] <span class="hljs-string">received</span><br><br><span class="hljs-string">Connection</span> <span class="hljs-string">Times</span> <span class="hljs-string">(ms)</span><br>              <span class="hljs-string">min</span>  <span class="hljs-string">mean</span>[<span class="hljs-string">+/-sd</span>] <span class="hljs-string">median</span>   <span class="hljs-string">max</span><br><span class="hljs-attr">Connect:</span>        <span class="hljs-number">0</span>  <span class="hljs-number">597</span> <span class="hljs-number">1671.8      </span><span class="hljs-number">4</span>   <span class="hljs-number">15500</span><br><span class="hljs-attr">Processing:</span>     <span class="hljs-number">4</span>  <span class="hljs-number">224</span> <span class="hljs-number">201.4</span>    <span class="hljs-number">173</span>    <span class="hljs-number">3013</span><br><span class="hljs-attr">Waiting:</span>        <span class="hljs-number">4</span>  <span class="hljs-number">223</span> <span class="hljs-number">200.1</span>    <span class="hljs-number">172</span>    <span class="hljs-number">2873</span><br><span class="hljs-attr">Total:</span>          <span class="hljs-number">7</span>  <span class="hljs-number">821</span> <span class="hljs-number">1694.4    </span><span class="hljs-number">236</span>   <span class="hljs-number">15914</span><br><br><span class="hljs-string">Percentage</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">requests</span> <span class="hljs-string">served</span> <span class="hljs-string">within</span> <span class="hljs-string">a</span> <span class="hljs-string">certain</span> <span class="hljs-string">time</span> <span class="hljs-string">(ms)</span><br>  <span class="hljs-number">50</span><span class="hljs-string">%</span>    <span class="hljs-number">236</span><br>  <span class="hljs-number">66</span><span class="hljs-string">%</span>    <span class="hljs-number">383</span><br>  <span class="hljs-number">75</span><span class="hljs-string">%</span>   <span class="hljs-number">1049</span><br>  <span class="hljs-number">80</span><span class="hljs-string">%</span>   <span class="hljs-number">1155</span><br>  <span class="hljs-number">90</span><span class="hljs-string">%</span>   <span class="hljs-number">1476</span><br>  <span class="hljs-number">95</span><span class="hljs-string">%</span>   <span class="hljs-number">3295</span><br>  <span class="hljs-number">98</span><span class="hljs-string">%</span>   <span class="hljs-number">7347</span><br>  <span class="hljs-number">99</span><span class="hljs-string">%</span>   <span class="hljs-number">7551</span><br> <span class="hljs-number">100</span><span class="hljs-string">%</span>  <span class="hljs-number">15914</span> <span class="hljs-string">(longest</span> <span class="hljs-string">request)</span><br></code></pre></td></tr></table></figure><p><strong>jmeter GET请求压测结果</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/jmeter/ip_query_jmeter.jpg"></p><p><strong>结果分析</strong></p><p>以上三个工具的压测结果大体相同，RPS(Requests per second)大致在3000左右，此时机器配置为4核4G内存，并且gunicorn开了10个worker，内存占用3.2G。单台机器只有3000并发，对于此配置的机器来说，需要进一步分析原因。后续再弄一台机器，负载均衡后能达到5000以上才能满足使用要求。</p><h2 id="压力测试注意事项"><a href="#压力测试注意事项" class="headerlink" title="压力测试注意事项"></a>压力测试注意事项</h2><p><strong>文件打开数</strong></p><p>压力测试时对施压机器的文件打开数一般有要求，远不止1024个open files，需要增加linux系统的文件打开数，增加方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">文件打开数</span><br>ulimit -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改文件打开数</span><br>ulimit -n 500000<br></code></pre></td></tr></table></figure><p><strong>SYN洪水攻击保护</strong></p><p>linux系统中有一个参数：<code>/etc/sysctl.conf</code>配置文件中的<code>net.ipv4.tcp_syncookies</code>字段。这个字段值默认为1，表示系统会检测SYN洪水攻击，并开启保护。因此压测时，如果发送大量重复性数据的请求，受压机器SYN队列溢出之后启用SYN cookie，导致会有大量请求超时失败。阿里云的负载均衡是有SYN洪水攻击检测和DDos攻击检测功能的，因此在做压力测试时需要注意两点：</p><ul><li>测试时适当关闭负载均衡机器的 net.ipv4.tcp_syncookies 字段</li><li>造数据时应该尽量避免大量重复性数据，以免被识别为攻击。</li></ul><h1 id="gunicorn简介及调优"><a href="#gunicorn简介及调优" class="headerlink" title="gunicorn简介及调优"></a>gunicorn简介及调优</h1><p>关于gunicorn的选择可以参考测试报告：<a href="http://www.vincentsfootprint.com/post/python-wsgi-performance-benchmark-test">Python WSGI Server 性能分析</a></p><p>在选定gunicorn作为WSGI server之后，需要根据机器选择相应的worker数量以及每个worker的worker-class。</p><p><strong>worker数量选择</strong></p><p>每一个worker都是作为一个单独的子进程来运行，都持有一份独立的内存数据，每增加或减少一个worker，系统内存明显的成倍数的改变。最初单台机器gunicorn开启3个worker，系统只支持1000RPS的并发。当把worker扩展为9个之后，系统支持3000RPS的并发。因此在内存足够的时候，可以适当增加worker数量。</p><p><strong>worker-class选择</strong></p><p>可以参考尾部的参考资料中的<strong>gunicorn常用settings</strong>和<strong>Gunicorn 几种 Worker class 性能测试比较</strong>这两篇文章。</p><p>将gunicorn启动时的worker-class从默认的sync改成gevent之后，系统RPS直接翻倍。</p><table><thead><tr><th>worker-class</th><th>worker数量</th><th>ab测试的RPS</th></tr></thead><tbody><tr><td>sync</td><td>3</td><td>573.90</td></tr><tr><td>gevent</td><td>3</td><td>1011.84</td></tr></tbody></table><p>gevent依赖：gevent &gt;&#x3D; 0.13。因此需要先使用pip安装。对应的gunicorn启动flask应用的命令需要修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gunicorn -w10 -b0.0.0.0:8080 ip_query_app:ip_app --worker-class gevent<br></code></pre></td></tr></table></figure><h1 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h1><p><strong>改进ip数据库准确性</strong></p><p>损失效率换取准确性：使用单一ip数据库会存在一些ip无法查询出结果的情况，并且国外ip一般只能精确到国家。可以平衡几家ip数据库的准确度和覆盖率，当无法查询出准确的地址信息时去查询另外几个ip数据库。</p><p><strong>提高单台机器并发量</strong></p><p>从发起请求，到WSGI服务器处理，到应用接口，到ip查询每个过程都需要单独分析每秒可执行量，进而分析系统瓶颈，从根本上提高单机并发量。</p><hr><p><strong>参考资料</strong></p><ul><li><a href="https://www.ipip.net/download.html">全球 IPv4 地址归属地数据库(IPIP.NET 版)</a></li><li><a href="http://python.jobbole.com/85008/">使用flask开发RESTful架构的api服务器端(5)–部署flask应用到nginx</a></li><li><a href="http://www.jianshu.com/p/be9dd421fb8d">python web 部署：nginx + gunicorn + supervisor + flask 部署笔记</a></li><li><a href="https://suncle.me/2017/03/30/CentOS7%E4%B8%8ANginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/">flowsnow-nginx编译安装</a></li><li><a href="http://liyangliang.me/posts/2015/06/using-supervisor/">supervisor推荐教程-使用 supervisor 管理进程</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">维基-二叉查找树</a></li><li><a href="http://www.jianshu.com/p/cf0853226dc6">简书-wrk压力测试post接口</a></li><li><a href="http://blog.jassassin.com/2014/04/17/tools/jmeter/">使用Apache Jmeter进行并发压力测试</a></li><li><a href="http://docs.gunicorn.org/en/stable/settings.html">gunicorn常用settings</a></li><li><a href="http://blog.wiseturtles.com/posts/gunicorn-worker-class-compare.html">Gunicorn 几种 Worker class 性能测试比较</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flask</tag>
      
      <tag>http</tag>
      
      <tag>高并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Erlang学习笔记(1)</title>
    <link href="/2017/08/11/erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <url>/2017/08/11/erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<h3 id="0x0-说在前面"><a href="#0x0-说在前面" class="headerlink" title="0x0 说在前面"></a>0x0 说在前面</h3><p>Erlang读音<code>/ˈɜːrlæŋ/</code>。第一次见到的时候总感觉怎么读都读不对，后来在维基上看到Erlang标注了音标，才能准确的读出来，而且也没那么怪异。因为工作才有机会接触这门语言，也因此只有三天的时间可以看《Erlang程序设计》这本书。学习这门语言的时候带着一个工作目标：把一个Erlang日志收集分析统计的代码转换成Python的。而Erlang的风格是尽量不写注释，尽量在写函数名和变量名的时候表达清楚代码的含义。这样一来学习Erlang就成了必要的，很庆幸，领导给了三天时间学习，三天时间基本也足够了。除了这一片基础语法的入门篇之外，后续还有一篇或者两篇并发编程和分布式编程的，毕竟这个才是Erlang擅长的领域。话不多说，<code>show me your article</code></p><span id="more"></span><h3 id="0x1-配置开发环境"><a href="#0x1-配置开发环境" class="headerlink" title="0x1 配置开发环境"></a>0x1 配置开发环境</h3><p>依赖工具：</p><ul><li>Erlang版本：18.3</li><li>IDE：IDEA</li></ul><p>下载链接：</p><ul><li>Erlang：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a>  选择otp18.3即可。</li><li>IDEA：<a href="https://www.jetbrains.com/idea/download">https://www.jetbrains.com/idea/download</a>  选择社区版即可。</li></ul><p>IDEA配置Erlang插件：</p><ul><li><a href="https://www.jetbrains.com/help/idea/getting-started-with-erlang.html#r_Getting_started_with_Erlang.xmld271393e315">IDEA官方文档-使用IDEA开发Erlang</a></li></ul><h3 id="0x2-基础知识"><a href="#0x2-基础知识" class="headerlink" title="0x2 基础知识"></a>0x2 基础知识</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>% 百分比符号标明注释的开始。</li><li>%% 两个符号通常用于注释函数。</li><li>%%% 三个符号通常用于注释模块。</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>所有的变量都必须以大写字母开头，变量只可一次赋值，赋值之后不可在变。 f()函数释放shell绑定变量。</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><ul><li>浮点数必须含有小数点且小数点后必须有一位10进制数</li><li>用&#x2F;来除两个整数时相除结果会自动转换成浮点数</li><li>div取整，rem取余</li></ul><h4 id="三种标点符号"><a href="#三种标点符号" class="headerlink" title="三种标点符号"></a>三种标点符号</h4><ul><li>整个函数的定义结束时用一个句号“.”</li><li>函数参数，数据构建，顺序语句之间，用逗号“,”分隔</li><li>函数定义、<code>case</code>、<code>if</code>、<code>try..catch</code>、<code>receive</code>表达式中的模式匹配时，用分号“;”分界</li></ul><h4 id="恒等"><a href="#恒等" class="headerlink" title="恒等"></a>恒等</h4><p>恒等测试符号 &#x3D;:&#x3D;以及不等测试符号 &#x3D;&#x2F;&#x3D;</p><h4 id="块表达式"><a href="#块表达式" class="headerlink" title="块表达式"></a>块表达式</h4><p>当程序中某处的语法要求只能使用单个表达式但是逻辑上又需要在此使用多个表达式时，就可以使用begin…end快表达式</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">begin</span><br>  Expr1,<br>  ...<br>  ExprN<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="0x3-内置数据结构"><a href="#0x3-内置数据结构" class="headerlink" title="0x3 内置数据结构"></a>0x3 内置数据结构</h3><h4 id="元组及模式匹配（解构）"><a href="#元组及模式匹配（解构）" class="headerlink" title="元组及模式匹配（解构）"></a>元组及模式匹配（解构）</h4><ul><li>_ 代表丢弃的变量，和python相同</li><li>匹配时模式匹配符&#x3D;左右两边的元组的结构必须相同。</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; Point = &#123;point, <span class="hljs-number">20</span>, <span class="hljs-number">43</span>&#125;.<br>&#123;point,<span class="hljs-number">20</span>,<span class="hljs-number">43</span>&#125;<br><span class="hljs-number">2</span>&gt; &#123;point, x, y&#125; = Point.<br>** exception error: no match <span class="hljs-keyword">of</span> right hand side value &#123;point,<span class="hljs-number">20</span>,<span class="hljs-number">43</span>&#125;<br><span class="hljs-number">3</span>&gt; &#123;point, X, Y&#125; = Point.<br>&#123;point,<span class="hljs-number">20</span>,<span class="hljs-number">43</span>&#125;<br><span class="hljs-number">4</span>&gt; X.<br><span class="hljs-number">20</span><br><span class="hljs-number">5</span>&gt; Y.<br><span class="hljs-number">43</span><br><span class="hljs-number">6</span>&gt; Person = &#123;person, &#123;name, &#123;first, joe&#125;, &#123;last, armstrong&#125;&#125;, &#123;footsize, <span class="hljs-number">42</span>&#125;&#125;.<br>&#123;person,&#123;name,&#123;first,joe&#125;,&#123;last,armstrong&#125;&#125;,&#123;footsize,<span class="hljs-number">42</span>&#125;&#125;<br><span class="hljs-number">7</span>&gt; &#123;_, &#123;_, &#123;_, Who&#125;, &#123;_, _&#125;&#125;, &#123;_, Size&#125;&#125; = Person.<br>&#123;person,&#123;name,&#123;first,joe&#125;,&#123;last,armstrong&#125;&#125;,&#123;footsize,<span class="hljs-number">42</span>&#125;&#125;<br><span class="hljs-number">8</span>&gt; Who.<br>joe<br><span class="hljs-number">9</span>&gt; Size.<br><span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>列表元素可以是不同的类型。</li><li>列表头：列表的第一个元素</li><li>列表尾：列表除第一个元素剩下的部分</li><li>竖线符号|<ul><li>将列表的头和尾分割开来</li><li>[E1, E2, E4, … , |L]：使用|向列表L的起始处加入多个元素构造成新的列表</li></ul></li><li>列表链接操作符 ++ （中缀添加操作符）</li></ul><p><strong>列表操作演示代码</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; L = [<span class="hljs-number">1</span>+<span class="hljs-number">7</span>, hello, <span class="hljs-number">2</span>-<span class="hljs-number">2</span>, &#123;cost, apple, <span class="hljs-number">30</span>-<span class="hljs-number">20</span>&#125;, <span class="hljs-number">3</span>]. <br>[<span class="hljs-number">8</span>,hello,<span class="hljs-number">0</span>,&#123;cost,apple,<span class="hljs-number">10</span>&#125;,<span class="hljs-number">3</span>]<br><span class="hljs-number">2</span>&gt; L1 = [<span class="hljs-number">123</span>, &#123;oranges, <span class="hljs-number">4</span>&#125; | L].<br>[<span class="hljs-number">123</span>,&#123;oranges,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">8</span>,hello,<span class="hljs-number">0</span>,&#123;cost,apple,<span class="hljs-number">10</span>&#125;,<span class="hljs-number">3</span>]<br><span class="hljs-number">3</span>&gt; [E1 | L2] = L1.<br>[<span class="hljs-number">123</span>,&#123;oranges,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">8</span>,hello,<span class="hljs-number">0</span>,&#123;cost,apple,<span class="hljs-number">10</span>&#125;,<span class="hljs-number">3</span>]<br><span class="hljs-number">4</span>&gt; E1.<br><span class="hljs-number">123</span><br><span class="hljs-number">5</span>&gt; L2.<br>[&#123;oranges,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">8</span>,hello,<span class="hljs-number">0</span>,&#123;cost,apple,<span class="hljs-number">10</span>&#125;,<span class="hljs-number">3</span>]<br><span class="hljs-number">6</span>&gt; [E2, E3 | L3] = L2.<br>[&#123;oranges,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">8</span>,hello,<span class="hljs-number">0</span>,&#123;cost,apple,<span class="hljs-number">10</span>&#125;,<span class="hljs-number">3</span>]<br><span class="hljs-number">7</span>&gt; E3.<br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><strong>列表表达式</strong></p><p>形式：[F(X) || X &lt;- L]</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; L = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-number">2</span>&gt; [<span class="hljs-number">2</span> * X || X &lt;- L].<br>[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br><span class="hljs-number">3</span>&gt; [X || &#123;a, X&#125; &lt;- [&#123;a, <span class="hljs-number">1</span>&#125;, &#123;b, <span class="hljs-number">2</span>&#125;, &#123;c, <span class="hljs-number">3</span>&#125;, &#123;a, <span class="hljs-number">4</span>&#125;, hello, <span class="hljs-string">&quot;wow&quot;</span>]].<br>[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>Erlang的字符串是一个整数列表。整数列表的内容由每一个字符对应的ascii码构成</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; I = $s.<br><span class="hljs-number">115</span><br><span class="hljs-number">2</span>&gt; [I-<span class="hljs-number">32</span>, $u, $r, $p, $r, $i, $s, $e].<br><span class="hljs-string">&quot;Surprise&quot;</span><br><span class="hljs-number">3</span>&gt; $r.                                <br><span class="hljs-number">114</span><br><span class="hljs-number">4</span>&gt; [I-<span class="hljs-number">32</span>, $u, $r, $p, <span class="hljs-number">114</span>, $i, $s, $e].<br><span class="hljs-string">&quot;Surprise&quot;</span><br></code></pre></td></tr></table></figure><h4 id="映射组-Map"><a href="#映射组-Map" class="headerlink" title="映射组(Map)"></a>映射组(Map)</h4><p>映射组是一个由多个Key-Vaule结构组成的符合数据类型，类似于Python的字典。具体使用如下</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; M1 = #&#123;<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;alicdn&quot;</span>, <span class="hljs-string">&quot;percentage&quot;</span> =&gt; <span class="hljs-number">80</span>&#125;.<br>#&#123;<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;alicdn&quot;</span>,<span class="hljs-string">&quot;percentage&quot;</span> =&gt; <span class="hljs-number">80</span>&#125;<br><span class="hljs-number">2</span>&gt; maps:get(<span class="hljs-string">&quot;name&quot;</span>, M1).<br><span class="hljs-string">&quot;alicdn&quot;</span><br><span class="hljs-number">3</span>&gt; M2 = maps:update(<span class="hljs-string">&quot;percentage&quot;</span>, <span class="hljs-number">50</span>, M1).<br>#&#123;<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;alicdn&quot;</span>,<span class="hljs-string">&quot;percentage&quot;</span> =&gt; <span class="hljs-number">50</span>&#125;<br><span class="hljs-number">4</span>&gt; map_size(M1).<br><span class="hljs-number">2</span><br><span class="hljs-number">5</span>&gt; #&#123;<span class="hljs-string">&quot;name&quot;</span> := X, <span class="hljs-string">&quot;percentage&quot;</span> := Y&#125; = M2.<br>#&#123;<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;alicdn&quot;</span>,<span class="hljs-string">&quot;percentage&quot;</span> =&gt; <span class="hljs-number">50</span>&#125;<br><span class="hljs-number">6</span>&gt; X.<br><span class="hljs-string">&quot;alicdn&quot;</span><br><span class="hljs-number">7</span>&gt; Y.<br><span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>构造映射组和模式匹配时的符号不一样，<code>=&gt;</code>和<code>:=</code>的区别。常见的put方法参见erlang maps库的使用。</p><h3 id="0x4-模块"><a href="#0x4-模块" class="headerlink" title="0x4 模块"></a>0x4 模块</h3><ul><li>一个模块存放于一个.erl文件中（模块名和文件名相同）</li><li>编译模块的命令：c(模块名)。编译成功之后就会加载到当前shell中</li><li>调用模块中的函数：模块名:函数名(参数)</li><li>导入模块中的函数：<code>-import(lists, [map/2, sum/1]).</code></li><li>导出模块中的函数：<ul><li>导出指定函数<code>-export([start/0, area/2]).</code></li><li>导出全部函数<code>-compile(export_all).</code>，避免在开发阶段经常会向export中添加函数或者删除函数</li></ul></li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(learn_test)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([area/<span class="hljs-number">1</span>])</span>.<br><br><br><span class="hljs-function"><span class="hljs-title">area</span><span class="hljs-params">(&#123;rectangle, Width, Height&#125;)</span> -&gt;</span> Width * Height;<br><span class="hljs-function"><span class="hljs-title">area</span><span class="hljs-params">(&#123;circle, R&#125;)</span> -&gt;</span> <span class="hljs-number">3.14159</span> * R * R;<br><span class="hljs-function"><span class="hljs-title">area</span><span class="hljs-params">(&#123;square, X&#125;)</span> -&gt;</span> X * X.<br></code></pre></td></tr></table></figure><p>编译模块，调用函数</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; c(learn_test).<br>&#123;ok,learn_test&#125;<br><span class="hljs-number">2</span>&gt; learn_test:area(&#123;circle, <span class="hljs-number">2.0</span>&#125;).<br><span class="hljs-number">12.56636</span><br><span class="hljs-number">3</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x5-函数"><a href="#0x5-函数" class="headerlink" title="0x5 函数"></a>0x5 函数</h3><h4 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h4><p>同名同目（参数数量，arity）的才是同一个函数。因此函数名相同，目不相同的函数是完全不同的两个函数。同名不同目的函数通常作为辅助函数。</p><ul><li><p>函数不会显示地返回值，函数中最后一条语句的执行结果将作为函数的返回值。</p></li><li><p>同一个函数中，并列的逻辑分支之间，用分号 “;” 分界；顺序语句之间，用逗号 “,” 分隔。</p></li></ul><p><strong>示例代码：计算列表元素的和</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(learn_test)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([sum/<span class="hljs-number">1</span>])</span>.<br><br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">(L)</span> -&gt;</span> sum(L, <span class="hljs-number">0</span>).<br><br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">([], N)</span> -&gt;</span> N;<br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">([H|T], N)</span> -&gt;</span> sum(T, H + N).<br></code></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>erlang中的匿名函数就是fun。fun也可以有若干个不同的字句。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; Z = <span class="hljs-keyword">fun</span>(X) -&gt; <span class="hljs-number">2</span>*X <span class="hljs-keyword">end</span>.<br>#Fun&lt;erl_eval.<span class="hljs-number">6.50752066</span>&gt;<br><span class="hljs-number">2</span>&gt; Double = Z.<br>#Fun&lt;erl_eval.<span class="hljs-number">6.50752066</span>&gt;<br><span class="hljs-number">3</span>&gt; Double(<span class="hljs-number">4</span>).<br><span class="hljs-number">8</span><br><span class="hljs-number">4</span>&gt; TempConvert = <span class="hljs-keyword">fun</span>(&#123;c, C&#125;) -&gt; &#123;f, <span class="hljs-number">32</span> + C * <span class="hljs-number">9</span> / <span class="hljs-number">5</span>&#125;;<br><span class="hljs-number">5</span>&gt; (&#123;f, F&#125;) -&gt; &#123;c, (F - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span>&#125;                <br><span class="hljs-number">6</span>&gt; <span class="hljs-keyword">end</span>.                                             <br>#Fun&lt;erl_eval.<span class="hljs-number">6.50752066</span>&gt;<br><span class="hljs-number">7</span>&gt; TempConvert(&#123;c, <span class="hljs-number">100</span>&#125;).                           <br>&#123;f,<span class="hljs-number">212.0</span>&#125;<br><span class="hljs-number">8</span>&gt; TempConvert(&#123;f, <span class="hljs-number">212</span>&#125;).<br>&#123;c,<span class="hljs-number">100.0</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>返回fun或者接受fun作为参数的函数都称为高阶函数。</p><p><strong>以fun为参数的函数</strong></p><p>常见的是lists模块中的map(Fun, List1) -&gt; List2，filter(Pred, List1) -&gt; List2函数。</p><p>lists模块的具体使用参见：<a href="https://www.erlang.org/doc/man/lists.html">https://www.erlang.org/doc/man/lists.html</a></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; Even = <span class="hljs-keyword">fun</span>(X) -&gt; X <span class="hljs-keyword">rem</span> <span class="hljs-number">2</span> =:= <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>.<br>#Fun&lt;erl_eval.<span class="hljs-number">6.50752066</span>&gt;<br><span class="hljs-number">2</span>&gt; lists:map(Even, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]).<br>[<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>]<br><span class="hljs-number">3</span>&gt; lists:filter(Even, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]).<br>[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p><strong>返回fun的函数</strong></p><p>一般在返回的函数内部封装了一些变量和逻辑。通常情况下不写返回fun的函数。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; Mult = <span class="hljs-keyword">fun</span>(Times) -&gt; (<span class="hljs-keyword">fun</span>(X) -&gt; X * Times <span class="hljs-keyword">end</span> ) <span class="hljs-keyword">end</span>.<br>#Fun&lt;erl_eval.<span class="hljs-number">6.50752066</span>&gt;<br><span class="hljs-number">2</span>&gt; Triple = Mult(<span class="hljs-number">3</span>).<br>#Fun&lt;erl_eval.<span class="hljs-number">6.50752066</span>&gt;<br><span class="hljs-number">3</span>&gt; Triple(<span class="hljs-number">4</span>).<br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h3 id="0x6-断言"><a href="#0x6-断言" class="headerlink" title="0x6 断言"></a>0x6 断言</h3><p>强化模式匹配的功能，给模式匹配增加一些变量测试和比较的能力</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">(X, Y)</span> <span class="hljs-title">when</span> X &gt; Y -&gt;</span> X;<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">(_, Y)</span> -&gt;</span> Y.<br></code></pre></td></tr></table></figure><h3 id="0x7-记录"><a href="#0x7-记录" class="headerlink" title="0x7 记录"></a>0x7 记录</h3><p>记录是Erlang中基于元组的key-value数据定义，使用示例如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(learn_test)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([record_test1/<span class="hljs-number">0</span>, record_test2/<span class="hljs-number">0</span>])</span>.<br><br><span class="hljs-keyword">-record</span><span class="hljs-params">(person, &#123;name, age=<span class="hljs-number">18</span>, hobby=[<span class="hljs-string">&quot;erlang&quot;</span>]&#125;)</span>.    <span class="hljs-comment">%% record定义可以存放于hrl和erl中</span><br><br><span class="hljs-function"><span class="hljs-title">record_test1</span><span class="hljs-params">()</span> -&gt;</span><br>  Person = #person&#123;name=<span class="hljs-string">&quot;hahaha&quot;</span>&#125;,    <span class="hljs-comment">%% 为record中字段赋值</span><br>  Person#person.hobby.    <span class="hljs-comment">%%  通过.操作符访问record中字段</span><br><br><span class="hljs-function"><span class="hljs-title">record_test2</span><span class="hljs-params">()</span> -&gt;</span><br>  Person = #person&#123;&#125;,<br>  #person&#123;name = Name&#125; = Person,    <span class="hljs-comment">%% 通过模式匹配获取record字段</span><br>  Name. <span class="hljs-comment">%% 输出undefined</span><br></code></pre></td></tr></table></figure><h3 id="0x8-hrl头文件"><a href="#0x8-hrl头文件" class="headerlink" title="0x8 .hrl头文件"></a>0x8 .hrl头文件</h3><p>某些文件的扩展名为 <code>.hrl</code>。这些<code>.hrl</code>是在 <code>.erl</code> 文件中会用到的头文件，使用方法如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-include</span><span class="hljs-params">(<span class="hljs-string">&quot;File_Name&quot;</span>)</span>.<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-include</span><span class="hljs-params">(<span class="hljs-string">&quot;mess_interface.hrl&quot;</span>)</span>.<br></code></pre></td></tr></table></figure><p>.hrl 文件中可以包含任何合法的 Erlang 代码，但是通常里面只包含一些记录和宏的定义。</p><h3 id="0x9-case-x2F-if-表达式"><a href="#0x9-case-x2F-if-表达式" class="headerlink" title="0x9 case &#x2F; if 表达式"></a>0x9 case &#x2F; if 表达式</h3><h4 id="case-表达式"><a href="#case-表达式" class="headerlink" title="case 表达式"></a>case 表达式</h4><p>case语句语法</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">case</span> Experssion <span class="hljs-keyword">of</span><br>  Pattern1 [<span class="hljs-keyword">when</span> Guard1] -&gt; Expr_seq1;<br>  Pattern2 [<span class="hljs-keyword">when</span> Guard2] -&gt; Expr_seq2;<br>  ...<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>将Expression的结果和各个Pattern逐个匹配，匹配成功，则计算表达式序列的值，并返回。全部匹配不到，则直接报错。</p><p>case语句使用示例:</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(learn_test)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([filter/<span class="hljs-number">2</span>])</span>.<br><br><br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">(P, [H|T])</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> P(H) <span class="hljs-keyword">of</span><br>    <span class="hljs-literal">true</span> -&gt; [H|filter(P, T)];<br>    <span class="hljs-literal">false</span> -&gt; filter(P, T)<br>  <span class="hljs-keyword">end</span><br>;<br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">(_, [])</span> -&gt;</span> [].<br></code></pre></td></tr></table></figure><p>在erl shell中运行结果如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-meta prompt_">1&gt; </span>c(learn_test).<br>&#123;ok,learn_test&#125;<br><span class="hljs-meta prompt_">2&gt; </span>learn_test:filter(fun(X) -&gt; X rem <span class="hljs-number">2</span> =:= <span class="hljs-number">0</span> end, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]).<br>[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h4 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h4><p>if语句使用示例</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(learn_test)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([bigger/<span class="hljs-number">2</span>])</span>.<br><br><br><span class="hljs-function"><span class="hljs-title">bigger</span><span class="hljs-params">(X, Y)</span> -&gt;</span><br>  <span class="hljs-keyword">if</span><br>    X &gt; Y -&gt; X;<br>    X &lt; Y -&gt; Y;<br>    <span class="hljs-literal">true</span> -&gt; -<span class="hljs-number">1</span><br>  <span class="hljs-keyword">end</span>.<br></code></pre></td></tr></table></figure><p>如果没有匹配的断言，则会抛出异常。因此最后一个断言通常是true断言。</p><h3 id="0xA-异常"><a href="#0xA-异常" class="headerlink" title="0xA 异常"></a>0xA 异常</h3><p>Erlang中一切都是表达式，都有返回值，因此异常捕获语句也有返回值。</p><p>捕获所有的异常<code>_:_</code></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(learn_test)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">&quot;ChenLiang&quot;</span>)</span>.<br><br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([catch_exc1/<span class="hljs-number">0</span>,catch_exc2/<span class="hljs-number">0</span>])</span>.<br><br><br><span class="hljs-function"><span class="hljs-title">exception</span><span class="hljs-params">()</span> -&gt;</span><br>  exit(&#123;system, <span class="hljs-string">&quot;123123&quot;</span>&#125;).<br><br><span class="hljs-function"><span class="hljs-title">catch_exc1</span><span class="hljs-params">()</span> -&gt;</span><br>  <span class="hljs-keyword">try</span><br>      exception()<br>  <span class="hljs-keyword">catch</span><br>      _:_  -&gt; <span class="hljs-number">111</span><br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">catch_exc2</span><span class="hljs-params">()</span> -&gt;</span><br>  <span class="hljs-keyword">try</span><br>    exception()<br>  <span class="hljs-keyword">catch</span><br>    _  -&gt; <span class="hljs-number">222</span><br>  <span class="hljs-keyword">end</span>.<br></code></pre></td></tr></table></figure><p>erl shell输出结果</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">1</span>&gt; learn_test:catch_exc1().<br><span class="hljs-number">111</span><br><span class="hljs-number">2</span>&gt; learn_test:catch_exc2().<br>** exception exit: &#123;system,<span class="hljs-string">&quot;123123&quot;</span>&#125;<br>     in function  learn_test:exception/<span class="hljs-number">0</span> (learn_test.erl, line <span class="hljs-number">17</span>)<br>     in call from learn_test:catch_exc2/<span class="hljs-number">0</span> (learn_test.erl, line <span class="hljs-number">28</span>)<br></code></pre></td></tr></table></figure><p>多种错误的检测可以 使用try catch风格。</p><p>参考<a href="https://stackoverflow.com/questions/666111/how-do-i-elegantly-check-many-conditions-in-erlang/669075#669075">stackoverflow-How do I elegantly check many conditions in Erlang?</a></p>]]></content>
    
    
    <categories>
      
      <category>erlang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Erlang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结合公司现状浅谈CMDB</title>
    <link href="/2017/05/23/%E7%BB%93%E5%90%88%E5%85%AC%E5%8F%B8%E7%8E%B0%E7%8A%B6%E6%B5%85%E8%B0%88cmdb/"/>
    <url>/2017/05/23/%E7%BB%93%E5%90%88%E5%85%AC%E5%8F%B8%E7%8E%B0%E7%8A%B6%E6%B5%85%E8%B0%88cmdb/</url>
    
    <content type="html"><![CDATA[<p>本篇文章结合参考资料中的几篇CMDB的文章再加上目前公司的现状谈一谈CMDB。</p><h1 id="CMDB概述"><a href="#CMDB概述" class="headerlink" title="CMDB概述"></a>CMDB概述</h1><p>CMDB：configuration management database，配置管理数据库。CMDB本质上是一个数据库，提供数据的存储、查询、校验等操作，是一个<strong>集中式</strong>的数据托管中心，托管的内容包含所有的软硬件资产（configuration items）。各个部门各个团队各个系统下属的各种重要的软硬件资产都属于CMDB统一管理的内容。</p><h1 id="公司运维现状"><a href="#公司运维现状" class="headerlink" title="公司运维现状"></a>公司运维现状</h1><p><strong>资产现状</strong></p><p>全国各地区内网不互通。这个就是现状了，因为公司产品是为国家服务，所以全国各地的环境都在各自的内网中，安全性极高，在这种情况下，每个地区都配置了几个运维手工维护当地的环境，内外网完全隔离。</p><p><strong>运维情况现状</strong></p><p>由于公司资产地域分散且网络不互通，因此公司的自动化运维程度基本为0。整体上来说没有运维开发的岗位，目前的运维仍然停留在人工运维结合shell脚本的时代，这些其实都算不上自动化运维，前段时间，开始搞ansible自动化部署和升级的事情，整个过程都是shell脚本完成。为了控制人力成本，甚至否认一些用新技术。拿Python这门语言来说，本身很适合自动化运维，用于自动化升级那是再适合不过了，虽然底层会依赖shell，但是Python写出来的逻辑必然会更清楚，但是上层考虑到后续维护人员需要掌握Python和shell两种技术，最终还是否定了Python，其实也就是否定了自动化运维。转而几种人员去研究日志中心和nagios监控，自动化运维的事情也自然不了了之。</p><span id="more"></span><h1 id="CMDB现状"><a href="#CMDB现状" class="headerlink" title="CMDB现状"></a>CMDB现状</h1><p>目前公司里面还没有产生建设CMDB的萌芽，资产管理部门和运维中心团队有自己的配置库，也就是自建库。但是并没有将产品团队的软件资产列入配置管理的范围。各个产品团队使用Confluence文档服务器或者Excel表格（这种情况较多）管理自己的软硬件资源，并称之为资源台账。就服务器而言，经常不知道一个ip对应的服务器是否正在使用，由谁使用，这些信息一无所知。如果各个团队使用自建库，而不是通过文档形式来管理，那这种CMDB最多也只能算是各自为政的CMDB，并不是集中式的数据托管。</p><h1 id="CMDB设计"><a href="#CMDB设计" class="headerlink" title="CMDB设计"></a>CMDB设计</h1><h2 id="最简单的设计：一种配置一个表"><a href="#最简单的设计：一种配置一个表" class="headerlink" title="最简单的设计：一种配置一个表"></a>最简单的设计：一种配置一个表</h2><p>比如，ip单独成表，host单独成表</p><p>优点：配置简单直观</p><p>缺点：一旦某种配置需要修改字段，就需要修改代码，代码维护成本太高</p><h2 id="复杂点的设计：列式数据存储"><a href="#复杂点的设计：列式数据存储" class="headerlink" title="复杂点的设计：列式数据存储"></a>复杂点的设计：列式数据存储</h2><p>表名，列名，列值，行分开存放到四张张表(schema, filed, value, entity)</p><ul><li>schema：一个配置表在schema中就是一条记录，记录表的信息和描述。</li><li>field：每一列的列名和列相关的meta信息都存放在field表中。</li><li>entity：当作rowid使用，表示唯一衡量传统意义上的一行数据。</li><li>value：存放每一条记录的每一列的值，即一个entity和一个field既可以确定一个值。</li></ul><p>表的设计如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/cmdb/cmdb.jpg"></p><p>整个设计的sql如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- MySQL Workbench Forward Engineering<br><br>SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;<br>SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;<br>SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;TRADITIONAL,ALLOW_INVALID_DATES&#x27;;<br><br>-- -----------------------------------------------------<br>-- Schema mydb<br>-- -----------------------------------------------------<br><br>-- -----------------------------------------------------<br>-- Schema mydb<br>-- -----------------------------------------------------<br>CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;<br>USE `mydb` ;<br><br>-- -----------------------------------------------------<br>-- Table `mydb`.`schema`<br>-- -----------------------------------------------------<br>CREATE TABLE IF NOT EXISTS `mydb`.`schema` (<br>  `id` INT NOT NULL AUTO_INCREMENT,<br>  `name` VARCHAR(45) NOT NULL,<br>  `desc` TEXT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE INDEX `name_UNIQUE` (`name` ASC))<br>ENGINE = InnoDB;<br><br><br>-- -----------------------------------------------------<br>-- Table `mydb`.`field`<br>-- -----------------------------------------------------<br>CREATE TABLE IF NOT EXISTS `mydb`.`field` (<br>  `id` INT NOT NULL AUTO_INCREMENT,<br>  `name` VARCHAR(45) NOT NULL,<br>  `meta` TEXT NULL,<br>  `schema_id` INT NOT NULL,<br>  PRIMARY KEY (`id`),<br>  INDEX `fk_field_schema_idx` (`schema_id` ASC),<br>  CONSTRAINT `fk_field_schema`<br>    FOREIGN KEY (`schema_id`)<br>    REFERENCES `mydb`.`schema` (`id`)<br>    ON DELETE NO ACTION<br>    ON UPDATE NO ACTION)<br>ENGINE = InnoDB;<br><br><br>-- -----------------------------------------------------<br>-- Table `mydb`.`entity`<br>-- -----------------------------------------------------<br>CREATE TABLE IF NOT EXISTS `mydb`.`entity` (<br>  `id` INT NOT NULL AUTO_INCREMENT,<br>  `key` VARCHAR(45) NOT NULL,<br>  `schema_id` INT NOT NULL,<br>  PRIMARY KEY (`id`),<br>  INDEX `fk_entity_schema1_idx` (`schema_id` ASC),<br>  CONSTRAINT `fk_entity_schema1`<br>    FOREIGN KEY (`schema_id`)<br>    REFERENCES `mydb`.`schema` (`id`)<br>    ON DELETE NO ACTION<br>    ON UPDATE NO ACTION)<br>ENGINE = InnoDB;<br><br><br>-- -----------------------------------------------------<br>-- Table `mydb`.`value`<br>-- -----------------------------------------------------<br>CREATE TABLE IF NOT EXISTS `mydb`.`value` (<br>  `id` INT NOT NULL AUTO_INCREMENT,<br>  `value` TEXT NOT NULL,<br>  `field_id` INT NOT NULL,<br>  `entity_id` INT NOT NULL,<br>  PRIMARY KEY (`id`),<br>  INDEX `fk_value_field1_idx` (`field_id` ASC),<br>  INDEX `fk_value_entity1_idx` (`entity_id` ASC),<br>  INDEX `ux_value` (`field_id` ASC, `entity_id` ASC),<br>  CONSTRAINT `fk_value_field1`<br>    FOREIGN KEY (`field_id`)<br>    REFERENCES `mydb`.`field` (`id`)<br>    ON DELETE NO ACTION<br>    ON UPDATE NO ACTION,<br>  CONSTRAINT `fk_value_entity1`<br>    FOREIGN KEY (`entity_id`)<br>    REFERENCES `mydb`.`entity` (`id`)<br>    ON DELETE NO ACTION<br>    ON UPDATE NO ACTION)<br>ENGINE = InnoDB;<br><br><br>SET SQL_MODE=@OLD_SQL_MODE;<br>SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;<br>SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;<br><br></code></pre></td></tr></table></figure><p>数据库查询时需要提供(entity, schema, field, value)这样一个四元组才能得到结果。</p><p><strong>优点</strong>：在线定义，表有变动时不需要修改代码，增加一列只需要向field表中插入一个字段。</p><p><strong>缺点</strong>：复杂，增删改查时需要同时操作多个表，对数据的约束需要在应用层去实现，需要自己封装ORM，每一列的约束信息存放在field表的meta字段中。</p><h2 id="更复杂的设计：数据多版本和回滚"><a href="#更复杂的设计：数据多版本和回滚" class="headerlink" title="更复杂的设计：数据多版本和回滚"></a>更复杂的设计：数据多版本和回滚</h2><p><strong>增加数据多版本</strong></p><p>CMDB存放的信息都是非常重要的信息，因此不允许修改数据，每一次修改数据都单独增加一条记录，这样就可以保证数据多版本。因此可以增加一个snapshot快照表，用来存放各个历史版本的数据。snapshot表的具体设计较复杂，暂不使用。</p><p><strong>增加回滚</strong></p><p>增加数据多版本之后对应的就可以增加一个回滚的功能，多版本基础上的回滚功能可以参考git的实现。</p><h1 id="CMDB使用结论"><a href="#CMDB使用结论" class="headerlink" title="CMDB使用结论"></a>CMDB使用结论</h1><p>强烈反对大型集中式CMDB。CMDB团队执行力不强，需求多变，短期内看不到价值等多种原因导致在大多数互联网公司CMDB是无法落地的，到目前为止除了华为也没几家公司能把CMDB落地直到发挥CMDB的价值（华为都花了7年的时间，更别说别的公司了）。</p><p>如果一定要使用CMDB，那只能使用分散式的各自为政的，各个团队使用各个团队的自建库，比如管IP库的就专门设计IP库，管账号库的就专门设计账号库，数据库之间通过各自提供的api通讯。但是分散式的缺点是从领导的角度看，看不到全局的数据，因此还需要做一个集中化的dashboard。</p><h1 id="CMDB替代方案"><a href="#CMDB替代方案" class="headerlink" title="CMDB替代方案"></a>CMDB替代方案</h1><p>CMDB在大多数互联网公司不可行，因此很多公司都另辟蹊径，比如一种方式常用的方式 Mesos</p><ul><li>Mesos：托管于Apache下C++开发的开源分布式资源管理系统</li></ul><p>Mesos的调度框架可以有多种语言开发，包括Python。</p><hr><p>参考</p><ul><li><a href="http://mp.weixin.qq.com/s/t2X2hCY1kwO__qdKfS-fAQ">冰与火之歌，华为CMDB是如何炼成的</a></li><li><a href="https://en.wikipedia.org/wiki/Configuration_management_database">维基-Configuration management database</a></li><li><a href="https://www.csdn.net/article/a/2016-01-25/15834593">CMDB经验分享之 – 剖析CMDB的设计过程</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMDB</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实现通用web框架</title>
    <link href="/2017/05/22/python%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8web%E6%A1%86%E6%9E%B6/"/>
    <url>/2017/05/22/python%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8web%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Python WSGI规定了Web服务器和Python Web应用程序或Web框架之间的标准接口，主要是为了促进Web应用程序在各种Web服务器上的可移植性。在WSGI的规范下，各种各样的Web服务器和Web框架都可以很好的交互。由于WSGI的存在，用Python写一个简单的Web框架也变得容易了。</p><p>Web框架的核心部分是路由系统，客户端的请求Request发到wsgi服务器之后Web框架根据请求中的method和path进行多级路由后找到对应的handle方法，在调用方法处理Request得到Response。</p><p>本次主要依赖于两个库：</p><ul><li>WebOb库，用于封装wsgi的environ参数。</li><li>re库，使用正则表达式匹配URL中的路径。</li></ul><h1 id="层次结构图"><a href="#层次结构图" class="headerlink" title="层次结构图"></a>层次结构图</h1><p>下面是客户端发送请求到WSGI服务器经过Web框架处理的整个流程的层次结构和数据流向图。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/Web%E6%A1%86%E6%9E%B6%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"></p><h1 id="Web框架实现"><a href="#Web框架实现" class="headerlink" title="Web框架实现"></a>Web框架实现</h1><p>代码：<a href="https://github.com/Flowsnow/web_framework">https://github.com/Flowsnow/web_framework</a></p><p>参见每一次commit。</p><hr><p>参考</p><ul><li><p><a href="https://suncle.me/2017/04/07/Python-WSGI%E6%8E%A5%E5%8F%A3/">Python-WSGI接口</a></p></li><li><p><a href="https://coding.net/u/comyn/p/web/git">comyn-web</a></p></li><li><p><a href="http://anandology.com/blog/how-to-write-a-web-framework-in-python/">How to write a web framework in Python</a></p></li><li><p><a href="https://www.cnblogs.com/russellluo/p/3338616.html">用Python写一个简单的Web框架</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>web</tag>
      
      <tag>框架</tag>
      
      <tag>路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Oracle SQL集锦</title>
    <link href="/2017/05/10/%E5%B8%B8%E7%94%A8oracle-sql%E9%9B%86%E9%94%A6/"/>
    <url>/2017/05/10/%E5%B8%B8%E7%94%A8oracle-sql%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="常用dml和query开并行"><a href="#常用dml和query开并行" class="headerlink" title="常用dml和query开并行"></a>常用dml和query开并行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--开并行</span><br><span class="hljs-keyword">ALTER</span> SESSION FORCE PARALLEL DML PARALLEL <span class="hljs-number">16</span>;<br><span class="hljs-keyword">ALTER</span> SESSION FORCE PARALLEL QUERY PARALLEL <span class="hljs-number">16</span>;<br><span class="hljs-comment">--关并行</span><br><span class="hljs-keyword">ALTER</span> SESSION DISABLE PARALLEL DML ;<br><span class="hljs-keyword">ALTER</span> SESSION DISABLE PARALLEL QUERY;<br></code></pre></td></tr></table></figure><h4 id="索引开并行"><a href="#索引开并行" class="headerlink" title="索引开并行"></a>索引开并行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index IDX_SB_SBZT_LRRQ;<br><span class="hljs-keyword">create</span> index IDX_SB_SBZT_LRRQ <span class="hljs-keyword">on</span> SB_SBZT (LRRQ, CWLX_DM, SWJG_DM)<br>  tablespace TS_GS_SB_IDX<br>  pctfree <span class="hljs-number">20</span><br>  initrans <span class="hljs-number">2</span><br>  maxtrans <span class="hljs-number">255</span><br>  storage<br>  (<br>    <span class="hljs-keyword">initial</span> <span class="hljs-number">64</span>K<br>    next <span class="hljs-number">1</span>M<br>    minextents <span class="hljs-number">1</span><br>    maxextents unlimited<br>  ) parallel <span class="hljs-number">6</span>;<br><br><span class="hljs-keyword">alter</span> index IDX_SB_SBZT_LRRQ noparallel;<br></code></pre></td></tr></table></figure><h4 id="查看ASM"><a href="#查看ASM" class="headerlink" title="查看ASM"></a>查看ASM</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看asm的各个disk group是否超过80%</span><br><span class="hljs-comment">-- name：name of the disk group</span><br><span class="hljs-comment">-- total_mb：total capacity of the disk group(in megabytes)</span><br><span class="hljs-comment">-- free_mb：unused capacity of the disk group(in megabytes)</span><br><span class="hljs-keyword">select</span> t.name,t.TOTAL_MB <span class="hljs-operator">/</span><span class="hljs-number">1024</span>, round(<span class="hljs-number">100</span> <span class="hljs-operator">*</span> (t.TOTAL_MB <span class="hljs-operator">-</span> t.FREE_MB) <span class="hljs-operator">/</span> t.TOTAL_MB, <span class="hljs-number">2</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;%&#x27;</span><br>  <span class="hljs-keyword">from</span> v$asm_diskgroup t;<br></code></pre></td></tr></table></figure><span id="more"></span><h4 id="查看数据库表空间"><a href="#查看数据库表空间" class="headerlink" title="查看数据库表空间"></a>查看数据库表空间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询数据表空间情况</span><br><span class="hljs-keyword">SELECT</span> d.status &quot;Status&quot;,<br>d.tablespace_name &quot;Name&quot;,<br>d.contents &quot;Type&quot;,<br>d.extent_management &quot;Extent Management&quot;,<br>       TO_CHAR(NVL(a.bytes <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">/</span> <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>), <span class="hljs-string">&#x27;99,999,990.900&#x27;</span>) &quot;Size (M)&quot;,<br>       TO_CHAR(NVL(a.bytes <span class="hljs-operator">-</span> NVL(f.bytes, <span class="hljs-number">0</span>), <span class="hljs-number">0</span>) <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">/</span> <span class="hljs-number">1024</span>,<br>               <span class="hljs-string">&#x27;99999999.999&#x27;</span>) &quot;Used (M)&quot;,<br>       TO_CHAR(NVL((a.bytes <span class="hljs-operator">-</span> NVL(f.bytes, <span class="hljs-number">0</span>)) <span class="hljs-operator">/</span> a.bytes <span class="hljs-operator">*</span> <span class="hljs-number">100</span>, <span class="hljs-number">0</span>),<br>               <span class="hljs-string">&#x27;990.00&#x27;</span>) &quot;Used %&quot;<br>  <span class="hljs-keyword">FROM</span> sys.dba_tablespaces d,<br>       (<span class="hljs-keyword">select</span> tablespace_name, <span class="hljs-built_in">sum</span>(bytes) bytes<br>          <span class="hljs-keyword">from</span> dba_data_files<br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> tablespace_name) a,<br>       (<span class="hljs-keyword">select</span> tablespace_name, <span class="hljs-built_in">sum</span>(bytes) bytes<br>          <span class="hljs-keyword">from</span> dba_free_space<br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> tablespace_name) f<br> <span class="hljs-keyword">WHERE</span> d.tablespace_name <span class="hljs-operator">=</span> a.tablespace_name(<span class="hljs-operator">+</span>)<br>   <span class="hljs-keyword">AND</span> d.tablespace_name <span class="hljs-operator">=</span> f.tablespace_name(<span class="hljs-operator">+</span>)<br>   <span class="hljs-keyword">AND</span> <span class="hljs-keyword">NOT</span><br>        (d.extent_management <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;LOCAL&#x27;</span> <span class="hljs-keyword">AND</span> d.contents <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;TEMPORARY&#x27;</span>)<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> d.status &quot;Status&quot;,<br>d.tablespace_name &quot;Name&quot;,<br>d.contents &quot;Type&quot;,<br>d.extent_management &quot;Extent Management&quot;,<br>       TO_CHAR(NVL(a.bytes <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">/</span> <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>), <span class="hljs-string">&#x27;99,999,990.900&#x27;</span>) &quot;Size (M)&quot;,<br>       TO_CHAR(NVL(t.bytes, <span class="hljs-number">0</span>) <span class="hljs-operator">/</span> <span class="hljs-number">1024</span> <span class="hljs-operator">/</span> <span class="hljs-number">1024</span>, <span class="hljs-string">&#x27;99999999.999&#x27;</span>) &quot;Used (M)&quot;,<br>       TO_CHAR(NVL(t.bytes <span class="hljs-operator">/</span> a.bytes <span class="hljs-operator">*</span> <span class="hljs-number">100</span>, <span class="hljs-number">0</span>), <span class="hljs-string">&#x27;990.00&#x27;</span>) &quot;Used %&quot;<br>  <span class="hljs-keyword">FROM</span> sys.dba_tablespaces d,<br>       (<span class="hljs-keyword">select</span> tablespace_name, <span class="hljs-built_in">sum</span>(bytes) bytes<br>          <span class="hljs-keyword">from</span> dba_temp_files<br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> tablespace_name) a,<br>       (<span class="hljs-keyword">select</span> tablespace_name, <span class="hljs-built_in">sum</span>(bytes_cached) bytes<br>          <span class="hljs-keyword">from</span> v$temp_extent_pool<br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> tablespace_name) t<br> <span class="hljs-keyword">WHERE</span> d.tablespace_name <span class="hljs-operator">=</span> a.tablespace_name(<span class="hljs-operator">+</span>)<br>   <span class="hljs-keyword">AND</span> d.tablespace_name <span class="hljs-operator">=</span> t.tablespace_name(<span class="hljs-operator">+</span>)<br>   <span class="hljs-keyword">AND</span> d.extent_management <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;LOCAL&#x27;</span><br>   <span class="hljs-keyword">AND</span> d.contents <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;TEMPORARY&#x27;</span><br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> &quot;Used %&quot; <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h4 id="判断字段中是否包含小写字母"><a href="#判断字段中是否包含小写字母" class="headerlink" title="判断字段中是否包含小写字母"></a>判断字段中是否包含小写字母</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--gs_cx查询纳税人识别号这个字段中包含小写字母的并且做过工资薪金税费种认定的户数：upper函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> hx_dj.dj_nsrxx a,hx_dj.dj_nsrxx b,hx_rd.rd_sfzrdxxb r<br><span class="hljs-keyword">where</span> a.djxh<span class="hljs-operator">=</span>b.djxh<br><span class="hljs-keyword">and</span> a.djxh<span class="hljs-operator">=</span>r.djxh<br><span class="hljs-keyword">and</span> r.zspm_dm<span class="hljs-operator">=</span><span class="hljs-string">&#x27;101060100&#x27;</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">upper</span>(a.nsrsbh) <span class="hljs-operator">&lt;&gt;</span> a.nsrsbh<br><span class="hljs-keyword">and</span> a.nsrsbh <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;3%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="判断字段中是否包含大写字母"><a href="#判断字段中是否包含大写字母" class="headerlink" title="判断字段中是否包含大写字母"></a>判断字段中是否包含大写字母</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--gs_cx查询纳税人识别号这个字段中包含大写字母的并且做过工资薪金税费种认定的企业户数：lower函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> hx_dj.dj_nsrxx a,hx_dj.dj_nsrxx b,hx_rd.rd_sfzrdxxb r<br><span class="hljs-keyword">where</span> a.djxh<span class="hljs-operator">=</span>b.djxh<br><span class="hljs-keyword">and</span> a.djxh<span class="hljs-operator">=</span>r.djxh<br><span class="hljs-keyword">and</span> r.zspm_dm<span class="hljs-operator">=</span><span class="hljs-string">&#x27;101060100&#x27;</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">lower</span>(a.nsrsbh) <span class="hljs-operator">&lt;&gt;</span> a.nsrsbh<br><span class="hljs-keyword">and</span> a.nsrsbh <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;3%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="Lengthb和length"><a href="#Lengthb和length" class="headerlink" title="Lengthb和length"></a>Lengthb和length</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> length(<span class="hljs-string">&#x27;新奥投资基金管理（北京）有限公司&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> lengthb(<span class="hljs-string">&#x27;新奥投资基金管理（北京）有限公司&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-comment">--utf-8：一个中文对三个字节</span><br></code></pre></td></tr></table></figure><h4 id="按时间段统计数据量"><a href="#按时间段统计数据量" class="headerlink" title="按时间段统计数据量"></a>按时间段统计数据量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--sb_kjgrsdsbgb 按五分钟统计数量</span><br><span class="hljs-keyword">select</span> tmp.newTime, <span class="hljs-built_in">count</span>(tmp.newTime)<br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> a.jylsh,<br>               to_char(a.lrrq, <span class="hljs-string">&#x27;yyyy-mm-dd hh24:mi&#x27;</span>) oldTime,<br>               <span class="hljs-keyword">case</span><br>                 <span class="hljs-keyword">when</span> substr(to_char(a.lrrq, <span class="hljs-string">&#x27;mi&#x27;</span>), <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span> <span class="hljs-keyword">then</span><br>                  to_char(lrrq, <span class="hljs-string">&#x27;yyyy-mm-dd HH24&#x27;</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">||</span><br>                  substr(to_char(a.lrrq, <span class="hljs-string">&#x27;mi&#x27;</span>), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">||</span> <span class="hljs-number">0</span><br>                 <span class="hljs-keyword">else</span><br>                  to_char(lrrq, <span class="hljs-string">&#x27;yyyy-mm-dd HH24&#x27;</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">||</span><br>                  substr(to_char(a.lrrq, <span class="hljs-string">&#x27;mi&#x27;</span>), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">||</span> <span class="hljs-number">5</span><br>               <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> newTime<br>          <span class="hljs-keyword">from</span> gs_cxtj.sb_kjgrsdsbgb a<br>         <span class="hljs-keyword">where</span> a.lrrq <span class="hljs-operator">&gt;</span> <span class="hljs-type">date</span> <span class="hljs-string">&#x27;2016-11-16&#x27;</span><br>         <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> newTime <span class="hljs-keyword">desc</span>) tmp<br> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> tmp.newtime<br> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> tmp.newtime <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h4 id="Cursor大数据量批量插入"><a href="#Cursor大数据量批量插入" class="headerlink" title="Cursor大数据量批量插入"></a>Cursor大数据量批量插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span><br>  cnt <span class="hljs-type">integer</span> :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">cursor</span> cur_1 <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> gs_cl.py_dj_nsrxx;<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">for</span> icur_1 <span class="hljs-keyword">in</span> cur_1 loop<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xtxj_zdgsxx <span class="hljs-keyword">values</span> (icur_1.DJXH,icur_1.ZGSWJ_DM,icur_1.SWJGMC,icur_1.SJTB_SJ,icur_1.YXBZ,icur_1.XGSJ);<br>    cnt :<span class="hljs-operator">=</span> cnt <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>    if cnt <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">then</span><br>      <span class="hljs-keyword">commit</span>;<br>      cnt :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> if;<br>  <span class="hljs-keyword">end</span> loop;<br>  <span class="hljs-keyword">commit</span>;<br>exception<br>  <span class="hljs-keyword">when</span> others <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">rollback</span>;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure><h4 id="decode的使用"><a href="#decode的使用" class="headerlink" title="decode的使用"></a>decode的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--不同渠道扣款数量</span><br><span class="hljs-keyword">select</span> decode(substr(jywysbh, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>),<br>              <span class="hljs-string">&#x27;JSDS.N&#x27;</span>,<br>              <span class="hljs-string">&#x27;网厅&#x27;</span>,<br>              <span class="hljs-string">&#x27;SB0603&#x27;</span>,<br>              <span class="hljs-string">&#x27;客户端&#x27;</span>,<br>              <span class="hljs-string">&#x27;大厅&#x27;</span>) &quot;渠道来源&quot;,<br> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> a.lrrq<span class="hljs-operator">&gt;</span>to_date(to_char(sysdate, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>)  <span class="hljs-keyword">then</span>   djxh  <span class="hljs-keyword">end</span>)&quot;非0申报当天扣款量&quot;,<br>       <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) &quot;非0申报扣款数量&quot;<br>  <span class="hljs-keyword">from</span> sb_sbzt a<br> <span class="hljs-keyword">where</span> a.lrrq <span class="hljs-operator">&gt;</span> <span class="hljs-type">date</span> <span class="hljs-string">&#x27;2016-10-01&#x27;</span><br>   <span class="hljs-keyword">and</span> a.yrkse_1 <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br>   <span class="hljs-keyword">and</span> cwlx_dm <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Y&#x27;</span><br>   <span class="hljs-keyword">and</span> se <span class="hljs-operator">=</span> yrkse_1<br> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> substr(jywysbh, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h4 id="分组数据中每组取前几条数据"><a href="#分组数据中每组取前几条数据" class="headerlink" title="分组数据中每组取前几条数据"></a>分组数据中每组取前几条数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--先得到已分组结果集</span><br><span class="hljs-keyword">select</span> t.nsrsbh, t.nsrmc, t.zgswj_dm, swjg.swjgmc<br>  <span class="hljs-keyword">from</span> dj_nsrxx t, rd_sfzrdxxb sfz, dm_gy_swjg swjg<br> <span class="hljs-keyword">where</span> t.djxh <span class="hljs-operator">=</span> sfz.djxh<br>   <span class="hljs-keyword">and</span> t.zgswj_dm <span class="hljs-operator">=</span> swjg.swjg_dm<br>   <span class="hljs-keyword">and</span> t.shxydm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br>   <span class="hljs-keyword">and</span> t.nsrzt_dm <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;03&#x27;</span><br>   <span class="hljs-keyword">and</span> sfz.zspm_dm <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;101060100&#x27;</span><br>   <span class="hljs-keyword">and</span> sfz.rdyxqz <span class="hljs-operator">&gt;</span> <span class="hljs-type">date</span><span class="hljs-string">&#x27;2016-08-31&#x27;</span><br>   <span class="hljs-keyword">and</span> substr(t.zgswj_dm, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;000000&#x27;</span> <span class="hljs-keyword">in</span><br>       (<span class="hljs-keyword">select</span> b.swjg_dm<br>          <span class="hljs-keyword">from</span> dm_gy_swjg a, dm_gy_swjg b<br>         <span class="hljs-keyword">where</span> substr(a.swjg_dm, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;000000&#x27;</span> <span class="hljs-operator">=</span> b.swjg_dm<br>           <span class="hljs-keyword">and</span> b.swjg_dm <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>               (<span class="hljs-string">&#x27;23200000000&#x27;</span>, <span class="hljs-string">&#x27;23299000000&#x27;</span>, <span class="hljs-string">&#x27;00000000000&#x27;</span>)<br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> b.swjg_dm)<br><br><span class="hljs-comment">--按税务机关分类查询两条记录</span><br><span class="hljs-keyword">select</span> f.ROWN 行号,<br>       f.djxh 登记序号,<br>       f.nsrsbh 纳税人识别号,<br>       f.nsrmc 纳税人名称,<br>       f.zgswj_dm 主管税务机关代码,<br>       f.swjgmc 主管税务机关名称,<br>       substr(f.zgswj_dm, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;000000&#x27;</span> 地市税务局名称<br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> substr(res.zgswj_dm, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;000000&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> res.zgswj_dm) <span class="hljs-keyword">as</span> ROWN,<br>               res.<span class="hljs-operator">*</span><br>          <span class="hljs-keyword">FROM</span> （<span class="hljs-keyword">select</span> t.djxh, t.nsrsbh, t.nsrmc, t.zgswj_dm, swjg.swjgmc<br>          <span class="hljs-keyword">from</span> dj_nsrxx t, rd_sfzrdxxb sfz, dm_gy_swjg swjg<br>         <span class="hljs-keyword">where</span> t.djxh <span class="hljs-operator">=</span> sfz.djxh<br>           <span class="hljs-keyword">and</span> t.zgswj_dm <span class="hljs-operator">=</span> swjg.swjg_dm<br>           <span class="hljs-keyword">and</span> t.shxydm <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br>           <span class="hljs-keyword">and</span> t.nsrzt_dm <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;03&#x27;</span><br>           <span class="hljs-keyword">and</span> t.nsrmc <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%公司&#x27;</span><br>           <span class="hljs-keyword">and</span> length(t.nsrsbh) <span class="hljs-operator">=</span> <span class="hljs-number">15</span><br>           <span class="hljs-keyword">and</span> sfz.zspm_dm <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;101060100&#x27;</span><br>           <span class="hljs-keyword">and</span> sfz.rdyxqz <span class="hljs-operator">&gt;</span> <span class="hljs-type">date</span> <span class="hljs-string">&#x27;2016-08-31&#x27;</span> ） res) f<br> <span class="hljs-keyword">WHERE</span> f.ROWN <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span><br> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> f.zgswj_dm<br></code></pre></td></tr></table></figure><h4 id="case和when的使用"><a href="#case和when的使用" class="headerlink" title="case和when的使用"></a>case和when的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> decode(substr(jywysbh, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>),<br>                      <span class="hljs-string">&#x27;JSDS&#x27;</span>,<br>                      <span class="hljs-string">&#x27;网厅&#x27;</span>,<br>                      <span class="hljs-string">&#x27;&#x27;</span>,<br>                      <span class="hljs-string">&#x27;大厅&#x27;</span>,<br>                      <span class="hljs-string">&#x27;客户端&#x27;</span>) &quot;渠道来源&quot;,<br>               <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span><br>                       <span class="hljs-keyword">when</span> a.lrrq <span class="hljs-operator">&gt;</span><br>                            to_date(to_char(sysdate, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="hljs-keyword">and</span><br>                            a.yrkse_1 <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> se <span class="hljs-operator">=</span> yrkse_1 <span class="hljs-keyword">then</span><br>                        yzpzxh<br>                     <span class="hljs-keyword">end</span>) &quot;非0申报当天扣款量&quot;,<br>               <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span><br>                       <span class="hljs-keyword">when</span> a.lrrq <span class="hljs-operator">&gt;</span><br>                            to_date(to_char(sysdate, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="hljs-keyword">and</span><br>                            se <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>                        yzpzxh<br>                     <span class="hljs-keyword">end</span>) &quot; 当天非0申报量&quot;,<br>               <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span><br>                       <span class="hljs-keyword">when</span> a.lrrq <span class="hljs-operator">&gt;</span><br>                            to_date(to_char(sysdate, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>), <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="hljs-keyword">then</span><br>                        yzpzxh<br>                     <span class="hljs-keyword">end</span>) &quot; 当天申报量&quot;,<br>               <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span><br>                       <span class="hljs-keyword">when</span> a.yrkse_1 <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> se <span class="hljs-operator">=</span> yrkse_1 <span class="hljs-keyword">then</span><br>                        yzpzxh<br>                     <span class="hljs-keyword">end</span>) &quot;非0申报本月扣款量&quot;,<br>               <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span><br>                       <span class="hljs-keyword">when</span> se <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>                        yzpzxh<br>                     <span class="hljs-keyword">end</span>) &quot;本月非0申报量&quot;,<br>               <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span><br>                       <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>                        yzpzxh<br>                     <span class="hljs-keyword">end</span>) &quot;本月总申报量&quot;<br>          <span class="hljs-keyword">from</span> sb_sbzt a<br>         <span class="hljs-keyword">where</span> a.lrrq <span class="hljs-operator">&gt;</span><br>               to_date(to_char(sysdate, <span class="hljs-string">&#x27;yyyy-mm&#x27;</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>)<br>           <span class="hljs-keyword">and</span> cwlx_dm <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Y&#x27;</span><br>         <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> substr(a.jywysbh, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h4 id="查询性能最差和最耗时的SQL"><a href="#查询性能最差和最耗时的SQL" class="headerlink" title="查询性能最差和最耗时的SQL"></a>查询性能最差和最耗时的SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--性能最差的SQL</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> sql_text, disk_reads, buffer_gets, rows_processed<br>          <span class="hljs-keyword">from</span> v$sqlarea b<br>         <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> disk_reads <span class="hljs-keyword">desc</span>)<br> <span class="hljs-keyword">where</span> rownum <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">--最耗时的SQL</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>  <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> a.SQL_TEXT, a.CPU_TIME, a.PARSING_SCHEMA_NAME<br>          <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">sql</span> a<br>         <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cpu_time <span class="hljs-keyword">desc</span>)<br> <span class="hljs-keyword">where</span> rownum <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h4 id="创建数据库表空间"><a href="#创建数据库表空间" class="headerlink" title="创建数据库表空间"></a>创建数据库表空间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>space TS_GS_ZM_SSWSZMJLMX_2016_DATA<br>datafile <span class="hljs-string">&#x27;D:\APP\CLG\ORADATA\ORCL\TS_GS_ZM_SSWSZMJLMX_2016_DATA.dbf&#x27;</span><br>size <span class="hljs-number">50</span>M<br>AUTOEXTEND <span class="hljs-keyword">ON</span> NEXT <span class="hljs-number">50</span>M;<br></code></pre></td></tr></table></figure><h4 id="数据库锁表查询及处理"><a href="#数据库锁表查询及处理" class="headerlink" title="数据库锁表查询及处理"></a>数据库锁表查询及处理</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--以下SQL适用于single instance</span><br><span class="hljs-comment">----Oracle数据库操作中，会用到锁表查询以及解锁和kill进程等操作</span><br><span class="hljs-comment">--(1)锁表查询的代码有以下的形式：</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> v$locked_object;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v$locked_object;<br><span class="hljs-comment">--(2)查看哪个表被锁</span><br><span class="hljs-keyword">select</span> b.owner,b.object_name,a.session_id,a.locked_mode <span class="hljs-keyword">from</span> v$locked_object a,dba_objects b <span class="hljs-keyword">where</span> b.object_id <span class="hljs-operator">=</span> a.object_id;<br><span class="hljs-comment">--(3)查看是哪个session引起的</span><br><span class="hljs-keyword">select</span> b.username,b.sid,b.serial#,logon_time <span class="hljs-keyword">from</span> v$locked_object a,v$session b <span class="hljs-keyword">where</span> a.session_id <span class="hljs-operator">=</span> b.sid <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> b.logon_time; <br><span class="hljs-comment">--(4)杀掉对应进程</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">system</span> kill session<span class="hljs-string">&#x27;587,295&#x27;</span>;<span class="hljs-comment">--command下执行，其中587为sid,295为serial#.</span><br><br><br><span class="hljs-comment">--以下SQL适用于RAC和Single instance，查询完成之后即可kill会话或者直接在服务器上kill进程</span><br><span class="hljs-keyword">select</span> o.owner,<br>       o.object_name,<br>       l.locked_mode,<br>       s.username,<br>       s.sid,<br>       s.serial#,<br>       s.logon_time,<br>       p.spid,<br>       s.inst_id<br>  <span class="hljs-keyword">from</span> gv$locked_object l, dba_objects o, gv$session s, gv$process p<br> <span class="hljs-keyword">where</span> l.object_id <span class="hljs-operator">=</span> o.object_id<br>   <span class="hljs-keyword">and</span> l.session_id <span class="hljs-operator">=</span> s.sid<br>   <span class="hljs-keyword">and</span> s.paddr <span class="hljs-operator">=</span> p.addr<br></code></pre></td></tr></table></figure><h4 id="修改数据库密码为永不失效"><a href="#修改数据库密码为永不失效" class="headerlink" title="修改数据库密码为永不失效"></a>修改数据库密码为永不失效</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dba_profiles t <span class="hljs-keyword">where</span> t.PROFILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;DEFAULT&#x27;</span> <span class="hljs-keyword">and</span> t.RESOURCE_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PASSWORD_LIFE_TIME&#x27;</span>;<br><br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit password_life_time unlimited;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>Oracle数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLAlchemy使用</title>
    <link href="/2017/05/10/sqlalchemy%E4%BD%BF%E7%94%A8/"/>
    <url>/2017/05/10/sqlalchemy%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SQLAlchemy是Python语言的一款流行的ORM（Object Relational Mapper）框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，即将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p><p>安装SQLAlchemy也很简单，直接使用pip安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install sqlalchemy<br></code></pre></td></tr></table></figure><p>下面重点介绍SQLAlchemy的使用。</p><h1 id="版本检查"><a href="#版本检查" class="headerlink" title="版本检查"></a>版本检查</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlalchemy<br>sqlalchemy.__version__<span class="hljs-comment"># 1.1.9</span><br></code></pre></td></tr></table></figure><p>当前sqlalchemy版本为1.1.9</p><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br>engine = create_engine(<span class="hljs-string">&#x27;mysql+pymysql://root:123456@192.168.110.13:3306/student&#x27;</span>, echo=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><ul><li>engine 是 Engine类的一个对象</li><li>echo&#x3D;True表明开启logging模块的日志</li><li>数据库连接：<code>engine://user:password@host:port/database</code>，其中engine为mysql+pymysql，或者是mysql+mysqldb，或者是oracle+cx_oracle等等</li></ul><span id="more"></span><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, String, Integer<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br><br>engine = create_engine(<span class="hljs-string">&#x27;mysql+pymysql://root:123456@192.168.110.13:3306/student&#x27;</span>, echo=<span class="hljs-literal">True</span>)<br>Base = declarative_base()  <span class="hljs-comment"># 生成Model类的基类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User1</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    __tablename__ = <span class="hljs-string">&#x27;user1&#x27;</span><br>    <br>    extend_existing = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 定义三个列</span><br>    <span class="hljs-built_in">id</span> = Column(Integer, autoincrement=<span class="hljs-literal">True</span>, primary_key=<span class="hljs-literal">True</span>)<br>    name = Column(String(<span class="hljs-number">64</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    age  = Column(Integer)<br>    <br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;User(id=&#123;&#125;, name=&#123;&#125;, age=&#123;&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">id</span>, self,name, self.age)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__repr__()<br>        <br>Base.metadata.create_all(engine)  <span class="hljs-comment"># 创建所有表</span><br>Base.metadata.drop_all(engine)  <span class="hljs-comment"># 删除所有表</span><br><br><span class="hljs-comment"># 定义类的实例方法1</span><br>u1 = User()<span class="hljs-comment"># User类只接收一个位置参数self，和关键字参数**kwargs</span><br>u1.name = <span class="hljs-string">&#x27;aa&#x27;</span>  <span class="hljs-comment"># 给User类的各个列赋值</span><br>u1.age=<span class="hljs-number">19</span><br><span class="hljs-built_in">print</span>(u1)  <span class="hljs-comment"># User(id=None, name=aa, age=19)</span><br><br><span class="hljs-comment"># 定义类的实例方法2</span><br>u2 = User(name=<span class="hljs-string">&#x27;bb&#x27;</span>, age=<span class="hljs-string">&#x27;123&#x27;</span>)<br><span class="hljs-built_in">print</span>(u2)  <span class="hljs-comment"># User(id=None, name=bb, age=123)</span><br></code></pre></td></tr></table></figure><ul><li>派生类User会继承基类Base的初始化函数<code>__init__</code>，会自动的接受我们所定义的列对应的关键字参数</li><li>未赋值的列会用None初始化，如上面的id</li></ul><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>SQLAlchemy真正处理数据库的部分是Session。</p><p>如果已经创建好了一个Engine对象engine，那么可以用以下语句创建一个Session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br>Session = sessionmaker(bind=engine)<br></code></pre></td></tr></table></figure><p>如果engine为创建好，则可以用以下语句创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Session = sessionmaker()<br></code></pre></td></tr></table></figure><p>当engine创建好之后，在配置Session即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Session.configure(bind=engine)<br></code></pre></td></tr></table></figure><p>当需要和数据库交互的时候，就需要实例化Session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">session = Session()<br></code></pre></td></tr></table></figure><p>创建完成之后这个session并没有马上获取数据库连接。只有当这个session第一次操作数据库的时候才会从Engine维护的连接池中获取一个连接，并持有这个连接一直到我们提交了所有的改变或者关闭了这个session。</p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">user = User(name=<span class="hljs-string">&#x27;haha&#x27;</span>, age=<span class="hljs-string">&#x27;123&#x27;</span>)<br>session.add(user)<br>session.commit()<br></code></pre></td></tr></table></figure><p>如果这个commit的过程中发生异常，则后续所有的commit都无法执行，因此DML都需要放在try…except中处理，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">user = User(name=<span class="hljs-string">&#x27;flowsnow&#x27;</span>, age=<span class="hljs-number">18</span>)<br>session.add(user)<br><span class="hljs-keyword">try</span>:<br>    session.commit()<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    session.rollback()<br>    <span class="hljs-keyword">raise</span> e<br></code></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>和insert类似，都是使用session.add方法，但是update操作的时候需要数据库中存在带操作的记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">user.age = <span class="hljs-number">20</span><br>session.add(user)<br><span class="hljs-keyword">try</span>:<br>    session.commit()<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    session.rollback()<br>    <span class="hljs-keyword">raise</span> e<br></code></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>删除之前必须确保数据库中存在要删除的记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">session.delete(user)<span class="hljs-comment"># user必须已经存在</span><br><span class="hljs-keyword">try</span>:<br>    session.commit()<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    session.rollback()<br>    <span class="hljs-keyword">raise</span> e<br></code></pre></td></tr></table></figure><h1 id="QUERY"><a href="#QUERY" class="headerlink" title="QUERY"></a>QUERY</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> session.query(User).<span class="hljs-built_in">filter</span>(User.age &lt; <span class="hljs-number">20</span>).order_by(User.age.desc())[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(u)<br></code></pre></td></tr></table></figure><p>此条语句经ORM转换之后的SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>USER.id <span class="hljs-keyword">AS</span> user_id,<br>USER.NAME <span class="hljs-keyword">AS</span> user_name,<br>USER.age <span class="hljs-keyword">AS</span> user_age<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span><br><span class="hljs-keyword">WHERE</span> USER.age <span class="hljs-operator">&lt;</span> <span class="hljs-operator">%</span> (age_1) s<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> USER.age <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-operator">%</span> (param_1) s, <span class="hljs-operator">%</span> (param_2) s<br></code></pre></td></tr></table></figure><p>query函数的返回结果为一个Query对象，Query对象是可迭代的，支持切片操作。</p><p>下面列举常见的filter操作</p><ul><li><p>相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name == <span class="hljs-string">&#x27;suncle&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>不相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name != <span class="hljs-string">&#x27;suncle&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>模糊匹配like：大小写敏感</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name.like(<span class="hljs-string">&#x27;%sun%&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>模糊匹配ilike：大小写不敏感</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name.ilike(<span class="hljs-string">&#x27;%sun%&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>IN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name.in_([<span class="hljs-string">&#x27;suncle&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;suncle&#x27;</span>]))<br><br><span class="hljs-comment"># 也支持Query对象</span><br>query.<span class="hljs-built_in">filter</span>(User.name.in_(<br>    session.query(User.name).<span class="hljs-built_in">filter</span>(User.name.like(<span class="hljs-string">&#x27;%sun%&#x27;</span>))<br>))<br></code></pre></td></tr></table></figure></li><li><p>NOT IN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(~User.name.in_([<span class="hljs-string">&#x27;ed&#x27;</span>, <span class="hljs-string">&#x27;wendy&#x27;</span>, <span class="hljs-string">&#x27;jack&#x27;</span>]))<br></code></pre></td></tr></table></figure></li><li><p>IS NULL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name == <span class="hljs-literal">None</span>)<br><br><span class="hljs-comment"># 上面的写法不符合pep8规范，IDE会给出提示，可以用下面的方法替代，pep8的写法是is None</span><br>query.<span class="hljs-built_in">filter</span>(User.name.is_(<span class="hljs-literal">None</span>))<br></code></pre></td></tr></table></figure></li><li><p>IS NOT NULL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">query.<span class="hljs-built_in">filter</span>(User.name != <span class="hljs-literal">None</span>)<br><br><span class="hljs-comment"># 上面的写法不符合pep8规范，IDE会给出提示，可以用下面的方法替代，pep8的写法是is not None</span><br>query.<span class="hljs-built_in">filter</span>(User.name.isnot(<span class="hljs-literal">None</span>))<br></code></pre></td></tr></table></figure></li><li><p>AND</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法1：使用and_()方法</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> and_<br>query.<span class="hljs-built_in">filter</span>(and_(User.name == <span class="hljs-string">&#x27;flowsnow&#x27;</span>, User.age == <span class="hljs-number">18</span>))<br><br><span class="hljs-comment"># 方法2：filter()支持多个关键字参数</span><br>query.<span class="hljs-built_in">filter</span>(User.name == <span class="hljs-string">&#x27;flowsnow&#x27;</span>, User.age == <span class="hljs-number">18</span>)<br><br><span class="hljs-comment"># 方法3：多次调用filter函数</span><br>query.<span class="hljs-built_in">filter</span>(User.name == <span class="hljs-string">&#x27;flowsnow&#x27;</span>).<span class="hljs-built_in">filter</span>(User.age == <span class="hljs-number">18</span>)<br></code></pre></td></tr></table></figure></li><li><p>OR</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> or_<br>query.<span class="hljs-built_in">filter</span>(or_(User.name == <span class="hljs-string">&#x27;suncle&#x27;</span>, User.name == <span class="hljs-string">&#x27;flowsnow&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul><p>下面列举SQL支持的常见的function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> func<br>session.query(func.count(User.<span class="hljs-built_in">id</span>)).first() <span class="hljs-comment"># count</span><br>session.query(func.<span class="hljs-built_in">max</span>(User.age)).first() <span class="hljs-comment"># max</span><br>session.query(func.avg(User.age)).first() <span class="hljs-comment"># avg</span><br></code></pre></td></tr></table></figure><h1 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h1><p>表和表之间会有外键关系，数据库的外键关系在ORM中的使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, Integer, String<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> ForeignKey<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> relationship<br><br>Base = declarative_base()  <span class="hljs-comment"># 生成Model类的基类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span>(<span class="hljs-title class_ inherited__">Base</span>):  <span class="hljs-comment"># 作者类</span><br>    __tablename__ = <span class="hljs-string">&#x27;author&#x27;</span><br>    <br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, autoincrement=<span class="hljs-literal">True</span>)<br>    name = Column(String(<span class="hljs-number">64</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    <br>    posts = relationship(<span class="hljs-string">&#x27;Post&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Author&lt;id=&#123;&#125;， name=&#123;&#125;&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">id</span>, self.name)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__repr__()<br>    <br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Post</span>(<span class="hljs-title class_ inherited__">Base</span>):  <span class="hljs-comment"># 文章类</span><br>    __tablename__ = <span class="hljs-string">&#x27;post&#x27;</span><br>    <br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, autoincrement=<span class="hljs-literal">True</span>)<br>    title = Column(String(<span class="hljs-number">128</span>), nullable=<span class="hljs-literal">False</span>, index=<span class="hljs-literal">True</span>)<br>    content = Column(String(<span class="hljs-number">8096</span>), nullable=<span class="hljs-literal">False</span>)<br>    author_id = Column(Integer, ForeignKey(<span class="hljs-string">&#x27;author.id&#x27;</span>), nullable=<span class="hljs-literal">False</span>)<br>    <br>    author = relationship(<span class="hljs-string">&#x27;Author&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Post&lt;id=&#123;&#125;, title=&#123;&#125;&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">id</span>, self.title)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__repr__()<br>    <br><br>engine = create_engine(<span class="hljs-string">&#x27;mysql+pymysql://root:123456@192.168.110.13:3306/student&#x27;</span>, echo=<span class="hljs-literal">True</span>)<br>Base.metadata.create_all(engine)<br>Session = sessionmaker(bind=engine)<br>session = Session()<br><br><span class="hljs-comment"># 新增一个作者</span><br>author = Author()<br>author.name = <span class="hljs-string">&#x27;flowsnow&#x27;</span><br>session.add(author)<br>session.commit()<br><span class="hljs-built_in">print</span>(author)  <span class="hljs-comment"># Author&lt;id=1， name=flowsnow&gt;</span><br><br><span class="hljs-comment"># 新增一篇文章</span><br>post = Post()<br>post.title = <span class="hljs-string">&#x27;first post&#x27;</span><br>post.content = <span class="hljs-string">&#x27;oihdoshfohro&#x27;</span><br>post.author = author<br>session.add(post)<br>session.commit()<br><span class="hljs-built_in">print</span>(author.posts)  <span class="hljs-comment"># [Post&lt;id=1, title=first post&gt;]</span><br><br><span class="hljs-comment"># 再新增一篇文章</span><br>post = Post()<br>post.title = <span class="hljs-string">&#x27;second post&#x27;</span><br>post.content = <span class="hljs-string">&#x27;liabhgekegpaerg&#x27;</span><br>post.author = author<br>session.add(post)<br>session.commit()<br><span class="hljs-built_in">print</span>(author.posts)  <span class="hljs-comment"># [Post&lt;id=1, title=first post&gt;, Post&lt;id=2, title=second post&gt;]</span><br></code></pre></td></tr></table></figure><p>数据库维护数据之间的外键关系会消耗数据库资源，影响性能，在大型的应用中一般不使用外键等数据库高级特性，而是由应用框架来维护数据之间的约束。</p><hr><p><strong>参考</strong></p><ol><li><a href="http://docs.sqlalchemy.org/en/rel_1_1/orm/tutorial.html">官方文档-Object Relational Tutorial</a></li><li><a href="http://www.rmunn.com/sqlalchemy-tutorial/tutorial.html">A step-by-step SQLAlchemy tutorial</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320114981139589ac5f02944601ae22834e9c521415000">廖雪峰-使用SQLAlchemy</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>SQLAlchemy</tag>
      
      <tag>ORM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react基础</title>
    <link href="/2017/04/27/react%E5%9F%BA%E7%A1%80/"/>
    <url>/2017/04/27/react%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>Hello World作为开篇示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><h1 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h1><p>react使用的JSX是JavaScript的一个语法扩展，上述Hello World示例中的return语句即为JSX写法。</p><span id="more"></span><p>以下代码1和代码2的效果是一模一样的：</p><p><strong>代码1：使用JavaScript代码构建DOM</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> child1 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;First Text Content&#x27;</span>);<br>    <span class="hljs-keyword">const</span> child2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;Second Text Content&#x27;</span>);<br>    <span class="hljs-keyword">const</span> root = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;my-list&#x27;</span> &#125;, child1, child2);<br>    <span class="hljs-keyword">return</span> root<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><p><strong>代码2：使用JSX构建DOM</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> root =(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;my-list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>First Text Content<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Second Text Content<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    );<br>    <span class="hljs-keyword">return</span> root<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><p>对比两种代码可以发现JSX构建 的DOM比原生的JavaScript代码构建的DOM更简洁更易读。</p><p>JSX是将XML语法直接加入到JavaScript代码中，所以可以直接用代码构建界面。之后JSX通过翻译器转换到纯JavaScript再由浏览器执行。在实际开发中，JSX在产品打包阶段都已经编译成纯JavaScript，JSX的语法不会带来任何性能影响。</p><p>因此，可以将JSX理解为为提升开发效率而发明的一个比较高级但很直观的语法糖。它非常有用，却不是一个必需品，没有JSX的React也可以正常工作</p><p><strong>代码3：JSX解析是通过首字母大小写区分组件类和HTML标签</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> element =(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;my-list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>First Text Content<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Second Text Content<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    );<br>    <span class="hljs-keyword">return</span> element<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><p>将以上组件类Root改名为root之后render在做JSX解析的时候会判定成HTML标签，因此渲染没有结果。</p><p><strong>代码4：更新JSX元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>It is &#123;(new Date()).toLocaleTimeString()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>&#125;<br><br><span class="hljs-built_in">setInterval</span>(render, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>每个一秒钟刷新一次Root组件，即更新一次Root组件的JSX。</p><h1 id="Component组合"><a href="#Component组合" class="headerlink" title="Component组合"></a>Component组合</h1><p>React是基于组件的，整个项目就是各个组件拼接而成，这也是目前最主流前端架构。以下代码会演示组件之间的组合方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;ChildA-list&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>first<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>second<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>ChildA<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ChildA</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ChildB</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><p>ChildA，ChildB和Root三个组件之间可以随意组合成为最后的项目。</p><h1 id="内部状态state"><a href="#内部状态state" class="headerlink" title="内部状态state"></a>内部状态state</h1><p><strong>代码1：使用setState方法修改state</strong></p><p>要想使界面上显示的Hello abc在三秒后变为Hello suncle，就可以通过修改组件内部状态state来实现。</p><p>如果直接修改state的属性值并不会产生效果，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;suncle&#x27;</span>, <span class="hljs-number">3000</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;`Hello $&#123;this.state.name&#125;`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><p>所以，我们需要通过setState方法来修改state，setState方法是组件内部的方法，使用方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>&#125; <span class="hljs-comment">// 组件的内部状态，只能在组件内部共享</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;suncle&#x27;</span>&#125;), <span class="hljs-number">3000</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;`Hello $&#123;this.state.name&#125;`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><p><strong>代码2：根据input组件更新state</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br><br>  <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">name</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange.bind(this)&#125;/</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;`Hello $&#123;this.state.name&#125;`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="组件参数传递props"><a href="#组件参数传递props" class="headerlink" title="组件参数传递props"></a>组件参数传递props</h1><p>state是组件的内部状态，组件和组件之间是不能共享的。如果父组件需要给子组件传递参数，那么就需要通过xml attribute的方式给组件传递props。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this.props即通过xml attribute传递进来的参数</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;`Hello $&#123;this.props.name&#125;`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  state = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br><br>  <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">name</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange.bind(this)&#125;/</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.state.name&#125;/</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><hr><p><strong>参考</strong></p><ol><li><a href="https://facebook.github.io/react/">react官方文档</a></li><li><a href="http://www.jb51.net/article/91447.htm">深入理解React中es6创建组件this的方法</a></li><li><a href="http://stackoverflow.com/questions/23481061/reactjs-state-vs-prop">reactjs-state-vs-prop</a></li></ol><p><strong>附录</strong></p><p>由前端开发的配置越来越复杂，依赖项也越来越多，因此构建好一个基础开发环境就显得尤为重要，<a href="https://github.com/Flowsnow/react-mobx-starter">react-mobx-starter</a>这个项目构建的基础环境就非常适用于react-mobx开发调试。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript函数和类</title>
    <link href="/2017/04/18/javascript%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB/"/>
    <url>/2017/04/18/javascript%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>一个<strong>函数定义</strong>（也称为<strong>函数声明</strong>，或<strong>函数语句</strong>）由一系列的<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/function"><code>函数</code></a>关键字组成, 依次为：</p><ul><li>函数的名称。</li><li>函数参数列表，包围在括号( )中并由逗号( , )区隔。</li><li>函数功能，包围在花括号{ }中，用于定义函数功能的一些JavaScript语句。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数参数传递时，如果是传值则是传形参。如果是传对象，则是传引用（函数内部对对象的改变对外部是可见的）。</p><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>虽然上面的函数声明在语法上是一个语句，但函数也可以由<strong>函数表达式</strong>创建。这样的函数可以是<strong>匿名</strong>的；它不必有一个名称。例如，函数<code>square</code>也可这样来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一种定义方式</span><br><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-comment">// 第二种定义方式</span><br><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span> <span class="hljs-title function_">_add</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数表达式可以直接调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> val = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>&#125;(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);  <span class="hljs-comment">// 输出4</span><br></code></pre></td></tr></table></figure><p>函数表达式就是把一个函数赋值给变量或者常量</p><p><strong>什么时候使用函数表达式？什么时候使用命名方式的函数表达式？</strong></p><span id="more"></span><ul><li>当存在递归的时候，应该以命名函数表达式的方式定义函数</li><li>不存在递归时，习惯使用函数表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 演示1.命名方式定义函数,赋值给常量时，递归函数正常执行</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fib</span>(x - <span class="hljs-number">1</span>) + <span class="hljs-title function_">fib</span>(x - <span class="hljs-number">2</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> fib2 = fib<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fib2</span>(<span class="hljs-number">5</span>))<br><span class="hljs-keyword">delete</span> fib<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fib2</span>(<span class="hljs-number">5</span>))<br><br><br><span class="hljs-comment">// 演示2.命名方式定义函数,赋值给变量，递归函数正常执行</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fib</span>(x - <span class="hljs-number">1</span>) + <span class="hljs-title function_">fib</span>(x - <span class="hljs-number">2</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> fib2 = fib<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fib2</span>(<span class="hljs-number">5</span>))<br><span class="hljs-keyword">delete</span> fib<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fib2</span>(<span class="hljs-number">5</span>))<br><br><br><span class="hljs-comment">// 演示3.函数表达式方式定义递归函数时，有可能会存在问题</span><br><span class="hljs-keyword">let</span> fib = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fib</span>(x - <span class="hljs-number">1</span>) + <span class="hljs-title function_">fib</span>(x - <span class="hljs-number">2</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> fib2 = fib<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fib2</span>(<span class="hljs-number">5</span>))<br><span class="hljs-comment">//delete fib</span><br>fib = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fib2</span>(<span class="hljs-number">5</span>))  <span class="hljs-comment">// 输出NaN(NaN表示not a number)</span><br></code></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>JavaScript的高阶函数的定义和Python是一样的，只是JavaScript函数的参数可以直接写上函数的实现部分，而Python最多可以写上一个lambda函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 高阶函数：函数作为参数</span><br>map = <span class="hljs-keyword">function</span>(<span class="hljs-params">arr, fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a <span class="hljs-keyword">of</span> arr) &#123;<br>        result.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">fn</span>(a))<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-keyword">let</span> square = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> x * x<br>&#125;<br><span class="hljs-keyword">const</span> val = <span class="hljs-title function_">map</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], square)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br><br><br><span class="hljs-comment">// 高阶函数：函数实现直接作为参数</span><br>map = <span class="hljs-keyword">function</span>(<span class="hljs-params">arr, fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a <span class="hljs-keyword">of</span> arr) &#123;<br>        result.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">fn</span>(a))<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-keyword">const</span> val = <span class="hljs-title function_">map</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> x * x<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数表达式</a>（也称胖箭头函数, <strong>fat arrow function</strong>）主要作用是是函数表达式更为简洁。</p><ul><li>箭头函数总是匿名的</li><li>当箭头函数至少有一个参数时，可以省去小括号</li><li>当箭头函数只有一条语句时，可以省去大括号和return</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">map = <span class="hljs-keyword">function</span>(<span class="hljs-params">arr, fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a <span class="hljs-keyword">of</span> arr) &#123;<br>        result.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">fn</span>(a))<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-comment">// fn可以改写为箭头函数如下</span><br><span class="hljs-keyword">const</span> val1 = <span class="hljs-title function_">map</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>    <span class="hljs-keyword">return</span> x * x<br>&#125;)<br><br><span class="hljs-comment">// 更精简的箭头函数</span><br><span class="hljs-keyword">const</span> val2 = <span class="hljs-title function_">map</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * x)<br></code></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p><strong>默认参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y = <span class="hljs-number">5</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>))  <span class="hljs-comment">// 6</span><br><br><span class="hljs-comment">// 到目前为止JavaScript仍然不支持位置参数跟在默认参数的后面</span><br><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">x = <span class="hljs-number">5</span>, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(y = <span class="hljs-number">1</span>))  <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><p><strong>可变参数</strong></p><p>参数前加<code>...</code>表示其是可变参数，可变参数在函数体内，表现为一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 求所有参数的和</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">let</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> args) &#123;<br>        ret += v<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><span class="hljs-keyword">const</span> val  = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br></code></pre></td></tr></table></figure><p><strong>参数结构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))  <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>而且不能对object做参数解构，因为JavaScript还不支持关键字参数。</p><h1 id="JavaScript类"><a href="#JavaScript类" class="headerlink" title="JavaScript类"></a>JavaScript类</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>使用class关键字定义类</li><li>constructor方法是构造方法</li><li>使用new关键字创建对象，参数为constructor方法的参数</li><li>实例调用静态方法的时候需要通过constructor属性</li></ul><p><strong>代码</strong>：下面的代码会定一个点类Point</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    &#125;<br><br>  <span class="hljs-comment">// 普通方法</span><br>    <span class="hljs-title function_">print</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`&lt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.x&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.y&#125;</span>&gt;`</span>)<br>    &#125;<br><br><span class="hljs-comment">// 静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is static method&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 可以使用类直接调用静态方法</span><br><span class="hljs-title class_">Point</span>.<span class="hljs-title function_">info</span>()<br><br><span class="hljs-comment">// 创建Point类的对象point</span><br><span class="hljs-keyword">let</span> point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// 对象调用普通方法</span><br>point.<span class="hljs-title function_">print</span>()<br><br><span class="hljs-comment">// 实例不能直接调用静态方法</span><br><span class="hljs-comment">// point.info()// 会报错：不存在point.info函数</span><br><br><span class="hljs-comment">// 实例的constructor属性等价于Python的__class__</span><br>point.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">info</span>()<br></code></pre></td></tr></table></figure><h2 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h2><p>和函数一样，类除了有上面的命名方式的定义之外，还可以有类表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span> &#123;<br>    <span class="hljs-title function_">getClassName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Me</span>.<span class="hljs-property">name</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> inst = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inst.<span class="hljs-title function_">getClassName</span>()); <span class="hljs-comment">// Me</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Me</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// ReferenceError: Me is not defined</span><br></code></pre></td></tr></table></figure><p>类表达式本质上就是把一个类赋值给一个变量。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><ul><li>继承采用extends关键字，借鉴于Java</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point3D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, z</span>) &#123; <span class="hljs-comment">// 重写构造函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x: <span class="hljs-subst">$&#123;x&#125;</span>, y: <span class="hljs-subst">$&#123;y&#125;</span>`</span>)<br>        <span class="hljs-comment">// this.z = x + y  this 不能再super之前使用</span><br>        <span class="hljs-variable language_">super</span>(x, y) <span class="hljs-comment">// 调用父类的构造函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">z</span> = z<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">format</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">format</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">format</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">format</span>() + <span class="hljs-string">&#x27;xxx&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point3D</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>)<br>p.<span class="hljs-title function_">print</span>()<br></code></pre></td></tr></table></figure><h2 id="多继承-MixIn模式"><a href="#多继承-MixIn模式" class="headerlink" title="多继承-MixIn模式"></a>多继承-MixIn模式</h2><p>JavaScript中子类的使用有两个原因：</p><ul><li><p>接口继承：子类的实例肯定也是超类的实例（可以用instanceof运算符测试得到这条结论）。子类实例的行为类似于超类实例。但和超类实例相比，可以有一些额外的功能（即方法）。</p></li><li><p>实现继承：超类将功能传递给子类。实现继承的类的作用是有限的，因为只支持单继承，不可能从多个超类继承。</p></li></ul><p>用通俗的话举例子来理解接口继承和实现继承，下面有三个类，分别是：</p><ul><li>Person：人类</li><li>Storage：数据存储类，拥有一个存储数据的方法save</li><li>Validation：数据验证类，拥有一个验证数据的方法validate</li></ul><p><strong>代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <br><br> &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Storage</span> &#123;<br>    <span class="hljs-title function_">save</span>(<span class="hljs-params">data</span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;store data&#x27;</span>)<br>     &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Validation</span> &#123;<br>    <span class="hljs-title function_">validate</span>(<span class="hljs-params">schema</span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;validate data&#x27;</span>)<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在要定义一个职工类Employee ，那么这个职工类肯定是要继承自Person类的（难道你敢说职工不是人？），同时这个职工还需要有两个能力：一个是存储数据的能力，一个是验证数据的能力。那么就又需要继承自Storage类和Validation类。那么Employee 类从Person类继承就是接口继承，因为超类和子类的行为类似。Employee 类从Storage继承或者从Validation继承都是实现继承，因为超类只是将功能传递给子类。</p><p>如果我们想实现这样的一个Employee类，那么一个很自然的写法就是多继承，下面的这种写法虽然很自然，但是多数语言都是不支持的，因为多重继承的时候会出现继承冲突。关于多重继承的冲突举一个简单的例子：定义一个动物（类）既是狗（父类1）也是猫（父类2），两个父类都有“叫”这个方法。那么当我们调用“叫”这个方法时，它就不知道是狗叫还是猫叫了，这就是多重继承的冲突。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在定义的时候就会抛出SyntaxError</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>, <span class="hljs-title class_">Storage</span>, <span class="hljs-title class_">Validation</span> &#123;<br><br>&#125;<br>em = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>()<br>em.<span class="hljs-title function_">save</span>()<br>em.<span class="hljs-title function_">validate</span>()<br></code></pre></td></tr></table></figure><p>为了实现多继承，ES6中有自己独特的MinIn技术：将实现继承的类视作一个函数，输入是超类，输出是扩展该超类的子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <br><br> &#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Storage</span> = <span class="hljs-title class_">Sup</span> =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Sup</span> &#123;<br>    <span class="hljs-title function_">save</span>(<span class="hljs-params">data</span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;store data&#x27;</span>)<br>     &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Validation</span> = <span class="hljs-title class_">Sup</span> =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Sup</span> &#123;<br>    <span class="hljs-title function_">validate</span>(<span class="hljs-params">schema</span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;validate data&#x27;</span>)<br>     &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Storage</span>(<span class="hljs-title class_">Validation</span>(<span class="hljs-title class_">Person</span>)) &#123; <br><br>&#125;<br><br>em = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>()<br>em.<span class="hljs-title function_">save</span>()   <span class="hljs-comment">// 输出store data</span><br>em.<span class="hljs-title function_">validate</span>()   <span class="hljs-comment">// 输出validate data</span><br></code></pre></td></tr></table></figure><p>通过这样的MixIn技术给Person类混入了Storage类的save方法和Validation类的validate方法，成功的变相的实现了多继承。</p><p>下面再举一个例子</p><ul><li>Point类</li><li>可序列化类Serializable</li><li>Point3D类：需要继承自Point类，然后还需要混入可序列化的功能</li></ul><p><strong>代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x ,y</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y<br>    &#125;<br><br>    <span class="hljs-title function_">print</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`(<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.x&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.y&#125;</span>)`</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Serializable</span>  = <span class="hljs-title class_">Sup</span> =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Sup</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(...args)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">stringify</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceError</span>(<span class="hljs-string">&#x27;must be define stringify&#x27;</span>)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">parse</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceError</span>(<span class="hljs-string">&#x27;must be define parse&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point3D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Serializable</span>(<span class="hljs-title class_">Point</span>)&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, z</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(x, y)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">z</span> = z<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">stringify</span>(<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-keyword">let</span> &#123;x, y, z&#125; = obj<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;x, y, z&#125;)    <span class="hljs-comment">// 返回值是一个string</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">let</span> &#123;x, y, z&#125; = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point3D</span>(x, y, z)<br>    &#125;<br><br>&#125;<br><br>p3d_obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point3D</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">19</span>)<br>str = p3d_obj.<span class="hljs-title function_">toString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str) <span class="hljs-comment">// &#123;&quot;x&quot;:2,&quot;y&quot;:5,&quot;z&quot;:19&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str)  <span class="hljs-comment">// string</span><br><br>new_P3d = <span class="hljs-title class_">Point3D</span>.<span class="hljs-title function_">parse</span>(str)<span class="hljs-comment">// //通过序列化反序列化复制对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(new_P3d)    <span class="hljs-comment">// Point3D &#123; x: 2, y: 5, z: 19 &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(new_P3d <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Point3D</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(new_P3d <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Point</span>)   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(new_P3d == p3d_obj)    <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>Serializable 在语义上变成一种装饰，用来装饰Person类，即 Employee 是一种可序列化的 Person。这种MixIn的思想就是Python装饰器在JavaScript里面的应用了，只是JavaScript没有像Python一样用语法糖的形式来实现。</p><hr><p>参考：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions">MDN-函数</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes">MDN-类</a></li><li><a href="http://exploringjs.com/es6/ch_classes.html#sec_simple-mixins"><strong>simple-mixins</strong></a></li><li><a href="https://www.h5jun.com/post/mixin-in-es6.html">月影大神-类的装饰器：ES6 中优雅的 mixin 式继承</a></li><li><a href="http://www.w3cschool.cn/ecmascript/e7yk1q5x.html">ECMAScript 6 Class</a></li><li><a href="http://www.nodeclass.com/api/ECMAScript6.html">ECMAScript 6入门</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
      <tag>类</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础</title>
    <link href="/2017/04/18/javascript%E5%9F%BA%E7%A1%80/"/>
    <url>/2017/04/18/javascript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 从 Java 中借用其大部分语法，但也受 Awk，Perl 和 Python的影响。因此本篇博客基于对Java和Python的认识来记录JavaScript的差异点。</p><h1 id="0x00-let-var-const"><a href="#0x00-let-var-const" class="headerlink" title="[0x00] let,var,const"></a>[0x00] let,var,const</h1><ul><li><p>var 的方式是为了兼容旧版。因为var定义变量， 会提升作用域，var定义的变量，都是全局作用域。</p></li><li><p>let 是ES6引入的，如果没有特殊原因， 变量都应该是用let来定义</p></li><li><p>const是定义常量</p></li></ul><h1 id="0x01-JavaScript数据类型"><a href="#0x01-JavaScript数据类型" class="headerlink" title="[0x01] JavaScript数据类型"></a>[0x01] JavaScript数据类型</h1><p>JavaScript总共有六种基本数据类型</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Boolean">Boolean</a>.  布尔值，<code>true</code> 和 <code>false</code>.</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/null">null</a>. 一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，因此 <code>null </code>与 <code>Null</code>、<code>NULL</code>或其他变量完全不同。</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/undefined">undefined</a>.  变量未定义时的属性。</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Number">Number</a>.  表示数字，例如： <code>42</code> 或者 <code>3.14159。</code></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/String">String</a>.  表示字符串，例如：”Howdy”</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol</a> ( 在 ECMAScript 6 中新添加的类型).。一种数据类型，它的实例是唯一且不可改变的。</li></ul><blockquote><p>在bool运算中，null和undefined都等价于false</p></blockquote><p>除了六种基本数据类型之外，还有复合的object类型。</p><span id="more"></span><h1 id="0x02-字符串单引号，双引号和倒引号"><a href="#0x02-字符串单引号，双引号和倒引号" class="headerlink" title="[0x02] 字符串单引号，双引号和倒引号"></a>[0x02] 字符串单引号，双引号和倒引号</h1><ul><li>字符串可以用双引号，也可以用单引号， 没有任何区别</li><li>倒引号定义的字符串可以写在多行</li><li>倒引号定义的字符串可以插值，使用 ${name}的方式，把变量插入到字符串中，借鉴于Perl</li></ul><p><strong>${name}代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-keyword">let</span> z = <span class="hljs-string">`hello <span class="hljs-subst">$&#123;x&#125;</span>`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(z)  <span class="hljs-comment">// 输出hello world</span><br></code></pre></td></tr></table></figure><h1 id="0x03-自增自减运算符"><a href="#0x03-自增自减运算符" class="headerlink" title="[0x03] 自增自减运算符"></a>[0x03] 自增自减运算符</h1><p> 两个连续加号表示自增操作，两个连续减号表示自减操作。借鉴于Java。</p><p>以自增操作为例：</p><ul><li><p>加号在后，表示先求值，后自增</p></li><li><p>加号在前，表示先自增，后求值</p></li></ul><h1 id="0x04-双等号和三等号"><a href="#0x04-双等号和三等号" class="headerlink" title="[0x04] 双等号和三等号"></a>[0x04] 双等号和三等号</h1><p>console.log( ‘3’ &#x3D;&#x3D; 3);  &#x2F;&#x2F; &#x3D;&#x3D; 转化为相同类型之后再比较值，也就是不比较类型</p><p>console.log( ‘3’ &#x3D;&#x3D;&#x3D; 3); &#x2F;&#x2F; &#x3D;&#x3D;&#x3D; 值和类型都比较，所以常用&#x3D;&#x3D;&#x3D;</p><p>!&#x3D; 和 !&#x3D;&#x3D; 的规则同 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的规则</p><h1 id="0x05-作用域"><a href="#0x05-作用域" class="headerlink" title="[0x05] 作用域"></a>[0x05] 作用域</h1><ul><li>Python的作用域以def为最小单位</li><li>从ES6开始， es开始支持块级作用域。JavaScript的大括号就会开始一个新的语句块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">3</span>; &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">4</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x in block is <span class="hljs-subst">$&#123;x&#125;</span>`</span>);  <span class="hljs-comment">// x=4</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;x&#125;</span>`</span>)  <span class="hljs-comment">// x=3</span><br><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">3</span>; &#123;<br>x = x + <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x in block is <span class="hljs-subst">$&#123;x&#125;</span>`</span>)  <span class="hljs-comment">// x=3 外层变量可以传入内层</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;x&#125;</span>`</span>)  <span class="hljs-comment">// x=3</span><br></code></pre></td></tr></table></figure><h1 id="0x06-分支"><a href="#0x06-分支" class="headerlink" title="[0x06] 分支"></a>[0x06] 分支</h1><p><strong>if语句</strong></p><ul><li><p>if 语句可以不带else子句</p></li><li><p>if 语句可以带else子句实现双分支</p></li><li><p>if 语句可以带else if 子句实现多分支</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (condition_1) &#123;<br>  statement_1;<br>&#125;<br>[<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition_2) &#123;<br>  statement_2;<br>&#125;]<br>...<br>[<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition_n_1) &#123;<br>  statement_n_1;<br>&#125;]<br>[<span class="hljs-keyword">else</span> &#123;<br>  statement_n;<br>&#125;]<br></code></pre></td></tr></table></figure><p><strong>switch语句</strong></p><p>和java类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">switch (expression) &#123;<br>   <span class="hljs-keyword">case</span> label_1:<br>      statements_1<br>      [<span class="hljs-keyword">break</span>;]<br>   <span class="hljs-keyword">case</span> label_2:<br>      statements_2<br>      [<span class="hljs-keyword">break</span>;]<br>   ...<br>   default:<br>      statements_def<br>      [<span class="hljs-keyword">break</span>;]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x07-循环"><a href="#0x07-循环" class="headerlink" title="[0x07] 循环"></a>[0x07] 循环</h1><ul><li><p>c风格for循环</p></li><li><p>for..in循环</p></li><li><p>for..of循环</p></li><li><p>for each..in循环：目前已禁用</p></li><li><p>do..while循环</p></li><li><p>while循环</p></li></ul><p>c风格for循环和两种while循环的区别都是c语言风格的，Java也类似。再次单独介绍for..in和for..of循环</p><p><strong>for..in和for..of循环</strong></p><p>for of是ES6新加的语法，用来遍历数组元素值，而for in是用来遍历对象的索引。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// for in会遍历对象所有的属性,即会遍历数组的元素以及属性</span><br><span class="hljs-keyword">let</span> myArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>myArray.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;数组&quot;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> myArray) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myArray[index]);  <span class="hljs-comment">// 会输出myArray的name属性</span><br>&#125;<br><br><span class="hljs-comment">// for of遍历的只是数组内的元素，而不包括数组的原型属性method和索引name</span><br><span class="hljs-keyword">let</span> myarray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>myarray.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;数组&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myarray) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x08-解构"><a href="#0x08-解构" class="headerlink" title="[0x08] 解构"></a>[0x08] 解构</h1><p>JavaScript的解构借鉴于Python，但是和Python相比JavaScript的解构更加强大。</p><p><strong>Array解构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 普通解构</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">const</span> [a, b] = arr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b)  <span class="hljs-comment">// 输出1 2</span><br><br><br><span class="hljs-comment">// 普通解构支持默认值</span><br>arr = [<span class="hljs-number">1</span>]<br><span class="hljs-keyword">const</span> [a=<span class="hljs-number">3</span>, b=<span class="hljs-number">4</span>] = arr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b)  <span class="hljs-comment">// 输出1 4</span><br></code></pre></td></tr></table></figure><p><strong>Object解构</strong></p><p>Python不支持字典解构，但是JavaScript支持的对象解构就包含字典解构，只是在JavaScript中不叫字典。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// object 解构</span><br>obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">a</span>: A, <span class="hljs-attr">b</span>: B, <span class="hljs-attr">c</span>: C&#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A, B, C)  <span class="hljs-comment">// 输出1 2 3</span><br><br><span class="hljs-comment">// object 解构支持默认值</span><br>obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">a</span>: A, <span class="hljs-attr">b</span>: B, <span class="hljs-attr">c</span>: C, <span class="hljs-attr">d</span>: D = <span class="hljs-number">18</span>&#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A, B, C, D)  <span class="hljs-comment">// 输出1 2 3 18</span><br></code></pre></td></tr></table></figure><p><strong>嵌套解构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 嵌套解构</span><br>arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> [a, [b, c ,d = <span class="hljs-number">18</span>]] = arr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c, d)  <span class="hljs-comment">// 输出1 2 3 18</span><br></code></pre></td></tr></table></figure><p>更复杂的嵌套解构如下（MDN上的一个例子）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解构Json文件</span><br><span class="hljs-keyword">const</span> metadata = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Scratchpad&quot;</span>,<br>    <span class="hljs-attr">translations</span>: [<br>       &#123;<br>        <span class="hljs-attr">locale</span>: <span class="hljs-string">&quot;de&quot;</span>,<br>        <span class="hljs-attr">localization_tags</span>: [ ],<br>        <span class="hljs-attr">last_edit</span>: <span class="hljs-string">&quot;2014-04-14T08:43:37&quot;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/de/docs/Tools/Scratchpad&quot;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;JavaScript-Umgebung&quot;</span><br>       &#125;<br>    ],<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/en-US/docs/Tools/Scratchpad&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">title</span>: <span class="hljs-title class_">Title</span>, <span class="hljs-attr">translations</span>: [&#123;<span class="hljs-attr">title</span>: <span class="hljs-title class_">TransTitle</span>&#125;]&#125; = metadata<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Title</span>, <span class="hljs-title class_">TransTitle</span>)  <span class="hljs-comment">// 输出Scratchpad JavaScript-Umgebung</span><br></code></pre></td></tr></table></figure><hr><p>参考资料</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide">MDN-JavaScript指南</a></li><li><a href="https://www.w3school.com.cn/js/index.asp">W3S-JavaScript 教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">MDN-解构赋值</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-pymysql</title>
    <link href="/2017/04/14/python-pymysql/"/>
    <url>/2017/04/14/python-pymysql/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装mysql数据库的难度和oracle数据库简直没得比，安装步骤如下：</p><h2 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install mariadb mariadb-server  # 安装，centos7默认的mysql就是mariadb<br>systemctl start mariadb  # 启动mariadb<br>systemctl enable mariadb  # 开机自启动<br>mysql_secure_installation  # 设置root密码<br>mysql -uroot -p  # 登录<br></code></pre></td></tr></table></figure><h2 id="安装pymysql"><a href="#安装pymysql" class="headerlink" title="安装pymysql"></a>安装pymysql</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pymysql<br></code></pre></td></tr></table></figure><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>数据库基本操作主要是：</p><ol><li>创建连接</li><li>获取游标</li><li>执行sql</li><li>提交事务：<strong>针对非查询性SQL</strong></li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># connect函数打开数据库连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><span class="hljs-comment"># cursor方法创建游标对象cur</span><br>cur = conn.cursor()<br><span class="hljs-comment"># execute方法执行SQL语句</span><br>cur.execute(<span class="hljs-string">&quot;SELECT VERSION()&quot;</span>)<br><span class="hljs-comment"># fetchone方法获取单条数据</span><br>data = cur.fetchone()<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Database version : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data))<br><span class="hljs-comment"># 关闭游标</span><br>cur.close()<br><span class="hljs-comment"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>DDL：数据定义语言。包括创建表，创建索引等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># connect函数打开数据库连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><br><span class="hljs-comment"># cursor方法创建游标对象cur</span><br>cur = conn.cursor()<br><br><span class="hljs-comment"># 创建表</span><br>sql = <span class="hljs-string">&#x27;&#x27;&#x27;create table user (</span><br><span class="hljs-string">         name char(20) not null,</span><br><span class="hljs-string">         age int,  </span><br><span class="hljs-string">         sex char(1))&#x27;&#x27;&#x27;</span><br><br>cur.execute(sql)<br><br><span class="hljs-comment"># 关闭游标</span><br>cur.close()<br><span class="hljs-comment"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p>DML：数据操作语言，包含增删改三项操作。</p><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># connect函数打开数据库连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><br><span class="hljs-comment"># cursor方法创建游标对象cur</span><br>cur = conn.cursor()<br><br><span class="hljs-comment"># 创建表</span><br>sql = <span class="hljs-string">&#x27;&#x27;&#x27;insert into user(name, age, sex) values(&#x27;suncle&#x27;, 18, &#x27;m&#x27;)&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 执行sql语句</span><br>    cur.execute(sql)<br>    <span class="hljs-comment"># 提交到数据库执行</span><br>    conn.commit()<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-comment"># 如果发生错误则回滚</span><br>    conn.rollback()<br><br><span class="hljs-comment"># 关闭游标</span><br>cur.close()<br><span class="hljs-comment"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># connect函数打开数据库连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><br><span class="hljs-comment"># cursor方法创建游标对象cur</span><br>cur = conn.cursor()<br><br><span class="hljs-comment"># 创建表</span><br>sql = <span class="hljs-string">&#x27;&#x27;&#x27;update user t set t.age = 20 where t.name=&#x27;suncle&#x27; &#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 执行sql语句</span><br>    cur.execute(sql)<br>    <span class="hljs-comment"># 提交到数据库执行</span><br>    conn.commit()<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-comment"># 如果发生错误则回滚</span><br>    conn.rollback()<br><br><span class="hljs-comment"># 关闭游标</span><br>cur.close()<br><span class="hljs-comment"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># connect函数打开数据库连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><br><span class="hljs-comment"># cursor方法创建游标对象cur</span><br>cur = conn.cursor()<br><br><span class="hljs-comment"># 创建表</span><br>sql = <span class="hljs-string">&#x27;&#x27;&#x27;delete from user where age=20 &#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 执行sql语句</span><br>    cur.execute(sql)<br>    <span class="hljs-comment"># 提交到数据库执行</span><br>    conn.commit()<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-comment"># 如果发生错误则回滚</span><br>    conn.rollback()<br><br><span class="hljs-comment"># 关闭游标</span><br>cur.close()<br><span class="hljs-comment"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h1 id="QUERY"><a href="#QUERY" class="headerlink" title="QUERY"></a>QUERY</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><p>主要有三个函数</p><ul><li>cursor.fetchall 返回行的元组</li><li>cursor.fetchmany 返回行的元组， 可以指定返回前N行 相当于对fetchall切片fetchall[:N]</li><li>cursor.fetchone 返回首行， 相当于fetchall[0]</li></ul><p>查询语句如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select * from user t where t.age&lt;=19;&#x27;&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>三种方法得到的结果分别为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">cur.fetchall()  <span class="hljs-comment"># ((&#x27;suncle&#x27;, 18, &#x27;m&#x27;), (&#x27;suncle1&#x27;, 19, &#x27;m&#x27;))</span><br><br>cur.fetchmany(<span class="hljs-number">1</span>)  <span class="hljs-comment"># ((&#x27;suncle&#x27;, 18, &#x27;m&#x27;),)</span><br><br>cur.fetchone()  <span class="hljs-comment"># (&#x27;suncle&#x27;, 18, &#x27;m&#x27;)</span><br></code></pre></td></tr></table></figure><p>可见：每行数据也是一个元组， 元组的内容由sql决定</p><p>如果要让返回的数据带上列名，也就是要返回字典，那么就需要用到cursors.DictCursor。</p><h2 id="DictCursor"><a href="#DictCursor" class="headerlink" title="DictCursor"></a>DictCursor</h2><p>创建cursor时创建DictCursor类型的就可以fetch回来字典形式的结果了</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><br><span class="hljs-comment"># 创建cursor时指定cursor参数cursor=pymysql.cursors.DictCursor表示cursor类型</span><br>cur = conn.cursor(cursor=pymysql.cursors.DictCursor)<br>cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select * from user t where t.age&lt;=20;&#x27;&#x27;&#x27;</span>)<br>cur.fetchall()<br></code></pre></td></tr></table></figure><p>fetchall返回结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;suncle&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>: <span class="hljs-string">&#x27;m&#x27;</span>&#125;,<br> &#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;suncle1&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>: <span class="hljs-string">&#x27;m&#x27;</span>&#125;,<br> &#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;suncle2&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>: <span class="hljs-string">&#x27;m&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure><p>返回每一行记录都是一个字典，整体结果是由字典组成的列表。而默认的cursor是由元组组成的元组。</p><h1 id="参数化查询"><a href="#参数化查询" class="headerlink" title="参数化查询"></a>参数化查询</h1><h2 id="基础的SQL注入"><a href="#基础的SQL注入" class="headerlink" title="基础的SQL注入"></a>基础的SQL注入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br>cur = conn.cursor()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>(<span class="hljs-params">age=<span class="hljs-number">18</span></span>):<br>    sql = <span class="hljs-string">&#x27;&#x27;&#x27;select * from user t where t.age&lt;=&#123;&#125;;&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(age)<br>    cur.execute(sql)<br>    <span class="hljs-keyword">return</span> cur.fetchall()<br><br>get_user()  <span class="hljs-comment"># 返回((&#x27;suncle&#x27;, 18, &#x27;m&#x27;),)</span><br><br>get_user(<span class="hljs-string">&#x27;18 or 1=1&#x27;</span>)  <span class="hljs-comment"># 返回((&#x27;suncle&#x27;, 18, &#x27;m&#x27;), (&#x27;suncle1&#x27;, 19, &#x27;m&#x27;))</span><br></code></pre></td></tr></table></figure><p>当传入参数的age中带sql条件的时候，就会发生sql注入，使得结果可能并不满足要求。</p><p>为了解决sql注入，我们可以使用参数化查询。</p><h2 id="使用参数化查询"><a href="#使用参数化查询" class="headerlink" title="使用参数化查询"></a>使用参数化查询</h2><p>以上代码做以下修改之后就可以避免sql注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br>cur = conn.cursor()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>(<span class="hljs-params">age=<span class="hljs-number">18</span></span>):<br>    <span class="hljs-comment"># 不管数据库定义的是什么类型，统一使用%s</span><br>    sql = <span class="hljs-string">&#x27;&#x27;&#x27;select * from user t where t.age&lt;=%s;&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(age)<br>    cur.execute(sql, (age, ))  <span class="hljs-comment"># 参数化查询</span><br>    <span class="hljs-keyword">return</span> cur.fetchall()<br></code></pre></td></tr></table></figure><p>参数化查询最大的优势在于避免了SQL注入，同时参数化之后避免了sql多次硬解析，能提高查询效率。所以，总是应该使用参数化查询。</p><h1 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h1><p>数据库连接和游标都支持上下文管理。</p><p><strong>游标</strong></p><p>查看cur实例对应Cursor类的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cur = conn.cursor()<br><span class="hljs-built_in">help</span>(cur)<br></code></pre></td></tr></table></figure><p>对应的with语句使用如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> cur:<br>    cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select * from user&#x27;&#x27;&#x27;</span>)<br><br>cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select * from user&#x27;&#x27;&#x27;</span>)  <span class="hljs-comment"># 抛出错误：ProgrammingError: Cursor closed</span><br></code></pre></td></tr></table></figure><p>with语句块结束之后cur就已经关闭了。</p><p><strong>连接</strong></p><p>通过help命令查看Connection类的<code>__enter__</code>和<code>__exit__</code>两种方法的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">conn = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><span class="hljs-built_in">help</span>(conn)  <span class="hljs-comment"># conn是Connection类</span><br></code></pre></td></tr></table></figure><p>查看结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">|  __enter__(self)<br>|      Context manager that returns a Cursor<br>|  <br>|  __exit__(self, exc, value, traceback)<br>|      On successful exit, commit. On exception, rollback<br></code></pre></td></tr></table></figure><ul><li><code>__enter__</code>方法会返回一个游标</li><li><code>__exit__</code>方法：如果成功推出就会自动提交commit，如果发生异常就会回滚rollback</li></ul><p>对应的with语句使用如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>    cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;update user t set t.age = 20 where t.name=&#x27;suncle&#x27; &#x27;&#x27;&#x27;</span>)<br><br>cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select * from user&#x27;&#x27;&#x27;</span>)  <span class="hljs-comment"># 退出with块之后游标仍然没有关闭</span><br></code></pre></td></tr></table></figure><p>虽然游标没有关闭， 但是数据库操作已经提交。</p><p><strong>游标和连接共同上下文管理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> conn <span class="hljs-keyword">as</span> cur:<br>    <span class="hljs-keyword">with</span> cur:<br>        cur.execute(<span class="hljs-string">&#x27;&#x27;&#x27;update user t set t.age = 20 where t.name=&#x27;suncle&#x27; &#x27;&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>退出整个上下文管理块之后，游标会关闭，并且会自动提交。</p><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p>一般来说，应用程序访问数据库的过程是：</p><ol><li>装载数据库驱动程序</li><li>建立数据库连接</li><li>访问数据库，执行sql语句</li><li>断开数据库连接</li></ol><p>相对于性能正常的SQL的执行效率来说，建立连接是一个费时的活动，而且系统还要为每一个连接分配内存资源。在现在web请求的大并发量情况下，必然会导致频繁的数据库操作。而频繁的进行数据库连接操作势必占用很多的系统资源，使得系统的响应速度下降，严重的甚至会造成服务器的崩溃。</p><p><strong>引入数据库连接池技术之后，应用程序访问数据库的过程是：</strong></p><ol><li>请求数据库操作时，从连接池中取出创建好的数据库连接</li><li>执行sql语句</li><li>不断开数据库连接，而是放回连接池中，等待下次使用</li></ol><p>连接池还有个优点就是能控制数据库的压力，当大量用户同时涌入时，连接池只会使用池限制数据库连接数目，而不会不停的向数据库请求连接，最后导致服务器崩溃。</p><p><strong>Python实现数据库连接池</strong></p><ul><li>使用队列Queue保存数据库连接</li></ul><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPool</span>():  <span class="hljs-comment"># args和kwargs用来接收数据库url信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size, *args, **kwargs</span>):<br>        self.args = args<br>        self.kwargs = kwargs<br>        self.size = size<br>        self.pool = Queue(maxsize=self.size)<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.size):<br>            self.pool.put(self._connect())<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_connect</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> pymysql.connect(*self.args, **self.kwargs)<br>    <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_close</span>(<span class="hljs-params">conn</span>):<br>        conn.close()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_connection</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.pool.get()<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">return_connection</span>(<span class="hljs-params">self, conn</span>):<br>        <span class="hljs-keyword">return</span> self.pool.put(conn)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_pool</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.is_empty():<br>            self._close(self.pool.get())<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.pool.empty()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_full</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.pool.full()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">current_connection_count</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.pool.qsize()<br>    <br>    <br>pool = ConnectionPool(<span class="hljs-number">20</span>, host=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>, database=<span class="hljs-string">&#x27;student&#x27;</span>)<br><br>conn = pool.get_connection()  <span class="hljs-comment"># 获取数据库连接</span><br><span class="hljs-built_in">print</span>(conn)  <span class="hljs-comment"># &lt;pymysql.connections.Connection at 0x7f6290300940&gt;</span><br><span class="hljs-built_in">print</span>(pool.current_connection_count())  <span class="hljs-comment"># 19</span><br>cur = conn.cursor()<br>cur.execute(<span class="hljs-string">&quot;SELECT VERSION()&quot;</span>)<br>data = cur.fetchone()<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Database version : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data[<span class="hljs-number">0</span>]))<br>cur.close()<br>pool.return_connection(conn)  <span class="hljs-comment"># 关闭游标之后需要回收数据库连接</span><br><span class="hljs-built_in">print</span>(pool.current_connection_count())  <span class="hljs-comment"># 20</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pymysql</tag>
      
      <tag>mysql</tag>
      
      <tag>MariaDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-WSGI接口</title>
    <link href="/2017/04/07/python-wsgi%E6%8E%A5%E5%8F%A3/"/>
    <url>/2017/04/07/python-wsgi%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>Python WSGI规定了Web服务器和Python Web应用程序或Web框架之间的标准接口，主要是为了促进Web应用程序在各种Web服务器上的可移植性。</p><p>上述这句话翻译自Python官方的PEP333标准：<a href="https://www.python.org/dev/peps/pep-0333/">PEP 333 – Python Web Server Gateway Interface v1.0</a></p><h1 id="WSGI接口概述"><a href="#WSGI接口概述" class="headerlink" title="WSGI接口概述"></a>WSGI接口概述</h1><p>WSGI的含义：Web Server Gateway Interface（Web服务器网管接口）。</p><p>WSGI接口包含两方面：server&#x2F;gateway端 及 application&#x2F;framework端。后面直接使用server和application来说明，不再使用gateway和framework。server端直接调用application端提供的<strong>可调用对象</strong>。另外在server和application之间还可以有一种称作middleware的中间件。中间件对于server来说就是一个application，但是对于application来说中间件却是一个server。</p><p>上述可调用对象是指：函数、方法、类或者带有<code>__call__</code>方法的实例。</p><p>以下分别介绍application端，Server端和middleware三个部分</p><span id="more"></span><h1 id="Application端"><a href="#Application端" class="headerlink" title="Application端"></a>Application端</h1><p>函数、方法、类及带有callable方法的实例等可调用对象都可以作为application对象。application对象接受两个参数并且可以被多次调用。</p><p><strong>参数</strong></p><ul><li>environ：environ参数是一个字典对象，该对象必须是内置的Python字典，应用程序可以任意修改该字典。字典还必须包含某些WSGI必需的变量。</li><li>start_response：由server提供的回调函数，其作用是由application将状态码和响应头返回给server。这个函数有两个必需的位置参数和一个可选参数，三个参数分别为status，response_headers和exc_info</li></ul><p>start_response的三个参数的意义如下：</p><ul><li>status：HTTP 响应码及消息，例如status &#x3D; ‘200 OK’</li><li>response_headers：提供给客户端的响应头，需要封装成list of tuple pairs 的形式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">response_headers = [(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>), (<span class="hljs-string">&#x27;Content-Length&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(response_body)))]<br></code></pre></td></tr></table></figure><ul><li>exc_info：Python sys.exc_info()元组</li></ul><p><strong>返回值</strong></p><p>application对象必须返回一个响应体，响应体的形式是list of str，也就是说返回值是由一个或多个字符串组成的列表。</p><p>以下是一个函数作为application对象的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_app</span>(<span class="hljs-params">environ, start_response</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;最简单的application对象&quot;&quot;&quot;</span><br>    status = <span class="hljs-string">&#x27;200 OK&#x27;</span><br>    response_headers = [(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>)]<br>    start_response(status, response_headers)<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;Hello world!\n&#x27;</span>]<br></code></pre></td></tr></table></figure><p>以下是一个类作为application对象的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppClass</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    AppClass()会返回一个AppClass类对象作为application，然后在迭代的时候就会调用__iter__方法，然后就可以产生相同的输出。</span><br><span class="hljs-string">    如果我们也可以实现__call__方法直接将实例当做application</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>        self.environ = environ<br>        self.start = start_response<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        status = <span class="hljs-string">&#x27;200 OK&#x27;</span><br>        response_headers = [(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>)]<br>        self.start(status, response_headers)<br>        <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello world!\n&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h1><p>WSGI server必须要调用application，而且要使用位置参数的形式调用application。同时，从application的协议要求可知：</p><ul><li><p>WSGI server必须向application提供环境参数，因此，自身也必须能够获取环境参数。</p></li><li><p>WSGI server接收application的返回值作为响应体。</p></li></ul><p>最简单的WSGI server为Python自带的wsgiref.simple_server。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br>server = make_server(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">8080</span>, application)<br>server.serve_forever()<br></code></pre></td></tr></table></figure><h1 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h1><p>中间件位于WSGI server和WSGI application之间，关于中间件的部分代码参考：</p><ul><li><a href="http://ivory.idyll.org/articles/wsgi-intro/what-is-wsgi.html">An Introduction to the Python Web Server Gateway Interface (WSGI)</a></li></ul><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">application</span>(<span class="hljs-params">environ, start_response</span>):<br><br>    response_body = <span class="hljs-string">&#x27;hello world!&#x27;</span><br><br>    status = <span class="hljs-string">&#x27;200 OK&#x27;</span><br><br>    response_headers = [<br>        (<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>),<br>        (<span class="hljs-string">&#x27;Content-Length&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(response_body)))<br>    ]<br><br>    start_response(status, response_headers)<br>    <span class="hljs-keyword">return</span> [response_body]<br><br><span class="hljs-comment"># 中间件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Upperware</span>:<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, app</span>):<br>      self.wrapped_app = app<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, environ, start_response</span>):<br>      <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> self.wrapped_app(environ, start_response):<br>        <span class="hljs-keyword">yield</span> data.upper()<br><br>wrapped_app = Upperware(application)<br><br>httpd = make_server(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">8051</span>, wrapped_app)<br><br>httpd.serve_forever()<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;end&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>wsgi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灵魂独旅之海天佛国普陀山</title>
    <link href="/2017/04/04/%E7%81%B5%E9%AD%82%E7%8B%AC%E6%97%85%E4%B9%8B%E6%B5%B7%E5%A4%A9%E4%BD%9B%E5%9B%BD%E6%99%AE%E9%99%80%E5%B1%B1/"/>
    <url>/2017/04/04/%E7%81%B5%E9%AD%82%E7%8B%AC%E6%97%85%E4%B9%8B%E6%B5%B7%E5%A4%A9%E4%BD%9B%E5%9B%BD%E6%99%AE%E9%99%80%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p>曾经去过那么多的地方，走过那么多的路，爬过那么多的山，陪哥嫂和曾经的对象艰难的夜爬华山最终登顶看到绝美的日出，穿着一件单薄的衬衣淋着淅沥沥的春雨伴着青石的台阶跨过三重天最终见到了巍峨庄严的武当金顶，和大学室友四人路过风吹草低见牛羊的青海草场拂过青海湖一望无际的碧蓝涟漪，还有数不清的数不尽的旅行，每一次出行都有亲密熟识的朋友们陪伴，姑且就把曾经的对象也称为过往的亲密朋友，这么多年来一直期望有一次说走就走的一个人的旅行，抛开过去的一切。2017年4月1号的晚上终于下定了决心，毅然决然的定下了出行的票。就这样，2号的晚上打完了最后一把游戏，就开始准备着3号凌晨5点的出行，太兴奋，以致于一个晚上都没休息好。5点起了个大早，到了做大巴的地方还得等一个多小时，就顺便去西湖逛了一圈，就让西湖美景作为开篇第一图吧</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_061410.jpg" alt="清晨西湖美景"></p><span id="more"></span><p>但之后还是迷迷糊糊，迷迷糊糊坐着大巴跟团浩浩汤汤开进舟山，一路上经过了一座一座的跨海大桥，还记得刚上第一座桥听别人聊着天的时候突然向窗外看去，满眼遍布淤泥的滩涂，还以为自己来到了不知名的另类世界，还在迷糊着的时候别人告诉我，车已经行驶到跨海大桥。结束摇篮式的大巴后坐船到普陀岛的海途上，看到远处朦胧的巨大观音雕像，庄严而神圣。</p><p>我爬上了被众人忽略匆匆离去的二龟听法石，却得到了不一样的美景，这样意外的收获，也只有一个人兴起时才会有的更意外的结果吧。其实这样雾蒙蒙的很美。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_144545.jpg" alt="站在二龟听法石上看到的美景"></p><p>依旧喜欢爬山，更喜欢爬到山顶一览众山小的感觉，除了山还可以看到远处的大海，这种感觉更好。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_151217.jpg" alt="普济寺山顶"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_151807.jpg"></p><p>人间四月芳菲尽，山寺桃花始盛开。这时候含苞待放的桃花也只有有心人在山顶能看到了。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_151525.jpg" alt="含苞待放的桃花"></p><p>曾经那些很执着的事情，还有那些还未来得及执着的事情，在这个大门面前一切都变得不再那么重要了，只要回头真的就是岸。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_153839.jpg" alt="回头是岸"></p><p>普济也即普渡济世，寺前烟雾缭绕，香火旺盛，两旁的古障树枝繁叶茂，荫蔽着普济禅寺，对于求佛拜佛的人，寺庙本身就有一种大肚能容天下难容之事的气魄。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_163956.jpg" alt="普济寺"></p><p>至于寺庙，这一次磕了头的就多达数十座，看到虔诚的佛教徒三拜九叩，不由得自己也变成了佛教徒，虽然一直告诫自己我没有宗教信仰。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_174749.jpg" alt="寺庙群"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_165245.jpg" alt="辉常月海"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_165443.jpg" alt="御碑"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_194120.jpg" alt="普门万佛宝塔"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_194323.jpg" alt="普门万佛宝塔"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_075350.jpg" alt="龙相石雕"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_075807.jpg" alt="法雨禅寺"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_071108.jpg" alt="转经"></p><p>至于菩萨，每一尊大的观音菩萨，我都种了福田，渐渐的身上的零钱也都种完了。不要问我为什么菩萨的照片这么少，因为室内的菩萨不许拍摄，菩萨不再你的照片中，而在你的心里。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170403_165409.jpg" alt="南无观世音菩萨"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_090725.jpg" alt="南海观音"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_090439.jpg" alt="菩萨雕像"></p><p>至于大海，此行的另一个目标就是看到纯净的大海，虽然看到了大海，但却没有实现纯净的目标，不过有什么关系呢？看到了就行了。海水为什么不是蓝色的呢？因为舟山的水营养丰富，螃蟹很肥。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_101007.jpg" alt="大海1"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_083859.jpg" alt="大海2"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_094452.jpg" alt="大海3"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_092640.jpg" alt="大海4"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_092635.jpg" alt="大海5"></p><p>至于日出，无论是高山还是大海，日出总是必不可少的，因为它总有独特的魅力吸引着我。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_055028.jpg" alt="小山村的日出"></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170404_060149.jpg" alt="海上的日出"></p><p>至于我，虽然还是一个长的很着急的臭屌丝，在这也就不上照片了。</p><p>至此，灵魂独旅结束。学会了很多，也懂得了很多。每一次旅行都是对灵魂的放飞，感恩旅途中遇到了朋友们，感谢娟姐，返程时陪我聊了一路，给我讲了很多不曾涉足的生活。感谢江南哥，临时的室友但很暖心。感谢玥玥，几人结伴走了整整一路。</p><p>最后附上娟姐的照片</p><p>萌萌的娟姐，成熟和年轻并不矛盾</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tour/putuoshan/IMG_20170405141031.jpg" alt="娟姐"></p><p>玥玥害羞不肯给，也是没辙了</p><p>​That’s all~</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>普陀山</tag>
      
      <tag>舟山</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7-Nginx配置Let&#39;s-Encrypt-SSL证书</title>
    <link href="/2017/03/30/centos7-nginx%E9%85%8D%E7%BD%AElet-s-encrypt-ssl%E8%AF%81%E4%B9%A6/"/>
    <url>/2017/03/30/centos7-nginx%E9%85%8D%E7%BD%AElet-s-encrypt-ssl%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s-Encrypt"></a>Let’s-Encrypt</h1><p>为http站点添加https支持，需要从证书发行机构获取SSL&#x2F;TLS 证书。常见的免费证书有两种：</p><ul><li><a href="https://letsencrypt.org/">Let’s-Encrypt</a>，本文即将介绍，Let’s-Encrypt大法好。</li><li><a href="https://caddyserver.com/">caddy</a>，原生支持 HTTP&#x2F;2，自动创建 <a href="http://www.appinn.com/use-letsencrypt-with-nginx/">Let’s Encrypt</a> 证书，非常简单易用。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release -y<br>yum install certbot -y<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">certbot certonly --webroot -w /www/html -d suncle.me -d www.suncle.me<br></code></pre></td></tr></table></figure><ul><li><code>--webroot</code>表示以webroot模式运行，此处我们不选择standalone模式</li><li><code>-w /www/html</code>表示站点根目录在&#x2F;www&#x2F;html</li><li><code>-d suncle.me -d www.suncle.me</code>表示为@主机和www主机生成共同的证书</li></ul><p>按照提示操作成功后，提示：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tp">IMPORTANT NOTES:<br> - Congratulations<span class="hljs-comment">! Your certificate and chain have been saved at</span><br><span class="hljs-comment">   /etc/letsencrypt/live/suncle.me/fullchain.pem. Your cert will</span><br><span class="hljs-comment">   expire on 2017-06-28. To obtain a new or tweaked version of this</span><br><span class="hljs-comment">   certificate in the future, simply run certbot again. To</span><br><span class="hljs-comment">   non-interactively renew *all* of your certificates, run &quot;certbot</span><br><span class="hljs-comment">   renew&quot;</span><br><span class="hljs-comment"> - Your account credentials have been saved in your Certbot</span><br><span class="hljs-comment">   configuration directory at /etc/letsencrypt. You should make a</span><br><span class="hljs-comment">   secure backup of this folder now. This configuration directory will</span><br><span class="hljs-comment">   also contain certificates and private keys obtained by Certbot so</span><br><span class="hljs-comment">   making regular backups of this folder is ideal.</span><br><span class="hljs-comment"> - If you like Certbot, please consider supporting our work by:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Donating to ISRG / Let&#x27;s Encrypt:   https://letsencrypt.org/donate</span><br><span class="hljs-comment">   Donating to EFF:                    https://eff.org/donate-le</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="证书自动更新"><a href="#证书自动更新" class="headerlink" title="证书自动更新"></a>证书自动更新</h2><p>Let’s Encrypt 只有3个月的有效期，所以我们需要定时去更新证书。</p><p>可以通过运行：<code>certbot renew --dry-run</code> 来测试自动生成是否能够正常运行。如果正确执行，我们就可以通过以下命令更新证书:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">certbot renew <br></code></pre></td></tr></table></figure><p>如果要达到自动更新证书，可以借助<code>crontab</code>或者<code>systemd</code>定时执行上面的更新命令。Let’s Encrypt官方建议一天更新两次最好。因为证书没有到期之前是不会更新，因此即使一天执行两次也不会有什么影响。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">每天3:00和19:00点更新证书</span><br>0 3,19 * * * certbot renew<br></code></pre></td></tr></table></figure><p>具体执行时间可以参考以下crontab格式进行修改：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Example <span class="hljs-keyword">of</span> job <span class="hljs-keyword">definition</span>:<br># .---------------- minute (<span class="hljs-number">0</span> - <span class="hljs-number">59</span>)<br># |  .------------- hour (<span class="hljs-number">0</span> - <span class="hljs-number">23</span>)<br># |  |  .---------- day <span class="hljs-keyword">of</span> month (<span class="hljs-number">1</span> - <span class="hljs-number">31</span>)<br># |  |  |  .------- month (<span class="hljs-number">1</span> - <span class="hljs-number">12</span>) OR jan,feb,mar,apr ...<br># |  |  |  |  .---- day <span class="hljs-keyword">of</span> week (<span class="hljs-number">0</span> - <span class="hljs-number">6</span>) (Sunday=<span class="hljs-number">0</span> or <span class="hljs-number">7</span>) OR sun,mon,tue,wed,thu,fri,sat<br># |  |  |  |  |<br># *  *  *  *  * user-name  command to be executed<br></code></pre></td></tr></table></figure><h1 id="配置Nginx-SSL证书"><a href="#配置Nginx-SSL证书" class="headerlink" title="配置Nginx SSL证书"></a>配置Nginx SSL证书</h1><p>修改&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf文件如下（最好先备份）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># Nginx以root用户启动</span><br><span class="hljs-attribute">user</span> root;<br><span class="hljs-comment"># Nginx开启的进程数</span><br><span class="hljs-attribute">worker_processes</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-comment"># Nginx连接的最大个数</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">65535</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-comment"># 如果路径中出现通配符，mime.types可配置多个文件</span><br>    <span class="hljs-attribute">include</span> mime.types; <br>    <span class="hljs-comment"># 默认文件类型</span><br>    <span class="hljs-attribute">default_type</span> application/octet-stream;<br>    <span class="hljs-comment"># 日志格式  </span><br>    <span class="hljs-attribute">log_format</span> main <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br>    <span class="hljs-comment"># 记录访问日志</span><br>    <span class="hljs-attribute">access_log</span> logs/access.log main;<br>    <span class="hljs-comment"># 开启sendfile，提升文件传输效率</span><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># 死链判断：客户端连接保持活动的超时时间</span><br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#设置非安全连接永久跳转到安全连接</span><br>    server&#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> www.suncle.me suncle.net blog.suncle.net;<br>        <span class="hljs-comment">#告诉浏览器有效期内只准用 https 访问</span><br>        <span class="hljs-attribute">add_header</span> Strict-Transport-Security max-age=<span class="hljs-number">15768000</span>;<br>        <span class="hljs-comment">#永久重定向到 https 站点</span><br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>    &#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-comment">#启用 https, 使用 http/2 协议, nginx 1.9.11 启用 http/2 会有bug, 已在 1.9.12 版本中修复.</span><br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>        <span class="hljs-attribute">server_name</span> www.suncle.me suncle.net blog.suncle.net;<br>        <span class="hljs-comment">#告诉浏览器当前页面禁止被frame</span><br>        <span class="hljs-attribute">add_header</span> X-Frame-Options DENY;<br>        <span class="hljs-comment">#告诉浏览器不要猜测mime类型</span><br>        <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;<br>        <span class="hljs-attribute">root</span> /www/html;<br><br>        <span class="hljs-comment">#证书路径</span><br>        <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/suncle.me/fullchain.pem;<br>        <span class="hljs-comment">#私钥路径</span><br>        <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/suncle.me/privkey.pem;<br>        <span class="hljs-comment">#安全链接可选的加密协议</span><br>        <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">#可选的加密算法,顺序很重要,越靠前的优先级越高.</span><br>        <span class="hljs-attribute">ssl_ciphers</span> ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:!ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:HIGH:!RC4-SHA:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!CBC:!EDH:!kEDH:!PSK:!SRP:!kECDH;<br>        <span class="hljs-comment">#在 SSLv3 或 TLSv1 握手过程一般使用客户端的首选算法,如果启用下面的配置,则会使用服务器端的首选算法.</span><br>        <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-comment">#储存SSL会话的缓存类型和大小</span><br>        <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br>        <span class="hljs-comment">#缓存有效期</span><br>        <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">60m</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上配置文件nginx.conf中需要修改的字段主要有：</p><ul><li>server_name <a href="http://www.suncle.me/">www.suncle.me</a> suncle.net blog.suncle.net;</li><li>ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;suncle.me&#x2F;fullchain.pem;</li><li>ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;suncle.me&#x2F;privkey.pem;</li></ul><blockquote><p><code>listen 443 ssl http2;</code>这一句中，如果Nginx编译安装的时候没有安装<code>ngx_http_v2_module</code>模块，则需要先安装。或者不采用http2协议，直接<code>listen 443 ssl</code>即可</p></blockquote><p>保存配置，检查是否报错，重启Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/nginx/nginx -t<br>/usr/local/nginx/nginx -s reload<br></code></pre></td></tr></table></figure><p>Nginx 的 SSL 证书到此配置完成。</p><hr><p>参考</p><ol><li><a href="https://blog.itnmg.net/letsencrypt-ssl/">CentOS 7 Nginx Let’ s Encrypt SSL 证书安装配置</a></li><li><a href="http://blog.lzuer.net/2016/10/25/https/">开启Https之旅</a></li><li><a href="https://www.arayzou.com/2016/08/12/nginx+https+http2%E6%90%AD%E5%BB%BA(%E4%BA%8C)/">nginx+https+http2搭建(二)</a></li><li><a href="http://xianglong.me/article/linux-crontab/">Linux Crontab使用总结</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Nginx</tag>
      
      <tag>Let&#39;s-Encrypt</tag>
      
      <tag>SSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7-Nginx编译安装</title>
    <link href="/2017/03/30/centos7-nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <url>/2017/03/30/centos7-nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><p>需先安装好编译环境make，gcc和g++ 开发库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc automake autoconf libtool make<br>yum install gcc gcc-c++<br></code></pre></td></tr></table></figure><h1 id="安装pcre"><a href="#安装pcre" class="headerlink" title="安装pcre"></a>安装pcre</h1><p>pcre(Perl Compatible Regular Expressions)： perl 兼容的正则表达式库。</p><p>以下各编译安装的源码包均放在<code>/usr/local/src</code>下，Nginx依赖pcre是为了重写rewrite。</p><p>从<a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/%E4%B8%8B%E8%BD%BDpcre%E5%8C%85%EF%BC%8C%E4%B8%8D%E5%AE%9C%E5%A4%AA%E6%96%B0%EF%BC%8C%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8pcre8.39%E6%88%968.40%EF%BC%8C%E5%A4%AA%E6%96%B0%E7%9A%84pcre%E7%89%88%E6%9C%ACNginx%E4%B8%8D%E6%94%AF%E6%8C%81%E3%80%82">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/下载pcre包，不宜太新，推荐使用pcre8.39或8.40，太新的pcre版本Nginx不支持。</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz<br>tar -zxvf pcre-8.39.tar.gz<br>cd pcre-8.39<br>./configure<br>make<br>make install<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h1><p>zlib是为了Nginx压缩</p><p>从<a href="http://zlib.net/%E5%87%BA%E4%B8%8B%E8%BD%BD%E5%BD%93%E5%89%8D%E6%9C%80%E6%96%B0%E6%BA%90%E7%A0%81http://zlib.net/zlib-1.2.11.tar.gz">http://zlib.net/出下载当前最新源码http://zlib.net/zlib-1.2.11.tar.gz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>wget http://zlib.net/zlib-1.2.11.tar.gz<br>tar -zxvf zlib-1.2.11.tar.gz<br>cd zlib-1.2.11<br>./configure<br>make<br>make install<br></code></pre></td></tr></table></figure><h1 id="安装ssl"><a href="#安装ssl" class="headerlink" title="安装ssl"></a>安装ssl</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>wget https://www.openssl.org/source/openssl-1.0.1t.tar.gz<br>tar -zxvf openssl-1.0.1t.tar.gz<br>cd openssl-1.0.1t<br>./config # 不是./Configure<br>make<br>make install<br></code></pre></td></tr></table></figure><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>Nginx 一般有两个版本，分别是稳定版和开发版，您可以根据您的目的来选择这两个版本的其中一个，下面是把 Nginx 安装到 &#x2F;usr&#x2F;local&#x2F;nginx 目录下的详细步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>wget https://nginx.org/download/nginx-1.10.2.tar.gz<br>tar -zxvf nginx-1.10.2.tar.gz<br>cd nginx-1.10.2<br><br>./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.39 --with-zlib=/usr/local/src/zlib-1.2.11 --with-openssl=/usr/local/src/openssl-1.0.1t --with-http_v2_module<br><br>make<br>make install<br></code></pre></td></tr></table></figure><ul><li><p><code>--with-pcre=/usr/local/src/pcre-8.39</code> 指的是pcre-8.39 的源码路径。</p></li><li><p><code>--with-zlib=/usr/local/src/zlib-1.2.11</code> 指的是zlib-1.2.11 的源码路径。</p></li><li><p><code>--with-openssl=/usr/local/src/openssl-1.0.1t</code>指的是openssl-1.0.1t 的源码路径。</p></li><li><p>启用 https,时如需使用 http&#x2F;2 协议，则会依赖<code>ngx_http_v2_module</code>模块，可以使用<code>--with-http_v2_module</code>配置参数来启用。</p></li></ul><h1 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h1><p>测试nginx.conf是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/nginx/nginx -t<br></code></pre></td></tr></table></figure><p>确保系统的 80 端口没被其他程序占用，运行以下命令来启动 Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/nginx/nginx <br></code></pre></td></tr></table></figure><p>打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。</p><hr><p>参考</p><ol><li><a href="http://www.nginx.cn/install">Nginx安装</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>CentOS</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python网络编程</title>
    <link href="/2017/03/24/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2017/03/24/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Python 提供了两个级别访问的网络服务。：</p><ul><li>低级别的网络服务支持基本的 socket，，可以访问底层操作系统Socket接口的方法。</li><li>高级别的网络服务模块 socketserver， 可以简化网络服务器的开发。</li></ul><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p>查看socket类的帮助如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket  <span class="hljs-comment"># 导入socket模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(socket.socket)<br></code></pre></td></tr></table></figure><p>重点关注初始化函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">__init__(self, family=&lt;AddressFamily.AF_INET: <span class="hljs-number">2</span>&gt;, <span class="hljs-built_in">type</span>=&lt;SocketKind.SOCK_STREAM: <span class="hljs-number">1</span>&gt;, proto=<span class="hljs-number">0</span>, fileno=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><ul><li>family：网络协议簇，默认值为AF_INET</li><li>type：套接字的类型，根据是面向连接的还是非连接分为<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></li><li>proto：套接字协议，一般默认为0，表示</li><li>fileno：套接字的int型的文件描述符</li></ul><p>下面实现一个TCP聊天室和一个UDP聊天室</p><span id="more"></span><h2 id="TCP聊天室"><a href="#TCP聊天室" class="headerlink" title="TCP聊天室"></a>TCP聊天室</h2><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><p><strong>获取多个连接的处理</strong></p><p>开启accept线程，执行accept操作开始阻塞，有客户端连接时，再开启一个线程recv进行数据接收的处理。然后accept线程继续阻塞，等待后续客户端的连接。</p><p><strong>阻塞的处理</strong></p><p>服务端处理客户端的连接时，有两处存在阻塞，分别是：</p><ul><li>获取连接时，socket.accept()会阻塞</li><li>每一个建立成功的连接在获取数据时，socket.recv(1024)</li></ul><p>因此这两处都需要开启线程单独处理，否则会阻塞主线程。</p><p><strong>客户端主动断开的处理</strong></p><p>客户端主动断开时，如果不通知服务端，那么服务端上保存的客户端连接不会被清理，这是不合理的。因此客户端主动断开时，我们在应用层约定，客户端推出前需要发送<code>/quit</code>指令到服务端上，然后有服务端关闭socket。</p><h3 id="TCP聊天室-server"><a href="#TCP聊天室-server" class="headerlink" title="TCP聊天室-server"></a>TCP聊天室-server</h3><p>聊天室的server端主要是监听端口，处理来自client端的连接，并且分发数据到所有的client端</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpChatServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ip=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, port=<span class="hljs-number">9001</span></span>):<br>        self.ip = ip<br>        self.port = port<br>        self.clients = &#123;&#125;<br>        self.sock = socket.socket(family=socket.AF_INET, <span class="hljs-built_in">type</span>=socket.SOCK_STREAM)<br>        self.event = threading.Event()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, so, ip ,port</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            data = so.recv(<span class="hljs-number">1024</span>).decode()  <span class="hljs-comment"># 将接受到的字节数据bytes转化为utf-8格式的字符串</span><br>            <span class="hljs-keyword">if</span> data.strip() == <span class="hljs-string">&#x27;/quit&#x27;</span>:  <span class="hljs-comment"># 客户端主动断开时的处理</span><br>                so.close()<br>                self.clients.pop((ip, port))<br>                <span class="hljs-keyword">return</span> <br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.clients.values():  <span class="hljs-comment"># 广播发送</span><br>                s.send(<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, port, data).encode())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            so, (ip, port) = self.sock.accept()<br>            self.clients[(ip, port)] = so<br>            <span class="hljs-comment"># 因为so.recv会产生阻塞，因此单独开一个线程处理数据的接受部分。这样accept可以继续接受来自其他客户端的链接</span><br>            threading.Thread(target=self.recv, args=(so, ip, port), name=<span class="hljs-string">&#x27;client-&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip, port)).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        self.sock.bind((self.ip, self.port))<br>        self.sock.listen()<br>        t = threading.Thread(target=self.accept, daemon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 为了不阻塞主线程，单独开启一个线程处理accept（accept会阻塞线程）</span><br>        <span class="hljs-keyword">try</span>:<br>            t.start()<br>            t.join()  <span class="hljs-comment"># 阻塞直到获取到KeyboardInterrupt</span><br>        <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>            self.stop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.clients.values():<br>            s.close()<br>        self.sock.close()<br>        self.event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 停止所有的循环</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tcp_chat_server = TcpChatServer()<br>    tcp_chat_server.start()<br></code></pre></td></tr></table></figure><h3 id="TCP聊天室-client"><a href="#TCP聊天室-client" class="headerlink" title="TCP聊天室-client"></a>TCP聊天室-client</h3><p>聊天室的client端主要是发起连接，连接到server端，并且要接受来自服务端广播分发的消息。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpChatClient</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.sock = socket.socket(family=socket.AF_INET, <span class="hljs-built_in">type</span>=socket.SOCK_STREAM)<br>        self.event = threading.Event()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 客户端需要一直接收服务端广播分发的消息</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            data = self.sock.recv(<span class="hljs-number">1024</span>).decode()<br>            data = data.strip()<br>            <span class="hljs-built_in">print</span>(data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 输入消息就发送</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            data = <span class="hljs-built_in">input</span>()<br>            self.sock.send(data.encode())<br>            <span class="hljs-keyword">if</span> data.strip() == <span class="hljs-string">&#x27;/quit&#x27;</span>:  <span class="hljs-comment"># 发送/quit的时候自身关闭</span><br>                self.stop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self, ip, port</span>):<br>        self.sock.connect((ip, port))<br>        s = threading.Thread(target=self.send, daemon=<span class="hljs-literal">False</span>)<br>        r = threading.Thread(target=self.recv, daemon=<span class="hljs-literal">False</span>)<br>        s.start()<br>        r.start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params">self</span>):<br>        self.sock.close()<br>        self.event.<span class="hljs-built_in">set</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tcp_chat_client = TcpChatClient()<br>    tcp_chat_client.start(<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, <span class="hljs-number">9001</span>)<br></code></pre></td></tr></table></figure><h2 id="UDP聊天室"><a href="#UDP聊天室" class="headerlink" title="UDP聊天室"></a>UDP聊天室</h2><h3 id="概要设计-1"><a href="#概要设计-1" class="headerlink" title="概要设计"></a>概要设计</h3><p><strong>阻塞的处理</strong></p><p>在UDP服务端接收客户端的消息时，采用<code>socket.recvfrom(1024)</code>这个方法以便保存客户端的地址信息，这个方法会阻塞当前线程，因此需要开启线程单独处理。</p><p><strong>客户端主动断开的处理</strong></p><p>UDP客户端主动关闭之后，服务端是无法检测到客户端已经关闭的。我们可以采用以下两种方法：</p><ol><li>如果类似于TCP采用约定退出指令的方法，那么客户端发送退出指令后就调用close方法，然后服务端根据得到的指令剔除客户端字典中对应的客户端。</li><li>还可以通过客户端定时发送心跳给服务端，服务端通过心跳来判断客户端进程是否存活。</li></ol><h3 id="UDP聊天室-server"><a href="#UDP聊天室-server" class="headerlink" title="UDP聊天室-server"></a>UDP聊天室-server</h3><p>UDP服务端程序开启线程等待接收客户端的数据，然后广播给其他的客户端，并且检查所有连接的心跳是否超时。</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpChatServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ip=<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, port=<span class="hljs-number">9001</span></span>):<br>        self.addr = (ip, port)<br>        self.sock = socket.socket(family=socket.AF_INET, <span class="hljs-built_in">type</span>=socket.SOCK_DGRAM)<br>        self.clients = &#123;&#125;<br>        self.event = threading.Event()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            data, addr = self.sock.recvfrom(<span class="hljs-number">1024</span>)<br>            data = data.decode().strip()<br>            now = datetime.datetime.now()<br>            <span class="hljs-keyword">if</span> data == <span class="hljs-string">&#x27;#ping#&#x27;</span>:  <span class="hljs-comment"># 判断是否收到心跳</span><br>                self.clients[addr] = now  <span class="hljs-comment"># 收到心跳则保存客户端地址，并且更新时间戳</span><br>                <span class="hljs-keyword">continue</span><br>                <br>            disconnected = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 没收到一次数据就判断所有的失效链接</span><br>            <span class="hljs-keyword">for</span> addr, timestamp <span class="hljs-keyword">in</span> self.clients.items():<br>                <span class="hljs-keyword">if</span> (now - timestamp).total_seconds() &gt; <span class="hljs-number">10</span>:  <span class="hljs-comment"># 失效条件：2次（即10s）没收到心跳就判断客户端关闭</span><br>                    disconnected.add(addr)<br>                <span class="hljs-keyword">else</span>:<br>                    self.sock.sendto(<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr[<span class="hljs-number">0</span>], addr[<span class="hljs-number">1</span>], data).encode(), addr)<br>                    <br>            <span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> disconnected:<br>                self.clients.pop(addr)<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        self.sock.bind(self.addr)  <span class="hljs-comment"># 绑定端口之后就开启线程一直接受客户端的数据</span><br>        t = threading.Thread(target=self.recv(), daemon=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">try</span>:<br>            t.start()<br>            t.join()<br>        <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>            self.stop()<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params">self</span>):<br>        self.event.<span class="hljs-built_in">set</span>()<br>        self.sock.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    udp_chat_server = UdpChatServer()<br>    udp_chat_server.start()<br></code></pre></td></tr></table></figure><h3 id="UDP聊天室-client"><a href="#UDP聊天室-client" class="headerlink" title="UDP聊天室-client"></a>UDP聊天室-client</h3><p>UDP的客户端的主线程一直在等待用户输入数据然后将数据发送到服务端，同时开启了一个心跳进程和一个接受服务端广播数据的线程。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpChatClient</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ip, port</span>):<br>        self.addr = (ip, port)<br>        self.sock = socket.socket(family=socket.AF_INET, <span class="hljs-built_in">type</span>=socket.SOCK_DGRAM)<br>        self.event = threading.Event()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">heartbeat</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 心跳线程函数：每5s发一次心跳</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.wait(<span class="hljs-number">5</span>):<br>            self.sock.sendto(<span class="hljs-string">b&#x27;#ping#&#x27;</span>, self.addr)<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 一直等待接受udp服务器广播的数据</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            data = self.sock.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-built_in">print</span>(data.decode())<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        threading.Thread(target=self.heartbeat, name=<span class="hljs-string">&#x27;heartbeat&#x27;</span>, daemon=<span class="hljs-literal">True</span>).start()<br>        threading.Thread(target=self.recv, name=<span class="hljs-string">&#x27;recv&#x27;</span>, daemon=<span class="hljs-literal">True</span>).start()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请在5s后发言&#x27;</span>)<br>        time.sleep(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 因为服务端必须收到一个心跳之后才会保存次客户端，因此需要等待5s</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请开始发言&#x27;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>            data = data.strip()<br>            <span class="hljs-keyword">if</span> data == <span class="hljs-string">&#x27;/quit&#x27;</span>:<br>                self.event.<span class="hljs-built_in">set</span>()<br>                self.sock.close()<br>                <span class="hljs-keyword">return</span><br>            self.sock.sendto(data.encode(), self.addr)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    udp_chat_client = UdpChatClient(<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>, <span class="hljs-number">9001</span>)<br>    udp_chat_client.start()<br></code></pre></td></tr></table></figure><h1 id="SocketServer"><a href="#SocketServer" class="headerlink" title="SocketServer"></a>SocketServer</h1><blockquote><p>TODO(Flowsnow)：改写聊天室程序的TcpChatServer和UdpChatServer</p></blockquote><hr><p><strong>附一：TCP和UDP的本质区别</strong></p><ul><li><p>udp：所有的客户端发来的数据报都堆积在队列上，然后服务端一个一个的处理</p></li><li><p>tcp：每一个客户端和服务端都有一个连接通道，只处理对应客户端的数据流</p></li></ul><p><strong>附二：参考资料</strong></p><ol><li><a href="https://docs.python.org/3.5/library/socketserver.html">socketserver — A framework for network servers</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>网络</tag>
      
      <tag>socket</tag>
      
      <tag>socketServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python多线程</title>
    <link href="/2017/03/23/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2017/03/23/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程基础概念"><a href="#多线程基础概念" class="headerlink" title="多线程基础概念"></a>多线程基础概念</h1><p><strong>并行与并发</strong></p><ul><li>并行：同时处理多个任务，必须在多核环境下</li><li>一段时间内同时处理多个任务，单核也可以并发</li></ul><p><strong>并发手段</strong></p><ul><li>线程：内核空间的调度</li><li>进程：内核空间的调度</li><li>协程：用户空间的调度</li></ul><p>线程可以允许程序在同一进程空间中并发运行多个操作。本次主要介绍Python标准库中的多线程模块threading。</p><span id="more"></span><h1 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h1><h2 id="线程初始化"><a href="#线程初始化" class="headerlink" title="线程初始化"></a>线程初始化</h2><p>使用threading模块的Thread类初始化对象然后调用start方法启动线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">num</span>):<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(num))<br><br><span class="hljs-comment"># 创建线程对象 target参数是一个函数， 这个函数即线程要执行的逻辑</span><br>threads = [threading.Thread(target=worker, args=(i, ))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.start()<br>    <span class="hljs-comment"># start 方法启动一个线程， 当这个线程的逻辑执行完毕的时候，线程自动退出, Python 没有提供主动退出线程的方法</span><br><br><span class="hljs-comment"># 输出以下结果</span><br>worker-0worker-1worker-2worker-<span class="hljs-number">3</span><br><br><br><br>worker-<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>初始化的五个线程的执行逻辑中的print方法打印字符串及换行符出现了随机分布，即出现了资源竞争。</p><h2 id="给线程传递参数"><a href="#给线程传递参数" class="headerlink" title="给线程传递参数"></a>给线程传递参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(args)<br>    <span class="hljs-built_in">print</span>(kwargs)<br><br>threads = threading.Thread(target=worker, args=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), kwargs=&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;b&#x27;</span>&#125;).start()<br><br><span class="hljs-comment"># 输出</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>args传递位置参数，kwargs传递关键字参数。</p><h2 id="Thread常用参数和方法"><a href="#Thread常用参数和方法" class="headerlink" title="Thread常用参数和方法"></a>Thread常用参数和方法</h2><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">help</span>(threading.Thread)</span><br></code></pre></td></tr></table></figure><p>可以看到Thread函数的初始化方法中的参数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">|  __init__(self, group=<span class="hljs-literal">None</span>, target=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>, args=(), kwargs=<span class="hljs-literal">None</span>, *, daemon=<span class="hljs-literal">None</span>)<br>|      This constructor should always be called <span class="hljs-keyword">with</span> keyword arguments. Arguments are:<br>|      <br>|      *group* should be <span class="hljs-literal">None</span>; reserved <span class="hljs-keyword">for</span> future extension when a ThreadGroup<br>|      <span class="hljs-keyword">class</span> <span class="hljs-title class_">is</span> implemented.<br>|      <br>|      *target* <span class="hljs-keyword">is</span> the <span class="hljs-built_in">callable</span> <span class="hljs-built_in">object</span> to be invoked by the run()<br>|      method. Defaults to <span class="hljs-literal">None</span>, meaning nothing <span class="hljs-keyword">is</span> called.<br>|      <br>|      *name* <span class="hljs-keyword">is</span> the thread name. By default, a unique name <span class="hljs-keyword">is</span> constructed of<br>|      the form <span class="hljs-string">&quot;Thread-N&quot;</span> where N <span class="hljs-keyword">is</span> a small decimal number.<br>|      <br>|      *args* <span class="hljs-keyword">is</span> the argument <span class="hljs-built_in">tuple</span> <span class="hljs-keyword">for</span> the target invocation. Defaults to ().<br>|      <br>|      *kwargs* <span class="hljs-keyword">is</span> a dictionary of keyword arguments <span class="hljs-keyword">for</span> the target<br>|      invocation. Defaults to &#123;&#125;.<br></code></pre></td></tr></table></figure><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>表示线程名称，默认情况下，线程名称是<code>Thread-N</code>，N是一个较小的十进制数。我们可以传递name参数，控制线程名称。</p><p>以下会导入logging模块来显示线程的名称等详细信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">num</span>):<br>    time.sleep(<span class="hljs-number">1</span>)<br>    logging.info(<span class="hljs-string">&#x27;worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(num))<br><br>threads = [threading.Thread(target=worker, args=(i, ), name=<span class="hljs-string">&#x27;workerthread-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.start()<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">29</span>,<span class="hljs-number">339</span> INFO [workerthread-<span class="hljs-number">0</span>] worker-<span class="hljs-number">0</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">29</span>,<span class="hljs-number">340</span> INFO [workerthread-<span class="hljs-number">1</span>] worker-<span class="hljs-number">1</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">29</span>,<span class="hljs-number">340</span> INFO [workerthread-<span class="hljs-number">2</span>] worker-<span class="hljs-number">2</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">29</span>,<span class="hljs-number">340</span> INFO [workerthread-<span class="hljs-number">3</span>] worker-<span class="hljs-number">3</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">39</span>:<span class="hljs-number">29</span>,<span class="hljs-number">346</span> INFO [workerthread-<span class="hljs-number">4</span>] worker-<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>其中logging模块的basicConfig函数的format中的%(threadName)s就是用来输出当前线程的名称的。</p><blockquote><p>线程可以重名, 线程名并不是线程的唯一标识，但是通常应该避免线程重名，通常的处理手段是加前缀</p></blockquote><h3 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a>daemon</h3><p><strong>Daemon：守护</strong></p><p>和Daemon线程相对应的还有Non-Daemon线程，在此Thread初始化函数中的daemon参数即表示线程是否是Daemon线程。</p><ul><li>Daemon线程：会伴随主线程结束而结束（可以理解为主线程结束，守护线程结束）</li><li>Non-Daemon线程：不会随着主线程结束而结束，主线程需要等待Non-Daemon结束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>():<br>    logging.info(<span class="hljs-string">&#x27;starting&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    logging.info(<span class="hljs-string">&#x27;stopping&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    logging.info(<span class="hljs-string">&#x27;starting&#x27;</span>)<br>    t1 = threading.Thread(target=worker, name=<span class="hljs-string">&#x27;worker1&#x27;</span>, daemon=<span class="hljs-literal">False</span>)<br>    t1.start()<br>    time.sleep(<span class="hljs-number">1</span>)<br>    t2 = threading.Thread(target=worker, name=<span class="hljs-string">&#x27;worker2&#x27;</span>, daemon=<span class="hljs-literal">True</span>)<br>    t2.start()<br>    logging.info(<span class="hljs-string">&#x27;stopping&#x27;</span>)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:06,<span class="hljs-number">404</span> INFO [MainThread] starting<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:06,<span class="hljs-number">436</span> INFO [worker1] starting<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:07,<span class="hljs-number">492</span> INFO [worker2] starting<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:07,<span class="hljs-number">492</span> INFO [MainThread] stopping  <span class="hljs-comment"># 主线程执行完成</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">28</span>:08,<span class="hljs-number">439</span> INFO [worker1] stopping  <span class="hljs-comment"># 主线程执行完成之后会等Non-Daemon线程执行完成，但是并不会等Daemon线程执行完成，即Daemon线程会随着主线程执行完成而释放</span><br></code></pre></td></tr></table></figure><h3 id="Thread-join"><a href="#Thread-join" class="headerlink" title="Thread.join()"></a>Thread.join()</h3><p>如果想等Daemon线程执行完成之后主线程再退出，可以使用线程对象的<code>join()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>():<br>    logging.info(<span class="hljs-string">&#x27;starting&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    logging.info(<span class="hljs-string">&#x27;stopping&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    logging.info(<span class="hljs-string">&#x27;starting&#x27;</span>)<br>    t1 = threading.Thread(target=worker, name=<span class="hljs-string">&#x27;worker1&#x27;</span>, daemon=<span class="hljs-literal">False</span>)<br>    t1.start()<br>    time.sleep(<span class="hljs-number">1</span>)<br>    t2 = threading.Thread(target=worker, name=<span class="hljs-string">&#x27;worker2&#x27;</span>, daemon=<span class="hljs-literal">True</span>)<br>    t2.start()<br>    logging.info(<span class="hljs-string">&#x27;stopping&#x27;</span>)<br>    t1.join()<br>    t2.join()<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">41</span>:07,<span class="hljs-number">217</span> INFO [MainThread] starting<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">41</span>:07,<span class="hljs-number">243</span> INFO [worker1] starting<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">41</span>:08,<span class="hljs-number">245</span> INFO [worker2] starting<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">41</span>:08,<span class="hljs-number">246</span> INFO [MainThread] stopping<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">41</span>:09,<span class="hljs-number">243</span> INFO [worker1] stopping<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">20</span> <span class="hljs-number">23</span>:<span class="hljs-number">41</span>:<span class="hljs-number">10</span>,<span class="hljs-number">248</span> INFO [worker2] stopping<br></code></pre></td></tr></table></figure><p>使用join函数只有主线程就需要等待Daemon线程执行完成在推出。</p><p>join函数的原型：<code>join(self, timeout=None)</code></p><p>join方法会阻塞直到线程退出或者超时, timeout 是可选的，如果不设置timeout， 会一直等待线程退出。如果设置了timeout，会在超时之后退出或者线程执行完成退出。</p><p>因为join函数总是返回None，因此在超时时间到达之后如果要知道线程是否还是存活的，可以调用is_alive()方法判断线程是否存活。</p><h2 id="threading常用方法"><a href="#threading常用方法" class="headerlink" title="threading常用方法"></a>threading常用方法</h2><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><p>列出当前所有的<strong>存活</strong>的线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>threading.<span class="hljs-built_in">enumerate</span>()<br>[&lt;_MainThread(MainThread, started <span class="hljs-number">140209670301504</span>)&gt;, &lt;Thread(worker1, started <span class="hljs-number">140209545410304</span>)&gt;, &lt;Thread(worker2, started daemon <span class="hljs-number">140209537017600</span>)&gt;]<br></code></pre></td></tr></table></figure><h3 id="local"><a href="#local" class="headerlink" title="local()"></a>local()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> threading<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br>ctx = threading.local()<br>ctx.data = <span class="hljs-number">5</span><br>data = <span class="hljs-string">&#x27;a&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>():<br>    logging.info(data)<br>    logging.info(ctx.data)<br><br>worker()<br>threading.Thread(target=worker).start()<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">00</span>:02:08,<span class="hljs-number">102</span> INFO [MainThread] a<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">00</span>:02:08,<span class="hljs-number">113</span> INFO [MainThread] <span class="hljs-number">5</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">00</span>:02:08,<span class="hljs-number">119</span> INFO [Thread-<span class="hljs-number">34</span>] a<br>Exception <span class="hljs-keyword">in</span> thread Thread-<span class="hljs-number">34</span>:<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/home/clg/.pyenv/versions/3.5.2/lib/python3.5/threading.py&quot;</span>, line <span class="hljs-number">914</span>, <span class="hljs-keyword">in</span> _bootstrap_inner<br>    self.run()<br>  File <span class="hljs-string">&quot;/home/clg/.pyenv/versions/3.5.2/lib/python3.5/threading.py&quot;</span>, line <span class="hljs-number">862</span>, <span class="hljs-keyword">in</span> run<br>    self._target(*self._args, **self._kwargs)<br>  File <span class="hljs-string">&quot;&lt;ipython-input-28-5395bd925d87&gt;&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> worker<br>    logging.info(ctx.data)<br>AttributeError: <span class="hljs-string">&#x27;_thread._local&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;data&#x27;</span><br></code></pre></td></tr></table></figure><p>线程共享内存、状态和资源。但是thread模块的local类的对象的属性， 只在当前线程可见。</p><h2 id="Thread类的派生"><a href="#Thread类的派生" class="headerlink" title="Thread类的派生"></a>Thread类的派生</h2><p>Python中可以通过继承 <code>Thread</code> 类并重写 <code>run</code> 方法来编写多线程的逻辑，此时逻辑函数就是run。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mythread</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mythread run&#x27;</span>)<br><br>t = mythread()<br>t.run()  <span class="hljs-comment"># 输出mythread run</span><br>t.start()  <span class="hljs-comment"># 输出mythread run</span><br></code></pre></td></tr></table></figure><p>通过继承方式派生而来的子类对象可以同时执行start方法和run方法，结果是一样的，都是执行子类的run方法。但是非继承的方式不能同时使用start方法和run方法，会报错。</p><p><strong>派生时逻辑函数的参数传递</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mythread</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__()  <span class="hljs-comment"># 需要调用父类的初始化方法初始化</span><br>        self.args = args<br>        self.kwargs = kwargs<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mythread run&#x27;</span>, self.args, self.kwargs)<br><br>t = mythread(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, a=<span class="hljs-string">&#x27;b&#x27;</span>)<br>t.start()  <span class="hljs-comment"># 输出mythread run (1, 2, 3) &#123;&#x27;a&#x27;: &#x27;b&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Timer类"><a href="#Timer类" class="headerlink" title="Timer类"></a>Timer类</h2><p>Timer类：Thread类的派生类，也在threading模块中。意为定时器，用作线程的延迟执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(threading.Timer)<br></code></pre></td></tr></table></figure><p>Timer类的初始化方法：<code>__init__(self, interval, function, args=None, kwargs=None)</code></p><ul><li>interval：时间间隔，即几秒之后开始执行function</li><li>function：线程执行的逻辑函数</li><li>args：位置参数</li><li>kwargs：关键字参数</li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>():<br>    logging.info(<span class="hljs-string">&#x27;worker running&#x27;</span>)<br><br>t1 = threading.Timer(interval=<span class="hljs-number">3</span>, function=worker)<br>t2 = threading.Timer(interval=<span class="hljs-number">3</span>, function=worker)<br>t1.setName(<span class="hljs-string">&#x27;t1&#x27;</span>)<br>t2.setName(<span class="hljs-string">&#x27;t2&#x27;</span>)<br>logging.info(<span class="hljs-string">&#x27;start&#x27;</span>)<br>t1.start()<br>t2.start()<br>time.sleep(<span class="hljs-number">2</span>)<br>logging.info(<span class="hljs-string">&#x27;canceling &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(t1.name))<br>t1.cancel()  <span class="hljs-comment"># 2s之后仍然可以取消t1</span><br>logging.info(<span class="hljs-string">&#x27;end&#x27;</span>)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">19</span>:<span class="hljs-number">28</span>:<span class="hljs-number">52</span>,<span class="hljs-number">801</span> INFO [MainThread] start<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">19</span>:<span class="hljs-number">28</span>:<span class="hljs-number">54</span>,<span class="hljs-number">811</span> INFO [MainThread] canceling t1<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">19</span>:<span class="hljs-number">28</span>:<span class="hljs-number">54</span>,<span class="hljs-number">819</span> INFO [MainThread] end<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">19</span>:<span class="hljs-number">28</span>:<span class="hljs-number">55</span>,<span class="hljs-number">808</span> INFO [t2] worker running<br></code></pre></td></tr></table></figure><p>**Timer.cancel()**：取消仍然存活的定时器，如果定时器已经开始执行function，则无法取消。</p><p>**Timer.setDaemon(True)**：设置定时器为守护线程</p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>当使用多个线程来访问同一个数据时，会经常出现资源争用等线程安全问题(比如多个线程都在操作同一数据导致数据不一致)，这时候我们就可以使用一些同步技术来解决这类问题。比如Event，Lock，Condition，Barrier，Semaphore等等。</p><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(threading.Event)<br></code></pre></td></tr></table></figure><p>Event对象内置一个标志，这个标志可以由**set()<strong>方法和</strong>clear()<strong>方法设定。线程可以使用</strong>wait()**方法进行阻塞等待，知道Event对象内置标志被set。</p><ol><li>**clear(self)**：设置内置标志为False</li><li>**set(self)**：设置内置标志为True</li><li>**wait(self, timeout&#x3D;None)**：开始阻塞，直到内置标志被设置为True（即wait会阻塞线程直到set方法被调用或者超时）</li><li>**is_set(self)**：当且仅当内置标志为True的时候返回True</li></ol><p>代码</p><p>以下代码实现的逻辑是：一个boss和五个睡觉工人，只要有一个工人完成了睡觉任务，那么就唤醒boss和其他工人。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> random<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">event: threading.Event</span>):<br>    s = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br>    event.wait(s)  <span class="hljs-comment"># wait方法而不使用sleep方法，可以让其他工人收到通知后不再等待</span><br>    logging.info(<span class="hljs-string">&#x27;sleep &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(s))<br>    event.<span class="hljs-built_in">set</span>()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boss</span>(<span class="hljs-params">event:threading.Event</span>):<br>    start = datetime.datetime.now()<br>    event.wait()<br>    end = datetime.datetime.now()<br>    logging.info(<span class="hljs-string">&#x27;that boss exit takes &#123;&#125;s&#x27;</span>.<span class="hljs-built_in">format</span>(end - start))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    event = threading.Event()<br>    b = threading.Thread(target=boss, args=(event, ), name=<span class="hljs-string">&#x27;boss&#x27;</span>)<br>    b.start()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        t = threading.Thread(target=worker, args=(event, ), name=<span class="hljs-string">&#x27;worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>        t.start()<br></code></pre></td></tr></table></figure><p>执行start()方法，测试结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>start()<br><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">17</span>,<span class="hljs-number">195</span> INFO [worker-<span class="hljs-number">2</span>] sleep <span class="hljs-number">1</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">17</span>,<span class="hljs-number">198</span> INFO [boss] that boss exit takes <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01.004954</span>s<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">17</span>,<span class="hljs-number">199</span> INFO [worker-<span class="hljs-number">0</span>] sleep <span class="hljs-number">2</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">17</span>,<span class="hljs-number">199</span> INFO [worker-<span class="hljs-number">1</span>] sleep <span class="hljs-number">3</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">17</span>,<span class="hljs-number">199</span> INFO [worker-<span class="hljs-number">3</span>] sleep <span class="hljs-number">2</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">17</span>,<span class="hljs-number">198</span> INFO [worker-<span class="hljs-number">4</span>] sleep <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以看到：worker-2退出之后，boss和另外四个worker也瞬间就退出了。所以event对象的内置状态被set之后，相关线程就不再wait了。</p><ul><li>event：在线程之间发送信号，通常用于某个线程需要等待其他线程处理完成某些动作之后才能启动</li></ul><p><strong>wait()方法的timeout参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">event: threading.Event</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> event.wait(<span class="hljs-number">3</span>):<br>        logging.info(<span class="hljs-string">&#x27;run run run&#x27;</span>)<br><br>event = threading.Event()<br>threading.Thread(target=worker, args=(event, )).start()<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">32</span>:<span class="hljs-number">47</span>,<span class="hljs-number">275</span> INFO [Thread-<span class="hljs-number">8</span>] run run run<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">32</span>:<span class="hljs-number">50</span>,<span class="hljs-number">277</span> INFO [Thread-<span class="hljs-number">8</span>] run run run<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">32</span>:<span class="hljs-number">53</span>,<span class="hljs-number">281</span> INFO [Thread-<span class="hljs-number">8</span>] run run run<br><span class="hljs-number">2017</span>-03-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">32</span>:<span class="hljs-number">56</span>,<span class="hljs-number">284</span> INFO [Thread-<span class="hljs-number">8</span>] run run run<br>...<br></code></pre></td></tr></table></figure><p>程序每隔3s就会输出一次结果，直到执行set()方法才会停止。因此我们可以写一个定时器（类似于Thread类的派生类Timer）。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, interval, function, *args, **kwargs</span>):<br>        self.interval = interval<br>        self.function = function<br>        self.args = args<br>        self.kwargs = kwargs<br>        self.event = threading.Event()<br>        self.thread = threading.Thread(target=self.__target(), args=args, kwargs=kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__target</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.event.wait(self.interval):<br>            <span class="hljs-keyword">return</span> self.function<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        self.thread.start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cancel</span>(<span class="hljs-params">self</span>):<br>        self.event.<span class="hljs-built_in">set</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">act</span>):<br>    logging.info(<span class="hljs-string">&#x27;run-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(act))<br><br>t = Timer(<span class="hljs-number">5</span>, worker, <span class="hljs-string">&#x27;hahaha&#x27;</span>)<br>t.start()  <span class="hljs-comment"># 输出2017-03-21 22:14:59,645 INFO [Thread-20] run-hahaha</span><br></code></pre></td></tr></table></figure><p>延迟5s之后执行了逻辑函数，也可以使用cancel函数取消。（<strong>要注意参数的传递，此处Timer初始化不能使用关键字参数</strong>）</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>event是用来同步线程之间的操作的，但是如果要控制共享资源的访问那就需要用到锁机制了，在Python标准库中的实现就是内置的lock类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(threading.Lock)<br></code></pre></td></tr></table></figure><p>**threading.Lock()**函数会创建一个lock类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(threading.Lock())<br></code></pre></td></tr></table></figure><p>锁对象是一个同步原语（synchronization primitive），lock对象主要有以下三个方法：</p><ol><li>acquire()： acquire(blocking&#x3D;True, timeout&#x3D;-1) -&gt; bool 获得锁（即锁定锁）。成功获得锁返回True，没有获得锁则返回False。</li><li>release()： release() 释放锁</li><li>locked()：  locked() -&gt; bool 检查锁是否被锁住</li></ol><p><strong>代码</strong></p><p>以下代码实现了在多个进程同时对资源进行访问时，进行加锁和解锁的操作，保证加减操作和赋值操作组合之后的原子性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span>:  <span class="hljs-comment"># 计时器有加减方法，都会修改value值，因此都需要加锁处理</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start=<span class="hljs-number">0</span></span>):<br>        self.value = start<br>        self.lock = threading.Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>(<span class="hljs-params">self</span>):<br>        self.lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            self.value += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">finally</span>:<br>            self.lock.release()  <span class="hljs-comment"># 需要用finally语句保证锁一定会被释放，否则资源永远不可访问</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">self</span>):<br>        self.lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            self.value -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">finally</span>:<br>            self.lock.release()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inc_worker</span>(<span class="hljs-params">c: Counter</span>):<br>    pause = random.random()<br>    logging.info(<span class="hljs-string">&#x27;sleeping-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(pause))<br>    time.sleep(pause)<br>    c.inc()<br>    logging.info(<span class="hljs-string">&#x27;cur_value:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c.value))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_worker</span>(<span class="hljs-params">c: Counter</span>):<br>    pause = random.random()<br>    logging.info(<span class="hljs-string">&#x27;sleeping-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(pause))<br>    time.sleep(pause)<br>    c.dec()<br>    logging.info(<span class="hljs-string">&#x27;cur_value:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c.value))<br><br>c = Counter()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    threading.Thread(target=inc_worker, args=(c, ), name=<span class="hljs-string">&#x27;inc_worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    threading.Thread(target=dec_worker, args=(c, ), name=<span class="hljs-string">&#x27;dec_worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()<br></code></pre></td></tr></table></figure><p>测试输出</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:44,761 INFO [inc_worker<span class="hljs-string">-0</span>] sleeping<span class="hljs-string">-0</span>.6542416949220327<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:44,766 INFO [inc_worker<span class="hljs-string">-1</span>] sleeping<span class="hljs-string">-0</span>.48615543229897873<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:44,771 INFO [dec_worker<span class="hljs-string">-0</span>] sleeping<span class="hljs-string">-0</span>.12355589507242459<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:44,776 INFO [dec_worker<span class="hljs-string">-1</span>] sleeping<span class="hljs-string">-0</span>.5276710391905681<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:44,784 INFO [dec_worker<span class="hljs-string">-2</span>] sleeping<span class="hljs-string">-0</span>.5546251407611247<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:44,900 INFO [dec_worker<span class="hljs-string">-0</span>] cur_value:<span class="hljs-string">-1</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:45,258 INFO [inc_worker<span class="hljs-string">-1</span>] cur_value:0<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:45,312 INFO [dec_worker<span class="hljs-string">-1</span>] cur_value:<span class="hljs-string">-1</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:45,351 INFO [dec_worker<span class="hljs-string">-2</span>] cur_value:<span class="hljs-string">-2</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-21</span> 23:17:45,421 INFO [inc_worker<span class="hljs-string">-0</span>] cur_value:<span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><p>可见，各项操作之间保持相互原子性，没有出现干扰。</p><p>因为lock类实现了<code>__enter__</code>和<code>__exit__</code>两个魔术方法，因此支持上下文管理器，可以修改以上Counter类的实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start=<span class="hljs-number">0</span></span>):<br>        self.value = start<br>        self.lock = threading.Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>(<span class="hljs-params">self</span>):<br>        self.lock.acquire()<br>        <span class="hljs-keyword">with</span> self.lock:<br>            self.value += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">self</span>):<br>        self.lock.acquire()<br>        <span class="hljs-keyword">with</span> self.lock:<br>            self.value -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>即使用上下文管理器来代替<code>try...finally...</code>语句，测试输出应该以以上结果一致。</p><p><strong>acquire方法的blocking参数</strong></p><p>当blocking&#x3D;True时，A线程中执行了lock.acquire()方法之后并且没有执行到lock.release()方法，如果在B线程中再次执行lock.acquire()方法，则B线程阻塞。</p><ul><li>正如以上代码实现，当有n个线程需要修改一个共享资源的时候，其他线程在获取锁之前都处于阻塞状态。（python的阻塞都会让出cpu的时间片，因此不是忙等待）</li></ul><p>当blocking&#x3D;Fasle时，A线程中执行了lock.acquire()方法之后并且没有执行到lock.release()方法，如果在B线程中再次执行lock.acquire()方法，则B线程不会阻塞，并且acquire函数返回False。</p><p><strong>acquire方法的timeout参数</strong></p><p>当blocking&#x3D;True并且timeout&gt;0时，acquire会一直阻塞到超时或者锁被释放。</p><p><strong>acquire(0)的参数传递</strong></p><p>模拟acquire方法的默认参数，编写一下函数进行模拟参数传递的过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print1</span>(<span class="hljs-params">blocking=<span class="hljs-literal">True</span>, timeout=-<span class="hljs-number">1</span></span>):<br>    <span class="hljs-built_in">print</span>(blocking, timeout)<br><br>print1(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 输出0 -1</span><br>print1(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 输出10 -1</span><br></code></pre></td></tr></table></figure><p>可见第一个位置参数，替代了blocking。也就是说lock.acquire(0)等效于lock.acquire(blocking&#x3D;False)</p><h2 id="RLock"><a href="#RLock" class="headerlink" title="RLock"></a>RLock</h2><p>正常的lock对象是不能多次调用<code>acquire</code>的，但是可重用锁<code>RLock</code>可以多次调用 <code>acquire</code> 而不阻塞，而且 <code>release</code> 时也要执行和 <code>acquire</code> 一样的次数。</p><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>除了Event对象之外，线程同步还可以使用条件同步机制Condition。一类线程等待特定条件，而另一类线程发出特定条件满足的信号。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">help</span>(threading.Condition)</span><br></code></pre></td></tr></table></figure><p>在Condition的帮助中有以下几个方法：</p><ul><li>初始化方法：**init(self, lock&#x3D;None)**。如果给定了lock参数，那么必须是Lock或者Rlock对象，并且被当做底层锁来使用。如果没有指定，那么会创建一个RLock对象的锁，也被当做底层锁来使用。</li><li>实现了<code>__enter__</code>和<code>__exit__</code>方法，支持上下文管理器。</li><li>notify(self, n&#x3D;1)：唤醒一个或多个在当前Condition上等待的其他线程，如果此方法的调用线程没有获得锁，那么在调用的时候就会报错RuntimeError</li><li>notify_all(self)：唤醒所有线程</li><li>wait(self, timeout&#x3D;None)：一直等待着知道被notifyed或者发生超时</li></ul><p><strong>实例代码</strong></p><p>以下代码实现的是：有一个生产者线程，会生产若干次，每次生产结束后需要通知所有的消费者线程来消费，因此下面代码使用的是notify_all方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> random<br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer_Consumer_Model</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.data = <span class="hljs-literal">None</span><br>        self.event = threading.Event()  <span class="hljs-comment"># 用来控制消费者退出</span><br>        self.condition = threading.Condition()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Consumer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            <span class="hljs-keyword">with</span> self.condition:<br>                self.condition.wait()  <span class="hljs-comment"># 一直等待直到收到生产者通知notify_all</span><br>                logging.info(self.data)  <span class="hljs-comment"># 收到通知之后，开始执行消费者的业务逻辑部分</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Producer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):  <span class="hljs-comment"># 每个生产者生产4次</span><br>            data = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>            logging.info(data)<br>            <span class="hljs-keyword">with</span> self.condition:<br>                self.data = data  <span class="hljs-comment"># 写入成功就表示生产成功，因此需要在此加锁并且能够通知消费者线程去消费，因此选择使用condition来处理</span><br>                self.condition.notify_all()  <span class="hljs-comment"># 生产成功之后通知所有的消费者去消费</span><br>            self.event.wait(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 没生产一次等待1s</span><br>        self.event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 所有的生产完成之后通知消费者退出</span><br><br>m = Producer_Consumer_Model()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    threading.Thread(target=m.Consumer, name=<span class="hljs-string">&#x27;Consumer-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()<br><br>p = threading.Thread(target=m.Producer, name=<span class="hljs-string">&#x27;Producer&#x27;</span>)<br>p.start()<br></code></pre></td></tr></table></figure><p>测试结果（一个生产者，三个消费者）</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:42,875 INFO [Producer] 16<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:42,883 INFO [Consumer<span class="hljs-string">-0</span>] 16<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:42,890 INFO [Consumer<span class="hljs-string">-2</span>] 16<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:42,894 INFO [Consumer<span class="hljs-string">-1</span>] 16<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:43,884 INFO [Producer] 76<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:43,888 INFO [Consumer<span class="hljs-string">-0</span>] 76<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:43,895 INFO [Consumer<span class="hljs-string">-2</span>] 76<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:43,898 INFO [Consumer<span class="hljs-string">-1</span>] 76<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:44,889 INFO [Producer] 31<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:44,891 INFO [Consumer<span class="hljs-string">-0</span>] 31<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:44,911 INFO [Consumer<span class="hljs-string">-2</span>] 31<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:44,913 INFO [Consumer<span class="hljs-string">-1</span>] 31<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:45,892 INFO [Producer] 17<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:45,894 INFO [Consumer<span class="hljs-string">-0</span>] 17<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:45,907 INFO [Consumer<span class="hljs-string">-2</span>] 17<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:07:45,910 INFO [Consumer<span class="hljs-string">-1</span>] 17<br></code></pre></td></tr></table></figure><p>可见，生产者每生产一次，所有的消费者就会去消费。如果想控制每次生产之后通知几个消费者来消费，那么就可以使用notify方法，指定消费者线程个数。</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> random<br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer_Consumer_Model</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.data = <span class="hljs-literal">None</span><br>        self.event = threading.Event()  <span class="hljs-comment"># 用来控制消费者退出</span><br>        self.condition = threading.Condition()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Consumer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            <span class="hljs-keyword">with</span> self.condition:<br>                self.condition.wait()  <span class="hljs-comment"># 一直等待直到收到生产者通知notify_all</span><br>                logging.info(self.data)  <span class="hljs-comment"># 收到通知之后，开始执行消费者的业务逻辑部分</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Producer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):  <span class="hljs-comment"># 每个生产者生产4次</span><br>            data = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>            logging.info(data)<br>            <span class="hljs-keyword">with</span> self.condition:<br>                self.data = data  <span class="hljs-comment"># 写入成功就表示生产成功，因此需要在此加锁并且能够通知消费者线程去消费，因此选择使用condition来处理</span><br>                self.condition.notify(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 生产成功之后通知所有的消费者去消费</span><br>            self.event.wait(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 没生产一次等待1s</span><br>        self.event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 所有的生产完成之后通知消费者退出</span><br><br>m = Producer_Consumer_Model()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    threading.Thread(target=m.Consumer, name=<span class="hljs-string">&#x27;Consumer-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()<br><br>p = threading.Thread(target=m.Producer, name=<span class="hljs-string">&#x27;Producer&#x27;</span>)<br>p.start()<br></code></pre></td></tr></table></figure><p>测试结果（一个生产者，三个消费者，每次生产之后只通知一个消费者去消费）</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:52,933 INFO [Producer] 11<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:52,948 INFO [Consumer<span class="hljs-string">-0</span>] 11<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:53,949 INFO [Producer] 47<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:53,967 INFO [Consumer<span class="hljs-string">-1</span>] 47<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:54,967 INFO [Producer] 14<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:54,983 INFO [Consumer<span class="hljs-string">-2</span>] 14<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:55,986 INFO [Producer] 54<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 22:24:55,993 INFO [Consumer<span class="hljs-string">-0</span>] 54<br></code></pre></td></tr></table></figure><blockquote><ol><li>Condition 通常用于生产者消费者模式， 生产者生产消息之后， 使用notify 或者 notify_all 通知消费者消费。</li><li>消费者使用wait方法阻塞等待生产者通知</li><li>notify通知指定个wait的线程， notify_all通知所有的wait线程</li><li>无论notify&#x2F;notify_all还是wait 都必须先acqurie， 完成后必须确保release， 通常使用with语法</li></ol></blockquote><h2 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h2><p>Barrier类存在于threading模块中，中文可以翻译成栅栏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(threading.Barrier)<br></code></pre></td></tr></table></figure><p>可以看到Barrier的主要方法和属性：</p><ul><li><code>__init__(self, parties, action=None, timeout=None)</code>：初始化方法，创建一个Barrier<ul><li><code>parties</code>：所有参与的线程的数量</li><li><code>action</code>：所有的线程都wait之后并且在线程释放之前就会执行这个action函数，相当于集结之后要做的事情。</li><li><code>timeout</code>：相当于给需要等待的每个线程的wait方法加上timeout参数，超时则barrier不再生效</li></ul></li><li><code>abort(self)</code>：将Barrier设置成broken状态</li><li><code>reset(self)</code>：将Barrier重置为最初状态</li><li><code>wait(self, timeout=None)</code>：在Barrier前等待，返回在Barrier前等待的下标，从0到parties-1</li><li><code>broken</code>：如果Barrier处于broken状态则返回True</li><li><code>n_waiting</code>：当前已经在Barrier处等待的线程的数量</li><li><code>parties</code>：需要在Barrier处等待的线程的数量</li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br>barrier = threading.Barrier(parties=<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">barrier: threading.Barrier</span>):<br>    logging.info(<span class="hljs-string">&#x27;waiting for barrier with &#123;&#125; others&#x27;</span>.<span class="hljs-built_in">format</span>(barrier.n_waiting))<br>    worker_id = barrier.wait()<br>    logging.info(<span class="hljs-string">&#x27;after barrier &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(worker_id))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    threading.Thread(target=worker, args=(barrier, ), name=<span class="hljs-string">&#x27;worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()<br></code></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:25:03,992 INFO [worker<span class="hljs-string">-0</span>] waiting for barrier with 0 others<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:25:03,995 INFO [worker<span class="hljs-string">-1</span>] waiting for barrier with 1 others<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:25:03,998 INFO [worker<span class="hljs-string">-2</span>] waiting for barrier with 2 others<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:25:04,001 INFO [worker<span class="hljs-string">-2</span>] after barrier 2<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:25:04,001 INFO [worker<span class="hljs-string">-0</span>] after barrier 0<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:25:04,001 INFO [worker<span class="hljs-string">-1</span>] after barrier 1<br></code></pre></td></tr></table></figure><p>可见，所有的线程都会一直等待，知道所有的线程都到期了，然后就通过barrier，继续执行后续操作。</p><blockquote><p>Barrier会建立一个控制点，所有参与的线程都会阻塞，直到所有参与的“各方”达到这一点。 它让线程分开启动，然后暂停，直到它们都准备好再继续。因此，这一点可以理解为各个线程的一个集结点。</p></blockquote><p><strong>abort函数的使用</strong></p><p>将Barrier设置成broken状态。所有线程在参与集结过程中，只要执行了barrier.abort方法，那么正在等待的线程都会抛出threading.BrokenBarrierError异常。可以理解为，只要有一个线程确定已经到不了Barrier并且通知了Barrier，那么Barrier就会执行abort方法，通知所有正在wait的线程放弃集结。</p><p><strong>实例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">barrier: threading.Barrier</span>):<br>    logging.info(<span class="hljs-string">&#x27;waiting for barrier with &#123;&#125; others&#x27;</span>.<span class="hljs-built_in">format</span>(barrier.n_waiting))<br>    <span class="hljs-keyword">try</span>:<br>        worker_id = barrier.wait()<br>    <span class="hljs-keyword">except</span> threading.BrokenBarrierError:<br>        logging.info(<span class="hljs-string">&#x27;aborting&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        logging.info(<span class="hljs-string">&#x27;after barrier &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(worker_id))<br><br>barrier = threading.Barrier(<span class="hljs-number">4</span>)  <span class="hljs-comment"># 需要等待4个线程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    threading.Thread(target=worker, args=(barrier, ), name=<span class="hljs-string">&#x27;worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()  <span class="hljs-comment"># 3个线程都开始wait</span><br>barrier.abort()  <span class="hljs-comment"># 还有一个线程没有到wait，此时执行abort方法，则所有正在wait的线程都抛出异常</span><br></code></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:47:43,184 INFO [worker<span class="hljs-string">-0</span>] waiting for barrier with 0 others<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:47:43,192 INFO [worker<span class="hljs-string">-1</span>] waiting for barrier with 1 others<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:47:43,201 INFO [worker<span class="hljs-string">-2</span>] waiting for barrier with 2 others<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:47:43,211 INFO [worker<span class="hljs-string">-2</span>] aborting<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:47:43,207 INFO [worker<span class="hljs-string">-1</span>] aborting<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-22</span> 23:47:43,207 INFO [worker<span class="hljs-string">-0</span>] aborting<br></code></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore类存在于threading模块中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(threading.Semaphore)<br></code></pre></td></tr></table></figure><p>信号量内部管理者一个计数器，这个计数器的值等于release()方法调用的次数减去acquire()方法调用的次数然后再加上初始值value，value默认为1。</p><p>可以看到Semaphore的主要方法：</p><ul><li><code>__init__(self, value=1)</code>：初始化一个信号量，value为内部计数器赋初值，默认为1</li><li><code>acquire(self, blocking=True, timeout=None)</code>：获取信号量，内部计数器减一</li><li><code>release(self)</code>：释放信号量，内部计数器加一</li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> random<br>logging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(levelname)s [%(threadName)s] %(message)s&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pool</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>        self.num = num<br>        self.conns = [self._make_connect(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num)]  <span class="hljs-comment"># 存放连接</span><br>        self.sem = threading.Semaphore(num)  <span class="hljs-comment"># 信号量内部计数器初始为连接数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_make_connect</span>(<span class="hljs-params">self, name</span>):  <span class="hljs-comment"># 根据连接名称创建连接</span><br>        conn = <span class="hljs-string">&#x27;connect-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)<br>        <span class="hljs-keyword">return</span> conn<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_connect</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 从连接池获取连接</span><br>        self.sem.acquire()<br>        <span class="hljs-keyword">return</span> self.conns.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">return_connect</span>(<span class="hljs-params">self, conn</span>):  <span class="hljs-comment"># 将连接conn返还到连接池中</span><br>        self.conns.insert(<span class="hljs-number">0</span>, conn)<br>        self.sem.release()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">pool: Pool</span>):<br>    logging.info(<span class="hljs-string">&#x27;starting&#x27;</span>)<br>    conn = pool.get_connect()  <span class="hljs-comment"># 如果获取不到则会阻塞在acquire处</span><br>    logging.info(<span class="hljs-string">&#x27;get connect &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(conn))<br>    t = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>    time.sleep(t)<br>    logging.info(<span class="hljs-string">&#x27;takes &#123;&#125;s&#x27;</span>.<span class="hljs-built_in">format</span>(t))<br>    pool.return_connect(conn)<br>    logging.info(<span class="hljs-string">&#x27;return connect &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(conn))<br><br>pool = Pool(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 连接池中有两个连接可以使用</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):  <span class="hljs-comment"># 三个线程使用两个连接开始任务</span><br>    threading.Thread(target=worker, args=(pool, ), name=<span class="hljs-string">&#x27;worker-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)).start()<br></code></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs subunit">2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:36,056 INFO [worker<span class="hljs-string">-0</span>] starting<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:36,062 INFO [worker<span class="hljs-string">-0</span>] get connect connect<span class="hljs-string">-1</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:36,074 INFO [worker<span class="hljs-string">-1</span>] starting<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:36,079 INFO [worker<span class="hljs-string">-1</span>] get connect connect<span class="hljs-string">-0</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:36,089 INFO [worker<span class="hljs-string">-2</span>] starting<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:39,074 INFO [worker<span class="hljs-string">-0</span>] takes 3s<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:39,076 INFO [worker<span class="hljs-string">-0</span>] return connect connect<span class="hljs-string">-1</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:39,076 INFO [worker<span class="hljs-string">-2</span>] get connect connect<span class="hljs-string">-1</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:39,093 INFO [worker<span class="hljs-string">-1</span>] takes 3s<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:39,097 INFO [worker<span class="hljs-string">-1</span>] return connect connect<span class="hljs-string">-0</span><br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:40,093 INFO [worker<span class="hljs-string">-2</span>] takes 1s<br>2017<span class="hljs-string">-03</span><span class="hljs-string">-23</span> 00:54:40,107 INFO [worker<span class="hljs-string">-2</span>] return connect connect<span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><p>这个测试结果显示：三个线程获取连接池中的两个连接，结果出现了一个线程等待其他线程执行完成之后再获取连接的过程。</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>Condition线程同步部分用来传递数据的是一个封装在生产者消费者模型中的元素data（正常使用情况下一般封装的都是一个列表，类似与Barrier部分的连接池中的conns列表）。</p><p>Python的queue模块中提供了同步的、线程安全的队列类，包括三种队列：</p><ul><li>FIFO（先入先出)队列Queue</li><li>LIFO（后入先出）队列LifoQueue</li><li>优先级队列PriorityQueue</li></ul><p>这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。因此我们可以使用queue模块来替换掉生产者消费者中的全局元素，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer_Consumer_Model</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.q = queue.Queue()<br>        self.event = threading.Event()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Consumer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            logging.info(self.q.get())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Producer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.wait(<span class="hljs-number">3</span>):<br>            data = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>            logging.info(data)<br>            self.q.put(data)<br><br>m = Producer_Consumer_Model()<br>threading.Thread(target=m.Consumer, name=<span class="hljs-string">&#x27;Consumer&#x27;</span>).start()<br>threading.Thread(target=m.Producer, name=<span class="hljs-string">&#x27;Producer&#x27;</span>).start()<br></code></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:22,990</span> INFO [Producer] <span class="hljs-number">26</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:22,993</span> INFO [Consumer] <span class="hljs-number">26</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:25,993</span> INFO [Producer] <span class="hljs-number">89</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:26,003</span> INFO [Consumer] <span class="hljs-number">89</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:29,004</span> INFO [Producer] <span class="hljs-number">14</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:29,006</span> INFO [Consumer] <span class="hljs-number">14</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:32,007</span> INFO [Producer] <span class="hljs-number">17</span><br><span class="hljs-number">2017-03-23</span> <span class="hljs-number">10</span>:<span class="hljs-number">11:32,009</span> INFO [Consumer] <span class="hljs-number">17</span><br></code></pre></td></tr></table></figure><p>每生产一次，消费者就会消费一次。当消费者线程，读取Queue则调用Queue.get()方法，若Queue为空时消费者线程获取不到内容，就会阻塞在这里，直到成功获取内容。</p><p>##线程同步总结</p><ul><li>Event：主要用于线程之间的事件通知</li><li>Lock,Rlock：主要用于保护共享资源</li><li>Condition：主要用于生产者消费者模型，可以理解为Event和Lock的结合体</li><li>Barrier：同步指定个等待的线程</li><li>Semaphore：主要用于保护资源，和Lock的区别在于可以多个线程访问共享资源，而锁一次只能一个线程访问到共享资源，即锁是value&#x3D;1的信号量</li><li>Queue：使用FIFO队列进行同步，适用于生产者消费者模型</li></ul><h1 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h1><p>GIL（Global Interpreter Lock）：全局解释器锁</p><p>Python代码的执行由Python 主循环来控制，Python 在设计之初就考虑到要在解释器的主循环中，同时只有一个线程在执行，即在任意时刻，只有一个线程在解释器中运行。对Python 主循环的访问由全局解释器锁（GIL）来控制，正是这个锁能保证同一时刻只有一个线程在运行。</p><p>因此Python多线程程序的执行顺序如下：</p><ol><li>设置GIL</li><li>切换到一个线程去运行</li><li>运行</li><li>结束线程</li><li>解锁GIL</li><li>重复以上步骤</li></ol><p>因此，Python的多线程并没有实现并行，只是实现了并发而已。如果要实现真正的并行，那就需要使用Python的多进程模块multiprocessing（multiprocessing模块的宗旨是像管理线程一样来管理进程）。</p><hr><p>参考资料</p><ol><li><a href="https://pymotw.com/3/threading/index.html">threading — Manage Concurrent Operations Within a Process</a></li><li><a href="http://yoyzhou.github.io/blog/2013/02/28/python-threads-synchronization-locks/">Python线程同步机制: Locks, RLocks, Semaphores, Conditions, Events和Queues</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>多线程</tag>
      
      <tag>threading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python描述器</title>
    <link href="/2017/03/16/python%E6%8F%8F%E8%BF%B0%E5%99%A8/"/>
    <url>/2017/03/16/python%E6%8F%8F%E8%BF%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="引入描述器"><a href="#引入描述器" class="headerlink" title="引入描述器"></a>引入描述器</h1><p>以stackoverflow上关于描述器（descriptor ）的疑问开篇。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Celsius</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, owner</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span> * (instance.fahrenheit - <span class="hljs-number">32</span>) / <span class="hljs-number">9</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance, value</span>):<br>        instance.fahrenheit = <span class="hljs-number">32</span> + <span class="hljs-number">9</span> * value / <span class="hljs-number">5</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Temperature</span>:<br><br>    celsius = Celsius()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, initial_f</span>):<br>        self.fahrenheit = initial_f<br><br><br>t = Temperature(<span class="hljs-number">212</span>)<br><span class="hljs-built_in">print</span>(t.celsius)  <span class="hljs-comment"># 输出100.0</span><br>t.celsius = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(t.fahrenheit)  <span class="hljs-comment"># 输出32.0</span><br></code></pre></td></tr></table></figure><p>以上代码实现了温度的摄氏温度和华氏温度之间的自动转换。其中Temperature类含有实例变量fahrenheit和类变量celsius，celsius由描述器Celsius进行代理。由这段代码引出的三点疑问：</p><ol><li>疑问一：什么是描述器？</li><li>疑问二：<code>__get__</code>,<code>__set__</code>,<code>__delete__</code>三种方法的参数</li><li>疑问三：描述器有哪些应用场景</li><li>疑问四：property和描述器的区别是什么？</li></ol><span id="more"></span><h1 id="疑问一：什么是描述器？"><a href="#疑问一：什么是描述器？" class="headerlink" title="疑问一：什么是描述器？"></a>疑问一：什么是描述器？</h1><p>描述器是一个 实现了 <code>__get__</code>、 <code>__set__</code>和<code>__delete__</code>中1个或多个方法的类对象。当一个类变量指向这样的一个装饰器的时候， 访问这个类变量会调用<code>__get__</code> 方法， 对这个类变量赋值会调用<code>__set__ </code>方法，这种类变量就叫做描述器。</p><p>描述器 事实上是一种代理机制：当一个<strong>类变量</strong>被定义为描述器，对这个类变量的操作，将由此描述器来代理。</p><h1 id="疑问二：描述器三种方法的参数"><a href="#疑问二：描述器三种方法的参数" class="headerlink" title="疑问二：描述器三种方法的参数"></a>疑问二：描述器三种方法的参数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">descriptor</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, owner</span>):<br>        <span class="hljs-built_in">print</span>(instance)<br>        <span class="hljs-built_in">print</span>(owner)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;desc&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance, value</span>):<br>        <span class="hljs-built_in">print</span>(instance)<br>        <span class="hljs-built_in">print</span>(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delete__</span>(<span class="hljs-params">self, instance</span>):<br>        <span class="hljs-built_in">print</span>(instance)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    a = descriptor()<br><br><span class="hljs-keyword">del</span> A().a  <span class="hljs-comment"># 输出&lt;__main__.A object at 0x7f3fc867cbe0&gt;</span><br>A().a  <span class="hljs-comment"># 返回desc，输出&lt;__main__.A object at 0x7f3fc86741d0&gt;，&lt;class &#x27;__main__.A&#x27;&gt;</span><br>A.a  <span class="hljs-comment"># 返回desc，输出None，&lt;class &#x27;__main__.A&#x27;&gt;</span><br>A().a = <span class="hljs-number">5</span>  <span class="hljs-comment"># 输出&lt;__main__.A object at 0x7f3fc86744a8&gt;，5</span><br>A.a = <span class="hljs-number">5</span>  <span class="hljs-comment"># 直接修改类A的类变量，也就是a不再由descriptor描述器进行代理。</span><br></code></pre></td></tr></table></figure><p>由以上输出结果可以得出结论：</p><h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><ul><li><code>__get__(self, instance, owner)</code> instance 表示当前实例 owner 表示类本身, 使用类访问的时候， instance为None</li><li><code>__set__(self, instance, value)</code> instance 表示当前实例, value 右值， 只有实例才会调用 <code>__set__</code></li><li><code>__delete__(self, instance)</code> instance 表示当前实例</li></ul><h2 id="三种方法的本质"><a href="#三种方法的本质" class="headerlink" title="三种方法的本质"></a>三种方法的本质</h2><ul><li>访问：<code>instance.descriptor</code>实际是调用了<code>descriptor.__get__(self, instance, owner)</code>方法，并且需要返回一个value</li><li>赋值：<code>instance.descriptor = value</code>实际是调用了<code>descriptor.__set__(self, instance, value)</code>方法，返回值为None。</li><li>删除：<code>del instance.descriptor</code>实际是调用了<code>descriptor.__delete__(self, obj_instance)</code>方法，返回值为None</li></ul><h1 id="疑问三：描述器有哪些应用场景"><a href="#疑问三：描述器有哪些应用场景" class="headerlink" title="疑问三：描述器有哪些应用场景"></a>疑问三：描述器有哪些应用场景</h1><blockquote><p>我们想创建一种新形式的实例属性，除了修改、访问之外还有一些额外的功能，例如 类型检查、数值校验等，就需要用到描述器 《Python Cookbook》</p></blockquote><p>即描述器主要用来接管对实例变量的操作。</p><h2 id="实现classmethod装饰器"><a href="#实现classmethod装饰器" class="headerlink" title="实现classmethod装饰器"></a>实现classmethod装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Classmethod</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fn</span>):<br>        self.fn = fn<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, owner</span>):<br>        <span class="hljs-keyword">return</span> wraps(self.fn)(partial(self.fn, owner))<br></code></pre></td></tr></table></figure><p>将方法fn的第一个参数固定成实例的类。可参考python官方文档的另一种写法：<a href="https://docs.python.org/3.5/howto/descriptor.html#static-methods-and-class-methods">descriptor</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMethod</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fn</span>):<br>        self.fn = fn<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, owner=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">if</span> owner <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            owner = <span class="hljs-built_in">type</span>(obj)<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">newfunc</span>(<span class="hljs-params">*args</span>):<br>            <span class="hljs-keyword">return</span> self.f(owner, *args)<br>        <span class="hljs-keyword">return</span> newfunc<br></code></pre></td></tr></table></figure><h2 id="实现staticmethod装饰器"><a href="#实现staticmethod装饰器" class="headerlink" title="实现staticmethod装饰器"></a>实现staticmethod装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Staticmethod</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fn</span>):<br>        self.fn = fn<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, cls</span>):<br>        <span class="hljs-keyword">return</span> self.fn<br></code></pre></td></tr></table></figure><h2 id="实现property装饰器"><a href="#实现property装饰器" class="headerlink" title="实现property装饰器"></a>实现property装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Property</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fget, fset=<span class="hljs-literal">None</span>, fdel=<span class="hljs-literal">None</span>, doc=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        self.fget = fget<br>        self.fset = fset<br>        self.fdel = fdel<br>        self.doc = doc<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance ,owner</span>):<br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self.fget(instance)<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance, value</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">callable</span>(self.fset):<br>            <span class="hljs-keyword">raise</span> AttibuteError(<span class="hljs-string">&#x27;cannot set&#x27;</span>)<br>        self.fset(instance, value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delete__</span>(<span class="hljs-params">self, instance</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">callable</span>(self.fdel):<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&#x27;cannot delete&#x27;</span>)<br>        self.fdel(instance)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setter</span>(<span class="hljs-params">self, fset</span>):<br>        self.fset = fset<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleter</span>(<span class="hljs-params">self, fdel</span>):<br>        self.fdel = fdel<br>        <span class="hljs-keyword">return</span> self<br></code></pre></td></tr></table></figure><p>使用自定义的Property来描述farenheit和celsius类变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Temperature</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cTemp</span>):<br>        self.cTemp = cTemp  <span class="hljs-comment"># 有一个实例变量cTemp：celsius temperature</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fget</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.celsius * <span class="hljs-number">9</span> /<span class="hljs-number">5</span> +<span class="hljs-number">32</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fset</span>(<span class="hljs-params">self, value</span>):<br>        self.celsius = (<span class="hljs-built_in">float</span>(value) -<span class="hljs-number">32</span>) * <span class="hljs-number">5</span> /<span class="hljs-number">9</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fdel</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Farenhei cannot delete&#x27;</span>)<br><br>    farenheit = Property(fget, fset, fdel, doc=<span class="hljs-string">&#x27;Farenheit temperature&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cget</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.cTemp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cset</span>(<span class="hljs-params">self, value</span>):<br>        self.cTemp = <span class="hljs-built_in">float</span>(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cdel</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Celsius cannot delete&#x27;</span>)<br><br>    celsius = Property(cget, cset, cdel, doc=<span class="hljs-string">&#x27;Celsius temperature&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">t = Temperature(<span class="hljs-number">0</span>)<br>t.celsius  <span class="hljs-comment"># 返回0.0</span><br><span class="hljs-keyword">del</span> t.celsius  <span class="hljs-comment"># 输出Celsius cannot delete</span><br>t.celsius = <span class="hljs-number">5</span><br>t.farenheit  <span class="hljs-comment"># 返回41.0</span><br>t.farenheit = <span class="hljs-number">212</span><br>t.celsius  <span class="hljs-comment"># 返回100.0</span><br><span class="hljs-keyword">del</span> t.farenheit  <span class="hljs-comment"># 输出Farenhei cannot delete</span><br></code></pre></td></tr></table></figure><p>使用装饰器的方式来装饰Temperature的两个属性farenheit和celsius：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Temperature</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cTemp</span>):<br>        self.cTemp = cTemp<br><br><span class="hljs-meta">    @Property  </span><span class="hljs-comment"># celsius = Property(celsius)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">celsius</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.cTemp<br><br><span class="hljs-meta">    @celsius.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">celsius</span>(<span class="hljs-params">self, value</span>):<br>        self.cTemp = value<br><br><span class="hljs-meta">    @celsius.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">celsius</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Celsius cannot delete&#x27;</span>)<br><br><span class="hljs-meta">    @Property  </span><span class="hljs-comment"># farenheit = Property(farenheit)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">farenheit</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.celsius * <span class="hljs-number">9</span> /<span class="hljs-number">5</span> +<span class="hljs-number">32</span><br><br><span class="hljs-meta">    @farenheit.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">farenheit</span>(<span class="hljs-params">self, value</span>):<br>        self.celsius = (<span class="hljs-built_in">float</span>(value) -<span class="hljs-number">32</span>) * <span class="hljs-number">5</span> /<span class="hljs-number">9</span><br><br><span class="hljs-meta">    @farenheit.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">farenheit</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Farenheit cannot delete&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用结果同直接用描述器描述类变量</p><h2 id="实现属性的类型检查"><a href="#实现属性的类型检查" class="headerlink" title="实现属性的类型检查"></a>实现属性的类型检查</h2><p>首先实现一个类型检查的描述器Typed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Typed</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, expected_type</span>):<br>        <span class="hljs-comment"># 每个属性都有一个名称和对应的类型</span><br>        self.name = name<br>        self.expected_type = expected_type<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, cls</span>):<br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self<br>        <span class="hljs-keyword">return</span> instance.__dict__[self.name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance ,value</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, self.expected_type):<br>            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;Attribute &#123;&#125; expected &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.name, self.expected_type))<br>        instance.__dict__[self.name] = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delete__</span>(<span class="hljs-params">self, instance</span>):<br>        <span class="hljs-keyword">del</span> instance.__dict__[self.name]<br></code></pre></td></tr></table></figure><p>然后实现一个Person类，Person类的属性name和age都由Typed来描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    name = Typed(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-built_in">str</span>)<br>    age = Typed(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-built_in">int</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>):<br>        self.name = name<br>        self.age = age<br></code></pre></td></tr></table></figure><p>类型检查过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>Person.__dict__<br>mappingproxy(&#123;<span class="hljs-string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__dict__&#x27;</span> of <span class="hljs-string">&#x27;Person&#x27;</span> objects&gt;,<br>              <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>,<br>              <span class="hljs-string">&#x27;__init__&#x27;</span>: &lt;function __main__.Person.__init__&gt;,<br>              <span class="hljs-string">&#x27;__module__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>,<br>              <span class="hljs-string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__weakref__&#x27;</span> of <span class="hljs-string">&#x27;Person&#x27;</span> objects&gt;,<br>              <span class="hljs-string">&#x27;age&#x27;</span>: &lt;__main__.Typed at <span class="hljs-number">0x7fe2f440bd68</span>&gt;,<br>              <span class="hljs-string">&#x27;name&#x27;</span>: &lt;__main__.Typed at <span class="hljs-number">0x7fe2f440bc88</span>&gt;&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p = Person(<span class="hljs-string">&#x27;suncle&#x27;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p.__dict__<br>&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;suncle&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>p = Person(<span class="hljs-number">18</span>, <span class="hljs-string">&#x27;suncle&#x27;</span>)<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">88</span>-ca4808b23f89&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> p = Person(<span class="hljs-number">18</span>, <span class="hljs-string">&#x27;suncle&#x27;</span>)<br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">84</span>-f876ec954895&gt; <span class="hljs-keyword">in</span> __init__(self, name, age)<br>      <span class="hljs-number">4</span> <br>      <span class="hljs-number">5</span>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>):<br>----&gt; <span class="hljs-number">6</span>         self.name = name<br>      <span class="hljs-number">7</span>         self.age = age<br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">83</span>-ac59ba73c709&gt; <span class="hljs-keyword">in</span> __set__(self, instance, value)<br>     <span class="hljs-number">11</span>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance ,value</span>):<br>     <span class="hljs-number">12</span>         <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, self.expected_type):<br>---&gt; <span class="hljs-number">13</span>             <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;Attribute &#123;&#125; expected &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.name, self.expected_type))<br>     <span class="hljs-number">14</span>         instance.__dict__[self.name] = value<br>     <span class="hljs-number">15</span> <br><br>TypeError: Attribute name expected &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>但是上述类型检查的方法存在一些问题，Person类可能有很多属性，那么每一个属性都需要使用Typed描述器描述一次。我们可以写一个带参数的类装饰器来解决这个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">typeassert</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">for</span> name, expected_type <span class="hljs-keyword">in</span> kwargs.items():<br>            <span class="hljs-built_in">setattr</span>(cls, name, Typed(name, expected_type))  <span class="hljs-comment"># 经典写法</span><br>        <span class="hljs-keyword">return</span> cls<br>    <span class="hljs-keyword">return</span> wrap<br></code></pre></td></tr></table></figure><p>然后使用typeassert类装饰器重新定义Person类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@typeassert(<span class="hljs-params">name=<span class="hljs-built_in">str</span>, age=<span class="hljs-built_in">int</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br></code></pre></td></tr></table></figure><p>可以看到typeassert类装饰器的参数是传入的属性名称和类型的键值对。</p><p>如果我们想让typeassert类装饰器自动的识别类的初始化参数类型，并且增加相应的类变量的时候，我们就可以借助inspect库和python的类型注解实现了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> inspect<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">typeassert</span>(<span class="hljs-params">cls</span>):<br>    params = inspect.signature(cls).parameters<br>    <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> params.items():<br>        <span class="hljs-keyword">if</span> param.annotation != inspect._empty:<br>            <span class="hljs-built_in">setattr</span>(cls, name, Typed(name, param.annotation))<br>    <span class="hljs-keyword">return</span> cls<br><br><span class="hljs-meta">@typeassert</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>):  <span class="hljs-comment"># 没有类型注解的参数不会被托管</span><br>        self.name = name<br>        self.age = age<br></code></pre></td></tr></table></figure><h1 id="疑问四：property和描述器的区别"><a href="#疑问四：property和描述器的区别" class="headerlink" title="疑问四：property和描述器的区别"></a>疑问四：property和描述器的区别</h1><p>我们可以利用Python的内部机制获取和设置属性值。总共有三种方法：</p><ol><li>Getters和Setter。我们可以使用方法来封装每个实例变量，获取和设置该实例变量的值。为了确保实例变量不被外部访问，可以把这些实例变量定义为私有的。所以，访问对象的属性需要通过显式函数：anObject.setPrice（someValue）; anObject.getValue（）。</li><li>property。我们可以使用内置的property函数将getter，setter（和deleter）函数与属性名绑定。因此，对属性的引用看起来就像直接访问那么简单，但是本质上是调用对象的相应函数。例如，anObject.price &#x3D; someValue; anObject.value。</li><li>描述器。我们可以将getter，setter（和deleter）函数绑定到一个单独的类中。然后，我们将该类的对象分配给属性名称。这时候对每个属性的引用也像直接访问一样，但是本质上是调用这个描述器对象相应的方法，例如，anObject.price &#x3D; someValue; anObject.value。</li></ol><p>Getter和Setter这种设计模式不够Pythonic，虽然在C++和JAVA中很常见，但是Python追求的是简介，追求的是能够直接访问。</p><hr><p><strong>附1、data-descriptor and no-data descriptor</strong></p><p>翻译为中文其实就是资料描述器和非资料描述器</p><ul><li>data-descriptor：同时实现了<code>__get__</code>和<code>__set__</code>方法的描述器</li><li>no-data descriptor：只实现了<code>__get__</code>方法的描述器</li></ul><p>两者的区别在于：</p><ul><li>no-data descriptor的优先级低于<code>instance.__dict__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, cls</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    val = Int()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__dict__[<span class="hljs-string">&#x27;val&#x27;</span>] = <span class="hljs-number">5</span><br><br>A().val  <span class="hljs-comment"># 返回5</span><br></code></pre></td></tr></table></figure><ul><li>data descriptor的优先级高于<code>instance.__dict__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, cls</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance, value</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    val = Int()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__dict__[<span class="hljs-string">&#x27;val&#x27;</span>] = <span class="hljs-number">5</span><br><br>A().val  <span class="hljs-comment"># 返回3</span><br></code></pre></td></tr></table></figure><p><strong>附2、描述器机制分析资料：</strong></p><ol><li><a href="https://docs.python.org/3.5/howto/descriptor.html">官方文档-descriptor</a></li><li><a href="http://stackoverflow.com/questions/3798835/understanding-get-and-set-and-python-descriptors">understanding-get-and-set-and-python-descriptors</a></li><li><a href="https://anyisalin.github.io/2017/03/08/python-descriptor/">anyisalin - Python - 描述器</a></li><li><a href="http://pyzh.readthedocs.io/en/latest/Descriptor-HOW-TO-Guide.html#id8">Python描述器引导(翻译)</a></li><li><a href="http://www.linuxtopia.org/online_books/programming_books/python_programming/python_ch25.html">Properties and Descriptors</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>描述器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python面向对象的魔术方法</title>
    <link href="/2017/03/15/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <url>/2017/03/15/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><p>查看类的魔术方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">dir</span>(A)  <span class="hljs-comment"># 可以得到类所有公有成员</span><br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;__class__&#x27;</span>,<br> <span class="hljs-string">&#x27;__delattr__&#x27;</span>,<br> <span class="hljs-string">&#x27;__dict__&#x27;</span>,<br> <span class="hljs-string">&#x27;__dir__&#x27;</span>,<br> <span class="hljs-string">&#x27;__doc__&#x27;</span>,<br> <span class="hljs-string">&#x27;__eq__&#x27;</span>,<br> <span class="hljs-string">&#x27;__format__&#x27;</span>,<br> <span class="hljs-string">&#x27;__ge__&#x27;</span>,<br> <span class="hljs-string">&#x27;__getattribute__&#x27;</span>,<br> <span class="hljs-string">&#x27;__gt__&#x27;</span>,<br> <span class="hljs-string">&#x27;__hash__&#x27;</span>,<br> <span class="hljs-string">&#x27;__init__&#x27;</span>,<br> <span class="hljs-string">&#x27;__le__&#x27;</span>,<br> <span class="hljs-string">&#x27;__lt__&#x27;</span>,<br> <span class="hljs-string">&#x27;__module__&#x27;</span>,<br> <span class="hljs-string">&#x27;__ne__&#x27;</span>,<br> <span class="hljs-string">&#x27;__new__&#x27;</span>,<br> <span class="hljs-string">&#x27;__reduce__&#x27;</span>,<br> <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>,<br> <span class="hljs-string">&#x27;__repr__&#x27;</span>,<br> <span class="hljs-string">&#x27;__setattr__&#x27;</span>,<br> <span class="hljs-string">&#x27;__sizeof__&#x27;</span>,<br> <span class="hljs-string">&#x27;__str__&#x27;</span>,<br> <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>,<br> <span class="hljs-string">&#x27;__weakref__&#x27;</span>]<br></code></pre></td></tr></table></figure><p>在Python中，<strong>所有以<code>__</code>双下划线包起来的方法，都统称为魔术方法</strong>。比如最常见的 <code>__init__</code> 。</p><span id="more"></span><h1 id="创建-x2F-销毁"><a href="#创建-x2F-销毁" class="headerlink" title="创建&#x2F;销毁"></a>创建&#x2F;销毁</h1><ul><li><code>__new__</code>: <code>object.__new__(cls)</code> 创建类的方法：构造函数</li><li><code>__del__</code>:删除类：析构函数</li><li><code>__init__</code>：初始化函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;new&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>.__new__(cls)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;init&#x27;</span>)<br>        self.x = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del&#x27;</span>)<br><br>A() <span class="hljs-comment"># 返回一个类&lt;__main__.A at 0x7f4a84767978&gt;</span><br><span class="hljs-comment"># 输出</span><br>new<br>init<br><br>a = A()<br><span class="hljs-keyword">del</span> a  <span class="hljs-comment"># 输出del</span><br></code></pre></td></tr></table></figure><p>每当实例空间被收回时(在垃圾收集时)，<code>__del__</code>就会自动执行。</p><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> Point(self.x + other.x, self.y + other.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__sub__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> Point(self.x - other.x, self.y - other.y)<br><br>a = Point(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>b = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>c = a + b<br>c += Point(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(c.x, c.y)  <span class="hljs-comment"># 7, 11  </span><br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) - Point(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(p.x, p.y)  <span class="hljs-comment"># 1, 4</span><br></code></pre></td></tr></table></figure><p>类的对象之间可以进行加减运算，只要类实现了加减运算对应的魔术方法即可。加法的具体实现是<code>__add__</code>，减法的具体实现是<code>__sub__</code>。</p><ul><li>具体运算符对应的重载函数可以参考int类中运算符重载的实现：help(int)</li></ul><p><strong>不要过度使用运算符重载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Point.__add__ = <span class="hljs-keyword">lambda</span> self, value: self - value<br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) + Point(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(p.x, p.y)  <span class="hljs-comment"># 输出-1, -1</span><br></code></pre></td></tr></table></figure><p><code>__add__</code>的具体实现如果写成了减法，这种类型的错误非常不容易发现，因此如果不是在写库给第三方使用的时候，基本用不上运算符重载。</p><h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><ul><li>使用内置函数<code>hash</code>对某个对象求hash值时， 会调用对象的<code>__hash__</code>方法，示例代码如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>   ...:         <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>   ...:     <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-built_in">hash</span>(Point())<br>Out[<span class="hljs-number">2</span>]: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><code>__hash__</code>方法必须返回int，否则会抛出TypeError</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>   ...:         <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;aaa&#x27;</span><br>   ...:     <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-built_in">hash</span>(Point())<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">5</span>-a919dcea3eae&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-built_in">hash</span>(Point())<br><br>TypeError: __hash__ method should <span class="hljs-keyword">return</span> an integer<br></code></pre></td></tr></table></figure><ul><li>可hash对象，就是具有<code>__hash__</code>方法的对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">6</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>   ...:         <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>   ...:         <br><br>In [<span class="hljs-number">7</span>]: <span class="hljs-built_in">set</span>([Point(), <span class="hljs-number">12</span>]) <span class="hljs-comment"># 可hash</span><br>Out[<span class="hljs-number">7</span>]: &#123;&lt;__main__.Point at <span class="hljs-number">0x7f19d4073320</span>&gt;, <span class="hljs-number">12</span>&#125;<br><br>In [<span class="hljs-number">8</span>]: Point.__hash__ = <span class="hljs-literal">None</span><br><br>In [<span class="hljs-number">9</span>]: <span class="hljs-built_in">set</span>([Point(), <span class="hljs-number">12</span>])  <span class="hljs-comment"># 不能放在集合里面，因为不能hash</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">10</span>-25999920b521&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-built_in">set</span>([Point(), <span class="hljs-number">12</span>])<br><br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;Point&#x27;</span><br><br></code></pre></td></tr></table></figure><ul><li>一个类如果没有重写<code>__hash__</code>方法的话，这个类的每个对象，通常具有不同的hash</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>   ...:     <span class="hljs-keyword">pass</span><br>   ...: <br><br>In [<span class="hljs-number">2</span>]: p1 = Point()<br><br>In [<span class="hljs-number">3</span>]: p2 = Point()<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">hash</span>(p1)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">8757059543567</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">hash</span>(p2)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">8757059543756</span><br></code></pre></td></tr></table></figure><ul><li>通常 <code>__hash__</code> 会和 <code>__eq__</code>一起使用， 因为解释器通常同时判断hash是否相等以及实例是否相等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>(<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.x, self.y))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.x == other.x <span class="hljs-keyword">and</span> self.y == other.y<br><br>p1 = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>p2 = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">set</span>([p1, p2])  <span class="hljs-comment"># 返回 &#123;&lt;__main__.Point at 0x7f286092d588&gt;&#125;</span><br><span class="hljs-built_in">hash</span>(p1) == <span class="hljs-built_in">hash</span>(p2)  <span class="hljs-comment"># 返回True</span><br>p1 == p2  <span class="hljs-comment"># 返回True</span><br></code></pre></td></tr></table></figure><h1 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h1><p>当对象实现了<code>__len__</code>方法时，可以使用内置方法<code>len</code>求对象的长度, <code>__len__</code>方法必须返回非负整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">len</span>(lst)  <span class="hljs-comment"># 返回3</span><br>lst.__len__()  <span class="hljs-comment"># 返回3</span><br></code></pre></td></tr></table></figure><p>因此内置函数和<code>__len__</code>方法的效果相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sized</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">len</span>(Sized())  <span class="hljs-comment"># 返回10</span><br></code></pre></td></tr></table></figure><h1 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h1><ul><li>当对象o实现了<code>__bool__</code> 方法时， <code>bool(o)</code>返回值为<code>o.__bool__()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">bool</span>(F())  <span class="hljs-comment"># 返回False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-built_in">bool</span>(T())  <span class="hljs-comment"># 返回True</span><br></code></pre></td></tr></table></figure><ul><li>当对象o没有实现<code>__bool__</code>方法时，如果o实现了<code>__len__</code>方法， <code>bool(o)</code>返回值为 <code>len(o) != 0</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">L</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><span class="hljs-built_in">bool</span>(L())  <span class="hljs-comment"># 返回True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Q</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-built_in">bool</span>(Q())  <span class="hljs-comment"># 返回False</span><br></code></pre></td></tr></table></figure><ul><li>当对象o既没有实现<code>__bool__</code>方法，也没有实现 <code>__len__</code>方法的时候， <code>bool(o)</code>返回值为<code>True</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boolean</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">bool</span>(Boolean())  <span class="hljs-comment"># 返回True</span><br></code></pre></td></tr></table></figure><ul><li><code>__bool__</code>优先级比<code>__len__</code>更高</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sized</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size</span>):<br>        self.size = size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.size == <span class="hljs-number">0</span><br><br><span class="hljs-built_in">bool</span>(Sized(<span class="hljs-number">0</span>))  <span class="hljs-comment"># 返回True</span><br><span class="hljs-built_in">bool</span>(Sized(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 返回False</span><br></code></pre></td></tr></table></figure><ul><li><code>__bool__</code>方法必须返回bool类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 返回非bool类型的值时会出错，即使返回int型的也会报错</span><br><br><span class="hljs-built_in">bool</span>(B())<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">80</span>-4efbb03885fe&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-built_in">bool</span>(B())<br><br>TypeError: __bool__ should <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>, returned NoneType<br></code></pre></td></tr></table></figure><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><ul><li><code>__str__</code>方法，print函数本质是调用对象的<code>__str__</code>方法，用于给人读</li><li><code>__repr__</code>方法，repr函数本质是调用对象的<code>__repr__</code>方法，用于给机器读</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 给人来读</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Point&lt;&#123;&#125;, &#123;&#125;&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.x, self.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 给机器读的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Point(&#123;&#125;, &#123;&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(self.x, self.y)<br><br><span class="hljs-built_in">print</span>(Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># Point&lt;3, 5&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)))  <span class="hljs-comment"># Point(3, 5)</span><br></code></pre></td></tr></table></figure><blockquote><p>repr:返回对象的规范化的字符串表示</p></blockquote><h1 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fn</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; called&#x27;</span>.<span class="hljs-built_in">format</span>(self))<br><br>f = Fn()<br>f()<br><br><span class="hljs-comment"># 输出</span><br>&lt;__main__.Fn <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7fd254367470</span>&gt; called<br></code></pre></td></tr></table></figure><p>一个对象，只要实现了<code>__call__</code>方法， 就可以通过小括号来来调用， 这一类对象，称之为可调用对象</p><p>给对象加上函数也就是对<code>__call__</code>方法加上参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Add</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br><br>Add()(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 返回8，等价于 add =Add() add(3, 5)</span><br></code></pre></td></tr></table></figure><p><strong>可调用对象的应用实例：实现可过期可换出的cache装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> inspect<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size=<span class="hljs-number">128</span>, expire=<span class="hljs-number">0</span></span>):<br>        self.size = size<br>        self.expire = <span class="hljs-number">0</span><br>        self.data = &#123;&#125;<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_key</span>(<span class="hljs-params">fn, args, kwargs</span>):<br>        ret = []<br>        names = <span class="hljs-built_in">set</span>()<br>        params = inspect.signature(fn).parameters<br>        keys = <span class="hljs-built_in">list</span>(params.keys())<br>        <span class="hljs-keyword">for</span> i, arg <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(args):<br>            ret.append((keys[i], arg))<br>            names.add(keys[i])<br>        ret.extend(kwargs.items())<br>        names.update(kwargs.keys())<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> params.items():<br>            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> names:<br>                ret.append((k, v.default))<br>        ret.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#125;=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, arg) <span class="hljs-keyword">for</span> name, arg <span class="hljs-keyword">in</span> ret])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, fn</span>):<br><span class="hljs-meta">        @wraps(<span class="hljs-params">fn</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            key = self.make_key(fn, args, kwargs)<br>            now = datetime.datetime.now().timestamp()<br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.data.keys():<br>                value, timestamp, _ = self.data[key]<br>                <span class="hljs-keyword">if</span> expire == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> now - timestamp &lt; expire:<br>                    self.data[key] = (value, timestamp, now)<br>                    <span class="hljs-keyword">return</span> value<br>                <span class="hljs-keyword">else</span>:<br>                    self.data.pop(key)<br>            value = fn(*args, **kwargs)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.data) &gt;= self.size: <br>                <span class="hljs-comment"># 过期清理</span><br>                <span class="hljs-keyword">if</span> self.expire != <span class="hljs-number">0</span>:<br>                    expires = <span class="hljs-built_in">set</span>()<br>                    <span class="hljs-keyword">for</span> k, (_, timestamp, _) <span class="hljs-keyword">in</span> self.data.items():<br>                        <span class="hljs-keyword">if</span> now - timestamp &gt;= self.expire:<br>                            expires.add(k)<br>                    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> expires:<br>                        self.data.pop(k)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.data) &gt;= self.size:<br>                <span class="hljs-comment"># 换出</span><br>                k = <span class="hljs-built_in">sorted</span>(self.data.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>                self.data.pop(k)<br>            self.data[key] = (value, now, now)<br>            <span class="hljs-keyword">return</span> value<br>        <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-meta">@Cache()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 返回3</span><br></code></pre></td></tr></table></figure><p>用<code>__call__</code>来实现可调用对象，和闭包是殊途同归的，通常是为了封装一些内部状态</p><h1 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h1><h2 id="支持上下文管理的对象"><a href="#支持上下文管理的对象" class="headerlink" title="支持上下文管理的对象"></a>支持上下文管理的对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>)<br></code></pre></td></tr></table></figure><p>当一个对象同时实现了<code>__enter__</code>和<code>__exit__</code>方法，那么这个对象就是支持上下文管理的对象。</p><p>支持上下文管理的对象可以使用以下语句块进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> obj:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> Context():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;do somethings&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;out of context&#x27;</span>)<br><br><span class="hljs-comment"># 输出</span><br>enter context<br>do somethings<br>exit context<br>out of context<br></code></pre></td></tr></table></figure><p>所以，<code>with</code>开启一个语句块， 执行这个语句块之前，会执行 <code>__enter__</code>方法， 执行这个语句块之后，会执行<code>__exit__</code> 方法，也就是说在这个语句块的前后会执行一些操作，因此也叫上下文。</p><ul><li><strong>即使with块抛出异常，<code>__enter__</code>和<code>__exit__</code>也会被执行，所以上下文管理是安全的。</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> Context():<br>    <span class="hljs-keyword">raise</span> Exception()<br><br>enter context<br>exit context<br>---------------------------------------------------------------------------<br>Exception                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">126</span>-c1afee4bfdab&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> Context():<br>----&gt; <span class="hljs-number">2</span>     <span class="hljs-keyword">raise</span> Exception()<br><br>Exception: <br></code></pre></td></tr></table></figure><ul><li><strong>即使<code>with</code>块中主动退出解释器， <code>__enter__</code> 和<code>__exit__</code>也能保证执行</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">with</span> Context():<br>   sys.exit()<br><br>enter context<br>exit context<br>An exception has occurred, use %tb to see the full traceback.<br><br>SystemExit<br><br>/home/clg/.pyenv/versions/<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>/envs/normal/lib/python3<span class="hljs-number">.5</span>/site-packages/IPython/core/interactiveshell.py:<span class="hljs-number">2889</span>: UserWarning: To exit: use <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-keyword">or</span> Ctrl-D.<br>  warn(<span class="hljs-string">&quot;To exit: use &#x27;exit&#x27;, &#x27;quit&#x27;, or Ctrl-D.&quot;</span>, stacklevel=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="with块的as字句"><a href="#with块的as字句" class="headerlink" title="with块的as字句"></a>with块的as字句</h2><ul><li><strong><code>as</code>子句可以获取<code>__enter__</code>方法的返回值</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self  <span class="hljs-comment"># __enter__函数的返回值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>)<br><br>ctx = Context()<br><span class="hljs-keyword">with</span> ctx <span class="hljs-keyword">as</span> c:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ctx))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(c))<br>    <span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># 输出结果</span><br>enter context<br><span class="hljs-number">140541332713712</span><br><span class="hljs-number">140541332713712</span><br>&lt;__main__.Context <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7fd2543670f0</span>&gt;<br>exit context<br></code></pre></td></tr></table></figure><h2 id="enter-方法"><a href="#enter-方法" class="headerlink" title="__enter__方法"></a><code>__enter__</code>方法</h2><ul><li><p><strong><code>__enter__</code>方法的返回值可以被as字句捕获到</strong></p></li><li><p><strong><code>__enter__</code> 除self之外，不带任何参数</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(args)<br>        <span class="hljs-built_in">print</span>(kwargs)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>)<br><br><span class="hljs-comment"># 输出</span><br>enter context<br>()<br>&#123;&#125;<br>exit context<br></code></pre></td></tr></table></figure><p>args和kwargs都是空的，因此上下文管理的时候<code>__enter__</code>函数除self外，不带任何参数。</p><h2 id="exit-方法"><a href="#exit-方法" class="headerlink" title="__exit__方法"></a><code>__exit__</code>方法</h2><ul><li><strong><code>__exit__</code>的返回值，没有办法获取到，如果<code>with</code>块中抛出异常 <code>__exit__</code>返回False的时候，会向上抛出异常，返回True， 会屏蔽异常</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;haha&#x27;</span><br><br><span class="hljs-keyword">with</span> Context() <span class="hljs-keyword">as</span> c:<br>    <span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># 输出</span><br>enter context<br><span class="hljs-literal">None</span><br>exit context<br></code></pre></td></tr></table></figure><ul><li><strong><code>__exit__</code>的三个参数 异常类型， 异常， traceback</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(args)<br>        <span class="hljs-built_in">print</span>(kwargs)<br><br><span class="hljs-keyword">with</span> Context():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 输出</span><br>enter context<br>exit context<br>(<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>args输出三个None，表示三个位置参数，kwargs为空，表示没有关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> Context():<br>    <span class="hljs-keyword">raise</span> Exception()<br><br>enter context<br>exit context<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;Exception&#x27;</span>&gt;, Exception(), &lt;traceback <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f28608fdc88</span>&gt;)<br>&#123;&#125;<br>---------------------------------------------------------------------------<br>Exception                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">145</span>-c1afee4bfdab&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> Context():<br>----&gt; <span class="hljs-number">2</span>     <span class="hljs-keyword">raise</span> Exception()<br><br>Exception: <br></code></pre></td></tr></table></figure><ul><li><strong>使用变量接受<code>__exit__</code>的三个参数：exc_type,exc_value,traceback</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value, traceback</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exception type: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(exc_type))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exception value: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(exc_value))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exception traceback: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(traceback))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">with</span> Context():<br>    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;hahaha&#x27;</span>)<br><br><span class="hljs-comment"># 输出</span><br>enter context<br>exit context<br>exception <span class="hljs-built_in">type</span>: &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;TypeError&#x27;</span>&gt;<br>exception value: hahaha<br>exception traceback: &lt;traceback <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7fd257c18608</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="上下文管理的应用场景"><a href="#上下文管理的应用场景" class="headerlink" title="上下文管理的应用场景"></a>上下文管理的应用场景</h2><p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。即<strong>凡是在代码块前后插入代码的场景统统适用</strong></p><ol><li>资源管理</li><li>权限验证</li></ol><p>以下以计时器为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timeit</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fn=<span class="hljs-literal">None</span></span>):<br>        wraps(fn)(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        start = datetime.datetime.now()<br>        ret = self.__wrapped__(*args, **kwargs)<br>        cost = datetime.datetime.now() - start<br>        <span class="hljs-built_in">print</span>(cost)<br>        <span class="hljs-keyword">return</span> ret<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        self.start = datetime.datetime.now()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, *args</span>):<br>        cost = datetime.datetime.now() - self.start<br>        <span class="hljs-built_in">print</span>(cost)<br><br><span class="hljs-keyword">with</span> Timeit():<br>    z = <span class="hljs-number">3</span> + <span class="hljs-number">8</span>  <span class="hljs-comment"># 输出0:00:00.000037</span><br><br><span class="hljs-meta">@Timeit</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>)  <span class="hljs-comment"># 输出0:00:00.000044  返回11</span><br></code></pre></td></tr></table></figure><p>总共实现了两种计时方式，既可以对语句块计时，也可以对函数计时。</p><h2 id="contextmanager的使用"><a href="#contextmanager的使用" class="headerlink" title="contextmanager的使用"></a>contextmanager的使用</h2><p>contextlib是个比with优美的东西，也是提供上下文管理机制的模块，它是通过Generator装饰器实现的，不再是采用<code>__enter__</code>和<code>__exit__</code>。contextlib中的contextmanager作为装饰器来提供一种针对<strong>函数级别</strong>的上下文管理机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> contextlib<br><br><br><span class="hljs-meta">@contextlib.contextmanager</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">context</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter context&#x27;</span>) <span class="hljs-comment"># 初始化部分 相当于 __enter__ 方法</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;haha&#x27;</span> <span class="hljs-comment"># 相当于__enter__的返回值</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit context&#x27;</span>) <span class="hljs-comment"># 清理部分， 相当于 __exit__ 方法</span><br><br><br><span class="hljs-keyword">with</span> context() <span class="hljs-keyword">as</span> c:<br>    <span class="hljs-built_in">print</span>(c)<br>    <span class="hljs-keyword">raise</span> Exception()<br><br><span class="hljs-comment"># 输出</span><br>enter context<br>haha<br>exit context<br>---------------------------------------------------------------------------<br>Exception                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">189</span>-4c1dae6b647a&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> context() <span class="hljs-keyword">as</span> c:<br>      <span class="hljs-number">2</span>     <span class="hljs-built_in">print</span>(c)<br>----&gt; <span class="hljs-number">3</span>     <span class="hljs-keyword">raise</span> Exception()<br><br>Exception: <br></code></pre></td></tr></table></figure><p>yield后面必须配合finally使用，否则如果抛出异常，程序不会执行yield后面的部门，也就是不会执行<code>__exit__</code>部分。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><strong>python的反射，核心本质其实就是利用字符串的形式去对象（模块）中操作（查找&#x2F;获取&#x2F;删除&#x2F;添加）成员，就是一种基于字符串的事件驱动！</strong></p><p>关于模块的python反射以及反射机制分析参见：<a href="https://www.cnblogs.com/feixuelove1009/p/5576206.html">python反射机制深入分析</a> </p><p>以下主要分析类对象的反射机制</p><h2 id="getattr-setattr-hasattr"><a href="#getattr-setattr-hasattr" class="headerlink" title="getattr setattr hasattr"></a>getattr setattr hasattr</h2><p>三个函数的原型：</p><ol><li>getattr：getattr(object, name[, default]) -&gt; value。getattr(x, ‘y’)等效于x.y</li><li>setattr：setattr(obj, name, value, &#x2F;)。setattr(x, ‘y’, v)等效于x.y &#x3D; v</li><li>hasattr：hasattr(obj, name, &#x2F;)</li></ol><p>主要作用是通过对象的成员名称获取对象的成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-built_in">print</span>(x, y)<br><br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>p.__dict__[<span class="hljs-string">&#x27;x&#x27;</span>] <span class="hljs-comment"># 返回3， 对于属性来说，可以通过 __dict__ 获取</span><br><span class="hljs-built_in">getattr</span>(p, <span class="hljs-string">&#x27;print&#x27;</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <span class="hljs-comment"># 成员方法无法通过__dict__获取，但是可以通过getattr函数获取 # p.print(3, 5)</span><br><span class="hljs-built_in">getattr</span>(p, <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment"># getattrr 也可以获取到属性</span><br><span class="hljs-built_in">setattr</span>(p, <span class="hljs-string">&#x27;haha&#x27;</span>, <span class="hljs-string">&#x27;abcd&#x27;</span>) <span class="hljs-comment"># p.haha = &#x27;abcd&#x27;，给对象p增加属性haha</span><br>p.haha  <span class="hljs-comment"># 返回abcd</span><br><span class="hljs-built_in">hasattr</span>(p, <span class="hljs-string">&#x27;print&#x27;</span>)  <span class="hljs-comment"># 返回True</span><br><br></code></pre></td></tr></table></figure><p>setattr的对象是实例，如果要给实例动态增加方法，需要先把函数转化为方法，转化的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> types<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mm</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(self.x)<br><br><span class="hljs-built_in">setattr</span>(p, <span class="hljs-string">&#x27;mm&#x27;</span>, types.MethodType(mm, p))  <span class="hljs-comment"># 将mm函数转化为对象p的方法之后，再给p增加</span><br>p.mm()  <span class="hljs-comment"># 输出3</span><br></code></pre></td></tr></table></figure><p>使用getattr setattr hasattr 实现一个命令路由器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cmd1&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cmd2&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br>            <span class="hljs-keyword">if</span> cmd == <span class="hljs-string">&#x27;quit&#x27;</span>:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-built_in">getattr</span>(self, cmd, <span class="hljs-keyword">lambda</span> :<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not found cmd &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(cmd)))()<br><br>command = Command()<br>command.run()<br><br><span class="hljs-comment"># 输出 </span><br>&gt;&gt;&gt;cmd1<br>cmd1<br>&gt;&gt;&gt;cmd2<br>cmd2<br>&gt;&gt;&gt;cmd3<br><span class="hljs-keyword">not</span> found cmd cmd3<br>&gt;&gt;&gt;quit<br></code></pre></td></tr></table></figure><h2 id="getattr-setattr-delattr"><a href="#getattr-setattr-delattr" class="headerlink" title="__getattr__ __setattr__ __delattr__"></a><code>__getattr__</code> <code>__setattr__</code> <code>__delattr__</code></h2><ul><li>当一个类定义了<code>__getattr__</code>方法时，如果访问不存在的成员，会调用<code>__getattr__</code>方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-number">3</span><br><br>a = A()<br>a.x  <span class="hljs-comment"># 返回3</span><br>a.y  <span class="hljs-comment"># 如果没有实现__getattr__方法，当访问不存在的成员时会报错</span><br>---------------------------------------------------------------------------<br>AttributeError                            Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">228</span>-cc7049c6eeec&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> a.y<br><br>AttributeError: <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;y&#x27;</span><br></code></pre></td></tr></table></figure><p>增加<code>__getattr__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;missing property &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name)<br><br>a = A()<br>a.x  <span class="hljs-comment"># 返回3</span><br>a.y  <span class="hljs-comment"># 返回&#x27;missing property y&#x27;。即访问不存在的成员，会调用__getattr__方法</span><br></code></pre></td></tr></table></figure><ul><li>当一个类实现了<code>__setattr__</code>时， 任何地方对这个类的对象增加属性，或者对现有属性赋值，都会调用<code>__setattr__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setattr__</span>(<span class="hljs-params">self, name, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;set &#123;&#125; to &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, value))<br>        <span class="hljs-built_in">setattr</span>(self, name, value)<br><br>a = A()<br>a.x  <span class="hljs-comment"># 返回3</span><br>a.y = <span class="hljs-number">5</span>  <span class="hljs-comment"># 输出set y to 5</span><br></code></pre></td></tr></table></figure><ul><li>当一个类实现了<code>__delattr__</code> 方法时，删除其实例的属性，会调用此方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you cannot delete property: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name))<br><br>a = A()<br>a.x  <span class="hljs-comment"># 返回3</span><br><span class="hljs-keyword">del</span> a.x  <span class="hljs-comment"># 输出you cannot delete property: x</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python面向对象基础</title>
    <link href="/2017/03/08/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2017/03/08/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><p>类的定义的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassName</span>:<br>    &lt;statement-<span class="hljs-number">1</span>&gt;<br>    .<br>    .<br>    .<br>    &lt;statement-N&gt;<br></code></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number, status</span>):<br>        self.number = number<br>        self.status = status<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number, status</span>):<br>        self.number = number<br>        self.status = status<br><br>door = Door(<span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;open&#x27;</span>)<br>door.number<br>door.status<br></code></pre></td></tr></table></figure><ul><li>创建对象使用<code>类名(__init__ 函数除第一个参数外的参数列表)</code></li><li>创建对象的时候实际执行了 <code>__init__</code>函数</li><li><code>__init__</code> 函数并不会创建对象</li></ul><p>函数创建及初始化的过程</p><ol><li>首先创建对象</li><li>对象作为self参数传递给<code>__init__</code>函数</li><li>返回self</li></ol><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>   ...:         NAME = <span class="hljs-string">&#x27;A&#x27;</span>  <span class="hljs-comment"># 类的直接下级作用域 叫做类变量</span><br>   ...:         <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>   ...:             self.name = name  <span class="hljs-comment"># 关联到实例的变量 叫做实例变量</span><br>   ...:          <br><br>In [<span class="hljs-number">2</span>]: a = A(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: a.NAME<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">4</span>]: a.name<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;a&#x27;</span><br><br>In [<span class="hljs-number">5</span>]: A.NAME<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">6</span>]: A.name<br>---------------------------------------------------------------------------<br>AttributeError                            Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">6</span>-61c1cc534250&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> A.name<br><br>AttributeError: <span class="hljs-built_in">type</span> <span class="hljs-built_in">object</span> <span class="hljs-string">&#x27;A&#x27;</span> has no attribute <span class="hljs-string">&#x27;name&#x27;</span><br><br>In [<span class="hljs-number">7</span>]: a2 = A(<span class="hljs-string">&#x27;a2&#x27;</span>)<br><br>In [<span class="hljs-number">8</span>]: a2.NAME<br>Out[<span class="hljs-number">8</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">9</span>]: a2.NAME = <span class="hljs-string">&#x27;A2&#x27;</span>  <span class="hljs-comment"># 给示例a2的类变量NAME赋值</span><br><br>In [<span class="hljs-number">10</span>]: a2.NAME<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-string">&#x27;A2&#x27;</span><br><br>In [<span class="hljs-number">11</span>]: a.NAME<br>Out[<span class="hljs-number">11</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">12</span>]: A.NAME  <span class="hljs-comment"># 类变量没有变化</span><br>Out[<span class="hljs-number">12</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">13</span>]: a2.xxx = <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">14</span>]: a2.xxx  <span class="hljs-comment"># 赋值之后a2多了xxx属性</span><br>Out[<span class="hljs-number">14</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">15</span>]: A.NAME = <span class="hljs-string">&#x27;AA&#x27;</span>  <span class="hljs-comment"># 直接修改类的类变量</span><br><br>In [<span class="hljs-number">16</span>]: A.NAME<br>Out[<span class="hljs-number">16</span>]: <span class="hljs-string">&#x27;AA&#x27;</span><br><br>In [<span class="hljs-number">17</span>]: a.NAME  <span class="hljs-comment"># 对应的实例的类变量也发生了改变</span><br>Out[<span class="hljs-number">17</span>]: <span class="hljs-string">&#x27;AA&#x27;</span><br><br>In [<span class="hljs-number">18</span>]: a2.NAME  <span class="hljs-comment"># a2的类变量在之前的赋值被覆盖了，因此改变类变量的并不会影响a2</span><br>Out[<span class="hljs-number">18</span>]: <span class="hljs-string">&#x27;A2&#x27;</span><br></code></pre></td></tr></table></figure><p>所以</p><ul><li>类变量对类和实例都可见</li><li>所有实例共享类变量</li><li>当给实例的类变量赋值时，相当于动态的给这个实例增加了一个属性，覆盖了类变量</li></ul><h2 id="属性查找顺序"><a href="#属性查找顺序" class="headerlink" title="属性查找顺序"></a>属性查找顺序</h2><ul><li><code>__dict__</code>： 实例变量的字典</li><li><code>__class__</code>： 得到实例对应的类</li><li>先查找<code>__dict__</code>在查找<code>__class__</code></li></ul><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>   ...:     NAME = <span class="hljs-string">&#x27;A&#x27;</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>   ...:         self.name = name<br>   ...:         <br><br>In [<span class="hljs-number">2</span>]: a = A(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: a.NAME<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">4</span>]: a.__class__.NAME<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">5</span>]: a.__dict__<br>Out[<span class="hljs-number">5</span>]: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><br>In [<span class="hljs-number">6</span>]: a.__class__  <span class="hljs-comment"># a.__class__表示实例对应的类</span><br>Out[<span class="hljs-number">6</span>]: __main__.A<br><br>In [<span class="hljs-number">7</span>]: a.NAME = <span class="hljs-string">&#x27;AA&#x27;</span><br><br>In [<span class="hljs-number">8</span>]: a.__dict__  <span class="hljs-comment"># 覆盖类变量之后__dict__增加了一个键值对</span><br>Out[<span class="hljs-number">8</span>]: &#123;<span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><br>In [<span class="hljs-number">9</span>]: a.__dict__[<span class="hljs-string">&#x27;NAME&#x27;</span>] = <span class="hljs-string">&#x27;AAA&#x27;</span>  <span class="hljs-comment"># 可以直接修改__dict__</span><br><br>In [<span class="hljs-number">10</span>]: a.__dict__<br>Out[<span class="hljs-number">10</span>]: &#123;<span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;AAA&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><br>In [<span class="hljs-number">11</span>]: a.__class__.NAME<br>Out[<span class="hljs-number">11</span>]: <span class="hljs-string">&#x27;A&#x27;</span><br><br>In [<span class="hljs-number">12</span>]: a.__class__.__dict__<br>Out[<span class="hljs-number">12</span>]: <br>mappingproxy(&#123;<span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;A&#x27;</span>,<br>              <span class="hljs-string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__dict__&#x27;</span> of <span class="hljs-string">&#x27;A&#x27;</span> objects&gt;,<br>              <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>,<br>              <span class="hljs-string">&#x27;__init__&#x27;</span>: &lt;function __main__.A.__init__&gt;,<br>              <span class="hljs-string">&#x27;__module__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>,<br>              <span class="hljs-string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__weakref__&#x27;</span> of <span class="hljs-string">&#x27;A&#x27;</span> objects&gt;&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>参数是一个类，并且返回一个类的函数就可以是一个类装饰器。</p><p>类装饰器通常用于给类增加属性，如果增加方法，则都是类级的方法。</p><p><strong>代码1：给类增加属性</strong></p><p>函数方法增加：定义set_name函数给类F增加一个NAME属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>:<br>   ...:     <span class="hljs-keyword">pass</span><br>   ...: <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_name</span>(<span class="hljs-params">cls, name</span>):  <span class="hljs-comment"># 给cls增加属性NAME=name</span><br>   ...:     cls.NAME = name<br>   ...:     <span class="hljs-keyword">return</span> cls<br>   ...: <br><br>In [<span class="hljs-number">3</span>]: F1 = set_name(F, <span class="hljs-string">&#x27;F&#x27;</span>)  <span class="hljs-comment"># 返回F本身，并且F1指向F</span><br><br>In [<span class="hljs-number">4</span>]: F1.NAME<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;F&#x27;</span><br><br>In [<span class="hljs-number">5</span>]: f1 = F1()<br><br>In [<span class="hljs-number">6</span>]: f1.NAME<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-string">&#x27;F&#x27;</span><br><br>In [<span class="hljs-number">7</span>]: F1.__dict__<br>Out[<span class="hljs-number">7</span>]: <br>mappingproxy(&#123;<span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;F&#x27;</span>,<br>              <span class="hljs-string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__dict__&#x27;</span> of <span class="hljs-string">&#x27;F&#x27;</span> objects&gt;,<br>              <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>,<br>              <span class="hljs-string">&#x27;__module__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>,<br>              <span class="hljs-string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__weakref__&#x27;</span> of <span class="hljs-string">&#x27;F&#x27;</span> objects&gt;&#125;)<br><br>In [<span class="hljs-number">8</span>]: f1.__dict__<br>Out[<span class="hljs-number">8</span>]: &#123;&#125;<br><br>In [<span class="hljs-number">9</span>]: f1.__class__<br>Out[<span class="hljs-number">9</span>]: __main__.F<br><br>In [<span class="hljs-number">10</span>]: F.__dict__  <span class="hljs-comment"># 本质上增加的还是类F</span><br>Out[<span class="hljs-number">10</span>]: <br>mappingproxy(&#123;<span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;F&#x27;</span>,<br>              <span class="hljs-string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__dict__&#x27;</span> of <span class="hljs-string">&#x27;F&#x27;</span> objects&gt;,<br>              <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>,<br>              <span class="hljs-string">&#x27;__module__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>,<br>              <span class="hljs-string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__weakref__&#x27;</span> of <span class="hljs-string">&#x27;F&#x27;</span> objects&gt;&#125;)<br></code></pre></td></tr></table></figure><p>对set_name函数进行柯里化，实现带参数的类装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_name</span>(<span class="hljs-params">name</span>):   <span class="hljs-comment"># 传入参数name</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">cls</span>):   <span class="hljs-comment"># 装饰器是wrap</span><br>   ...:         cls.NAME = name<br>   ...:         <span class="hljs-keyword">return</span> cls<br>   ...:     <span class="hljs-keyword">return</span> wrap<br>   ...: <br><br>In [<span class="hljs-number">3</span>]: @set_name(<span class="hljs-string">&#x27;G&#x27;</span>)<br>   ...: <span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span>:<br>   ...:     <span class="hljs-keyword">pass</span><br>   ...: <br><br>In [<span class="hljs-number">4</span>]: G.NAME<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;G&#x27;</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span>:<br>   ...:     <span class="hljs-keyword">pass</span><br>   ...: <br><br>In [<span class="hljs-number">6</span>]: G = set_name(<span class="hljs-string">&#x27;G&#x27;</span>)(G)  <span class="hljs-comment"># 装饰器的函数调用方法</span><br><br>In [<span class="hljs-number">7</span>]: G.NAME<br>Out[<span class="hljs-number">7</span>]: <span class="hljs-string">&#x27;G&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>代码2：给类增加方法</strong></p><p>类装饰器<code>get_name</code>给类H增加一个方法<code>__get_name__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">cls</span>):<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_name</span>(<span class="hljs-params">self</span>):<br>   ...:         <span class="hljs-keyword">return</span> cls.__name__<br>   ...:     cls.__get_name__ = _get_name  <span class="hljs-comment"># 给cls增加__get_name__指向_get_name</span><br>   ...:     <span class="hljs-keyword">return</span> cls<br>   ...: <br><br>In [<span class="hljs-number">2</span>]: @get_name<br>   ...: <span class="hljs-keyword">class</span> <span class="hljs-title class_">H</span>:<br>   ...:     <span class="hljs-keyword">pass</span><br>   ...: <br><br>In [<span class="hljs-number">3</span>]: h = H()<br><br>In [<span class="hljs-number">4</span>]: h.__get_name__()<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">&#x27;H&#x27;</span><br><br>In [<span class="hljs-number">5</span>]: H.__dict__<br>Out[<span class="hljs-number">5</span>]: <br>mappingproxy(&#123;<span class="hljs-string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__dict__&#x27;</span> of <span class="hljs-string">&#x27;H&#x27;</span> objects&gt;,<br>              <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>,<br>              <span class="hljs-string">&#x27;__get_name__&#x27;</span>: &lt;function __main__.get_name.&lt;<span class="hljs-built_in">locals</span>&gt;._get_name&gt;,<br>              <span class="hljs-string">&#x27;__module__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>,<br>              <span class="hljs-string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__weakref__&#x27;</span> of <span class="hljs-string">&#x27;H&#x27;</span> objects&gt;&#125;)<br></code></pre></td></tr></table></figure><h2 id="类方法-x2F-静态方法"><a href="#类方法-x2F-静态方法" class="headerlink" title="类方法&#x2F;静态方法"></a>类方法&#x2F;静态方法</h2><p>方法的定义都是类级的，但是有的方法使用实例调用，有的方法使用类来调用</p><ul><li>类方法：当一个方法，被classmethod装饰时， 第一个参数会变成类本身， 这样的方法叫类方法</li><li>当一个方法， 被staticmethod装饰的时候，不会自动传递第一个参数， 这样的方法叫静态方法</li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">I</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 实例方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;instance method&#x27;</span>)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_print</span>(<span class="hljs-params">cls</span>):  <span class="hljs-comment"># 类方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(cls))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;class method&#x27;</span>)<br><br><span class="hljs-meta">    @staticmethod </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">static_print</span>():  <span class="hljs-comment"># 静态方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;static method&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx_print</span>():  <span class="hljs-comment"># 一个普通方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this is a function&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>实例方法只能由实例调用</li><li>类方法可以被类和实例使用，并且被实例使用时，传入的第一个参数还是类</li><li>静态方法可以被类和实例使用，都不会传入第一个参数</li><li>类中的普通方法，因为没有传入self，因此只能被类使用，实例无法使用</li><li>各种方法根据首参来决定。</li></ul><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><h2 id="双下划线"><a href="#双下划线" class="headerlink" title="双下划线"></a>双下划线</h2><ul><li>所有<strong>双下划线开始，非双下划线结尾</strong>的成员，都是私有成员</li><li>严格的说， Python里没有真正私有成员</li><li>Python的私有成员是通过<strong>改名</strong>实现的：_类名 + 带双下划綫的属性</li><li><strong>除非真的有必要，并且清除明白的知道会有什么后果，否则不要通过改名规则修改私有成员</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span>:<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number, status</span>):<br>   ...:         self.number = number<br>   ...:         self.__status = status  <span class="hljs-comment"># 双下划线开始， 非双下划綫结尾的都是私有的， 在类外部无法访问</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>   ...:         self.__status = <span class="hljs-string">&#x27;opening&#x27;</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>   ...:         self.__status = <span class="hljs-string">&#x27;closed&#x27;</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">status</span>(<span class="hljs-params">self</span>):<br>   ...:         <span class="hljs-keyword">return</span> self.__status<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set_number</span>(<span class="hljs-params">self, number</span>):  <span class="hljs-comment"># # 双下滑先开始， 非双下划线结尾的方法也是私有方法</span><br>   ...:         self.number = number<br>   ...:         <br><br>In [<span class="hljs-number">2</span>]: door = Door(<span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;closed&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: door.__status  <span class="hljs-comment"># 无法访问私有属性</span><br>---------------------------------------------------------------------------<br>AttributeError                            Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">3</span>-d55234f04e7f&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> door.__status<br><br>AttributeError: <span class="hljs-string">&#x27;Door&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;__status&#x27;</span><br><br>In [<span class="hljs-number">4</span>]: door.__dict__  <span class="hljs-comment"># door对象含有的属性_Door__status</span><br>Out[<span class="hljs-number">4</span>]: &#123;<span class="hljs-string">&#x27;_Door__status&#x27;</span>: <span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">1001</span>&#125;<br><br>In [<span class="hljs-number">5</span>]: door.__status = <span class="hljs-string">&#x27;hahaha&#x27;</span>  <span class="hljs-comment"># 给对象创建了新的属性，并没有修改到__status</span><br><br>In [<span class="hljs-number">6</span>]: door.__status<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-string">&#x27;hahaha&#x27;</span><br><br>In [<span class="hljs-number">7</span>]: door.__dict__<br>Out[<span class="hljs-number">7</span>]: &#123;<span class="hljs-string">&#x27;_Door__status&#x27;</span>: <span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-string">&#x27;__status&#x27;</span>: <span class="hljs-string">&#x27;hahaha&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">1001</span>&#125;<br><br>In [<span class="hljs-number">8</span>]: door.status()<br>Out[<span class="hljs-number">8</span>]: <span class="hljs-string">&#x27;closed&#x27;</span><br><br>In [<span class="hljs-number">9</span>]: door.<span class="hljs-built_in">open</span>()<br><br>In [<span class="hljs-number">10</span>]: door.status()<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-string">&#x27;opening&#x27;</span><br><br>In [<span class="hljs-number">11</span>]: door.__set_number(<span class="hljs-number">1002</span>)<br>---------------------------------------------------------------------------<br>AttributeError                            Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">11</span>-888a73f63746&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> door.__set_number(<span class="hljs-number">1002</span>)<br><br>AttributeError: <span class="hljs-string">&#x27;Door&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;__set_number&#x27;</span><br><br>In [<span class="hljs-number">12</span>]: door._Door__status<br>Out[<span class="hljs-number">12</span>]: <span class="hljs-string">&#x27;opening&#x27;</span><br><br>In [<span class="hljs-number">13</span>]: door._Door__status = <span class="hljs-string">&#x27;hehehe&#x27;</span>  <span class="hljs-comment"># _类名 + 带双下划綫的属性的方式直接修改私有成员</span><br><br>In [<span class="hljs-number">14</span>]: door.status()<br>Out[<span class="hljs-number">14</span>]: <span class="hljs-string">&#x27;hehehe&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="单下划线"><a href="#单下划线" class="headerlink" title="单下划线"></a>单下划线</h2><ul><li>单下划线是一种惯用法， 人为标记此成员为私有， 但是解释器不不做任何处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>   ...:         self._a = <span class="hljs-number">3</span><br>   ...:         <br><br>In [<span class="hljs-number">2</span>]: a = A()<br><br>In [<span class="hljs-number">3</span>]: a._a<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">4</span>]: a._a = <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">5</span>]: a._a<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">6</span>]: a.__dict__<br>Out[<span class="hljs-number">6</span>]: &#123;<span class="hljs-string">&#x27;_a&#x27;</span>: <span class="hljs-number">4</span>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="property装饰器"><a href="#property装饰器" class="headerlink" title="property装饰器"></a>property装饰器</h2><p><strong>引入property装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number</span>):<br>        self.__number = number<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_number</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__number<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_number</span>(<span class="hljs-params">self, number</span>):<br>        self.__number = number<br></code></pre></td></tr></table></figure><p>当把<code>number</code>属性变成私有属性<code>__number</code>之后，无法直接访问得到，只能通过<code>get_number</code>和<code>set_number</code>两个函数访问<code>__number</code>属性。</p><p>如果既能限制参数访问，又可以用类似属性这样简单的方式来访问类的变量，这个时候就可以使用property装饰器了。</p><ul><li><strong>Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的</strong></li></ul><p><strong>property装饰器使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Door</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, number</span>):<br>        self.__number = number<br><br>    <span class="hljs-comment"># property 装饰器会把一个仅有self参数的函数，变成一个属性， 属性的值，为方法的返回值</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__number<br><br>    <span class="hljs-comment"># property setter 装饰器， 可以把一个方法转化为对此赋值，但此方法有一定要求</span><br>    <span class="hljs-comment"># 1.同名 2.必须接收两个参数 self 和 value， value为所赋的值</span><br><span class="hljs-meta">    @number.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number</span>(<span class="hljs-params">self, number</span>):<br>        self.__number = number<br><br><span class="hljs-meta">    @number.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">number</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cannot remove number property&#x27;</span>)<br><br>door = Door(<span class="hljs-number">1001</span>)<br>door.number  <span class="hljs-comment"># 返回1001</span><br>door.number = <span class="hljs-number">1002</span><br>door.number  <span class="hljs-comment"># 返回1002</span><br><span class="hljs-keyword">del</span> door.number  <span class="hljs-comment"># 输出cannot remove number property</span><br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><ul><li>在类名后加括号 括号中是继承列表， 称之为父类或者基类或者超类</li><li>继承一个明显的好处就是可以获取父类的属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br>    PUBLIC_CLASS_VAR = <span class="hljs-string">&#x27;PUBLIC_CLASS_VAR&#x27;</span><br>    __PRIVATE_CLASS_VAR = <span class="hljs-string">&#x27;PRIVATE_CLASS_VAR&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.public_instance_var = <span class="hljs-string">&#x27;public_instance_var&#x27;</span><br>        self.__private_instance_var = <span class="hljs-string">&#x27;private__instance_var&#x27;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">public_class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;public_class_method&#x27;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__private_class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;private_class_method&#x27;</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">public_static_method</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;public static method&#x27;</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__private_static_method</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;private static method&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">public_instance_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;public_instance_method&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__private_instance_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;private_instance_method&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    <span class="hljs-keyword">pass</span><br><br>sub = Sub()<br>sub.__dict__<br><span class="hljs-comment"># 输出</span><br>&#123;<span class="hljs-string">&#x27;_Base__private_instance_var&#x27;</span>: <span class="hljs-string">&#x27;private__instance_var&#x27;</span>,<br> <span class="hljs-string">&#x27;public_instance_var&#x27;</span>: <span class="hljs-string">&#x27;public_instance_var&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>凡是公有的都能继承</li><li>凡是私有的都不能继承</li><li>原来是什么，继承过来还是什么</li></ul><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ul><li>当子类和父类有同名成员的时候， 子类的成员会覆盖父类的同名成员</li><li>当父类含有一个带参数的初始化方法的时候，子类一定需要一个初始化方法，并且在初始化方法中调用父类的初始化方法</li><li>super方法：super(type, obj) &#x3D;》type:类名，obj:传递给后续方法的第一个参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__a = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base.print&#x27;</span>)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_print</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base.cls_print&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment">## 当子类和父类有同名成员的时候， 子类的成员会覆盖父类的同名成员</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sub.print&#x27;</span>)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_print</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sub.cls_print&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 调用父类的print</span><br>        <span class="hljs-built_in">super</span>().<span class="hljs-built_in">print</span>()<br>        <span class="hljs-comment"># super(Sub, self).print()</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_foo</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-comment">#cls.cls_print()</span><br>        <span class="hljs-comment">#Base.cls_print()</span><br>        <span class="hljs-built_in">super</span>().cls_print()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSub</span>(<span class="hljs-title class_ inherited__">Sub</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;SubSub.print&#x27;</span>)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_print</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;SubSub.cls_print&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 调用Base的print</span><br>        <span class="hljs-built_in">super</span>(SubSub, self).<span class="hljs-built_in">print</span>()<br>        <span class="hljs-comment"># 代理 TYPE 的父类的方法， 并且使用 obj 绑定  第一个参数 指定调用谁的直接父类， 第二个参数指定当调用时，传递什么作为方法的第一个参数</span><br>        <span class="hljs-built_in">super</span>(Sub, self).<span class="hljs-built_in">print</span>()<br>        <span class="hljs-built_in">super</span>(SubSub, SubSub).cls_print()  <span class="hljs-comment"># 类方法的时候可以传递类，也可以传递实例self</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_foo</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-comment"># Base.cls_print()</span><br>        <span class="hljs-built_in">super</span>(Sub, cls).cls_print()<br><br></code></pre></td></tr></table></figure><h2 id="多继承与MRO"><a href="#多继承与MRO" class="headerlink" title="多继承与MRO"></a>多继承与MRO</h2><h3 id="等效的类定义"><a href="#等效的类定义" class="headerlink" title="等效的类定义"></a>等效的类定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>():<br>    passs<br></code></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><ul><li>在继承列表里存在多个类的时候表示多继承</li><li>多继承会把继承列表里的所有公有成员都继承过来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;method of A&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;method of B&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(A, B):<br>    <span class="hljs-keyword">pass</span><br><br>c = C()<br>c.method()  <span class="hljs-comment"># 输出method of A</span><br></code></pre></td></tr></table></figure><h3 id="MRO"><a href="#MRO" class="headerlink" title="MRO"></a>MRO</h3><p>定义一个多继承，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;method of A&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;method of B&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(A, B):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;method of E&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>(E, A):<br>    <span class="hljs-keyword">pass</span><br><br>F().method()  <span class="hljs-comment"># 输出method of E</span><br></code></pre></td></tr></table></figure><p>如果定义类G继承自(A, E)，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span>(A, E):  <span class="hljs-comment"># 在定义的时候会直接报错</span><br>    <span class="hljs-keyword">pass</span><br><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">51</span>-dcac33a3d00c&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span>(A, E):<br>      <span class="hljs-number">2</span>     <span class="hljs-keyword">pass</span><br><br>TypeError: Cannot create a consistent method resolution<br>order (MRO) <span class="hljs-keyword">for</span> bases E, A<br></code></pre></td></tr></table></figure><p>报错显示：Cannot create a consistent method resolution order (MRO) for bases E, A</p><blockquote><p>方法解析顺序(MRO)不满足报错</p></blockquote><p><strong>分析基类E,A的MRO</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>A.__mro__<br>(__main__.A, <span class="hljs-built_in">object</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>E.__mro__<br>(__main__.E, __main__.A, <span class="hljs-built_in">object</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>F.__mro__<br>(__main__.F, __main__.E, __main__.A, <span class="hljs-built_in">object</span>)<br></code></pre></td></tr></table></figure><p>所以，mro序列就是继承的先后顺序</p><p>那么G类的mro序列应该就是(G, A, E, object)，Python通过C3算法来确定多继承的时候是否满足<strong>mro的两个原则</strong>：</p><ol><li>本地优先： 自己定义或重写的方法优先，按照继承列表，从左到右查找</li><li>单调性：所有子类，也要满足查找顺序</li></ol><p>C3算法的主要作用是：在多继承时判断属性来自于哪个类，无法判断时抛出TypeError</p><p><strong>C3算法</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">B</span>(<span class="hljs-type">O</span>) ：则<span class="hljs-type">B</span>的mro序列为： [<span class="hljs-type">B</span>, <span class="hljs-type">O</span>]</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">B</span>(<span class="hljs-type">A1</span>, <span class="hljs-type">A2</span>, ..., <span class="hljs-type">An</span>) ：则<span class="hljs-type">B</span>的mro序列为： [<span class="hljs-type">B</span>] + merge(<span class="hljs-title">mro</span>(<span class="hljs-type">A1</span>), mro(<span class="hljs-type">A2</span>), ..., mro(<span class="hljs-type">An</span>), [<span class="hljs-type">A1</span>, <span class="hljs-type">A2</span>, ..., <span class="hljs-type">An</span>, <span class="hljs-type">O</span>])</span><br></code></pre></td></tr></table></figure><p>merge操作就是C3算法的核心，merge步骤如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 遍历列表<br><span class="hljs-bullet">*</span> 看第一个列表的首元素<br><span class="hljs-bullet">    *</span> 它在其他列表中也是首元素<br><span class="hljs-bullet">    *</span> 或者它在其他列表不存在<br><span class="hljs-bullet">*</span> 满足以上条件，则移除该首元素，合并到mro中<br><span class="hljs-bullet">*</span> 不满足，则抛出异常<br></code></pre></td></tr></table></figure><p><strong>C3算法分析F类的mro</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mro</span><span class="hljs-params">(F)</span></span> -&gt; <span class="hljs-selector-attr">[F]</span> + <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">mro</span>(E), <span class="hljs-built_in">mro</span>(A), <span class="hljs-selector-attr">[E, A, O]</span>)<br>-&gt; <span class="hljs-selector-attr">[F]</span> + <span class="hljs-built_in">merge</span>(<span class="hljs-selector-attr">[E, A, O]</span>, <span class="hljs-selector-attr">[A, O]</span>, <span class="hljs-selector-attr">[E, A, O]</span>)<br>    -&gt; <span class="hljs-selector-attr">[F, E]</span> + <span class="hljs-built_in">merge</span>(<span class="hljs-selector-attr">[A, O]</span>, <span class="hljs-selector-attr">[A, O]</span>, <span class="hljs-selector-attr">[A, O]</span>)<br>    -&gt; <span class="hljs-selector-attr">[F, E, A]</span> + <span class="hljs-built_in">merge</span>(<span class="hljs-selector-attr">[O]</span>, <span class="hljs-selector-attr">[O]</span>, <span class="hljs-selector-attr">[O]</span>)<br>    -&gt; <span class="hljs-selector-attr">[F, E, A, O]</span><br></code></pre></td></tr></table></figure><p>merge操作成功，mro解析正确，最终mro为[F, E, A, O]</p><p><strong>C3算法分析G类的mro</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mro</span><span class="hljs-params">(G)</span></span> -&gt; <span class="hljs-selector-attr">[G]</span> + <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">mro</span>(A), <span class="hljs-built_in">mro</span>(E), <span class="hljs-selector-attr">[A, E, O]</span>)<br>-&gt; <span class="hljs-selector-attr">[G]</span> + <span class="hljs-built_in">merge</span>(<span class="hljs-selector-attr">[A, O]</span>, <span class="hljs-selector-attr">[E, A, O]</span>, <span class="hljs-selector-attr">[A, E, O]</span>)<br>    -&gt; raise TypeError:<br></code></pre></td></tr></table></figure><p>第一个列表的首元素为A，在第二个列表中存在但不是首元素，不满足merge的条件，直接抛出异常。</p><p><strong>结论</strong>：</p><ol><li><strong>应该尽量避免多继承</strong></li><li>多继承会对程序的心智负担造成非常大的压力</li></ol><h2 id="Mixin类"><a href="#Mixin类" class="headerlink" title="Mixin类"></a>Mixin类</h2><p>参考</p><ol><li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318680104044a55f4a9dbf8452caf71e8dc68b75a18000">廖雪峰-多重继承与MixIn</a></li><li><a href="https://www.zhihu.com/question/20778853">知乎-Mixin是什么概念?</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p18_extending_classes_with_mixins.html">Python Cookbook-利用Mixins扩展类功能</a></li></ol><p>在编程中，mixin是指为继承自它的class提供额外的功能, 但它自身却是不单独使用的类.。在具有多继承能力的编程语言中， mixin可以为类增加额外功能或方法。</p><p>因此，MixIn模式的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。</p><p>在Python 3.5.2 源代码 socketserver.py 中的639到643行可以看到以下四个类的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkingUDPServer</span>(ForkingMixIn, UDPServer): <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkingTCPServer</span>(ForkingMixIn, TCPServer): <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadingUDPServer</span>(ThreadingMixIn, UDPServer): <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadingTCPServer</span>(ThreadingMixIn, TCPServer): <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>BaseServer：server类的基类</li><li>UDPServer：UDP server class，继承自BaseServer</li><li>TCPServer：TCP server class，继承自BaseServer</li><li>ForkingMixIn：Mix-in class to handle each request in a new process.</li><li>ThreadingMixIn：Mix-in class to handle each request in a new thread.</li></ul><p>Python自带了<code>TCPServer</code>和<code>UDPServer</code>这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由<code>ForkingMixIn</code>和<code>ThreadingMixIn</code>提供。通过组合，就可以得到以上四个类。</p><p>这几个类之间的关系如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/MixIn.jpg" alt="socketserver继承关系"></p><p>可以看到，从BaseServer开始逐层继承的过程中，混入(MixIn)了ForkingMixIn类和ThreadingMixIn类。</p><p>这样的多重继承的技巧称为MixIn。</p><p>如果不采用MixIn技术，而是采用层次复杂的单继承实现，则类的数量会呈指数增长。</p><p>具体不采用MixIn技术设计的继承层次关系参见：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318680104044a55f4a9dbf8452caf71e8dc68b75a18000">廖雪峰-多重继承与MixIn</a>中的Animal类的设计思路。</p><p><strong>MixIn总结</strong></p><p>MixIn其实也是一种组合的方式。通常来说，组合优于继承</p><p>Mixin 类的限制</p><ul><li>Mixin类不应该有初始化方法</li><li>Mixin类通常不能独立工作</li><li>Mixin类的祖先也应该是Mixin类</li></ul><p>通常情况下，Mixin类总在继承列表的第一位</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python异常处理</title>
    <link href="/2017/03/05/python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2017/03/05/python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="区分Exception和Syntax-Error"><a href="#区分Exception和Syntax-Error" class="headerlink" title="区分Exception和Syntax Error"></a>区分Exception和Syntax Error</h2><p>在写Python程序的时候经常会报错，报错通常有以下两种情况：</p><ol><li>语法错误（Syntax Error）: <strong>部分语法错误属于异常</strong></li><li>异常（Exception）</li></ol><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误也称为解析错误，是最常遇到的一种错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello!&#x27;</span>)<br>  File <span class="hljs-string">&quot;&lt;ipython-input-1-5c66e4fd0ae9&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello!&#x27;</span>)<br>                   ^<br>SyntaxError: invalid syntax<br><br></code></pre></td></tr></table></figure><p>当代码不符合Python语法的时候就会抛出SyntaxError。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>Python用异常对象来表示异常情况。遇到错误后，会引发异常。如果异常没有处理或捕捉，程序就会用<strong>traceback</strong>终止程序的执行，如果是在多线程程序中，则会终止当前线程的执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: <span class="hljs-number">1</span>/<span class="hljs-number">0</span><br>---------------------------------------------------------------------------<br>ZeroDivisionError                         Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">2</span>-05c9758a9c21&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span><br><br>ZeroDivisionError: division by zero<br><br></code></pre></td></tr></table></figure><p>除以0时，就会抛出ZeroDivisionError异常（ZeroDivisionError类的一个实例）。</p><span id="more"></span><h2 id="异常层次结构"><a href="#异常层次结构" class="headerlink" title="异常层次结构"></a>异常层次结构</h2><p>Python 3.5.2中内置异常的类层次结构如下：参考标准库</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs julia">BaseException  <span class="hljs-comment"># 所有异常的基类</span><br> +-- SystemExit  <span class="hljs-comment"># 程序退出/终止</span><br> +-- KeyboardInterrupt  <span class="hljs-comment"># 由键盘中断（通常为Ctrl+C) 生成</span><br> +-- GeneratorExit  <span class="hljs-comment"># 由生成器.close()方法引发</span><br> +-- <span class="hljs-built_in">Exception</span>  <span class="hljs-comment"># 所有非退出异常的基类</span><br>      +-- StopIteration  <span class="hljs-comment"># 停止迭代错误</span><br>      +-- StopAsyncIteration  <span class="hljs-comment"># 停止异步迭代错误</span><br>      +-- ArithmeticError  <span class="hljs-comment"># 算数异常的基类</span><br>      |    +-- FloatingPointError  <span class="hljs-comment"># 浮点操作异常</span><br>      |    +-- <span class="hljs-built_in">OverflowError</span>  <span class="hljs-comment"># 溢出导致的异常</span><br>      |    +-- ZeroDivisionError  <span class="hljs-comment"># 对0进行除或取模操作导致的异常</span><br>      +-- <span class="hljs-built_in">AssertionError</span>  <span class="hljs-comment"># 由assert语句引发</span><br>      +-- AttributeError  <span class="hljs-comment"># 当属性名称无效时引发</span><br>      +-- BufferError  <span class="hljs-comment"># 缓冲区错误引发</span><br>      +-- <span class="hljs-built_in">EOFError</span>  <span class="hljs-comment"># 到达文件结尾时引发</span><br>      +-- ImportError  <span class="hljs-comment"># import语句失败</span><br>      +-- LookupError  <span class="hljs-comment"># 索引和键错误</span><br>      |    +-- IndexError  <span class="hljs-comment"># 超出序列索引的范围</span><br>      |    +-- <span class="hljs-built_in">KeyError</span>  <span class="hljs-comment"># 键不存在</span><br>      +-- MemoryError  <span class="hljs-comment"># 内存不足</span><br>      +-- NameError  <span class="hljs-comment"># 无法找到局部或全局名称</span><br>      |    +-- UnboundLocalError  <span class="hljs-comment"># 未绑定的局部变量</span><br>      +-- OSError  <span class="hljs-comment"># 操作系统错误</span><br>      |    +-- BlockingIOError  <span class="hljs-comment"># IO阻塞</span><br>      |    +-- ChildProcessError  <span class="hljs-comment"># 子进程</span><br>      |    +-- ConnectionError  <span class="hljs-comment"># 连接错误</span><br>      |    |    +-- BrokenPipeError  <span class="hljs-comment"># 管道断开</span><br>      |    |    +-- ConnectionAbortedError  <span class="hljs-comment"># 连接中止</span><br>      |    |    +-- ConnectionRefusedError  <span class="hljs-comment"># 连接拒绝</span><br>      |    |    +-- ConnectionResetError  <span class="hljs-comment"># 连接重置</span><br>      |    +-- FileExistsError <span class="hljs-comment"># 文件已存在</span><br>      |    +-- FileNotFoundError  <span class="hljs-comment"># 文件不存在</span><br>      |    +-- InterruptedError  <span class="hljs-comment"># 中断错误</span><br>      |    +-- IsADirectoryError  <span class="hljs-comment"># 目录错误</span><br>      |    +-- NotADirectoryError  <span class="hljs-comment"># 非目录错误</span><br>      |    +-- PermissionError  <span class="hljs-comment"># 权限错误</span><br>      |    +-- ProcessLookupError  <span class="hljs-comment"># 进程查找错误</span><br>      |    +-- TimeoutError  <span class="hljs-comment"># 超时错误</span><br>      +-- ReferenceError  <span class="hljs-comment"># 销毁被引用对象后仍然使用引用</span><br>      +-- RuntimeError  <span class="hljs-comment"># 运行时错误</span><br>      |    +-- NotImplementedError  <span class="hljs-comment"># 没有实现的特性</span><br>      |    +-- RecursionError  <span class="hljs-comment"># 递归错误</span><br>      +-- SyntaxError  <span class="hljs-comment"># 语法错误</span><br>      |    +-- IndentationError  <span class="hljs-comment"># 缩进错误</span><br>      |         +-- TabError  <span class="hljs-comment"># 使用不一致的制表符</span><br>      +-- <span class="hljs-built_in">SystemError</span>  <span class="hljs-comment"># 解释器中的非致命系统错误</span><br>      +-- <span class="hljs-built_in">TypeError</span>  <span class="hljs-comment"># 给操作传递了错误的类型</span><br>      +-- ValueError  <span class="hljs-comment"># 无效类型</span><br>      |    +-- UnicodeError  <span class="hljs-comment"># Unicode错误</span><br>      |         +-- UnicodeDecodeError  <span class="hljs-comment"># Unicode解码错误</span><br>      |         +-- UnicodeEncodeError  <span class="hljs-comment"># Unicode编码错误</span><br>      |         +-- UnicodeTranslateError  <span class="hljs-comment"># Unicode转换错误</span><br>      +-- Warning  <span class="hljs-comment"># 警告的基类</span><br>           +-- DeprecationWarning  <span class="hljs-comment"># 关于被弃用的特征的警告</span><br>           +-- PendingDeprecationWarning  <span class="hljs-comment"># 关于特性将会被废弃的警告</span><br>           +-- RuntimeWarning  <span class="hljs-comment"># 可疑的运行时行为的警告</span><br>           +-- SyntaxWarning  <span class="hljs-comment"># 可疑的语法的警告</span><br>           +-- UserWarning  <span class="hljs-comment"># 用户代码生成的警告</span><br>           +-- FutureWarning  <span class="hljs-comment"># 关于构造将来语义会有改变的警告</span><br>           +-- ImportWarning  <span class="hljs-comment"># import语句的警告</span><br>           +-- UnicodeWarning  <span class="hljs-comment"># Unicode警告</span><br>           +-- BytesWarning  <span class="hljs-comment"># Bytes警告</span><br>           +-- ResourceWarning  <span class="hljs-comment"># 资源警告</span><br></code></pre></td></tr></table></figure><ul><li>所有异常的基类都是BaseException</li><li>除SystemExit，KeyboardInterrupt，GeneratorExit三种异常外都继承自Exception</li></ul><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>捕获异常可以使用try&#x2F;except语句。try&#x2F;except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。</p><h3 id="try-x2F-except"><a href="#try-x2F-except" class="headerlink" title="try&#x2F;except"></a>try&#x2F;except</h3><p><strong>基础语法</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">try</span>:<br>    &lt;语句&gt;<br><span class="hljs-keyword">except</span> &lt;<span class="hljs-keyword">name</span>&gt;：<br>    &lt;语句&gt;          #如果在<span class="hljs-keyword">try</span>部分引发了名为<span class="hljs-string">&#x27;name&#x27;</span>的异常，则执行这段代码<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">3</span>]: <span class="hljs-keyword">try</span>:<br>   ...:     x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter a number: &quot;</span>))<br>   ...: <span class="hljs-keyword">except</span> ValueError:<br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No valid number.&quot;</span>)<br>   ...:     <br>Please enter a number: asd<br>No valid number.<br></code></pre></td></tr></table></figure><h3 id="多个except"><a href="#多个except" class="headerlink" title="多个except"></a>多个except</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: <span class="hljs-keyword">import</span> sys<br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-keyword">try</span>:<br>   ...:     f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.txt&#x27;</span>)  <span class="hljs-comment"># 文件不存在的时候就会抛出FileNotFoundError异常</span><br>   ...:     s = f.readline()<br>   ...:     i = <span class="hljs-built_in">int</span>(s.strip())<br>   ...: <span class="hljs-keyword">except</span> OSError:  <span class="hljs-comment"># FileNotFoundError异常的上层异常</span><br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;OS error.&#x27;</span>)<br>   ...: <span class="hljs-keyword">except</span> ValueError:<br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Could not convert data to integer.&#x27;</span>)<br>   ...: <span class="hljs-keyword">except</span> Exception:<br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exception.&#x27;</span>)<br>   ...: <span class="hljs-keyword">except</span>:  <span class="hljs-comment"># 不加具体异常类型时，会捕获所有的异常，应该不用或者慎用</span><br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Unexpected error:&#x27;</span>, sys.exc_info()[<span class="hljs-number">0</span>])<br>   ...:     <br>OS error.<br></code></pre></td></tr></table></figure><p>各个except之间的执行顺序：</p><ul><li>except顺序捕获try中抛出的异常</li><li>越具体的异常应该越靠前，越一般的异常应该越靠后</li></ul><h3 id="可选的else语句"><a href="#可选的else语句" class="headerlink" title="可选的else语句"></a>可选的else语句</h3><p><strong>语法</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">try</span>:<br>    &lt;语句&gt;<br><span class="hljs-keyword">except</span> &lt;<span class="hljs-keyword">name</span>&gt;：<br>    &lt;语句&gt;          #如果在<span class="hljs-keyword">try</span>部分引发了名为<span class="hljs-string">&#x27;name&#x27;</span>的异常，则执行这段代码<br><span class="hljs-keyword">else</span>:<br>    &lt;语句&gt;          #如果没有异常发生，则执行这段代码<br></code></pre></td></tr></table></figure><p>如果try部分没有抛出异常，但是又必须执行的语句，则放在else语句中。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> sys.argv[<span class="hljs-number">1</span>:]:<br>    <span class="hljs-keyword">try</span>:<br>        f = <span class="hljs-built_in">open</span>(arg, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">except</span> IOError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cannot open&#x27;</span>, arg)<br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 没有抛出异常（即文件正确打开）时打印出文件中的每一行</span><br>        <span class="hljs-built_in">print</span>(arg, <span class="hljs-string">&#x27;has&#x27;</span>, <span class="hljs-built_in">len</span>(f.readlines()), <span class="hljs-string">&#x27;lines&#x27;</span>)<br>        f.close()<br><br></code></pre></td></tr></table></figure><h3 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h3><p>finally语句用来定义在任何情况下都必须执行的语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">try</span>:<br>   ...:     <span class="hljs-keyword">raise</span> KeyboardInterrupt<br>   ...: <span class="hljs-keyword">finally</span>:<br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Goodbye&#x27;</span>)<br>   ...:     <br>Goodbye<br>---------------------------------------------------------------------------<br>KeyboardInterrupt                         Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">8</span>-132d568ca0fb&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">try</span>:<br>----&gt; <span class="hljs-number">2</span>     <span class="hljs-keyword">raise</span> KeyboardInterrupt<br>      <span class="hljs-number">3</span> <span class="hljs-keyword">finally</span>:<br>      <span class="hljs-number">4</span>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Goodbye&#x27;</span>)<br>      <span class="hljs-number">5</span> <br><br>KeyboardInterrupt:<br></code></pre></td></tr></table></figure><p><strong>带return语句的finally执行顺序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(x)<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">t</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> p(<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;haha&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">return</span> p(<span class="hljs-number">3</span>)<br><br>x = t()<br><br><span class="hljs-comment"># 输出结果为：</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-comment"># 返回值x为3</span><br></code></pre></td></tr></table></figure><p>可见，在try块中，只要有finally语句，即使函数提前返回，也会在退出try块之前执行finally语句，因此返回值会被finally中的return语句替代。</p><p><strong>综合使用示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">x, y</span>):<br>   ...:     <span class="hljs-keyword">try</span>:<br>   ...:         result = x / y<br>   ...:     <span class="hljs-keyword">except</span> ZeroDivisionError:<br>   ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;division by zero!&#x27;</span>)<br>   ...:     <span class="hljs-keyword">else</span>:<br>   ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result is &#x27;</span>, result)<br>   ...:     <span class="hljs-keyword">finally</span>:<br>   ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;executing finally clause.&#x27;</span>)<br>   ...:         <br><br>In [<span class="hljs-number">2</span>]: divide(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>division by zero!<br>executing <span class="hljs-keyword">finally</span> clause.<br><br>In [<span class="hljs-number">3</span>]: divide(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>result <span class="hljs-keyword">is</span>  <span class="hljs-number">2.0</span><br>executing <span class="hljs-keyword">finally</span> clause.<br><br>In [<span class="hljs-number">4</span>]: divide(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>executing <span class="hljs-keyword">finally</span> clause.<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">4</span>-34bb38fa74fd&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> divide(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">1</span>-4273ffa41b76&gt; <span class="hljs-keyword">in</span> divide(x, y)<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">x, y</span>):<br>      <span class="hljs-number">2</span>     <span class="hljs-keyword">try</span>:<br>----&gt; <span class="hljs-number">3</span>         result = x / y<br>      <span class="hljs-number">4</span>     <span class="hljs-keyword">except</span> ZeroDivisionError:<br>      <span class="hljs-number">5</span>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;division by zero!&#x27;</span>)<br><br>TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> /: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><p>结论：</p><ul><li>任何情况下finally语句都会执行。</li><li>即使try部分中有return语句，也会在退出try块之前执行finally语句，并且返回值是finally中的return</li><li>如果有异常没有被处理，则在执行完成finally语句之后会会抛出没有被处理的异常</li><li>在实际使用中，finally通常用来释放额外的资源，比如文件或者网络连接</li></ul><h2 id="主动抛出异常"><a href="#主动抛出异常" class="headerlink" title="主动抛出异常"></a>主动抛出异常</h2><p><strong>raise语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>---------------------------------------------------------------------------<br>NameError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">1</span>-64f372e60821&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br><br>NameError: Hello<br></code></pre></td></tr></table></figure><h2 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h2><p>用户自定义异常类时，应该直接或者间接的继承自Exception类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, code, message</span>):<br>        self.code = code<br>        self.message = message<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">raise</span> CustomException(<span class="hljs-number">500</span>, <span class="hljs-string">&#x27;error&#x27;</span>)<br><span class="hljs-keyword">except</span> CustomException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e.code, e.message))<br><br><span class="hljs-comment"># 输出结果：500,error</span><br></code></pre></td></tr></table></figure><h2 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h2><p>在函数内引发异常时，如果异常没有被捕获到，那么它就会被传播到函数被调用的地方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>():<br>   ...:         <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>   ...: <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>():<br>   ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter b&#x27;</span>)<br>   ...:         a()  <span class="hljs-comment"># 函数a中引发的异常，会传递到父函数的调用出</span><br>   ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit b&#x27;</span>)  <span class="hljs-comment"># a中抛出异常之后传递到b，中止b的执行</span><br>   ...:     <br><br>In [<span class="hljs-number">3</span>]: b()<br>enter b<br>---------------------------------------------------------------------------<br>Exception                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">3</span>-9c619ddbd09b&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> b()<br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">2</span>-f99a565bd6f8&gt; <span class="hljs-keyword">in</span> b()<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>():<br>      <span class="hljs-number">2</span>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter b&#x27;</span>)<br>----&gt; <span class="hljs-number">3</span>         a()<br>      <span class="hljs-number">4</span>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit b&#x27;</span>)<br>      <span class="hljs-number">5</span> <br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">1</span>-6e68e60e93b5&gt; <span class="hljs-keyword">in</span> a()<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>():<br>----&gt; <span class="hljs-number">2</span>         <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br><br>Exception: Hello<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>异常处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器实现函数动态类型检查</title>
    <link href="/2017/02/16/python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/"/>
    <url>/2017/02/16/python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Python装饰器实现函数动态类型检查"><a href="#Python装饰器实现函数动态类型检查" class="headerlink" title="Python装饰器实现函数动态类型检查"></a>Python装饰器实现函数动态类型检查</h1><h2 id="函数动态类型检查的装饰器代码"><a href="#函数动态类型检查的装饰器代码" class="headerlink" title="函数动态类型检查的装饰器代码"></a>函数动态类型检查的装饰器代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> inspect<br><span class="hljs-keyword">import</span> functools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">typeHints</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">fn</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        sig = inspect.signature(fn)<br>        params = sig.parameters<br>        <span class="hljs-comment"># 处理kwargs：字典</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> kwargs:<br>            param = params[k]<br>            <span class="hljs-keyword">if</span> param.annotation != inspect._empty <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(v, param.annotation):<br>                <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;parameter &#123;&#125; requires &#123;&#125;, but got &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(k, param.annotation, <span class="hljs-built_in">type</span>(v)))<br>        <span class="hljs-comment"># 处理args：元组</span><br>        <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(args):<br>            param = <span class="hljs-built_in">list</span>(params.values())[i]<br>            <span class="hljs-keyword">if</span> param.annotation != inspect._empty <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(x, param.annotation):<br>                <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;parameter &#123;&#125; requires &#123;&#125;, but got &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(param.name, param.annotation, <span class="hljs-built_in">type</span>(x)))<br>        ret = fn(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrap<br><br><br><span class="hljs-meta">@typeHints</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-meta">@typeHints</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">x, y:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<span class="hljs-comment"># 输出结果为8</span><br><span class="hljs-built_in">print</span>(add1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<span class="hljs-comment"># 输出结果为3</span><br></code></pre></td></tr></table></figure><p>类型检查主要使用了inspect库。本次代码运行环境是python3.5.2。inspect库的使用方法在下面介绍。</p><span id="more"></span><h2 id="inspect模块"><a href="#inspect模块" class="headerlink" title="inspect模块"></a>inspect模块</h2><p>检查函数动态类型时，我们主要使用的是inspect库中的signature类，parameter类。可以使用help方法查看inspect的详细信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> inspect<br><span class="hljs-built_in">help</span>(inspect)<br></code></pre></td></tr></table></figure><p>inspect库的源代码见：&#x2F;home&#x2F;clg&#x2F;.pyenv&#x2F;versions&#x2F;3.5.2&#x2F;<strong>lib&#x2F;python3.5&#x2F;inspect.py</strong></p><p>这个库用来获取Python动态对象的有用信息，比如本次用到的注解。</p><h3 id="Signature类"><a href="#Signature类" class="headerlink" title="Signature类"></a>Signature类</h3><p>Signature是inspect模块的一个类，inspect模块的signature函数用来获取一个Signature对象，函数原型如下:</p><p><code>signature() - get a Signature object for the callable</code></p><p>Signature类有一个属性是OrderedDict类型的parameters，存储的是参数名称到参数对象（Parameter类的对象）的一个有序映射。</p><h3 id="Parameter类"><a href="#Parameter类" class="headerlink" title="Parameter类"></a>Parameter类</h3><p>Parameter类的对象主要用来组成signature()返回的Signature对象的parameters属性。Parameter类有两个常用的属性：</p><ul><li>name :str 参数的名称 </li><li>annotation 参数的注解，如果没有注解，则annotation为<code>Parameter.empty</code></li></ul><p>inspect模块示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-keyword">import</span> inspect<br>sig = inspect.signature(add)<br><span class="hljs-built_in">print</span>(sig.parameters)<br><span class="hljs-built_in">print</span>(sig.parameters[<span class="hljs-string">&#x27;x&#x27;</span>])<br><span class="hljs-built_in">print</span>(sig.parameters.values())<br><br><span class="hljs-comment"># 输出结果</span><br>OrderedDict([(<span class="hljs-string">&#x27;x&#x27;</span>, &lt;Parameter <span class="hljs-string">&quot;x:int&quot;</span>&gt;), (<span class="hljs-string">&#x27;y&#x27;</span>, &lt;Parameter <span class="hljs-string">&quot;y:int&quot;</span>&gt;)])<br>x:<span class="hljs-built_in">int</span><br>odict_values([&lt;Parameter <span class="hljs-string">&quot;x:int&quot;</span>&gt;, &lt;Parameter <span class="hljs-string">&quot;y:int&quot;</span>&gt;])<br></code></pre></td></tr></table></figure><p><code>odict_values</code>类似于list，但是不支持下表操作，因此需要用<code>list()</code>转化为list之后再做下表操作。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>inspect</tag>
      
      <tag>装饰器</tag>
      
      <tag>类型检查</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器</title>
    <link href="/2017/02/15/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2017/02/15/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python装饰器"><a href="#Python装饰器" class="headerlink" title="Python装饰器"></a>Python装饰器</h1><h2 id="引入装饰器"><a href="#引入装饰器" class="headerlink" title="引入装饰器"></a>引入装饰器</h2><p>如果想在一个函数执行前后执行一些别的代码，比如打印一点日志用来输出这个函数的调用情况那应该怎么做呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding=utf-8</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logger</span>(<span class="hljs-params">fn</span>):<span class="hljs-comment"># 函数作为参数即fn可以为任何参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<span class="hljs-comment"># 可变参数args和kwargs</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(fn.__name__))<br>        ret = fn(*args, **kwargs)<span class="hljs-comment"># 函数调用时的参数解构</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; called&#x27;</span>.<span class="hljs-built_in">format</span>(fn.__name__))<br>        <span class="hljs-keyword">return</span> ret<span class="hljs-comment"># 返回函数的返回值</span><br>    <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>logger_add = logger(add)<br><span class="hljs-built_in">print</span>(logger_add.__name__)<br><span class="hljs-built_in">print</span>(logger_add)<br>ret = logger_add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br><span class="hljs-comment">#输出结果：</span><br>wrap<br>&lt;function logger.&lt;<span class="hljs-built_in">locals</span>&gt;.wrap at <span class="hljs-number">0x7fba35f4fe18</span>&gt;<br>call add<br>add called<br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>也可以用以下方式来实现这种效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@logger                                                                                  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):                                                                            <br><span class="hljs-keyword">return</span> x + y                                                                         ret = add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)                                                                      <br><span class="hljs-built_in">print</span>(ret) <br><br><span class="hljs-comment"># 输出结果：</span><br>call add<br>add called<br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>这就是Python装饰器的一个简单使用</p><h2 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h2><p>装饰器是用于软件设计模式的名称。 装饰器可以动态地改变函数，方法或类的功能，而不必直接使用子类或改变被装饰的函数的源代码。Python装饰器是对Python语法的一种特殊改变，它允许我们更方便地修改函数，方法以及类。</p><p>当我们按照以下方式编写代码时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@logger</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>...<br></code></pre></td></tr></table></figure><p>和单独执行下面的步骤是一样的：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">def <span class="hljs-keyword">add</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> y):<br>...<br>logger_add <span class="hljs-operator">=</span> logger(<span class="hljs-keyword">add</span>)<br></code></pre></td></tr></table></figure><p>装饰器内部的代码一般会创建一个新的函数，利用<code>*args</code>和<code>**kwargs</code>来接受任意的参数，上述代码中的wrap()函数就是这样的。在这个函数内部，我们需要调用原来的输入函数（即被包装的函数，它是装饰器的输入参数）并返回它的结果。但是也可以添加任何想要添加的代码，比如在上述代码中输出函数的调用情况，也可以添加计时处理等等。这个新创建的wrap函数会作为装饰器的结果返回，取代了原来的函数。</p><p>所以<strong>在Python中，装饰器的参数是一个函数， 返回值是一个函数的函数</strong>。</p><h2 id="装饰器的示例：计时处理"><a href="#装饰器的示例：计时处理" class="headerlink" title="装饰器的示例：计时处理"></a>装饰器的示例：计时处理</h2><p>写一个装饰器，用来计算一个函数的执行时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timethis</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(fn.__name__, end - start)<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrap<br></code></pre></td></tr></table></figure><p>如果要对add函数计时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@timethis</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>ret = add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br><span class="hljs-comment"># 输出结果</span><br>add <span class="hljs-number">1.9073486328125e-06</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>如果要对sleep函数计时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@timethis</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">x</span>):<br>    time.sleep(x)<br><br>sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 输出结果</span><br>sleep <span class="hljs-number">3.003262519836426</span><br></code></pre></td></tr></table></figure><h2 id="保存被装饰函数的元信息"><a href="#保存被装饰函数的元信息" class="headerlink" title="保存被装饰函数的元信息"></a>保存被装饰函数的元信息</h2><h3 id="什么是函数的元信息"><a href="#什么是函数的元信息" class="headerlink" title="什么是函数的元信息"></a>什么是函数的元信息</h3><p>比如装饰器的名称，装饰器的doc等等。我们可以使用dir函数列出函数的所有元信息：<code>dir(sleep)</code>，输出结果如下</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;__annotations__</span>&#x27;, <span class="hljs-symbol">&#x27;__call__</span>&#x27;, <span class="hljs-symbol">&#x27;__class__</span>&#x27;, <span class="hljs-symbol">&#x27;__closure__</span>&#x27;, <span class="hljs-symbol">&#x27;__code__</span>&#x27;, <span class="hljs-symbol">&#x27;__defaults__</span>&#x27;, <span class="hljs-symbol">&#x27;__delattr__</span>&#x27;, <span class="hljs-symbol">&#x27;__dict__</span>&#x27;, <span class="hljs-symbol">&#x27;__dir__</span>&#x27;, <span class="hljs-symbol">&#x27;__doc__</span>&#x27;, <span class="hljs-symbol">&#x27;__eq__</span>&#x27;, <span class="hljs-symbol">&#x27;__format__</span>&#x27;, <span class="hljs-symbol">&#x27;__ge__</span>&#x27;, <span class="hljs-symbol">&#x27;__get__</span>&#x27;, <span class="hljs-symbol">&#x27;__getattribute__</span>&#x27;, <span class="hljs-symbol">&#x27;__globals__</span>&#x27;, <span class="hljs-symbol">&#x27;__gt__</span>&#x27;, <span class="hljs-symbol">&#x27;__hash__</span>&#x27;, <span class="hljs-symbol">&#x27;__init__</span>&#x27;, <span class="hljs-symbol">&#x27;__kwdefaults__</span>&#x27;, <span class="hljs-symbol">&#x27;__le__</span>&#x27;, <span class="hljs-symbol">&#x27;__lt__</span>&#x27;, <span class="hljs-symbol">&#x27;__module__</span>&#x27;, <span class="hljs-symbol">&#x27;__name__</span>&#x27;, <span class="hljs-symbol">&#x27;__ne__</span>&#x27;, <span class="hljs-symbol">&#x27;__new__</span>&#x27;, <span class="hljs-symbol">&#x27;__qualname__</span>&#x27;, <span class="hljs-symbol">&#x27;__reduce__</span>&#x27;, <span class="hljs-symbol">&#x27;__reduce_ex__</span>&#x27;, <span class="hljs-symbol">&#x27;__repr__</span>&#x27;, <span class="hljs-symbol">&#x27;__setattr__</span>&#x27;, <span class="hljs-symbol">&#x27;__sizeof__</span>&#x27;, <span class="hljs-symbol">&#x27;__str__</span>&#x27;, <span class="hljs-symbol">&#x27;__subclasshook__</span>&#x27;]<br></code></pre></td></tr></table></figure><p>可以看到有很多的元信息，我们比较常用的是<code>__name__</code>和<code>__doc__</code>这两个属性\</p><p>而且<code>__doc__</code>属性也就是函数的文档信息，可以通过help函数查看得到</p><h3 id="为什么要保存被装饰函数的元信息"><a href="#为什么要保存被装饰函数的元信息" class="headerlink" title="为什么要保存被装饰函数的元信息"></a>为什么要保存被装饰函数的元信息</h3><p>改写<strong>装饰器的应用1：计时处理</strong>中的sleep函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@timeit</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;This function is sleep.&#x27;&#x27;&#x27;</span><br>    time.sleep(x)<br><br>sleep(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(sleep.__name__)<br><span class="hljs-built_in">print</span>(sleep.__doc__)<br></code></pre></td></tr></table></figure><p>以上代码输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">0032713413238525</span><br><span class="hljs-attribute">wrap</span><br><span class="hljs-attribute">None</span><br></code></pre></td></tr></table></figure><p>可以发现sleep函数的<code>__name__</code>是wrap，而不是sleep，而<code>__doc__</code>属性为空，而不是sleep函数的docstring。也就是说<strong>经过装饰器装饰过后的函数的元信息发生了改变</strong>，这时候如果程序需要函数的元信息，那么就有问题了。</p><h3 id="如何保存被装饰函数的元信息"><a href="#如何保存被装饰函数的元信息" class="headerlink" title="如何保存被装饰函数的元信息"></a>如何保存被装饰函数的元信息</h3><h4 id="方案1：手动给被装饰函数的元信息赋值"><a href="#方案1：手动给被装饰函数的元信息赋值" class="headerlink" title="方案1：手动给被装饰函数的元信息赋值"></a>方案1：手动给被装饰函数的元信息赋值</h4><p>以<code>__name__</code>和<code>__doc__</code>这两个属性为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(end - start)<br>        <span class="hljs-keyword">return</span> ret<br>    wrap.__doc__ = fn.__doc__<span class="hljs-comment"># 手动赋值__doc__信息</span><br>    wrap.__name__ = fn.__name__<span class="hljs-comment"># 手动赋值__name__信息</span><br>    <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-meta">@timeit</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;This function is sleep.&#x27;&#x27;&#x27;</span><br>    time.sleep(x)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-comment"># print(dir(sleep))</span><br>    <span class="hljs-built_in">print</span>(sleep.__name__)<br>    <span class="hljs-built_in">print</span>(sleep.__doc__)<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">3.004547119140625<br><span class="hljs-built_in">sleep</span><br>This <span class="hljs-keyword">function</span> is <span class="hljs-built_in">sleep</span>.<br></code></pre></td></tr></table></figure><p>可以发现，<code>__name__</code>和<code>__doc__</code>这两个属性确实赋值成功了。</p><p>我们可以将元信息赋值的过程改写为函数，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">copy_properties</span>(<span class="hljs-params">src, dst</span>):<span class="hljs-comment"># 将元信息赋值的过程改成函数copy_properties</span><br>    dst.__name__ = src.__name__<br>    dst.__doc__ = src.__doc__<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(end - start)<br>        <span class="hljs-keyword">return</span> ret<br>    copy_properties(fn, wrap)<span class="hljs-comment"># 调用copy_properties函数修改元信息</span><br>    <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-meta">@timeit</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;This function is sleep.&#x27;&#x27;&#x27;</span><br>    time.sleep(x)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-comment"># print(dir(sleep))</span><br>    <span class="hljs-built_in">print</span>(sleep.__name__)<br>    <span class="hljs-built_in">print</span>(sleep.__doc__)<br></code></pre></td></tr></table></figure><p>这样修改后，同样可以解决问题。</p><p>继续修改copy_properties函数，使得copy_properties可以返回一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">copy_properties</span>(<span class="hljs-params">src</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_copy</span>(<span class="hljs-params">dst</span>):<span class="hljs-comment"># 内置一个_copy函数便于返回</span><br>        dst.__name__ = src.__name__<br>        dst.__doc__ = src.__doc__<br>    <span class="hljs-keyword">return</span> _copy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(end - start)<br>        <span class="hljs-keyword">return</span> ret<br>    copy_properties(fn)(wrap)<span class="hljs-comment"># 调用copy_properties函数</span><br>    <span class="hljs-keyword">return</span> wrap<br></code></pre></td></tr></table></figure><p>同样可以问题。</p><p>如果继续修改copy_properties函数，使得_copy函数是一个装饰器，传入dst，返回dst，修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">copy_properties</span>(<span class="hljs-params">src</span>):<span class="hljs-comment"># 先固定dst，传入src</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_copy</span>(<span class="hljs-params">dst</span>):<span class="hljs-comment"># 传入dst</span><br>        dst.__name__ = src.__name__<br>        dst.__doc__ = src.__doc__<br>        <span class="hljs-keyword">return</span> dst<span class="hljs-comment"># 返回dst</span><br>    <span class="hljs-keyword">return</span> _copy<span class="hljs-comment"># 返回一个装饰器</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">    @copy_properties(<span class="hljs-params">fn</span>)</span><span class="hljs-comment"># 带参数装饰器的使用方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(end - start)<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrap<br></code></pre></td></tr></table></figure><p>copy_properties在此处返回一个带参数的装饰器，因此可以直接按照装饰器的使用方法来装饰wrap函数，这个修改copy_properties函数的过程称为函数的柯里化。</p><h4 id="方案2：使用functools库的-wraps装饰器"><a href="#方案2：使用functools库的-wraps装饰器" class="headerlink" title="方案2：使用functools库的@wraps装饰器"></a>方案2：使用functools库的@wraps装饰器</h4><p>functools库的@wraps装饰器本质上就是copy_properties函数的高级版本：包含更多的函数元信息。首先查看wrap装饰器的帮助信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-built_in">help</span>(functools.wraps)<br></code></pre></td></tr></table></figure><p>wrap装饰器函数的原型是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wraps(wrapped, assigned=(<span class="hljs-string">&#x27;module&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;qualname&#x27;</span>, <span class="hljs-string">&#x27;doc&#x27;</span>, <span class="hljs-string">&#x27;annotations&#x27;</span>), updated=(<span class="hljs-string">&#x27;dict&#x27;</span>,))<br></code></pre></td></tr></table></figure><p>所以这个装饰器会复制module等元信息，但是也不是所有的元信息，并且会更新dict。</p><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> functools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">fn</span>)</span><span class="hljs-comment"># wraps装饰器的使用</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)<br>        end = time.time()<br>        <span class="hljs-built_in">print</span>(end - start)<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">x</span>):<br>    time.sleep(x)<br><br><span class="hljs-built_in">print</span>(sleep.__name__)<br><span class="hljs-built_in">print</span>(sleep.__doc__)<br></code></pre></td></tr></table></figure><h2 id="编写一个带参数的装饰器"><a href="#编写一个带参数的装饰器" class="headerlink" title="编写一个带参数的装饰器"></a>编写一个带参数的装饰器</h2><p>如果上述的timeit装饰器，我们需要输出执行时间超过若干秒（比如一秒）的函数的名称和执行时间，那么就需要给装饰器传入一个参数s，表示传入的时间间隔，默认为1s。</p><p>我们可以给写好的装饰器外面包一个函数timeitS，时间间隔s作为这个函数的参数传入，并且对内层的函数可见，然后这个函数返回写好的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> functools<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeitS</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">timeit</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">fn</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            start = time.time()<br>            ret = fn(*args, **kwargs)<br>            end = time.time()<br>            <span class="hljs-keyword">if</span> end - start &gt; s:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call &#123;&#125; takes &#123;&#125;s&#x27;</span>.<span class="hljs-built_in">format</span>(fn.__name__, end - start))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call &#123;&#125; takes &#123;&#125;s less than &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(fn.__name__, end - start, s))<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> wrap<br>    <span class="hljs-keyword">return</span> timeit<br><br><span class="hljs-meta">@timeitS(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">x</span>):<br>    time.sleep(x)<br><br>sleep(<span class="hljs-number">3</span>)<br>sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">call</span> sleep takes <span class="hljs-number">3</span>.<span class="hljs-number">001342535018921</span>s<br><span class="hljs-attribute">call</span> sleep takes <span class="hljs-number">1</span>.<span class="hljs-number">000471830368042</span>s less than <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>所以，我们可以将带参数的装饰器理解为：</p><ul><li>带参数的装饰器就是一个函数， 这个函数返回一个不带参数的装饰器</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>装饰器</tag>
      
      <tag>元信息</tag>
      
      <tag>柯里化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python IO</title>
    <link href="/2017/02/13/python-io/"/>
    <url>/2017/02/13/python-io/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-IO"><a href="#Python-IO" class="headerlink" title="Python IO"></a>Python IO</h1><h2 id="文件打开和关闭"><a href="#文件打开和关闭" class="headerlink" title="文件打开和关闭"></a>文件打开和关闭</h2><p>文件打开和关闭就是两个函数，一个open函数一个close函数</p><p><strong>open函数的原型</strong></p><p><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p><p>前面说open函数返回的是一个file-like对象，但是这个file-like对象并不是固定的，这个对象的类型会随着打开mode的变化而变化。</p><ol><li>以文本模式打开文件（’w’, ‘r’，’wt’，’rt’等），返回一个TextIOWrapper。 </li><li>当用二进制模式打开文件时，返回的对象也会变化。</li><li>在二进制读取模式，返回一个BufferedReader。</li><li>在二进制写模式和二进制追加模式，返回一个BufferedWriter。</li><li>在二进制读&#x2F;写模式下，返回一个BufferedRandom。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>)<span class="hljs-comment"># 直接open函数打开，文件不存在会FileNotFoundError</span><br>---------------------------------------------------------------------------<br>FileNotFoundError                         Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">1</span>-b6df97277b77&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>)<br><br>FileNotFoundError: [Errno <span class="hljs-number">2</span>] No such file <span class="hljs-keyword">or</span> directory: <span class="hljs-string">&#x27;./hello.py&#x27;</span><br><br>In [<span class="hljs-number">2</span>]: f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>)<span class="hljs-comment"># 创建文件之后就可以打开，返回一个file-like对象</span><br><br>In [<span class="hljs-number">3</span>]: f.read()<span class="hljs-comment"># 读出文件全部内容</span><br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&quot;#!/usr/bin/env python\n# coding=utf-8\nprint(&#x27;hello world&#x27;)\n&quot;</span><br><br>In [<span class="hljs-number">4</span>]: f.close()<span class="hljs-comment"># 关闭文件</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>文件读写主要是read和write及其变种，文件的读写依赖于open函数的mode参数。</p><h3 id="open函数的mode参数"><a href="#open函数的mode参数" class="headerlink" title="open函数的mode参数"></a>open函数的mode参数</h3><p>Mode具体含义如下</p><ul><li>‘r’ open for reading (default)</li><li>‘w’ open for writing, <strong>truncating the file first</strong></li><li>‘x’ create a new file and open it for writing</li><li>‘a’ open for writing, appending to the end of the file if it exists</li><li>‘b’ binary mode</li><li>‘t’ text mode (default)</li><li>‘+’ open a disk file for updating (reading and writing)</li><li>‘U’ universal newline mode (deprecated)</li></ul><p>说明：</p><ol><li>当mode&#x3D;’x’时，如果文件不存在，则会抛出异常 FileExistsError。</li><li>当mode&#x3D;’w’时，只要打开了文件，即使不写入内容，也会先清空文件。</li><li>当mode包含+时， 会增加额外的读写操作， 也就说原来是只读的，会增加可写的操作， 原来是只写的，会增加可读的操作，但是+不改变其他行为。</li></ol><h3 id="mode-x3D-t-amp-mode-x3D-b"><a href="#mode-x3D-t-amp-mode-x3D-b" class="headerlink" title="mode&#x3D;t&amp;mode&#x3D;b"></a>mode&#x3D;t&amp;mode&#x3D;b</h3><ul><li>mode&#x3D;t 按字符操作</li><li>mode&#x3D;b 按字节操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>, mode=<span class="hljs-string">&#x27;rt&#x27;</span>)<span class="hljs-comment"># mode=t 读入的内容是字符串</span><br><br>In [<span class="hljs-number">2</span>]: s = f.read()<br><br>In [<span class="hljs-number">3</span>]: s<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&quot;#!/usr/bin/env python\n# coding=utf-8\nprint(&#x27;hello world&#x27;)\n&quot;</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">type</span>(s)<span class="hljs-comment"># s是str类型的</span><br>Out[<span class="hljs-number">4</span>]: <span class="hljs-built_in">str</span><br><br>In [<span class="hljs-number">5</span>]: f.close()<br><br>In [<span class="hljs-number">6</span>]: f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>, mode=<span class="hljs-string">&#x27;rb&#x27;</span>)<span class="hljs-comment"># mode=b 读入的是bytes</span><br><br>In [<span class="hljs-number">7</span>]: s = f.read()<br><br>In [<span class="hljs-number">8</span>]: s<br>Out[<span class="hljs-number">8</span>]: <span class="hljs-string">b&quot;#!/usr/bin/env python\n# coding=utf-8\nprint(&#x27;hello world&#x27;)\n&quot;</span><br><br>In [<span class="hljs-number">9</span>]: <span class="hljs-built_in">type</span>(s)<br>Out[<span class="hljs-number">9</span>]: <span class="hljs-built_in">bytes</span><br></code></pre></td></tr></table></figure><h3 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h3><p>当打开文件的时候， 解释器会持有一个指针， 指向文件的某个位置，当我们读写文件的时候，总是从指针处开始向后操作，并且移动指针。当mode&#x3D;r时， 指针是指向0(文件开始)，当mode&#x3D;a时， 指针指向EOF(文件末尾)</p><p>和文件指针相关的两个函数是<code>tell</code>函数和<code>seek</code>函数</p><p><strong>tell函数</strong></p><p>返回当前流的位置，对于文件来说，就是文件流的位置，即文件指针的位置。</p><p><strong>seek函数</strong></p><p>改变文件流的位置，并返回新的绝对位置。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">seek(cookie, whence=<span class="hljs-number">0</span>, /) <span class="hljs-keyword">method</span> <span class="hljs-title function_">of</span> _<span class="hljs-title function_">io</span>.<span class="hljs-title function_">TextIOWrapper</span> <span class="hljs-title function_">instance</span><br></code></pre></td></tr></table></figure><p><strong>关于文件指针的总结</strong></p><p>当seek超出文件末尾， 不会有异常， tell也会超出文件末尾， 但是写数据的时候，还是会从文件末尾开始写</p><p>write 操作 从 min(EOF, tell())处开始</p><ul><li>文件指针按字节操作（无论是字符模式还是字节模式）</li><li>tell方法返回当前文件指针位置</li><li>seek方法移动文件指针</li><li>whence 参数 SEEK_SET(0) 从0开始向后移动offset个字节, SEEK_CUR(1) 从当前位置向后移动offset个字节, SEEK_END(2) 从EOF向后移动offset个字节</li><li>offset是整数</li><li><strong>当mode为t时， whence为SEEK_CUR或者SEEK_END时， offset只能为0</strong></li><li>文件指针不能为负数</li><li>读文件的时候从文件指针(pos)开始向后读</li><li>写文件的时候从min(EOF,pos)处开始向后写</li><li>以append模式打开的时候，无论文件指针在何处，都从EOF开始写</li></ul><h3 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h3><p>文件缓冲区由open函数的buffering参数决定，buffering表示缓冲方式，参数默认值为-1，表示文本模式和二进制模式都是采用默认的缓冲区。</p><p><strong>buffering&#x3D;-1</strong></p><ul><li>二进制模式： DEFAULT_BUFFER_SIZE</li><li>文本模式： DEFAULT_BUFFER_SIZE</li></ul><p><strong>buffering&#x3D;0</strong></p><ul><li>二进制模式：unbuffered</li><li>文本模式：不允许</li></ul><p><strong>buffering&#x3D;1</strong></p><ul><li>二进制模式： 1</li><li>文本模式： line buffering</li></ul><p><strong>buffering&gt;1</strong></p><ul><li>二进制模式：buffering</li><li>文本模式： DEFAULT_BUFFER_SIZE</li></ul><p><strong>总结</strong></p><ul><li><p>二进制模式： 判断缓冲区剩余位置是否足够存放当前字节，如果不能，先flush， 在把当前字节写入缓冲区，如果当前字节大于缓冲区大小， 直接flush。</p></li><li><p>文本模式： line buffering，遇到换行就flush， 非line buffering，如果当前字节加缓冲区中的字节，超出缓冲区大小，<strong>直接将缓冲区和当前字节全部flush</strong>。</p></li><li><p>flush和close可以强制刷新缓冲区。</p></li></ul><h2 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h2><p>上下文管理，会在离开时自动关闭文件， 但是不会开启新的作用域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    ...:     <span class="hljs-keyword">pass</span><br>    ...: <br><br>In [<span class="hljs-number">2</span>]: f.readable()<span class="hljs-comment"># 离开上下文管理后，文件已关闭，不可再进行I/O操作</span><br>---------------------------------------------------------------------------<br>ValueError                                Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">18</span>-97a5eee249a2&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> f.readable()<br><br>ValueError: I/O operation on closed file<br><br>In [<span class="hljs-number">3</span>]: f<br>Out[<span class="hljs-number">3</span>]: &lt;_io.TextIOWrapper name=<span class="hljs-string">&#x27;./hello.py&#x27;</span> mode=<span class="hljs-string">&#x27;r&#x27;</span> encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>&gt;<br><br>In [<span class="hljs-number">4</span>]: f.closed<span class="hljs-comment"># f已经关闭</span><br>Out[<span class="hljs-number">4</span>]: <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>上下文管理除了<code>with open(&#39;./hello.py&#39;) as f:</code>这种写法外，还有另外一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">21</span>]: f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./hello.py&#x27;</span>)<br><br>In [<span class="hljs-number">22</span>]: <span class="hljs-keyword">with</span> f:<br>    ...:     <span class="hljs-keyword">pass</span><br>    ...:<br></code></pre></td></tr></table></figure><h2 id="File-like对象"><a href="#File-like对象" class="headerlink" title="File-like对象"></a>File-like对象</h2><p>像<code>open()</code>函数返回的这种有个<code>read()</code>方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。常见的有StringIO和BytesIO。</p><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>StringIO顾名思义就是在内存中读写str。</p><p>要把str写入StringIO，我们需要先创建一个StringIO对象，然后项文件一样写入并读取。file支持的操作StringIO基本都是支持的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-built_in">help</span>(StringIO)<br><br><br>In [<span class="hljs-number">3</span>]: sio = StringIO()<span class="hljs-comment"># 创建StringIO对象，也可以用str来初始化StringIO</span><br><br>In [<span class="hljs-number">4</span>]: sio.write(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">11</span><br><br>In [<span class="hljs-number">5</span>]: sio.write(<span class="hljs-string">&#x27; !&#x27;</span>)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">2</span><br><br>In [<span class="hljs-number">6</span>]: sio.getvalue()<span class="hljs-comment"># getvalue()方法用于获得写入后的str。</span><br>Out[<span class="hljs-number">6</span>]: <span class="hljs-string">&#x27;hello world !&#x27;</span><br><br>In [<span class="hljs-number">7</span>]: sio.closed<br>Out[<span class="hljs-number">7</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">8</span>]: sio.readline()<br>Out[<span class="hljs-number">8</span>]: <span class="hljs-string">&#x27;&#x27;</span><br><br>In [<span class="hljs-number">9</span>]: sio.seekable()<br>Out[<span class="hljs-number">9</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">10</span>]: sio.seek(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<span class="hljs-comment"># 支持seek操作</span><br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">11</span>]: sio.readline()<br>Out[<span class="hljs-number">11</span>]: <span class="hljs-string">&#x27;hello world !&#x27;</span><br></code></pre></td></tr></table></figure><p>要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><br>In [<span class="hljs-number">2</span>]: sio = StringIO(<span class="hljs-string">&#x27;I\nlove\npython!&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sio.readlines():<br>   ...:     <span class="hljs-built_in">print</span>(line.strip())<br>   ...:     <br>I<br>love<br>python!<br></code></pre></td></tr></table></figure><h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>In [<span class="hljs-number">2</span>]: bio = BytesIO()<br><br>In [<span class="hljs-number">3</span>]: bio.write(<span class="hljs-string">b&#x27;abcd&#x27;</span>)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">4</span>]: bio.seek(<span class="hljs-number">0</span>)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">5</span>]: bio.read()<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-string">b&#x27;abcd&#x27;</span><br><br>In [<span class="hljs-number">6</span>]: bio.getvalue()<span class="hljs-comment"># getvalue 可以一次性独处全部内容，不管文件指针在哪里</span><br>Out[<span class="hljs-number">6</span>]: <span class="hljs-string">b&#x27;abcd&#x27;</span><br></code></pre></td></tr></table></figure><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>In [<span class="hljs-number">2</span>]: bio = BytesIO(<span class="hljs-string">b&#x27;abcd&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: bio.read()<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">b&#x27;abcd&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="路径操作pathlib"><a href="#路径操作pathlib" class="headerlink" title="路径操作pathlib"></a>路径操作pathlib</h2><p>路径操作有os.path和pathlib两种方式。</p><ul><li>os.path是已字符串的方式操作路径的：<code>import os</code></li><li>pathlib是面向对象设计的文件系统路径：<code>import pathlib</code></li></ul><p>pathlib在python3.2以上开始默认支持，在python2.7中如果要使用pathlib需要安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pathlib<br></code></pre></td></tr></table></figure><p>pathlib模块的源代码见：Lib&#x2F;pathlib.py</p><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p>pathlib目录的基本使用是pathlib模块中的Path这个类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> pathlib<span class="hljs-comment"># 引入pathlib这个模块</span><br><br>In [<span class="hljs-number">2</span>]: cwd = pathlib.Path(<span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-comment"># 使用pathlib模块的Path类初始化当前路径，参数是一个PurePath</span><br><br>In [<span class="hljs-number">3</span>]: cwd<span class="hljs-comment"># 返回值是一个PosixPath，如果是windows环境会返回一个WindowsPath</span><br>Out[<span class="hljs-number">3</span>]: PosixPath(<span class="hljs-string">&#x27;.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>通过<code>help(pathlib.Path)</code>可以查看到Path类的各个Methods。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">Help on <span class="hljs-keyword">class</span> <span class="hljs-title class_">Path</span> <span class="hljs-keyword">in</span> module pathlib:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Path</span>(<span class="hljs-title class_ inherited__">PurePath</span>)<br> |  PurePath represents a filesystem path <span class="hljs-keyword">and</span> offers operations which<br> |  don<span class="hljs-string">&#x27;t imply any actual filesystem I/O.  Depending on your system,</span><br><span class="hljs-string"> |  instantiating a PurePath will return either a PurePosixPath or a</span><br><span class="hljs-string"> |  PureWindowsPath object.  You can also instantiate either of these classes</span><br><span class="hljs-string"> |  directly, regardless of your system.</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  Method resolution order:</span><br><span class="hljs-string"> |      Path</span><br><span class="hljs-string"> |      PurePath</span><br><span class="hljs-string"> |      builtins.object</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  Methods defined here:</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  __enter__(self)</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  __exit__(self, t, v, tb)</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>目录操作的几个函数：</p><ul><li><code>is_dir(self)</code>：判断路径是否是目录</li><li><code>iterdir(self)</code>：生成当前路径下所有文件(包括文件夹)的生成器，但是不会yield ‘.’ 和’..’这两个路径</li><li><code>mkdir(self, mode=511, parents=False, exist_ok=False)</code>：删除当前目录，可以指定mode</li><li><code>rmdir(self)</code>：删除目录，并且目录必须为空，否则会报错</li></ul><p>使用示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: cwd.is_dir()<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">5</span>]: cwd.iterdir()<span class="hljs-comment"># iterdir函数返回的是一个生成器</span><br>Out[<span class="hljs-number">5</span>]: &lt;generator <span class="hljs-built_in">object</span> Path.iterdir at <span class="hljs-number">0x7f6727d926d0</span>&gt;<br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> cwd.iterdir():<span class="hljs-comment"># 不会生成&#x27;.&#x27; 和&#x27;..&#x27;</span><br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f))<br>   ...:     <span class="hljs-built_in">print</span>(f)<br>   ...:     <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pathlib.PosixPath&#x27;</span>&gt;<br>hello.py<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pathlib.PosixPath&#x27;</span>&gt;<br>aa.py<br><br>In [<span class="hljs-number">7</span>]: cwd.mkdir(<span class="hljs-string">&#x27;abc&#x27;</span>)<span class="hljs-comment"># pathlib的mkdir是路径对象的方法</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">7</span>-3b48dd61eb0f&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> cwd.mkdir(<span class="hljs-string">&#x27;abc&#x27;</span>)<br><br>/home/clg/.pyenv/versions/<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>/lib/python3<span class="hljs-number">.5</span>/pathlib.py <span class="hljs-keyword">in</span> mkdir(self, mode, parents, exist_ok)<br>   <span class="hljs-number">1212</span>         <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> parents:<br>   <span class="hljs-number">1213</span>             <span class="hljs-keyword">try</span>:<br>-&gt; <span class="hljs-number">1214</span>                 self._accessor.mkdir(self, mode)<br>   <span class="hljs-number">1215</span>             <span class="hljs-keyword">except</span> FileExistsError:<br>   <span class="hljs-number">1216</span>                 <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exist_ok <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> self.is_dir():<br><br>/home/clg/.pyenv/versions/<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>/lib/python3<span class="hljs-number">.5</span>/pathlib.py <span class="hljs-keyword">in</span> wrapped(pathobj, *args)<br>    <span class="hljs-number">369</span>         @functools.wraps(strfunc)<br>    <span class="hljs-number">370</span>         <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>(<span class="hljs-params">pathobj, *args</span>):<br>--&gt; <span class="hljs-number">371</span>             <span class="hljs-keyword">return</span> strfunc(<span class="hljs-built_in">str</span>(pathobj), *args)<br>    <span class="hljs-number">372</span>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">staticmethod</span>(wrapped)<br>    <span class="hljs-number">373</span> <br><br>TypeError: an integer <span class="hljs-keyword">is</span> required (got <span class="hljs-built_in">type</span> <span class="hljs-built_in">str</span>)<br><br>In [<span class="hljs-number">8</span>]: d = pathlib.Path(<span class="hljs-string">&#x27;./abc&#x27;</span>)<br><br>In [<span class="hljs-number">9</span>]: d.exists()<br>Out[<span class="hljs-number">9</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">10</span>]: d.mkdir(<span class="hljs-number">755</span>) <span class="hljs-comment"># 创建文件夹，但是755不等于0o755(8进制)</span><br><br>In [<span class="hljs-number">11</span>]: %ls<br>aa.py  abc/  hello.py<br><br>In [<span class="hljs-number">12</span>]: %ls -ld ./abc<br>d-wxrw---t. <span class="hljs-number">2</span> clg clg <span class="hljs-number">6</span> Feb <span class="hljs-number">13</span> <span class="hljs-number">21</span>:01 ./abc/<span class="hljs-comment"># mode指定有问题，所以权限不正常</span><br><br>In [<span class="hljs-number">13</span>]: d.rmdir()<br><br>In [<span class="hljs-number">14</span>]: d.exists()<br>Out[<span class="hljs-number">14</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">15</span>]: d.mkdir(<span class="hljs-number">0o755</span>)<span class="hljs-comment"># 使用8进制指定mode</span><br><br>In [<span class="hljs-number">16</span>]: %ls -ld ./abc<br>drwxr-xr-x. <span class="hljs-number">2</span> clg clg <span class="hljs-number">6</span> Feb <span class="hljs-number">13</span> <span class="hljs-number">21</span>:03 ./abc/<br></code></pre></td></tr></table></figure><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><p>主要是一些路径的通用操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">17</span>]: f = pathlib.Path(<span class="hljs-string">&#x27;./ab/cd/a.txt&#x27;</span>)<br><br>In [<span class="hljs-number">18</span>]: f.exists()<br>Out[<span class="hljs-number">18</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">19</span>]: f.is_file()<br>Out[<span class="hljs-number">19</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">20</span>]: f.is_absolute()<br>Out[<span class="hljs-number">20</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">21</span>]: f = pathlib.Path(<span class="hljs-string">&#x27;./hello.py&#x27;</span>)<br><br>In [<span class="hljs-number">22</span>]: f.is_file()<br>Out[<span class="hljs-number">22</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">23</span>]: f.is_absolute()<br>Out[<span class="hljs-number">23</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">24</span>]: f.absolute()<span class="hljs-comment"># 获取路径的绝对路径</span><br>Out[<span class="hljs-number">24</span>]: PosixPath(<span class="hljs-string">&#x27;/home/clg/workspace/subworkspace/hello.py&#x27;</span>)<br><br>In [<span class="hljs-number">25</span>]: f.chmod(<span class="hljs-number">0o755</span>)<span class="hljs-comment"># 改变路径的权限</span><br><br>In [<span class="hljs-number">26</span>]: %ls -ld ./hello.py<br>-rwxr-xr-x. <span class="hljs-number">1</span> clg clg <span class="hljs-number">58</span> Feb  <span class="hljs-number">8</span> <span class="hljs-number">13</span>:<span class="hljs-number">32</span> ./hello.py*<br><br>In [<span class="hljs-number">27</span>]: f.cwd()<span class="hljs-comment"># 返回一个新路径指向当前工作目录</span><br>Out[<span class="hljs-number">27</span>]: PosixPath(<span class="hljs-string">&#x27;/home/clg/workspace/subworkspace&#x27;</span>)<br><br>In [<span class="hljs-number">28</span>]: f.home()<br>Out[<span class="hljs-number">28</span>]: PosixPath(<span class="hljs-string">&#x27;/home/clg&#x27;</span>)<br><br>In [<span class="hljs-number">29</span>]: pathlib.Path(<span class="hljs-string">&#x27;~&#x27;</span>).expanduser()<span class="hljs-comment"># 将~转换成功绝对路径</span><br>Out[<span class="hljs-number">29</span>]: PosixPath(<span class="hljs-string">&#x27;/home/clg&#x27;</span>)<br><br>In [<span class="hljs-number">30</span>]: f.name()<span class="hljs-comment"># name是一个属性，不是一个方法</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">30</span>-f0ea48ccc8ff&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> f.name()<br><br>TypeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">callable</span><br><br>In [<span class="hljs-number">31</span>]: f.name<span class="hljs-comment"># 获取得到的是基本名称basename</span><br>Out[<span class="hljs-number">31</span>]: <span class="hljs-string">&#x27;hello.py&#x27;</span><br><br>In [<span class="hljs-number">32</span>]: f.home().name<br>Out[<span class="hljs-number">32</span>]: <span class="hljs-string">&#x27;clg&#x27;</span><br><br>In [<span class="hljs-number">33</span>]: f.owner()<span class="hljs-comment"># 获取属主</span><br>Out[<span class="hljs-number">33</span>]: <span class="hljs-string">&#x27;clg&#x27;</span><br><br>In [<span class="hljs-number">34</span>]: f.home().parent<br>Out[<span class="hljs-number">34</span>]: PosixPath(<span class="hljs-string">&#x27;/home&#x27;</span>)<br><br>In [<span class="hljs-number">35</span>]: f.parts<br>Out[<span class="hljs-number">35</span>]: (<span class="hljs-string">&#x27;hello.py&#x27;</span>,)<br><br>In [<span class="hljs-number">36</span>]: f.absolute().parts<span class="hljs-comment"># 获取路径的拆分</span><br>Out[<span class="hljs-number">36</span>]: (<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;clg&#x27;</span>, <span class="hljs-string">&#x27;workspace&#x27;</span>, <span class="hljs-string">&#x27;subworkspace&#x27;</span>, <span class="hljs-string">&#x27;hello.py&#x27;</span>)<br><br>In [<span class="hljs-number">37</span>]: f.root<span class="hljs-comment"># 获取根目录，但是&#x27;./hello.py&#x27;获取到的则是&#x27;.&#x27;</span><br>Out[<span class="hljs-number">37</span>]: <span class="hljs-string">&#x27;&#x27;</span><br><br>In [<span class="hljs-number">38</span>]: f.home().root<span class="hljs-comment"># 获取根目录</span><br>Out[<span class="hljs-number">38</span>]: <span class="hljs-string">&#x27;/&#x27;</span><br><br>In [<span class="hljs-number">39</span>]: f.suffix<span class="hljs-comment"># 获取后缀</span><br>Out[<span class="hljs-number">39</span>]: <span class="hljs-string">&#x27;.py&#x27;</span><br><br>In [<span class="hljs-number">40</span>]: f.stat()<span class="hljs-comment"># 类似os.stat()，返回路径的各项信息</span><br>Out[<span class="hljs-number">40</span>]: os.stat_result(st_mode=<span class="hljs-number">33261</span>, st_ino=<span class="hljs-number">34951327</span>, st_dev=<span class="hljs-number">64768</span>, st_nlink=<span class="hljs-number">1</span>, st_uid=<span class="hljs-number">1000</span>, st_gid=<span class="hljs-number">1000</span>, st_size=<span class="hljs-number">58</span>, st_atime=<span class="hljs-number">1486531928</span>, st_mtime=<span class="hljs-number">1486531926</span>, st_ctime=<span class="hljs-number">1486995977</span>)<br><br>In [<span class="hljs-number">41</span>]: f.stat().st_mode<span class="hljs-comment"># 获取stat()返回结果中的各个信息的方法：使用&#x27;.&#x27;</span><br>Out[<span class="hljs-number">41</span>]: <span class="hljs-number">33261</span><br><br>In [<span class="hljs-number">42</span>]: d = pathlib.Path(<span class="hljs-string">&#x27;..&#x27;</span>)<br><br>In [<span class="hljs-number">43</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.glob(*.py):<span class="hljs-comment"># rglob(self, pattern)参数是一个pattern</span><br>  File <span class="hljs-string">&quot;&lt;ipython-input-43-3fdfb8e408ac&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.glob(*.py):<br>                     ^<br>SyntaxError: invalid syntax<br><br><br>In [<span class="hljs-number">44</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.glob(<span class="hljs-string">&#x27;*.py&#x27;</span>):<span class="hljs-comment"># 返回当前路径下的通配文件</span><br>    ...:     <span class="hljs-built_in">print</span>(x)<br>    ...:     <br>../judge.py<br>../progress.py<br>../zipperMethod.py<br>../decorator.py<br><br>In [<span class="hljs-number">45</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.rglob(<span class="hljs-string">&#x27;*.py&#x27;</span>):<span class="hljs-comment"># 返回当前路径下及其子路径下的通配文件（递归）</span><br>    ...:     <span class="hljs-built_in">print</span>(x)<br>    ...:     <br>../judge.py<br>../progress.py<br>../zipperMethod.py<br>../decorator.py<br>../subworkspace/hello.py<br>../subworkspace/aa.py<br></code></pre></td></tr></table></figure><h3 id="文件复制移动删除"><a href="#文件复制移动删除" class="headerlink" title="文件复制移动删除"></a>文件复制移动删除</h3><p>使用<code>shutil</code>模块即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br></code></pre></td></tr></table></figure><ul><li>shutil.copyfileobj # 操作对象是文件对象</li><li>shutil.copyfile # 仅复制内容</li><li>shutil.copymode # 仅复制权限</li><li>shutil.copystat # 仅复制元数据</li><li>shutil.copy # 复制文件内容和权限 copyfile + copymode</li><li>shutil.copy2 # 复制文件内容和元数据 copyfile + copystat</li><li>shutil.copytree # 递归复制目录</li><li>shutil.rmtree # 用于递归删除目录</li><li>shutil.move # 具体实现依赖操作系统， 如果操作系统实现了 rename系统调用， 直接走rename系统调用，如果没实现，先使用copytree复制， 然后使用rmtree删除源文件</li></ul><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><ul><li>序列化： 对象转化为数据</li><li>反序列化： 数据转化为对象</li></ul><h3 id="Python私有协议pickle"><a href="#Python私有协议pickle" class="headerlink" title="Python私有协议pickle"></a>Python私有协议pickle</h3><p>pickle 是Python私有的序列化协议</p><p>pickle源代码见：lib&#x2F;python3.5&#x2F;pickle.py</p><p>主要函数</p><ul><li><code>dumps</code> 对象导出为数据，即序列化</li><li><code>loads</code> 数据载入为对象，即反序列化，反序列化一个对象时，必须存在此对象的类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> pickle<br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-comment"># 声明一个类A</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self</span>):<br>   ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>   ...:         <br><br>In [<span class="hljs-number">3</span>]: a = A()<span class="hljs-comment"># 定义类A的一个对象a</span><br><br>In [<span class="hljs-number">4</span>]: pickle.dumps(a)<span class="hljs-comment"># 对象导出为数据</span><br>Out[<span class="hljs-number">4</span>]: <span class="hljs-string">b&#x27;\x80\x03c__main__\nA\nq\x00)\x81q\x01.&#x27;</span><br><br>In [<span class="hljs-number">5</span>]: b = pickle.dumps(a)<br><br>In [<span class="hljs-number">6</span>]: pickle.loads(b)<span class="hljs-comment"># 数据导出为对象</span><br>Out[<span class="hljs-number">6</span>]: &lt;__main__.A at <span class="hljs-number">0x7f5dcdc71dd8</span>&gt;<br><br>In [<span class="hljs-number">7</span>]: a<br>Out[<span class="hljs-number">7</span>]: &lt;__main__.A at <span class="hljs-number">0x7f5dcdd28be0</span>&gt;<span class="hljs-comment"># 两个对象的地址不一样，但是两个对象的内容确实一样的</span><br><br>In [<span class="hljs-number">8</span>]: aa = pickle.loads(b)<br><br>In [<span class="hljs-number">9</span>]: a.<span class="hljs-built_in">print</span>()<span class="hljs-comment"># 原始对象的print函数</span><br>aaaa<br><br>In [<span class="hljs-number">10</span>]: aa.<span class="hljs-built_in">print</span>()<span class="hljs-comment"># 反序列化对象的print函数</span><br>aaaa<br></code></pre></td></tr></table></figure><h3 id="通用的json协议"><a href="#通用的json协议" class="headerlink" title="通用的json协议"></a>通用的json协议</h3><p>JSON格式支持的数据类型如下</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>在JavaScript中的双精度浮点格式</td></tr><tr><td>String</td><td>双引号的反斜杠转义的Unicode，<strong>对应python中的str</strong></td></tr><tr><td>Boolean</td><td>true 或 false</td></tr><tr><td>Array</td><td>值的有序序列，<strong>对应python中的list</strong></td></tr><tr><td>Value</td><td>它可以是一个字符串，一个数字，真的还是假（true&#x2F;false），空(null )等</td></tr><tr><td>Object</td><td>无序集合键值对，<strong>对应python中的dict</strong></td></tr><tr><td>Whitespace</td><td>可以使用任何一对中的令牌</td></tr><tr><td>null</td><td>empty</td></tr></tbody></table><p>使用示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> json<br><br>In [<span class="hljs-number">2</span>]: d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<br><br>In [<span class="hljs-number">3</span>]: json.dumps(d)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: [1, 2, 3]&#125;&#x27;</span><br><br>In [<span class="hljs-number">4</span>]: json.loads(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: [1, 2, 3]&#125;&#x27;</span>)<br>Out[<span class="hljs-number">4</span>]: &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<br></code></pre></td></tr></table></figure><p>json参考：<a href="https://www.cnblogs.com/SkySoot/archive/2012/04/17/2453010.html">JSON 数据格式</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO</tag>
      
      <tag>文件</tag>
      
      <tag>目录</tag>
      
      <tag>上下文</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python拉链法和开地址法实现字典</title>
    <link href="/2017/01/12/python%E6%8B%89%E9%93%BE%E6%B3%95%E5%92%8C%E5%BC%80%E5%9C%B0%E5%9D%80%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8/"/>
    <url>/2017/01/12/python%E6%8B%89%E9%93%BE%E6%B3%95%E5%92%8C%E5%BC%80%E5%9C%B0%E5%9D%80%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python拉链法和开地址法实现字典"><a href="#Python拉链法和开地址法实现字典" class="headerlink" title="Python拉链法和开地址法实现字典"></a>Python拉链法和开地址法实现字典</h1><p>Python字典(dictionary)是除列表之外python中最灵活的内置数据结构类型。列表是有序的对象结合，<strong>字典是无序的对象集合</strong>。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>在列表中使用下标索引可以快速的得到对应的值，那么我们需要做的有两件事情：</p><ul><li><strong>怎样把键计算出一个唯一值</strong></li><li><strong>怎样把这个唯一值均匀并且唯一的分布在长度固定的列表中</strong></li></ul><p><strong>怎样把键计算出一个唯一值</strong></p><blockquote><p> 因为字典的键是不可变的，可hash的，因此我们可以用hash函数计算key对应的唯一hash值。</p></blockquote><p><strong>怎样把这个唯一值均匀并且唯一的分布在长度固定的列表中</strong></p><blockquote><p>hash散列是可以把大数据集映射到定长数据集的算法，因此我们可以对上述计算出来的hash值进行散列。很明显散列之后会出现散列冲突。因此我们需要处理这种冲突一遍唯一值能够均匀唯一的分布。这个时候就有两种处理散列冲突的方法：拉链法和开地址法</p></blockquote><span id="more"></span><h2 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h2><p>把具有相同散列地址的<code>k,v</code>对放在同一个单链表中。下面实现两个函数</p><ul><li><code>put</code>函数：<code>put(slots, key, value)</code>，用来向字典中插入数据</li><li><code>get</code>函数：<code>get(slots, key)</code>，用来从字典中读取数据。</li></ul><p>还可以实现更多的函数，比如<code>dict.keys()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding=utf-8</span><br><br>slots = []<br>slotsNum = <span class="hljs-number">32</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    slots.append([])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">slots, key, value</span>):<br>    i = <span class="hljs-built_in">hash</span>(key) % slotsNum<br>    pos = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> pos, (k, v) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(slots[i]):<br>        <span class="hljs-keyword">if</span> key == k:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        slots[i].append((key, value))<br>    <span class="hljs-keyword">if</span> pos &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> pos &lt; <span class="hljs-built_in">len</span>(slots[i]):<br>        slots[i][pos] = (key, value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">slots, key</span>):<br>    i = <span class="hljs-built_in">hash</span>(key) % slotsNum<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> slots[i]:<br>        <span class="hljs-keyword">if</span> key == k:<br>            <span class="hljs-keyword">return</span> v<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> KeyError(key)<span class="hljs-comment"># 不存在时抛出异常</span><br><br>put(slots, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(get(slots, <span class="hljs-string">&#x27;a&#x27;</span>))<br>put(slots, <span class="hljs-string">&#x27;b&#x27;</span> ,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(get(slots, <span class="hljs-string">&#x27;b&#x27;</span>))<br>put(slots, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(get(slots, <span class="hljs-string">&#x27;a&#x27;</span>))<br></code></pre></td></tr></table></figure><p>下面将这两个函数封装成类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dict</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>        self.__solts__ = []<br>        self.num = num<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>            self.__solts__.append([])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, key, value</span>):<br>        i = <span class="hljs-built_in">hash</span>(key) % self.num<br>        <span class="hljs-keyword">for</span> p, (k, v) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.__solts__[i]):<br>            <span class="hljs-keyword">if</span> k == key:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            self.__solts__[i].append((key, value))<br>            <span class="hljs-keyword">return</span><br>        self.__solts__[i][p] = (key, value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, key</span>):<br>        i = <span class="hljs-built_in">hash</span>(key) % self.num<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> self.__solts__[i]:<br>            <span class="hljs-keyword">if</span> k == key:<br>                <span class="hljs-keyword">return</span> v<br>        <span class="hljs-keyword">raise</span> KeyError(key)<br><br>    <span class="hljs-comment"># keys函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">keys</span>(<span class="hljs-params">self</span>):<br>        ret = []<br>        <span class="hljs-keyword">for</span> solt <span class="hljs-keyword">in</span> self.__solts__:<br>            <span class="hljs-keyword">for</span> k, _ <span class="hljs-keyword">in</span> solt:<br>                ret.append(k)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>封装成类之后，使用方法和Python提供的<code>dict</code>就比较像了</p><h2 id="开地址法"><a href="#开地址法" class="headerlink" title="开地址法"></a>开地址法</h2><p>Python字典内部实现时处理散列冲突的方法就是开地址法，开地址法在后续补充</p><ul><li><p><a href="https://book.douban.com/annotation/23775810/">《Python源码剖析》的笔记-第五章 Python中的dict对象</a></p></li><li><p><a href="https://harveyqing.gitbooks.io/python-read-and-write/content/python_advance/python_dict_implementation.html">【译】Python字典实现</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>字典</tag>
      
      <tag>拉链法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python解析式</title>
    <link href="/2017/01/11/python%E8%A7%A3%E6%9E%90%E5%BC%8F/"/>
    <url>/2017/01/11/python%E8%A7%A3%E6%9E%90%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python解析式"><a href="#Python解析式" class="headerlink" title="Python解析式"></a>Python解析式</h1><p>在python中经常能够看到形如<code>ret = [x ** 2 for x in lst]</code>这样的赋值语句，对于从C++转到python的人不太容易理解这种for循环的使用，这就是python为了简洁而发明的新语法。python解析式有以下优点：</p><ul><li>代码简洁，可读性强</li><li>效率比普通迭代稍高</li></ul><p>python的解析式具体分为以下四种：</p><ul><li>列表解析式</li><li>生成器解析式</li><li>集合解析式</li><li>字典解析式</li></ul><p>下面分别介绍这四种解析式的使用。</p><span id="more"></span><h2 id="列表解析式"><a href="#列表解析式" class="headerlink" title="列表解析式"></a>列表解析式</h2><p><strong>列表解析式的形式</strong></p><ul><li><code>[expr for e in iterator]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: lst = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)<br><br>In [<span class="hljs-number">2</span>]: %%timeit<br>   ...: ret = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst]<br>   ...: <br><span class="hljs-number">100000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">5.28</span> µs per loop<br><br>In [<span class="hljs-number">3</span>]: %%timeit<br>   ...: ret = []<br>   ...: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst:<br>   ...:     ret.append(x ** <span class="hljs-number">2</span>)<br>   ...: <br><span class="hljs-number">100000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">6.09</span> µs per loop<span class="hljs-comment"># 耗时稍高</span><br></code></pre></td></tr></table></figure><p>可以发现效率是要稍高一点，最主要的还是代码简洁。</p><p><strong>列表解析式可以和<code>if</code>语句一起使用</strong></p><p>例如筛选出列表<code>lst</code>中的偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: ret = []<br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst:<br>   ...:     <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>   ...:         ret.append(x)<span class="hljs-comment"># 使用for循环</span><br>   ...:         <br><br>In [<span class="hljs-number">6</span>]: ret<br>Out[<span class="hljs-number">6</span>]: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><br>In [<span class="hljs-number">7</span>]: ret = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<span class="hljs-comment"># 使用列表解析式</span><br><br>In [<span class="hljs-number">8</span>]: ret<br>Out[<span class="hljs-number">8</span>]: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><p>列表解析式可以像<code>for</code>循环一样使用<code>if</code>语句。</p><ul><li>带多个if语句的，都可以转化为条件的逻辑运算， 所以一般来说，不会带多个if语句</li></ul><p>列表解析式的<code>for</code>语句可以嵌套。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">9</span>]: (x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>  File <span class="hljs-string">&quot;&lt;ipython-input-9-825e2443da8b&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    (x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>             ^<br>SyntaxError: invalid syntax<br><span class="hljs-comment"># 说明列表解析式一定要使用中括号括起来</span><br><br>In [<span class="hljs-number">10</span>]: [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)]<br>Out[<span class="hljs-number">10</span>]: <br>[(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">9</span>)]<br><br>In [<span class="hljs-number">11</span>]: ret = []<br><br>In [<span class="hljs-number">12</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    ...:     <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>):<br>    ...:         ret.append((x, y))<br>    ...:         <br><br>In [<span class="hljs-number">13</span>]: ret<br>Out[<span class="hljs-number">13</span>]: <br>[(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">0</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">2</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">3</span>, <span class="hljs-number">9</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">6</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">7</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">8</span>),<br> (<span class="hljs-number">4</span>, <span class="hljs-number">9</span>)]<br></code></pre></td></tr></table></figure><p><strong><code>if</code>语句的特殊用法</strong></p><p>单行if语句的写法和列表解析式很像。</p><p>表达式形式：<code>x if cond else y</code></p><p><code>if</code>和<code>else</code>必须同时存在。</p><p>下面以偶数求平方，奇数求立方为例进行演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">14</span>]: ret = []<br><br>In [<span class="hljs-number">15</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst:<br>    ...:     <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    ...:         ret.append(x ** <span class="hljs-number">2</span>)<br>    ...:     <span class="hljs-keyword">else</span>:<br>    ...:         ret.append(x ** <span class="hljs-number">3</span>)<br>    ...:         <br><br>In [<span class="hljs-number">16</span>]: ret<br>Out[<span class="hljs-number">16</span>]: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">27</span>, <span class="hljs-number">16</span>, <span class="hljs-number">125</span>, <span class="hljs-number">36</span>, <span class="hljs-number">343</span>, <span class="hljs-number">64</span>, <span class="hljs-number">729</span>]<br><br>In [<span class="hljs-number">17</span>]: x = <span class="hljs-number">3</span><br><span class="hljs-comment"># if特殊用法</span><br>In [<span class="hljs-number">18</span>]: x ** <span class="hljs-number">2</span> <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> x ** <span class="hljs-number">3</span><br>Out[<span class="hljs-number">18</span>]: <span class="hljs-number">27</span><br><br>In [<span class="hljs-number">19</span>]: <span class="hljs-number">3</span> <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> <span class="hljs-number">4</span><br>Out[<span class="hljs-number">19</span>]: <span class="hljs-number">3</span><br><span class="hljs-comment"># 如果采用if特殊用法配合列表解析式 x if cond else y for ...</span><br>In [<span class="hljs-number">20</span>]: [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> x ** <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst]<br>Out[<span class="hljs-number">20</span>]: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">27</span>, <span class="hljs-number">16</span>, <span class="hljs-number">125</span>, <span class="hljs-number">36</span>, <span class="hljs-number">343</span>, <span class="hljs-number">64</span>, <span class="hljs-number">729</span>]<br></code></pre></td></tr></table></figure><h2 id="生成器解析式"><a href="#生成器解析式" class="headerlink" title="生成器解析式"></a>生成器解析式</h2><p>列表解析式返回的是一个列表，而生成器解析式返回的是一个解析式。列表解析式的中括号变成小括号就是生成器解析式了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>)<br>Out[<span class="hljs-number">1</span>]: <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10000</span>)<br><br>In [<span class="hljs-number">2</span>]: g = (x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000000000</span>))<br><br>In [<span class="hljs-number">3</span>]: g<br>Out[<span class="hljs-number">3</span>]: &lt;generator <span class="hljs-built_in">object</span> &lt;genexpr&gt; at <span class="hljs-number">0x7f9f08a5f0a0</span>&gt;<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(g)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">next</span>(g)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-built_in">next</span>(g)<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>列表解析式和生成器解析式的选择</p><ul><li>需要用下标访问的时候，用列表解析式</li><li>只需要对结果迭代的时候，优先使用生成器解析式</li></ul><h2 id="集合解析式"><a href="#集合解析式" class="headerlink" title="集合解析式"></a>集合解析式</h2><p>将列表解析式的中括号换成大括号就是集合解析式了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: lst = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><br>In [<span class="hljs-number">2</span>]: s = &#123;x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst&#125;<br><br>In [<span class="hljs-number">3</span>]: s<br>Out[<span class="hljs-number">3</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<span class="hljs-comment"># 可见列表解析式生成的时候会去掉重复，符合集合要求</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">type</span>(s)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure><h2 id="字典解析式"><a href="#字典解析式" class="headerlink" title="字典解析式"></a>字典解析式</h2><p>字典解析式使用的也是大括号，但是和集合解析式不同的是在<code>expr</code>处使用的不是单个元素而是<code>k,v</code>对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: &#123;<span class="hljs-built_in">str</span>(x): x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)&#125;<br>Out[<span class="hljs-number">1</span>]: &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>&#125;<br></code></pre></td></tr></table></figure><p>这四种解析式中使用最广泛的还是列表解析式，会经常有一些很巧妙的用法。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>解析式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数</title>
    <link href="/2017/01/07/python%E5%87%BD%E6%95%B0/"/>
    <url>/2017/01/07/python%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><p>函数是Python里组织代码的最小单元，Python函数包含以下几个部分：</p><ul><li>定义函数</li><li>调用函数</li><li>参数</li><li>函数的返回值</li><li>函数的嵌套</li><li>作用域</li><li>函数执行流程</li><li>递归函数</li><li>匿名函数</li><li>生成器</li><li>高阶函数</li></ul><span id="more"></span><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):     <span class="hljs-comment"># 函数定义 def 表示定义一个函数， 紧接着是函数名 函数名后面用一对小括号列出参数列表，参数列表后面使用一个冒号开始函数体</span><br>    <span class="hljs-built_in">print</span>(x + y)   <span class="hljs-comment"># 函数体是正常的Python语句，可以包含任意结构</span><br>    <span class="hljs-keyword">return</span>  x + y  <span class="hljs-comment"># return 语句表示函数的返回值</span><br></code></pre></td></tr></table></figure><p>函数是有输入(参数)和输出(返回值)的代码单元， 把输入转化为输出</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>定义函数的时候,并不会执行函数体，　当调用函数的时候，才会执行其中的语句块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):     <span class="hljs-comment"># 函数定义 def 表示定义一个函数， 紧接着是函数名 函数名后面用一对小括号</span><br>   ...:         <span class="hljs-built_in">print</span>(x + y)   <span class="hljs-comment"># 函数体是正常的Python语句，可以包含任意结构</span><br>   ...:         <span class="hljs-keyword">return</span>  x + y  <span class="hljs-comment"># return 语句表示函数的返回值</span><br>   ...: <br><br>In [<span class="hljs-number">2</span>]: add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <span class="hljs-comment"># 函数使用函数名来调用，函数名后紧跟一对小括号，小括号里传入函数定义时的参数</span><br><span class="hljs-number">8</span><br>Out[<span class="hljs-number">2</span>]: <span class="hljs-number">8</span><br><br>In [<span class="hljs-number">3</span>]: add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) <span class="hljs-comment"># 传入参数必须和函数定义时的参数相匹配，如果不匹配，会抛出TypeError</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">3</span>-a11d83d1db7e&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> add(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><br>TypeError: add() takes <span class="hljs-number">2</span> positional arguments but <span class="hljs-number">3</span> were given<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">5</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>   ...:     ret = x + y<br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; + &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, y, x+y))<br>   ...:     <span class="hljs-keyword">return</span> ret<br>   ...: <br><br>In [<span class="hljs-number">6</span>]: add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">#参数按照定义的顺序传入，这样的传参方法叫做位置参数</span><br><span class="hljs-number">3</span> + <span class="hljs-number">5</span> = <span class="hljs-number">8</span><br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">8</span><br><br>In [<span class="hljs-number">7</span>]: add(y=<span class="hljs-number">3</span>, x=<span class="hljs-number">5</span>) <span class="hljs-comment">#参数按照定义时的变量名传递，这样的传参方法叫做关键字参数，关键字参数和顺序无关</span><br><span class="hljs-number">5</span> + <span class="hljs-number">3</span> = <span class="hljs-number">8</span><br>Out[<span class="hljs-number">7</span>]: <span class="hljs-number">8</span><br><br>In [<span class="hljs-number">8</span>]: add(<span class="hljs-number">5</span>, y=<span class="hljs-number">3</span>) <span class="hljs-comment"># 位置参数和关键字参数可以混用</span><br><span class="hljs-number">5</span> + <span class="hljs-number">3</span> = <span class="hljs-number">8</span><br>Out[<span class="hljs-number">8</span>]: <span class="hljs-number">8</span><br><br>In [<span class="hljs-number">9</span>]: add(x=<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<span class="hljs-comment"># 位置参数不能放在关键字参数的后面</span><br>  File <span class="hljs-string">&quot;&lt;ipython-input-9-165b39de39ac&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    add(x=<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>            ^<br>SyntaxError: positional argument follows keyword argument<br><br><br>In [<span class="hljs-number">10</span>]: add(<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>)<span class="hljs-comment"># python是动态语言，传入的参数类型可以不固定</span><br><span class="hljs-number">3</span> + <span class="hljs-number">5</span> = <span class="hljs-number">35</span><br>Out[<span class="hljs-number">10</span>]: <span class="hljs-string">&#x27;35&#x27;</span><br><br>In [<span class="hljs-number">11</span>]: add(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;5&#x27;</span>) <span class="hljs-comment"># python是强类型语言，传入的参数需要满足强类型要求，否则会抛出TypeError</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">11</span>-335767c130e1&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> add(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;5&#x27;</span>)<br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">5</span>-e720706d1634&gt; <span class="hljs-keyword">in</span> add(x, y)<br>      <span class="hljs-number">1</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>----&gt; <span class="hljs-number">2</span>     ret = x + y<br>      <span class="hljs-number">3</span>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; + &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, y, x+y))<br>      <span class="hljs-number">4</span>     <span class="hljs-keyword">return</span> ret<br><br>TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>参数可以有默认值，当一个参数有默认值时， 调用时如果不传递此参数，会使用默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">12</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>(<span class="hljs-params">x, y=<span class="hljs-number">1</span></span>):<span class="hljs-comment"># 参数y默认为1</span><br>    ...:     x += y<br>    ...:     <span class="hljs-keyword">return</span> x<br>    ...: <br><br>In [<span class="hljs-number">13</span>]: inc(<span class="hljs-number">3</span>)<span class="hljs-comment"># 传参时只需要传入x即可</span><br>Out[<span class="hljs-number">13</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">14</span>]: inc(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br>Out[<span class="hljs-number">14</span>]: <span class="hljs-number">5</span><br><br>In [<span class="hljs-number">15</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>(<span class="hljs-params">x=<span class="hljs-number">1</span>, y</span>):<span class="hljs-comment"># 默认参数不能再非默认参数之前</span><br>    ...:     <span class="hljs-keyword">return</span> x + y<br>  File <span class="hljs-string">&quot;&lt;ipython-input-15-993be842d592&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>(<span class="hljs-params">x=<span class="hljs-number">1</span>, y</span>):<br>           ^<br>SyntaxError: non-default argument follows default argument<br><br><br>In [<span class="hljs-number">16</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;&#x27;</span>, dbname=<span class="hljs-string">&#x27;test&#x27;</span></span>):<br>    ...:     <span class="hljs-keyword">pass</span><br>    ...: <br><br>In [<span class="hljs-number">17</span>]: connect(<span class="hljs-string">&#x27;192.168.110.13&#x27;</span>,password=<span class="hljs-string">&#x27;123456&#x27;</span>)<br></code></pre></td></tr></table></figure><p>参数默认值和关键字参数一起使用，会让代码非常简洁</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数两种形式：</p><ul><li>位置可变参数 ： 参数名前加<strong>一个</strong>星号， 构成<strong>元组</strong>， 传参只能以<strong>位置参数</strong>的形式</li><li>关键字可变参数： 参数名前加<strong>两个</strong>信号， 构成<strong>字典</strong>， 传参只能以<strong>关键字参数</strong>的形式</li></ul><p><strong>位置可变参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">18</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">*lst</span>):<br>    ...:     <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(lst))<br>    ...:     ret = <span class="hljs-number">0</span><br>    ...:     <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst:<br>    ...:         ret += x<br>    ...:     <span class="hljs-keyword">return</span> ret<br>    ...: <br><span class="hljs-comment"># 参数前加一个星号， 表示这个参数是可变的， 也就是可以接受任意多个参数, 这些参数将构成一个元组， 此时只能通过位置参数传参</span><br>In [<span class="hljs-number">19</span>]: <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br>Out[<span class="hljs-number">19</span>]: <span class="hljs-number">6</span><br><br></code></pre></td></tr></table></figure><p><strong>关键字可变参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">20</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">**kwargs</span>):<br>    ...:     <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(kwargs))<br>    ...:     <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> kwargs.items():<br>    ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; =&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(k, v))<br>    ...:         <br><span class="hljs-comment"># 参数前加两个星号， 表示这个参数是可变的，可以接受任意多个参数， 这些参数构成一个字典，此时只能通过关键字参数传参</span><br>In [<span class="hljs-number">21</span>]: connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,port=<span class="hljs-number">3306</span>)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br>host =&gt; <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>port =&gt; <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p><strong>位置可变参数和关键字可变参数混合使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">22</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    ...:         <span class="hljs-built_in">print</span>(args)<br>    ...:         <span class="hljs-built_in">print</span>(kwargs)<br>    ...:     <br><br>In [<span class="hljs-number">23</span>]: fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, a=<span class="hljs-number">4</span>, b=<span class="hljs-number">5</span>)<br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-comment"># 以上说明位置可变参数和关键字可变参数可以混合使用</span><br><br>In [<span class="hljs-number">24</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">**kwargs, *args</span>): <br>  File <span class="hljs-string">&quot;&lt;ipython-input-24-e42478d184b2&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">**kwargs, *args</span>):<br>                   ^<br>SyntaxError: invalid syntax<br><span class="hljs-comment"># 以上说明当位置可变参数和关键字可变参数一起使用时， 位置可变参数必须在前面</span><br></code></pre></td></tr></table></figure><p><strong>可变参数和普通参数混合使用</strong></p><p>普通参数可以和可变参数一起使用，但是传参的时候必须匹配，演示如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">25</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x, y, *args, **kwargs</span>):<br>    ...:         <span class="hljs-built_in">print</span>(x)<br>    ...:         <span class="hljs-built_in">print</span>(y)<br>    ...:         <span class="hljs-built_in">print</span>(args)<br>    ...:         <span class="hljs-built_in">print</span>(kwargs)<br>    ...:     <br><br>In [<span class="hljs-number">26</span>]: fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>)<br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>)<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">27</span>]: fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>()<br>&#123;&#125;<br><br>In [<span class="hljs-number">28</span>]: fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, x=<span class="hljs-number">1</span>)<span class="hljs-comment"># x有两个值，一个2，一个1，所以抛出TypeError</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">28</span>-0f8d856dee50&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, x=<span class="hljs-number">1</span>)<br><br>TypeError: fn() got multiple values <span class="hljs-keyword">for</span> argument <span class="hljs-string">&#x27;x&#x27;</span><br><br>In [<span class="hljs-number">29</span>]: fn(<span class="hljs-number">2</span>, y=<span class="hljs-number">3</span>)<br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>()<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>位置可变参数可以在普通参数之前， 但是在位置可变参数之后的普通参数变成了<strong>keyword-only</strong>参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">30</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">*args, x</span>):<br>    ...:     <span class="hljs-built_in">print</span>(args)<br>    ...:     <span class="hljs-built_in">print</span>(x)<br>    ...:     <br><br>In [<span class="hljs-number">31</span>]: fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">31</span>-fab2f7df0315&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><br>TypeError: fn() missing <span class="hljs-number">1</span> required keyword-only argument: <span class="hljs-string">&#x27;x&#x27;</span><br><br>In [<span class="hljs-number">32</span>]: fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, x=<span class="hljs-number">4</span>)<span class="hljs-comment"># 必须将位置可变参数之后的普通参数变成keyword-only，否则TypeError</span><br>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>关键字可变参数不允许在普通参数之前,演示如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">33</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">**kwargs, x=<span class="hljs-number">5</span></span>):<br>  File <span class="hljs-string">&quot;&lt;ipython-input-33-889f99c1c889&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">**kwargs, x=<span class="hljs-number">5</span></span>):<br>                   ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure><p>关于默认参数和可变参数的总结：</p><p><strong>通常</strong>来说：</p><ul><li>默认参数靠后</li><li>可变参数靠后</li><li>默认参数和可变参数一般不同时出现</li><li>当默认参数和可变参数一起出现的时候， 默认参数相当于普通参数</li></ul><h3 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h3><p>参数解构有两种形式</p><ul><li><strong>一个星号</strong> 解构的对象：可迭代对象 ，解构的结果：位置参数</li><li><strong>两个星号</strong> 解构的对象：字典 ，解构的结果：关键字参数</li></ul><p><strong>一个星号的情况</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">34</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    ...:         ret = x + y<br>    ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; + &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x, y, ret))<br>    ...:         <span class="hljs-keyword">return</span> ret<br>    ...: <br><br>In [<span class="hljs-number">35</span>]: add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-number">1</span> + <span class="hljs-number">2</span> = <span class="hljs-number">3</span><br>Out[<span class="hljs-number">35</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">36</span>]: add(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>)<br><span class="hljs-number">1</span> + <span class="hljs-number">2</span> = <span class="hljs-number">3</span><br>Out[<span class="hljs-number">36</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">37</span>]: t = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><br>In [<span class="hljs-number">38</span>]: add(t[<span class="hljs-number">0</span>], t[<span class="hljs-number">1</span>])<span class="hljs-comment"># 如果列表中的元素很多的时候，一个一个解开很不方便简洁</span><br><span class="hljs-number">1</span> + <span class="hljs-number">2</span> = <span class="hljs-number">3</span><br>Out[<span class="hljs-number">38</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">39</span>]: add(*t)<span class="hljs-comment"># 位置参数解构  加一个星号， 可以把可迭代对象解构成位置参数</span><br><span class="hljs-number">1</span> + <span class="hljs-number">2</span> = <span class="hljs-number">3</span><br>Out[<span class="hljs-number">39</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">40</span>]: add(*<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>))<br><span class="hljs-number">0</span> + <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br>Out[<span class="hljs-number">40</span>]: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>二个星号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">42</span>]: d = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;y&#x27;</span>:<span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">43</span>]: add(**d)<br><span class="hljs-number">1</span> + <span class="hljs-number">2</span> = <span class="hljs-number">3</span><br>Out[<span class="hljs-number">43</span>]: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>参数解构发生在函数调用时， 可变参数发生函数定义时，所以两者并不冲突</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">46</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">*args</span>):<span class="hljs-comment"># 可变参数发生在函数定义时</span><br>    ...:     ret = <span class="hljs-number">0</span><br>    ...:     <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args:<br>    ...:         ret += x<br>    ...:     <span class="hljs-keyword">return</span> ret<br>    ...: <br><br>In [<span class="hljs-number">47</span>]: <span class="hljs-built_in">sum</span>(*<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<span class="hljs-comment"># 参数解构发生在函数调用时</span><br>Out[<span class="hljs-number">47</span>]: <span class="hljs-number">45</span><br><br>In [<span class="hljs-number">48</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">**kwargs</span>):<br>    ...:     <span class="hljs-built_in">print</span>(kwargs)<br>    ...:     <br><br>In [<span class="hljs-number">49</span>]: fn(**&#123;<span class="hljs-string">&#x27;a-b&#x27;</span>:<span class="hljs-number">1</span>&#125;)<br>&#123;<span class="hljs-string">&#x27;a-b&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">50</span>]: fn(**&#123;<span class="hljs-number">123</span>:<span class="hljs-number">1</span>&#125;)<span class="hljs-comment"># 关键字参数解构， key必须是str</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">50</span>-3c8b8b3fdf0b&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> fn(**&#123;<span class="hljs-number">123</span>:<span class="hljs-number">1</span>&#125;)<br><br>TypeError: fn() keywords must be strings<br></code></pre></td></tr></table></figure><h3 id="keyword-only-参数"><a href="#keyword-only-参数" class="headerlink" title="keyword-only 参数"></a>keyword-only 参数</h3><p>使用方法参见：<a href="https://www.polarxiong.com/archives/Python-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E4%B8%AD%E5%8D%95%E4%B8%AA%E6%98%9F%E5%8F%B7%E7%9A%84%E6%84%8F%E6%80%9D-Keyword-Only-Arguments.html">Python: 函数参数列表中单个星号的意思，Keyword-Only Arguments</a></p><p>星号可以以一个参数的形式出现在函数声明中的参数列表中，但星号之后的所有参数都必须有关键字（keyword），这样在函数调用时，星号*之后的所有参数都必须以<code>keyword=value</code>的形式调用，而不能以位置顺序调用。</p><p>使用示例如下：也可参考上面链接中的示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">54</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">*, x</span>):<br>    ...:     <span class="hljs-built_in">print</span>(x)<br>    ...:     <br><br>In [<span class="hljs-number">55</span>]: fn(<span class="hljs-number">3</span>)<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">55</span>-f005f2a6106f&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> fn(<span class="hljs-number">3</span>)<br><br>TypeError: fn() takes <span class="hljs-number">0</span> positional arguments but <span class="hljs-number">1</span> was given<br><br>In [<span class="hljs-number">56</span>]: fn(x=<span class="hljs-number">3</span>)<br><span class="hljs-number">3</span><br><br>In [<span class="hljs-number">57</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x, *, y</span>):<br>    ...:     <span class="hljs-built_in">print</span>(x)<br>    ...:     <span class="hljs-built_in">print</span>(y)<br>    ...:     <br><br>In [<span class="hljs-number">58</span>]: fn(<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>)<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><br>In [<span class="hljs-number">59</span>]: fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">59</span>-c159019d3516&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>TypeError: fn() takes <span class="hljs-number">1</span> positional argument but <span class="hljs-number">2</span> were given<br></code></pre></td></tr></table></figure><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><ul><li>return 语句除了返回值之外，还会结束函数， return之后的语句将不会被执行</li><li>一个函数可以有多个return语句， 执行到哪个return由哪个return返回结果并结束函数</li><li>函数中 return可以提前结束循环</li><li>当函数没有return语句的时候，返回None</li><li>当函数需要返回多个值时， 可以用封装把返回值封装成一个元组</li><li>可以通过解构获取到多返回值</li><li>return None 可以简写为 return， 通常用于结束函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">63</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x</span>):<br>    ...:     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>    ...:         <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">3</span>:<br>    ...:             <span class="hljs-keyword">return</span> i<span class="hljs-comment"># return可以提前退出循环</span><br>    ...:     <span class="hljs-keyword">else</span>:<br>    ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not bigger than 3&#x27;</span>)<br>    ...:         <br><br>In [<span class="hljs-number">64</span>]: fn(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">not</span> bigger than <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">65</span>]: fn(<span class="hljs-number">10</span>)<br>Out[<span class="hljs-number">65</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">66</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    ...:     <span class="hljs-keyword">pass</span><span class="hljs-comment"># 没有return时返回的是None</span><br>    ...: <br><br>In [<span class="hljs-number">67</span>]: ret = fn()<br><br>In [<span class="hljs-number">68</span>]: ret<br><br>In [<span class="hljs-number">69</span>]: <span class="hljs-built_in">type</span>(ret)<br>Out[<span class="hljs-number">69</span>]: NoneType<br><br>In [<span class="hljs-number">70</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    ...:     <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>, <span class="hljs-number">5</span><span class="hljs-comment"># 当函数需要返回多个值时， 会把返回值封装成一个元组</span><br>    ...: <br><br>In [<span class="hljs-number">71</span>]: ret = fn()<br><br>In [<span class="hljs-number">72</span>]: <span class="hljs-built_in">type</span>(ret)<br>Out[<span class="hljs-number">72</span>]: <span class="hljs-built_in">tuple</span><br><br>In [<span class="hljs-number">73</span>]: x, y = fn()<span class="hljs-comment"># 可以通过解构获取多个返回值</span><br></code></pre></td></tr></table></figure><h2 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h2><p>函数可以嵌套使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">75</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">outter</span>():<br>    ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>    ...:         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;inner&#x27;</span>)<br>    ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;outter&#x27;</span>)<br>    ...:     inner()<br>    ...:     <br><br>In [<span class="hljs-number">76</span>]: outter()<br>outter<br>inner<br></code></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="变量的作用域为定义此变量的作用域"><a href="#变量的作用域为定义此变量的作用域" class="headerlink" title="变量的作用域为定义此变量的作用域"></a>变量的作用域为定义此变量的作用域</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">6</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(): <span class="hljs-comment"># 变量的作用域为定义此变量的作用域</span><br>   ...:         xx = <span class="hljs-number">1</span><br>   ...:         <span class="hljs-built_in">print</span>(xx)<br>   ...:     <br><br>In [<span class="hljs-number">7</span>]: fn()<br><span class="hljs-number">1</span><br><br>In [<span class="hljs-number">8</span>]: xx<br>---------------------------------------------------------------------------<br>NameError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">8</span>-102f5037fe64&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> xx<br><br>NameError: name <span class="hljs-string">&#x27;xx&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><p>表明变量的作用域就在fn函数之中</p><h3 id="上级作用域对下级作用域只读可见"><a href="#上级作用域对下级作用域只读可见" class="headerlink" title="上级作用域对下级作用域只读可见"></a>上级作用域对下级作用域只读可见</h3><p>不同作用域变量不可见， 但是下级作用域可以对上级作用域的变量只读可见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">9</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<span class="hljs-comment"># 上级作用域对下级作用域可见</span><br>   ...:     xx = <span class="hljs-number">1</span><br>   ...:     <span class="hljs-built_in">print</span>(xx)<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>   ...:         <span class="hljs-built_in">print</span>(xx)<br>   ...:     inner()<br>   ...:     <br><br>In [<span class="hljs-number">10</span>]: fn()<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><br>In [<span class="hljs-number">11</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<span class="hljs-comment"># 上级作用域对下级作用域只读可见</span><br>    ...:     xx = <span class="hljs-number">1</span><br>    ...:     <span class="hljs-built_in">print</span>(xx)<br>    ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>    ...:         xx = <span class="hljs-number">2</span><br>    ...:     inner()<br>    ...:     <span class="hljs-built_in">print</span>(xx)<br>    ...:     <br><br>In [<span class="hljs-number">12</span>]: fn()<br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><span class="hljs-comment"># 可以发现xx并没有被下级作用域修改</span><br></code></pre></td></tr></table></figure><h3 id="不要使用全局变量global"><a href="#不要使用全局变量global" class="headerlink" title="不要使用全局变量global"></a>不要使用全局变量global</h3><p><strong>除非你清楚的知道global会带来什么，并且明确的知道，非global不行， 否则不要使用global</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">13</span>]: xx = <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">14</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    ...:     <span class="hljs-keyword">global</span> xx<span class="hljs-comment"># global 可以提升变量作用域为全局变量</span><br>    ...:     xx += <span class="hljs-number">1</span><br>    ...:     <br><br>In [<span class="hljs-number">15</span>]: fn()<br><br>In [<span class="hljs-number">16</span>]: xx<br>Out[<span class="hljs-number">16</span>]: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h3><p><strong>闭包定义（Wikipedia）</strong>：在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性</p><p><strong>通俗理解</strong>：当某个函数被当成对象返回时，<strong>夹带了外部变量</strong>，就形成了一个闭包。</p><p>如果我们想实现一个无限增长的计数器，可以写一个counter函数，函数内部进行自增就行。假定我们按照以下写法：就会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">17</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>(): <br>    ...:     c = <span class="hljs-number">0</span><br>    ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>():<br>    ...:         c += <span class="hljs-number">1</span> <span class="hljs-comment"># c[0] = c[0] + 1</span><br>    ...:         <span class="hljs-keyword">return</span> c<br>    ...: <span class="hljs-keyword">return</span> inc<br>    ...: <br><br>In [<span class="hljs-number">18</span>]: f = counter()<br><br>In [<span class="hljs-number">19</span>]: f()<br>---------------------------------------------------------------------------<br>UnboundLocalError                         Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">19</span>-0ec059b9bfe1&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> f()<br><br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">17</span>-9dd4cd4942f6&gt; <span class="hljs-keyword">in</span> inc()<br>      <span class="hljs-number">2</span>     c = <span class="hljs-number">0</span><br>      <span class="hljs-number">3</span>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>():<br>----&gt; <span class="hljs-number">4</span>         c += <span class="hljs-number">1</span> <span class="hljs-comment"># c[0] = c[0] + 1</span><br>      <span class="hljs-number">5</span>         <span class="hljs-keyword">return</span> c<br>      <span class="hljs-number">6</span>     <span class="hljs-keyword">return</span> inc<br><br>UnboundLocalError: local variable <span class="hljs-string">&#x27;c&#x27;</span> referenced before assignment<br></code></pre></td></tr></table></figure><p>在 python 的函数内，可以直接引用外部变量，但不能改写外部变量，因此如果在闭包中直接改写父函数的变量，就会发生错误。比如上述程序直接改写父函数中的变量<code>c</code></p><p>python的闭包中如果想改写父函数的变量可以用可变容器实现，这也是python2实现的唯一方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>   ...:     c=[<span class="hljs-number">0</span>]<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>():<br>   ...:         c[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>   ...:         <span class="hljs-keyword">return</span> c[<span class="hljs-number">0</span>]<br>   ...:     <span class="hljs-keyword">return</span> inc<br>   ...: <br><br>In [<span class="hljs-number">2</span>]: f = counter()<br><br>In [<span class="hljs-number">3</span>]: f<br>Out[<span class="hljs-number">3</span>]: &lt;function __main__.counter.&lt;<span class="hljs-built_in">locals</span>&gt;.inc&gt;<br><br>In [<span class="hljs-number">4</span>]: f()<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">5</span>]: f()<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">2</span><br><br>In [<span class="hljs-number">6</span>]: f()<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="nonlocal关键字"><a href="#nonlocal关键字" class="headerlink" title="nonlocal关键字"></a>nonlocal关键字</h3><p>在python3中改写父变量还有一种方就是使用**<code>nonlocal</code>关键字**</p><p>nonlocal 关键字用于标记一个变量由他的上级作用域定义， 通过nonlocal标记的变量， 可读可写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">7</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>   ...:     c = <span class="hljs-number">0</span><br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>():<br>   ...:         <span class="hljs-keyword">nonlocal</span> c<br>   ...:         c += <span class="hljs-number">1</span><br>   ...:         <span class="hljs-keyword">return</span> c<br>   ...:     <span class="hljs-keyword">return</span> inc<br>   ...: <br><br>In [<span class="hljs-number">8</span>]: f = counter()<br><br>In [<span class="hljs-number">9</span>]: f<br>Out[<span class="hljs-number">9</span>]: &lt;function __main__.counter.&lt;<span class="hljs-built_in">locals</span>&gt;.inc&gt;<br><br>In [<span class="hljs-number">10</span>]: f()<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">11</span>]: f()<br>Out[<span class="hljs-number">11</span>]: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果上级没有定义nonlocal的变量，使用nonlocal时会抛出语法错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">12</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    ...:     <span class="hljs-keyword">nonlocal</span> xxx<br>  File <span class="hljs-string">&quot;&lt;ipython-input-12-2d2b8104e945&gt;&quot;</span>, line <span class="hljs-number">2</span><br>    <span class="hljs-keyword">nonlocal</span> xxx<br>SyntaxError: no binding <span class="hljs-keyword">for</span> <span class="hljs-keyword">nonlocal</span> <span class="hljs-string">&#x27;xxx&#x27;</span> found<br></code></pre></td></tr></table></figure><h3 id="函数的-defaults-属性"><a href="#函数的-defaults-属性" class="headerlink" title="函数的__defaults__属性"></a>函数的<code>__defaults__</code>属性</h3><p>可变参数和不可变参数的<code>__defaults__</code>属性不一样</p><p><strong>参数可变时</strong></p><p>当使用可变类型作为默认值参数默认值时，需要特别注意，会改变函数的<code>__default__</code>属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">xxyy=[]</span>):<br>   ...:     xxyy.append(<span class="hljs-number">1</span>)<br>   ...:     <span class="hljs-built_in">print</span>(xxyy)<br>   ...:     <br><br>In [<span class="hljs-number">2</span>]: fn()<br>[<span class="hljs-number">1</span>]<br><br>In [<span class="hljs-number">3</span>]: fn()<br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br><br>In [<span class="hljs-number">4</span>]: fn.__defaults__<span class="hljs-comment"># 参数是函数对象的属性</span><br>Out[<span class="hljs-number">4</span>]: ([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>],)<br><br>In [<span class="hljs-number">5</span>]: fn()<br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br><br>In [<span class="hljs-number">6</span>]: fn.__defaults__ <span class="hljs-comment"># 所有的函数参数封装成一个元组，第一个函数参数时列表在动态变化</span><br>Out[<span class="hljs-number">6</span>]: ([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],)<br></code></pre></td></tr></table></figure><p><strong>参数不可变时</strong></p><p>使用不可变类型作为默认值，函数体内不改变默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">8</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span></span>):<br>   ...:         x = <span class="hljs-number">3</span>   <span class="hljs-comment"># 赋值即定义</span><br>   ...:         y = <span class="hljs-number">3</span>   <span class="hljs-comment"># 赋值即定义</span><br>   ...:     <br><br>In [<span class="hljs-number">9</span>]: fn.__defaults__<br>Out[<span class="hljs-number">9</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br>In [<span class="hljs-number">10</span>]: fn()<br><br>In [<span class="hljs-number">11</span>]: fn.__defaults__<br>Out[<span class="hljs-number">11</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="可变参数时None的使用"><a href="#可变参数时None的使用" class="headerlink" title="可变参数时None的使用"></a>可变参数时None的使用</h3><p>通常如果使用一个可变类型作为默认参数时， 会使用None来代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">lst=<span class="hljs-literal">None</span></span>):<span class="hljs-comment"># 向一个列表中插入元素3，列表默认为None</span><br>   ...:     <span class="hljs-keyword">if</span> lst <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>   ...:         lst = []<br>   ...:     lst.append(<span class="hljs-number">3</span>)<br>   ...:     <span class="hljs-built_in">print</span>(lst)<br>   ...:     <br><br>In [<span class="hljs-number">2</span>]: fn.__defaults__<span class="hljs-comment"># 函数的__defaults__属性就是可变参数对应的None</span><br>Out[<span class="hljs-number">2</span>]: (<span class="hljs-literal">None</span>,)<br><br>In [<span class="hljs-number">3</span>]: fn()<br>[<span class="hljs-number">3</span>]<br><br>In [<span class="hljs-number">4</span>]: fn()<span class="hljs-comment"># 如果不传入值，函数执行的时候会先创建一个空列表，然后append</span><br>[<span class="hljs-number">3</span>]<br><br>In [<span class="hljs-number">5</span>]: fn.__defaults__<br>Out[<span class="hljs-number">5</span>]: (<span class="hljs-literal">None</span>,)<br><br>In [<span class="hljs-number">6</span>]: fn([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>In [<span class="hljs-number">7</span>]: fn.__defaults__<span class="hljs-comment"># 传入值之后，也不会改变函数的__default__属性</span><br>Out[<span class="hljs-number">7</span>]: (<span class="hljs-literal">None</span>,)<br></code></pre></td></tr></table></figure><h3 id="Python作用域、闭包、装饰器资料"><a href="#Python作用域、闭包、装饰器资料" class="headerlink" title="Python作用域、闭包、装饰器资料"></a>Python作用域、闭包、装饰器资料</h3><ul><li><p><a href="https://segmentfault.com/a/1190000004461404">Python 的闭包和装饰器</a></p></li><li><p><a href="https://segmentfault.com/a/1190000007321972">说说Python中的闭包 - Closure</a></p></li><li><p><a href="https://segmentfault.com/a/1190000006236947">Python Enclosing作用域、闭包、装饰器话聊上篇</a></p></li><li><p><a href="https://segmentfault.com/a/1190000006659077">Python Enclosing作用域、闭包、装饰器话聊下篇</a></p></li></ul><h2 id="函数执行流程"><a href="#函数执行流程" class="headerlink" title="函数执行流程"></a>函数执行流程</h2><p>函数的执行过程就是压栈和出栈的过程。具体如下</p><p>当调用函数的时候， 解释器会把当前现场压栈，然后开始执行被调函数， 被调函数执行完成，解释器弹出当前栈顶，恢复现场</p><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>递归函数的定义就是函数调用函数自身。</p><ul><li>递归函数必须要有退出条件</li><li>为了保护解释器， Python对最大递归深度有限制</li><li>绝大多数递归都可以转化为循环使用</li><li>尽量避免使用递归</li><li>sys模块中的getrecursionlimit和setrecursionlimit可以获取和设置最大递归深度</li></ul><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">1</span><br>Out[<span class="hljs-number">1</span>]: &lt;function __main__.&lt;<span class="hljs-keyword">lambda</span>&gt;&gt;<br></code></pre></td></tr></table></figure><p>匿名函数有以下特点</p><ul><li>lambda来定义</li><li>参数列表不需要用小括号</li><li>冒号不是用来开启新语句块</li><li>没有return，最后一个表达式的值即返回值</li><li>匿名函数（lambda表达式）只能写在一行上，所以也叫单行函数</li></ul><p>匿名函数的好处是</p><ul><li>函数没有名字，不必担心函数名冲突</li><li>匿名函数也是一个函数对象，可以把匿名函数返回给一个变量，再利用变量调用函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">1</span><br>Out[<span class="hljs-number">1</span>]: &lt;function __main__.&lt;<span class="hljs-keyword">lambda</span>&gt;&gt;<br><br>In [<span class="hljs-number">2</span>]: f = <span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">1</span><span class="hljs-comment"># 直接把lambda函数返回给变量f</span><br><br>In [<span class="hljs-number">3</span>]: f(<span class="hljs-number">3</span>)<span class="hljs-comment"># 由变量f调用函数</span><br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">4</span>]: f(<span class="hljs-number">5</span>)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">6</span><br><br>In [<span class="hljs-number">5</span>]: (<span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)<span class="hljs-comment"># 第一对括号用来改变优先级 第二对括号表示函数调用</span><br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">6</span><br><br>In [<span class="hljs-number">6</span>]: (<span class="hljs-keyword">lambda</span> : <span class="hljs-number">1</span>)()<span class="hljs-comment"># lambda表示式参数可以为空</span><br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">7</span>]: (<span class="hljs-keyword">lambda</span> x, y: x + y)(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<span class="hljs-comment"># lambda表达式的位置参数</span><br>Out[<span class="hljs-number">7</span>]: <span class="hljs-number">8</span><br><br>In [<span class="hljs-number">8</span>]: (<span class="hljs-keyword">lambda</span> *args: args)(*<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<span class="hljs-comment"># lambda表达式的位置可变参数</span><br>Out[<span class="hljs-number">8</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">9</span>]: (<span class="hljs-keyword">lambda</span> *args, **kwargs: <span class="hljs-built_in">print</span>(args, kwargs))(*<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>), **&#123;<span class="hljs-built_in">str</span>(x):x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-comment"># lambda表达式的位置可变参数和关键字可变参数</span><br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>) &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">10</span>]: (<span class="hljs-keyword">lambda</span> *, x: x)(x=<span class="hljs-number">3</span>)<span class="hljs-comment"># *号后面的位置参数必须使用关键字参数</span><br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><blockquote><p>普通函数所支持的参数的变化，匿名函数都支持</p></blockquote><p>匿名函数的常见用法：通常用于高阶函数的参数， 当此函数非常短小的时候，就适合使用匿名函数</p><p>比如匿名函数可以作为<code>sorted</code>函数的自定义键函数（custom key function）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">11</span>]: <span class="hljs-built_in">help</span>(<span class="hljs-built_in">sorted</span>)<br>    Help on built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">sorted</span> <span class="hljs-keyword">in</span> module builtins:<br><br><span class="hljs-built_in">sorted</span>(iterable, key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br>    Return a new <span class="hljs-built_in">list</span> containing <span class="hljs-built_in">all</span> items <span class="hljs-keyword">from</span> the iterable <span class="hljs-keyword">in</span> ascending order.<br><br>    A custom key function can be supplied to customise the sort order, <span class="hljs-keyword">and</span> the<br>    reverse flag can be <span class="hljs-built_in">set</span> to request the result <span class="hljs-keyword">in</span> descending order.<br><br>In [<span class="hljs-number">12</span>]: <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><br>In [<span class="hljs-number">13</span>]: point = namedtuple(<span class="hljs-string">&#x27;point&#x27;</span>,[<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>])<span class="hljs-comment"># 定义命名元组point</span><br><br>In [<span class="hljs-number">14</span>]: points = [point(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), point(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), point(<span class="hljs-number">8</span>, <span class="hljs-number">9</span>)]<br><br>In [<span class="hljs-number">15</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">getY</span>(<span class="hljs-params">point</span>):<br>    ...:     <span class="hljs-keyword">return</span> point.y<br>    ...: <br><br>In [<span class="hljs-number">16</span>]: <span class="hljs-built_in">sorted</span>(points, key=getY)<span class="hljs-comment"># 简短的函数可以作为自定义键函数</span><br>Out[<span class="hljs-number">16</span>]: [point(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>), point(x=<span class="hljs-number">4</span>, y=<span class="hljs-number">3</span>), point(x=<span class="hljs-number">8</span>, y=<span class="hljs-number">9</span>)]<br><br>In [<span class="hljs-number">17</span>]: <span class="hljs-built_in">sorted</span>(points, key=<span class="hljs-keyword">lambda</span> x: x.y)<span class="hljs-comment"># lambda表示也可以作为自定义键函数</span><br>Out[<span class="hljs-number">17</span>]: [point(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>), point(x=<span class="hljs-number">4</span>, y=<span class="hljs-number">3</span>), point(x=<span class="hljs-number">8</span>, y=<span class="hljs-number">9</span>)]<br></code></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="高阶函数的定义"><a href="#高阶函数的定义" class="headerlink" title="高阶函数的定义"></a>高阶函数的定义</h3><p>高阶函数英文叫Higher-order function。</p><p>在数学和计算机科学中，<strong>高阶函数</strong>是至少满足下列一个条件的函数：</p><ul><li>接受一个或多个函数作为输入：通常用于大多数逻辑固定，少部分逻辑不固定的场景</li><li>输出一个函数：函数作为返回值： 通常是用于闭包的场景， 需要封装一些变量</li></ul><p>常见的高阶函数有map,reduce,filter</p><h3 id="高阶函数-插入排序"><a href="#高阶函数-插入排序" class="headerlink" title="高阶函数:插入排序"></a>高阶函数:插入排序</h3><p>插入排序时，排序顺序分为升序和降序，我们可以使用一个函数作为插入排序函数的参数来控制是升序还是降序。</p><p>首先看一下按照升序插入排序，然后再改进成升序降序可控的插入排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertSort</span>(<span class="hljs-params"><span class="hljs-built_in">iter</span></span>):<br>    ret = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span>:<br>        <span class="hljs-keyword">for</span> i, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ret):<br>            <span class="hljs-keyword">if</span> x &lt; y:<span class="hljs-comment"># 修改处</span><br>                ret.insert(i, x)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            ret.append(x)<br>    <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>如果想让这个函数降序排序，则只需要修改代码中的注释处，改成<code>x &gt; y</code>即可</p><p>如果传入一个函数来控制if后面的bool值，则就实现了通过参数控制升降了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertSort</span>(<span class="hljs-params"><span class="hljs-built_in">iter</span>, cmp = <span class="hljs-keyword">lambda</span> x, y: x &lt; y</span>):<br>    ret = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span>:<br>        <span class="hljs-keyword">for</span> i, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ret):<br>            <span class="hljs-keyword">if</span> cmp(x, y):<br>                ret.insert(i, x)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            ret.append(x)<br>    <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>这个函数就默认为升序排序了，但是可以传入一个比较函数变成降序，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = insertSort([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>],<span class="hljs-keyword">lambda</span> x, y: x &gt; y)<br></code></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map()</code>函数原型：**<code>map(func, *iterables) --&gt; map object</code>**</p><p><code>map()</code>函数接收两个参数，一个是函数<code>func</code>，一个是可迭代对象<code>Iterable</code>，<code>map</code>将传入的函数依次作用到可迭代对象的每个元素，并把结果放入**<code>map对象</code>**这个迭代器中。所以<code>map</code>函数是高阶函数。</p><p><code>map</code>类中存在<code>__iter__</code>和<code>__next__</code>函数</p><p><strong>map使用示例</strong></p><p>把list中的所有数字的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<span class="hljs-comment"># 定义平方函数f</span><br>   ...:         <span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br>   ...: <br><br>In [<span class="hljs-number">2</span>]: ret = <span class="hljs-built_in">map</span>(f, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<span class="hljs-comment"># 函数f和列表作为map的参数</span><br><br>In [<span class="hljs-number">3</span>]: ret<span class="hljs-comment"># map的返回值只是一个返回值</span><br>Out[<span class="hljs-number">3</span>]: &lt;<span class="hljs-built_in">map</span> at <span class="hljs-number">0x7f2d539a7470</span>&gt;<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(ret)<span class="hljs-comment"># 可以用next方法输出map的结果</span><br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">next</span>(ret)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">6</span>]: lst = <span class="hljs-built_in">list</span>(ret)<span class="hljs-comment"># 也可以用list函数计算出所有的值</span><br><br>In [<span class="hljs-number">7</span>]: lst<br>Out[<span class="hljs-number">7</span>]: [<span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>]<br></code></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>map</code>函数是<code>map</code>类的函数，但是reduce函数属于<code>functools</code>包的<code>reduce</code>模块中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br></code></pre></td></tr></table></figure><p>然后可以使用<code>help</code>方法查看<code>reduce</code>函数的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(reduce)<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Help <span class="hljs-keyword">on</span> <span class="hljs-title">built-in</span> <span class="hljs-title">function</span> <span class="hljs-title">reduce</span> <span class="hljs-title">in</span> <span class="hljs-title">module</span> <span class="hljs-title">_functools</span>:<br><br>reduce(...)<br>    reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>, <span class="hljs-title">sequence</span>[, <span class="hljs-title">initial</span>]) -&gt; <span class="hljs-title">value</span></span><br><br>    Apply <span class="hljs-keyword">a</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">of</span> <span class="hljs-title">two</span> <span class="hljs-title">arguments</span> <span class="hljs-title">cumulatively</span> <span class="hljs-title">to</span> <span class="hljs-title">the</span> <span class="hljs-title">items</span> <span class="hljs-title">of</span> <span class="hljs-title">a</span> <span class="hljs-title">sequence</span>,</span><br>    <span class="hljs-built_in">from</span> left <span class="hljs-built_in">to</span> <span class="hljs-literal">right</span>, so <span class="hljs-keyword">as</span> <span class="hljs-built_in">to</span> reduce <span class="hljs-keyword">the</span> sequence <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> single <span class="hljs-built_in">value</span>.<br>    For example, reduce(lambda x, y: x+y, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) calculates<br>    ((((<span class="hljs-number">1</span>+<span class="hljs-number">2</span>)+<span class="hljs-number">3</span>)+<span class="hljs-number">4</span>)+<span class="hljs-number">5</span>).  If initial is present, <span class="hljs-keyword">it</span> is placed <span class="hljs-keyword">before</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">items</span><br>    <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> sequence <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> calculation, <span class="hljs-keyword">and</span> serves <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> default when <span class="hljs-keyword">the</span><br>    sequence is <span class="hljs-literal">empty</span>.<br></code></pre></td></tr></table></figure><p><strong>reduce使用示例</strong></p><ul><li>输出1到10的和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>): <br>    <span class="hljs-keyword">return</span> x + y<br><span class="hljs-built_in">print</span>(reduce(add, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)))<br></code></pre></td></tr></table></figure><p>输出结果为55</p><ul><li>把字符串转化为<code>int</code>，不适用<code>int()</code>函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">str2int</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">char2num</span>(<span class="hljs-params">c</span>):<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span> ,<span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-number">9</span>&#125;[c]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> * x + y <br>    <span class="hljs-keyword">return</span> reduce(f, <span class="hljs-built_in">map</span>(char2num, s))<br></code></pre></td></tr></table></figure><blockquote><p>str2int(‘1234321’)  &#x3D;&gt; 1234321</p></blockquote><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>help(filter)</code>之后可以发现<code>filter</code>是一个类，其中有一个<code>filter</code>函数，原型如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">filter</span>(function <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span>, iterable) --&gt; <span class="hljs-built_in">filter</span> <span class="hljs-built_in">object</span><br></code></pre></td></tr></table></figure><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。返回值也是一个迭代器。</p><p><strong>filter使用示例</strong></p><p>使用filter筛选出list中的回文数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_palindrome</span>(<span class="hljs-params">n</span>):<br>    m = <span class="hljs-built_in">str</span>(n)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)//<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> m[i] != m[<span class="hljs-built_in">len</span>(m) - i -<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(is_palindrome, [<span class="hljs-number">12321</span>, <span class="hljs-number">194</span>, <span class="hljs-number">13431</span>]))<br><span class="hljs-built_in">print</span>(lst)<br><span class="hljs-comment"># 结果: [12321, 13431]</span><br></code></pre></td></tr></table></figure><p>所以<code>filter()</code>函数用于过滤序列，重点在于选择一个正确的筛选函数。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>带yield语句的函数称之为生成器函数， 生成器函数的返回值是生成器</p><ul><li>生成器函数执行的时候，不会执行函数体</li><li>当next生成器的时候， 当前代码执行到之后的第一个yield，会弹出值，并且暂停函数</li><li>当再次next生成器的时候，从上次暂停处开始往下执行</li><li>当没有多余的yield的时候，会抛出StopIteration异常，异常的value是函数的返回值</li></ul><h3 id="生成器的基本形式"><a href="#生成器的基本形式" class="headerlink" title="生成器的基本形式"></a>生成器的基本形式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>():<br>    ...:     <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    ...:         <span class="hljs-keyword">yield</span> x<span class="hljs-comment"># 弹出x</span><br>    ...:         <br><br>In [<span class="hljs-number">2</span>]: r = g()<span class="hljs-comment"># 函数调用完成之后函数现场并没有被销毁</span><br><br>In [<span class="hljs-number">3</span>]: r<br>Out[<span class="hljs-number">3</span>]: &lt;generator <span class="hljs-built_in">object</span> g at <span class="hljs-number">0x7f0e18543990</span>&gt;<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(r)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">next</span>(r)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> r:<br>    ...:     <span class="hljs-built_in">print</span>(x)<br>    ...:     <br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="生成器的执行顺序"><a href="#生成器的执行顺序" class="headerlink" title="生成器的执行顺序"></a>生成器的执行顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>():<br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>   ...:     <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>   ...:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>   ...:     <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>   ...:     <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>   ...: <br><br>In [<span class="hljs-number">2</span>]: r = g()<span class="hljs-comment"># 执行生成器函数的时候函数并没有被执行 </span><br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">next</span>(r)<span class="hljs-comment"># 执行到第一个yield就停止执行</span><br>a<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(r)<span class="hljs-comment"># 执行到第二个yield就停止执行</span><br>b<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">2</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">next</span>(r)<span class="hljs-comment"># 从第二个yield开始，当没有更多yield的时候，抛出StopIteration异常，异常的值正好是return的返回值</span><br>---------------------------------------------------------------------------<br>StopIteration                             Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">5</span>-0b5056469c9c&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-built_in">next</span>(r)<br><br>StopIteration: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="生成器的应用"><a href="#生成器的应用" class="headerlink" title="生成器的应用"></a>生成器的应用</h3><p><strong>计数器第一种形式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>   ...:     x = <span class="hljs-number">0</span><br>   ...:     <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   ...:         x += <span class="hljs-number">1</span><br>   ...:         <span class="hljs-keyword">yield</span> x<span class="hljs-comment"># 每次将+1之后的x弹出</span><br>   ...:         <br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">inc</span>(<span class="hljs-params">c</span>):<br>   ...:     <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span>(c)<br>   ...: <br><br>In [<span class="hljs-number">3</span>]: c = counter()<span class="hljs-comment"># counter函数执行的结果就是一个生成器，所以c就是生成器</span><br><br>In [<span class="hljs-number">4</span>]: inc(c)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">5</span>]: inc(c)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>计数器第二种形式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">6</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_inc</span>():<br>   ...:     <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>   ...:         x = <span class="hljs-number">0</span><br>   ...:         <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   ...:             x += <span class="hljs-number">1</span><br>   ...:             <span class="hljs-keyword">yield</span> x<br>   ...:     c = counter()<br>   ...:     <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> : <span class="hljs-built_in">next</span>(c)<span class="hljs-comment"># 使用lambda表达式将next(c)作为函数返回，而不是只返回一个next(c)</span><br>   ...: <br><br>In [<span class="hljs-number">7</span>]: make_inc()<br>Out[<span class="hljs-number">7</span>]: &lt;function __main__.make_inc.&lt;<span class="hljs-built_in">locals</span>&gt;.&lt;<span class="hljs-keyword">lambda</span>&gt;&gt;<span class="hljs-comment"># make_inc本质是一个匿名函数</span><br><br>In [<span class="hljs-number">8</span>]: inc = make_inc()<br><br>In [<span class="hljs-number">9</span>]: inc()<br>Out[<span class="hljs-number">9</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">10</span>]: inc()<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>斐波拉契数列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">11</span>]: <span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>():<br>    ...:     a = <span class="hljs-number">1</span><br>    ...:     b = <span class="hljs-number">1</span><br>    ...:     <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    ...:         <span class="hljs-keyword">yield</span> a<br>    ...:         a, b = b, a + b<br>    ...:         <br><br>In [<span class="hljs-number">12</span>]: fib()<br>Out[<span class="hljs-number">12</span>]: &lt;generator <span class="hljs-built_in">object</span> fib at <span class="hljs-number">0x7f9ff2746830</span>&gt;<br><br>In [<span class="hljs-number">13</span>]: f = fib()<span class="hljs-comment"># 生成器f</span><br><br>In [<span class="hljs-number">15</span>]: <span class="hljs-built_in">next</span>(f)<br>Out[<span class="hljs-number">15</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">16</span>]: <span class="hljs-built_in">next</span>(f)<br>Out[<span class="hljs-number">16</span>]: <span class="hljs-number">1</span><br><br>In [<span class="hljs-number">17</span>]: <span class="hljs-built_in">next</span>(f)<br>Out[<span class="hljs-number">17</span>]: <span class="hljs-number">2</span><br><br>In [<span class="hljs-number">18</span>]: <span class="hljs-built_in">next</span>(f)<br>Out[<span class="hljs-number">18</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">19</span>]: g = fib()<br><br>In [<span class="hljs-number">20</span>]: ret = []<span class="hljs-comment"># 将yield的值都保存在ret中</span><br><br>In [<span class="hljs-number">21</span>]: <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<span class="hljs-comment"># 遍历生成器</span><br>    ...:     ret.append(<span class="hljs-built_in">next</span>(g))<br>    ...:     <br><br>In [<span class="hljs-number">22</span>]: ret[-<span class="hljs-number">1</span>]<span class="hljs-comment"># 取ret列表的最后一个元素值，速度很快</span><br>Out[<span class="hljs-number">22</span>]: <span class="hljs-number">43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875</span><br></code></pre></td></tr></table></figure><p><strong>生成器的高级用法</strong></p><p>生成器的高级用法是<strong>协程</strong></p><ul><li>协程：协程运行在一个线程之内， 在用户态调度</li></ul><h3 id="生成器参考资料"><a href="#生成器参考资料" class="headerlink" title="生成器参考资料"></a>生成器参考资料</h3><ul><li><p><a href="https://www.zhihu.com/question/24807364">python生成器到底有什么优点？</a></p></li><li><p><a href="http://stackoverflow.com/questions/1756096/understanding-generators-in-python">Understanding Generators in Python</a></p></li><li><p><a href="http://intermediatepythonista.com/python-generators">Introduction to Python Generators</a></p></li><li><p><a href="http://fullstackpython.atjiang.com/generators.html">生成器资料汇总</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux配置c++11编译环境</title>
    <link href="/2016/12/29/linux%E9%85%8D%E7%BD%AEc-11%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2016/12/29/linux%E9%85%8D%E7%BD%AEc-11%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="linux配置c-11编译环境"><a href="#linux配置c-11编译环境" class="headerlink" title="linux配置c++11编译环境"></a>linux配置c++11编译环境</h1><h2 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h2><p>此处我们使用163的yum源，配置如下</p><p><strong>首先备份&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br></code></pre></td></tr></table></figure><p>下载对应版本repo文件, 放入&#x2F;etc&#x2F;yum.repos.d&#x2F;(操作前请做好相应备份)，以下为下载链接</p><p><a href="https://mirrors.163.com/.help/CentOS6-Base-163.repo">https://mirrors.163.com/.help/CentOS6-Base-163.repo</a></p><p>运行以下命令生成yum缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="使用yum配置c-编译环境"><a href="#使用yum配置c-编译环境" class="headerlink" title="使用yum配置c++编译环境"></a>使用yum配置c++编译环境</h2><p>yum配置好之后，配置c++编译环境命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc gcc-g++<br></code></pre></td></tr></table></figure><p>安装完成之后c++环境即可配置好。</p><p>写一个hello worl代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Hello World!&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码保存文件名为aa.cpp，用c++编译并执行的操作如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -o hello aa.cpp<br>./aa.cpp<br></code></pre></td></tr></table></figure><h2 id="源码编译安装c-11编译环境"><a href="#源码编译安装c-11编译环境" class="headerlink" title="源码编译安装c++11编译环境"></a>源码编译安装c++11编译环境</h2><p>因为yum自带的gcc版本过低，并且c++11需要gcc4.8以上版本支持，因此需要下载gcc4.8以上版本以支持c++11</p><p><strong>查看本地gcc版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -v<br></code></pre></td></tr></table></figure><p>本次版本为<code>gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC)</code></p><p><strong>获取gcc4.8.2版本的source code</strong></p><p>源码默认放在src目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src<br>wget http://gcc.skazkaforyou.com/releases/gcc-4.8.2/gcc-4.8.2.tar.gz<br></code></pre></td></tr></table></figure><p>文件有100M，国外网站下载速度很慢，请耐心等待（可用国外vps下载中转）</p><p>下载完成后，放在&#x2F;usr&#x2F;local&#x2F;src下</p><p><strong>解压缩</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf gcc-4.8.2.tar.gz<br></code></pre></td></tr></table></figure><p><strong>编译源码并安装</strong></p><p>进入gcc目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd gcc-4.8.2<br></code></pre></td></tr></table></figure><p><strong>下载配置安装gcc4.8.2的依赖库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./contrib/download_prerequisites<br></code></pre></td></tr></table></figure><p><strong>建立编译输出目录</strong></p><p>在当前路径下执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir gcc-build-4.8.2<br></code></pre></td></tr></table></figure><p><strong>开始configure</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib<br></code></pre></td></tr></table></figure><ul><li><code>--enable-languages</code>表示你要让你的gcc支持那些语言</li><li><code>--disable-multilib</code>不生成编译为其他平台可执行代码的交叉编译器</li><li><code>--disable-checking</code>生成的编译器在编译过程中不做额外检查</li></ul><p><strong>编译</strong></p><p>在编译输出目录gcc-build-4.8.2直接make即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><p>源码make过程耗时较长，一般需要半个小时以上。</p><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><p><strong>验证是否升级成功</strong></p><p>使用<code>which gcc</code>检查gcc安装的为止，使用<code>gcc -v</code>检查版本，如果仍然没有变，请关闭当前会话重新连接看是否变成4.8.2，如果仍未变，需要重启系统</p><p><strong>验证C++11程序是否可用</strong></p><p>lambda表达式是C++11的新特性，以下程序即可验证c++11是否可用</p><p>参考：<a href="http://en.cppreference.com/w/cpp/container/array">http://en.cppreference.com/w/cpp/container/array</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>   <span class="hljs-type">int</span> n = [] (<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) &#123; <span class="hljs-keyword">return</span> x + y; &#125;(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>);<br><br>   cout &lt;&lt; n &lt;&lt; endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>验证方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -std=c++11 -o lambda vv.cpp<br></code></pre></td></tr></table></figure><p>如果使用g++不加<code>-std=c++11</code>参数，则会报错，报错如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@host-192-168-150-182 tmp]# g++ -o lambda vv.cpp <br>vv.cpp: In function ‘int main()’:<br>vv.cpp:9:46: warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled by default]<br>    int n = [] (int x, int y) &#123; return x + y; &#125;(5, 4);<br>                                              ^<br></code></pre></td></tr></table></figure><p><strong>更新gcc动态链接库</strong></p><p>源码编译升级安装了gcc后，编译程序或运行其它程序时，有时会出现类似&#x2F;usr&#x2F;lib64&#x2F;libstdc++.so.6: versionGLIBCXX_3.4.18’ not found的问题。这是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库导致的，将gcc最新版本的动态库替换系统中老版本的动态库即可解决。可参考以下链接</p><p><a href="http://itbilu.com/linux/management/NymXRUieg.html">http://itbilu.com/linux/management/NymXRUieg.html</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>C++11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python解构与封装</title>
    <link href="/2016/12/23/python%E8%A7%A3%E6%9E%84%E4%B8%8E%E5%B0%81%E8%A3%85/"/>
    <url>/2016/12/23/python%E8%A7%A3%E6%9E%84%E4%B8%8E%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Python解构与封装"><a href="#Python解构与封装" class="headerlink" title="Python解构与封装"></a>Python解构与封装</h1><h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>先看以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">2</span><br><br>tmp = x<br>x = y<br>y = tmp<br><br><span class="hljs-built_in">print</span>(x, y)<br></code></pre></td></tr></table></figure><p>代码的输出结果是：2 1</p><p>再看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">2</span><br><br>x, y = y, x<br><span class="hljs-built_in">print</span>(x, y)<br></code></pre></td></tr></table></figure><p>代码的输出结果是：2 1</p><p><code>x, y = y, x</code>这段代码背后的含义就是解构和封装</p><span id="more"></span><h2 id="Python封装"><a href="#Python封装" class="headerlink" title="Python封装"></a>Python封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: t = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><br>In [<span class="hljs-number">2</span>]: t<br>Out[<span class="hljs-number">2</span>]: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">type</span>(t)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-built_in">tuple</span><span class="hljs-comment"># 定义元组是可以省略小括号的</span><br><br>In [<span class="hljs-number">4</span>]: t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">5</span>]: t2 = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-comment"># t1和t2等效</span><br>In [<span class="hljs-number">6</span>]: t1<br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">7</span>]: t2<br>Out[<span class="hljs-number">7</span>]: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><p>所以<strong>封装出来的结果一定是元组</strong>。</p><p><code>x, y = y, x</code>这段代码的右侧就会封装成(y, x)</p><h2 id="Python解构"><a href="#Python解构" class="headerlink" title="Python解构"></a>Python解构</h2><h3 id="基本解构"><a href="#基本解构" class="headerlink" title="基本解构"></a>基本解构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">8</span>]: lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><br>In [<span class="hljs-number">9</span>]: first, second = lst<br><br>In [<span class="hljs-number">10</span>]: <span class="hljs-built_in">print</span>(first, second)<br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>按照元素顺序，把线性结构lst的元素赋给变量first,second</p><h3 id="加星号解构"><a href="#加星号解构" class="headerlink" title="加星号解构"></a>加星号解构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">11</span>]: lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br><br>In [<span class="hljs-number">12</span>]: head, *tail = lst<br><br>In [<span class="hljs-number">13</span>]: head<br>Out[<span class="hljs-number">13</span>]: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">14</span>]: tail<br>Out[<span class="hljs-number">14</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>In [<span class="hljs-number">15</span>]: *lst2 = lst<span class="hljs-comment"># 左边必须有一个加星号的变量</span><br>  File <span class="hljs-string">&quot;&lt;ipython-input-15-98211a44ccfb&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    *lst2 = lst<br>               ^<br>SyntaxError: starred assignment target must be <span class="hljs-keyword">in</span> a <span class="hljs-built_in">list</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">tuple</span><br><br><br>In [<span class="hljs-number">16</span>]: *head, tail = lst<br><br>In [<span class="hljs-number">17</span>]: head<br>Out[<span class="hljs-number">17</span>]: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>In [<span class="hljs-number">18</span>]: lst<br>Out[<span class="hljs-number">18</span>]: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>In [<span class="hljs-number">19</span>]: tail<br>Out[<span class="hljs-number">19</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">20</span>]: head, *m1, *m2, tail = lst<span class="hljs-comment"># 星号不能有多个只能有一个</span><br>  File <span class="hljs-string">&quot;&lt;ipython-input-20-1fc1a52caa8e&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    head, *m1, *m2, tail = lst<br>                              ^<br>SyntaxError: two starred expressions <span class="hljs-keyword">in</span> assignment<br><br><br>In [<span class="hljs-number">21</span>]: v1, v2, v3, v4, v5, v6, v7 = lst<span class="hljs-comment"># 左边变量数不能超过右边元素数</span><br>---------------------------------------------------------------------------<br>ValueError                                Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">21</span>-9366cfb498a1&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> v1, v2, v3, v4, v5, v6, v7 = lst<br><br>ValueError: <span class="hljs-keyword">not</span> enough values to unpack (expected <span class="hljs-number">7</span>, got <span class="hljs-number">5</span>)<br><br>In [<span class="hljs-number">22</span>]: v1, v2 = lst<span class="hljs-comment">#左边变量数不能少于右边元素数</span><br>---------------------------------------------------------------------------<br>ValueError                                Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">22</span>-d7b0a4e7871e&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> v1, v2 = lst<br><br>ValueError: too many values to unpack (expected <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>总结为以下规律：</p><ul><li>元素按照顺序赋值给变量</li><li>变量和元素必须匹配</li><li>加星号变量，可以接受任意个数的元素</li><li>加星号的变量不能单独出现</li></ul><h3 id="多层次解构"><a href="#多层次解构" class="headerlink" title="多层次解构"></a>多层次解构</h3><p><strong>解构是支持多层次的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">23</span>]: lst = [<span class="hljs-number">1</span>, (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">5</span>]<br><br>In [<span class="hljs-number">24</span>]: _, v, *_ = lst<span class="hljs-comment"># v解析成(2, 3)</span><br><br>In [<span class="hljs-number">25</span>]: v<br>Out[<span class="hljs-number">25</span>]: (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br>In [<span class="hljs-number">26</span>]: _, val = v<span class="hljs-comment"># v可以进一步解构</span><br><br>In [<span class="hljs-number">27</span>]: val<br>Out[<span class="hljs-number">27</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">28</span>]: _, (_, val), *_ = lst<span class="hljs-comment"># 可以一步一次性解构</span><br><br>In [<span class="hljs-number">29</span>]: val<br>Out[<span class="hljs-number">29</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">30</span>]: _, [*_, val], *_ = lst<span class="hljs-comment"># 中间部分解构成列表</span><br><br>In [<span class="hljs-number">31</span>]: val<br>Out[<span class="hljs-number">31</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">32</span>]: _, _, val, *_ = lst<span class="hljs-comment"># (2, 3)解析成第二个_</span><br><br>In [<span class="hljs-number">33</span>]: val<br>Out[<span class="hljs-number">33</span>]: <span class="hljs-number">5</span><br><br></code></pre></td></tr></table></figure><h3 id="Python下划线的使用"><a href="#Python下划线的使用" class="headerlink" title="Python下划线的使用"></a>Python下划线的使用</h3><p>使用单个下划线 _ 表示丢弃该变量，这是Python的一个惯例。单个下划线也是Python合法的标识符， 但是如果不是要丢弃一个变量，通常不要用单个下划线表示一个有意义的变量。可以理解为约定俗成。</p><h3 id="解构与封装的使用"><a href="#解构与封装的使用" class="headerlink" title="解构与封装的使用"></a>解构与封装的使用</h3><p>非常复杂的数据结构，多层嵌套的线性结构的时候，可以用解构快速提取其中的值，非常的便利</p><p>比如以下的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: key, _, value = <span class="hljs-string">&#x27;I love Python&#x27;</span>.partition(<span class="hljs-string">&#x27; love &#x27;</span>)<br><br>In [<span class="hljs-number">2</span>]: key<br>Out[<span class="hljs-number">2</span>]: <span class="hljs-string">&#x27;I&#x27;</span><br><br>In [<span class="hljs-number">3</span>]: value<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-string">&#x27;Python&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>解构</tag>
      
      <tag>封装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【填坑系列】Python习题集</title>
    <link href="/2016/12/13/%E3%80%90%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97%E3%80%91python%E4%B9%A0%E9%A2%98%E9%9B%86/"/>
    <url>/2016/12/13/%E3%80%90%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97%E3%80%91python%E4%B9%A0%E9%A2%98%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="求100万以内的所有素数个数"><a href="#求100万以内的所有素数个数" class="headerlink" title="求100万以内的所有素数个数"></a>求100万以内的所有素数个数</h2><p><strong>第一种方法</strong></p><p><strong>思路</strong>：当前数为i，则遍历比int(sqrt(i))+1小的所有数是是否都不可以整除，是，则是素数</p><p><strong>理论</strong>：如果遍历所有比i小的除数j并且当除数j&gt;int(sqrt(i))时，如果j能整出i，那么必定存在一个小于int(sqrt(i))的数能整出i，因此我们只需只需遍历int(sqrt(i))+1以内的数即可</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1000000</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(i ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>       cnt += <span class="hljs-number">1</span> <br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">78498<br></code></pre></td></tr></table></figure><p><strong>第二种方法</strong></p><p><strong>理论</strong></p><ul><li>假如一个整数是合数，则一定存在一个小于它的素数作为其因数。比如9是一个合数，而素数3就是它的一个因数。</li><li>假如我们知道了小于一个数的所有素数，则只需确定该数能不能被这些素数整除即可。如果不能被整除，则这个数一定是个素数。反之，则不是。</li><li>也就是说当我们获得一个素数时，可以将它所有的倍数都标记为非素数，这样当我们遍历到一个数时，他没有被任何小于它的素数标记为非素数，则可以确定该数是个素数。</li><li>比如：从2开始，在初始化时2就是素数。3是类似。遍历到4时，4已经被素数2给标记了，直接跳过</li></ul><p><strong>思路</strong></p><ul><li>初始化一个大范围内的列表，初始时所有数都为素数，遍历时按照以上理论将所有的非素数标记出来即可</li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">cnt = <span class="hljs-number">0</span><br>is_prime = [<span class="hljs-literal">True</span>]*<span class="hljs-number">1000000</span><br>is_prime[<span class="hljs-number">0</span>] = <span class="hljs-literal">False</span><br>is_prime[<span class="hljs-number">1</span>] = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1000000</span>):<br>    <span class="hljs-keyword">if</span> is_prime[i] <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        <span class="hljs-keyword">continue</span><br>    cnt += <span class="hljs-number">1</span><br>    k = i<br>    <span class="hljs-keyword">while</span> k * i &lt; <span class="hljs-number">1000000</span>:<br>        is_prime[k * i] = <span class="hljs-literal">False</span><br>        k += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">78498<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h2><p><strong>思路</strong>：每一次内层循环j只要循环到外层循环i即可</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplicationTable</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br>            r=i*j<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d*%d=%-3d&quot;</span>%(i,j,r),sep=<span class="hljs-string">&#x27;&#x27;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    multiplicationTable()<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>*<span class="hljs-number">1</span>=<span class="hljs-number">1</span>   <br><br><span class="hljs-attribute">2</span>*<span class="hljs-number">1</span>=<span class="hljs-number">2</span>   <span class="hljs-number">2</span>*<span class="hljs-number">2</span>=<span class="hljs-number">4</span>   <br><br><span class="hljs-attribute">3</span>*<span class="hljs-number">1</span>=<span class="hljs-number">3</span>   <span class="hljs-number">3</span>*<span class="hljs-number">2</span>=<span class="hljs-number">6</span>   <span class="hljs-number">3</span>*<span class="hljs-number">3</span>=<span class="hljs-number">9</span>   <br><br><span class="hljs-attribute">4</span>*<span class="hljs-number">1</span>=<span class="hljs-number">4</span>   <span class="hljs-number">4</span>*<span class="hljs-number">2</span>=<span class="hljs-number">8</span>   <span class="hljs-number">4</span>*<span class="hljs-number">3</span>=<span class="hljs-number">12</span>  <span class="hljs-number">4</span>*<span class="hljs-number">4</span>=<span class="hljs-number">16</span>  <br><br><span class="hljs-attribute">5</span>*<span class="hljs-number">1</span>=<span class="hljs-number">5</span>   <span class="hljs-number">5</span>*<span class="hljs-number">2</span>=<span class="hljs-number">10</span>  <span class="hljs-number">5</span>*<span class="hljs-number">3</span>=<span class="hljs-number">15</span>  <span class="hljs-number">5</span>*<span class="hljs-number">4</span>=<span class="hljs-number">20</span>  <span class="hljs-number">5</span>*<span class="hljs-number">5</span>=<span class="hljs-number">25</span>  <br><br><span class="hljs-attribute">6</span>*<span class="hljs-number">1</span>=<span class="hljs-number">6</span>   <span class="hljs-number">6</span>*<span class="hljs-number">2</span>=<span class="hljs-number">12</span>  <span class="hljs-number">6</span>*<span class="hljs-number">3</span>=<span class="hljs-number">18</span>  <span class="hljs-number">6</span>*<span class="hljs-number">4</span>=<span class="hljs-number">24</span>  <span class="hljs-number">6</span>*<span class="hljs-number">5</span>=<span class="hljs-number">30</span>  <span class="hljs-number">6</span>*<span class="hljs-number">6</span>=<span class="hljs-number">36</span>  <br><br><span class="hljs-attribute">7</span>*<span class="hljs-number">1</span>=<span class="hljs-number">7</span>   <span class="hljs-number">7</span>*<span class="hljs-number">2</span>=<span class="hljs-number">14</span>  <span class="hljs-number">7</span>*<span class="hljs-number">3</span>=<span class="hljs-number">21</span>  <span class="hljs-number">7</span>*<span class="hljs-number">4</span>=<span class="hljs-number">28</span>  <span class="hljs-number">7</span>*<span class="hljs-number">5</span>=<span class="hljs-number">35</span>  <span class="hljs-number">7</span>*<span class="hljs-number">6</span>=<span class="hljs-number">42</span>  <span class="hljs-number">7</span>*<span class="hljs-number">7</span>=<span class="hljs-number">49</span>  <br><br><span class="hljs-attribute">8</span>*<span class="hljs-number">1</span>=<span class="hljs-number">8</span>   <span class="hljs-number">8</span>*<span class="hljs-number">2</span>=<span class="hljs-number">16</span>  <span class="hljs-number">8</span>*<span class="hljs-number">3</span>=<span class="hljs-number">24</span>  <span class="hljs-number">8</span>*<span class="hljs-number">4</span>=<span class="hljs-number">32</span>  <span class="hljs-number">8</span>*<span class="hljs-number">5</span>=<span class="hljs-number">40</span>  <span class="hljs-number">8</span>*<span class="hljs-number">6</span>=<span class="hljs-number">48</span>  <span class="hljs-number">8</span>*<span class="hljs-number">7</span>=<span class="hljs-number">56</span>  <span class="hljs-number">8</span>*<span class="hljs-number">8</span>=<span class="hljs-number">64</span>  <br><br><span class="hljs-attribute">9</span>*<span class="hljs-number">1</span>=<span class="hljs-number">9</span>   <span class="hljs-number">9</span>*<span class="hljs-number">2</span>=<span class="hljs-number">18</span>  <span class="hljs-number">9</span>*<span class="hljs-number">3</span>=<span class="hljs-number">27</span>  <span class="hljs-number">9</span>*<span class="hljs-number">4</span>=<span class="hljs-number">36</span>  <span class="hljs-number">9</span>*<span class="hljs-number">5</span>=<span class="hljs-number">45</span>  <span class="hljs-number">9</span>*<span class="hljs-number">6</span>=<span class="hljs-number">54</span>  <span class="hljs-number">9</span>*<span class="hljs-number">7</span>=<span class="hljs-number">63</span>  <span class="hljs-number">9</span>*<span class="hljs-number">8</span>=<span class="hljs-number">72</span>  <span class="hljs-number">9</span>*<span class="hljs-number">9</span>=<span class="hljs-number">81</span>  <br></code></pre></td></tr></table></figure><h2 id="求几何级数的第N项"><a href="#求几何级数的第N项" class="headerlink" title="求几何级数的第N项"></a>求几何级数的第N项</h2><p><strong>思路</strong></p><ul><li>几何级数的形式是：<code>a+a*q+a*q^2+a*q^3+...+a*q^n</code></li><li>需要输入的项是：a,q,n</li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/user/bin/env python</span><br><span class="hljs-comment"># coding = utf-8</span><br><br>a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入几何级数的a: &#x27;</span>))<br>q=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入几何级数的q: &#x27;</span>))<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入几何级数的n: &#x27;</span>))<br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">sum</span> += a * q  ** i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>输入输出结果如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">请输入几何级数的a: 3</span><br><span class="hljs-section">请输入几何级数的q: 2</span><br><span class="hljs-section">请输入几何级数的n: 4</span><br>93<br></code></pre></td></tr></table></figure><h2 id="求菲波那切数列的第101位"><a href="#求菲波那切数列的第101位" class="headerlink" title="求菲波那切数列的第101位"></a>求菲波那切数列的第101位</h2><p>先写出递推公式再来写实现，递推公式如下</p><p><strong>思路</strong></p><ul><li>fib[0]&#x3D;1    当i&#x3D;0</li><li>fib[1]&#x3D;1    当i&#x3D;1</li><li>fib[i]&#x3D;fib[i-1]+fib[i-2]    当i&gt;1</li><li>fib的第101位也就是fib[100]&#x3D;fib[99]+fib[98]</li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> i ==<span class="hljs-number">1</span>:<br>        b = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        c = a + b<br>        a = b<br>        b = c<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">573147844013817084101<br></code></pre></td></tr></table></figure><h2 id="求杨辉三角第n行第k列的值"><a href="#求杨辉三角第n行第k列的值" class="headerlink" title="求杨辉三角第n行第k列的值"></a>求杨辉三角第n行第k列的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/26/17 5:03 PM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: YangHuiTriangle.py</span><br><span class="hljs-string">@function: 求杨辉三角第n行第k列的值</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">yang_hui_triangle</span>(<span class="hljs-params">n, k</span>):<br>    lst = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        row = [<span class="hljs-number">1</span>]<br>        lst.append(row)<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i):<br>            row.append(lst[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + lst[i-<span class="hljs-number">1</span>][j])<br>        row.append(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(lst[n][k])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    yang_hui_triangle(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>)<br><br></code></pre></td></tr></table></figure><h2 id="字符串转化为数值"><a href="#字符串转化为数值" class="headerlink" title="字符串转化为数值"></a>字符串转化为数值</h2><p>描述：把字符串形式的整数或浮点数转化为int或float， 不使用int和float函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/26/17 5:52 PM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: str2num.py </span><br><span class="hljs-string">@function: 把字符串形式的整数或浮点数转化为int或float， 不使用int和float函数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str2num</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>):<br>    mapping = &#123;<span class="hljs-built_in">str</span>(x): x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)&#125;<br>    i, _, f = s.partition(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-comment"># print(i, f)</span><br>    ret = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>((i+f)[::-<span class="hljs-number">1</span>]):<br>        ret += mapping[x] * <span class="hljs-number">10</span> ** idx<br>    <span class="hljs-keyword">return</span> ret / <span class="hljs-number">10</span> ** <span class="hljs-built_in">len</span>(f)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = <span class="hljs-string">&#x27;1230.0541640&#x27;</span><br>    <span class="hljs-built_in">print</span>(str2num(s))<br><br></code></pre></td></tr></table></figure><h2 id="移除一个列表中的重复元素，并保持列表原来的顺序"><a href="#移除一个列表中的重复元素，并保持列表原来的顺序" class="headerlink" title="移除一个列表中的重复元素，并保持列表原来的顺序"></a>移除一个列表中的重复元素，并保持列表原来的顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/26/17 6:30 PM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: rm_elements.py </span><br><span class="hljs-string">@function: 移除一个列表中的重复元素，并保持列表原来的顺序</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_elements</span>(<span class="hljs-params">lst: <span class="hljs-built_in">str</span></span>):<br>    ret = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst:<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ret:<br>            ret.append(x)<br>    <span class="hljs-keyword">return</span> ret<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>    <span class="hljs-built_in">print</span>(remove_elements(lst))<br><br></code></pre></td></tr></table></figure><h2 id="扁平化字典"><a href="#扁平化字典" class="headerlink" title="扁平化字典"></a>扁平化字典</h2><p><strong>例如：</strong> </p><ul><li>{‘a’: {‘b’: 1}} 扁平化之后是 {‘a.b’: 1}</li><li>{‘a’: {‘b’: {‘c’: 1, ‘d’: 2}, ‘x’: 2}}扁平化之后是{‘a.x’: 2, ‘a.b.c’: 1, ‘a.b.d’: 2}</li></ul><p><strong>初始字典的特点</strong>：</p><ul><li>字典的每个key都是可hash的，因此不会是字典</li><li>初始字典不为空字典</li><li>字典的value深度可以无限嵌套</li></ul><p><strong>思路</strong>：使用递归，每次递归深度都会变化，也就是说路径会变化，可以使用一个path变量记录路径</p><ol><li>如果嵌套的v不是字典时，直接加入新元素: desDict[‘{}.{}’.format(path, k).lstrip(‘.’)] &#x3D; v</li><li>如果嵌套的v为空字典时，直接用空字符串代替: desDict[‘{}.{}’.format(path, k).lstrip(‘.’)] &#x3D; ‘’</li><li>如果嵌套的v不为空字典时，直接增长path，并将v进行下一次递归: flatten_dict(v, desDict, path)</li><li>每一次递归返回时，就说明当前深度的字典已经遍历完毕，需要减短path</li><li>rstrip函数都不是原地修改，返回的都是副本</li></ol><p><strong>判断变量是否是字典</strong></p><ul><li>type()</li><li>isInstance()</li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/26/17 8:26 PM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: flatten_dict.py </span><br><span class="hljs-string">@function: 扁平化字典</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatten_dict</span>(<span class="hljs-params">srcDict: <span class="hljs-built_in">dict</span>, desDict: <span class="hljs-built_in">dict</span>,  path: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> srcDict.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">dict</span>):<br>            desDict[<span class="hljs-string">&#x27;&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(path, k).lstrip(<span class="hljs-string">&#x27;.&#x27;</span>)] = v<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> v == &#123;&#125;:<br>                desDict[<span class="hljs-string">&#x27;&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(path, k).lstrip(<span class="hljs-string">&#x27;.&#x27;</span>)] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                path = <span class="hljs-string">&#x27;&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(path, k).lstrip(<span class="hljs-string">&#x27;.&#x27;</span>)<br>                flatten_dict(v, desDict, path)<br>                path = path.rstrip(<span class="hljs-string">&#x27;.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(k))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    srcDict = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: &#123;<span class="hljs-string">&#x27;b&#x27;</span>: &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">2</span>&#125;&#125;<br>    <span class="hljs-comment"># srcDict = &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: 1&#125;&#125;</span><br>    desDict = &#123;&#125;<br>    flatten_dict(srcDict, desDict, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(desDict)<br></code></pre></td></tr></table></figure><h2 id="实现base64编码解码算法"><a href="#实现base64编码解码算法" class="headerlink" title="实现base64编码解码算法"></a>实现base64编码解码算法</h2><p><strong>Base64编码的思想</strong></p><ul><li>采用64个基本的ASCII码字符对数据进行重新编码。它将需要编码的数据拆分成字节数组。以3个字节为一组。按顺序排列24 位数据，再把这24位数据分成4组，即每组6位。再在每组的的最高位前补两个0凑足一个字节。这样就把一个3字节为一组的数据重新编码成了4个字节。当所要编码的数据的字节数不是3的整倍数，也就是说在分组时最后一组不够3个字节。这时在最后一组填充1到2个0字节。并在最后编码完成后在结尾添加1到2个 “&#x3D;”。</li></ul><p><strong>base64编码示例</strong>： 将对ABC进行BASE64编码</p><ol><li>首先取ABC对应的ASCII码值。A（65）B（66）C（67）；</li><li>再取二进制值A（01000001）B（01000010）C（01000011）；</li><li>然后把这三个字节的二进制码接起来（010000010100001001000011）；</li><li>再以6位为单位分成4个数据块,并在最高位填充两个0后形成4个字节的编码后的值，（00010000）（00010100）（00001001）（00000011）</li><li>再把这四个字节数据转化成10进制数得（16）（20）（9）（3）；</li><li>最后根据BASE64给出的64个基本字符表，查出对应的ASCII码字符（Q）（U）（J）（D），这里的值实际就是数据在字符表中的索引。</li></ol><p><strong>base64字符表</strong>： 最多六个字节，因此最范围是0~63，所以总共64个字符</p><ul><li>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;</li></ul><p><strong>字符和ascii码之间的转换</strong>：单个字符</p><ul><li>ord 字符转换成ascii</li><li>chr ascii转换成字符</li></ul><p><strong>字符串和ascii码之间的转换</strong>：字符串</p><ul><li>map(ord, “a test String: 123456”)</li></ul><p><strong>加密示例</strong></p><ul><li><strong>CBdaF3FV</strong>的编码结果是<strong>Q0JkYUYzRlY&#x3D;</strong></li><li><strong>CBdaF34FV</strong>的编码结果是<strong>Q0JkYUYzNEZW</strong></li><li><strong>CdaF3FV</strong>的编码结果是<strong>Q2RhRjNGVg&#x3D;&#x3D;</strong></li><li><strong>ABC</strong>的编码结果是<strong>QUJD</strong></li></ul><p><strong>作用</strong></p><ul><li>主要用做把二进制转换成字符串</li></ul><p><strong>代码1：作为字符串处理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># base64编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64Encode</span>(<span class="hljs-params">s</span>):<br>    base64StrList = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    ret = <span class="hljs-string">&#x27;&#x27;</span><br>    bList = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, s))<br>    bStr = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">#print(bList)</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bList:<br>        tmpS = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(x))<br>        bStr += <span class="hljs-string">&#x27;0&#x27;</span> * (<span class="hljs-number">10</span> - <span class="hljs-built_in">len</span>(tmpS)) + tmpS.lstrip(<span class="hljs-string">&#x27;0b&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(bStr)<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i + <span class="hljs-number">6</span> &lt; <span class="hljs-built_in">len</span>(bStr):<br>        tmpX = bStr[i: i+<span class="hljs-number">6</span>]<br>        <span class="hljs-comment">#print(tmpX)</span><br>        ret += base64StrList[<span class="hljs-built_in">int</span>(tmpX, <span class="hljs-number">2</span>)]<br>        i += <span class="hljs-number">6</span><br>    rest = bStr[i:]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rest) == <span class="hljs-number">2</span>:<br>        ret += base64StrList[<span class="hljs-built_in">int</span>(rest + <span class="hljs-string">&#x27;0000&#x27;</span>, <span class="hljs-number">2</span>)]<br>        ret += <span class="hljs-string">&#x27;==&#x27;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(rest) == <span class="hljs-number">4</span>:<br>        ret += base64StrList[<span class="hljs-built_in">int</span>(rest + <span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-number">2</span>)]<br>        ret += <span class="hljs-string">&#x27;=&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        ret += base64StrList[<span class="hljs-built_in">int</span>(rest, <span class="hljs-number">2</span>)] <span class="hljs-comment"># 在while部分处理之后剩下一个完整的6位</span><br>    <span class="hljs-built_in">print</span>(ret)<br><br><br><span class="hljs-comment"># base64解码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64Decode</span>(<span class="hljs-params">s</span>):<br>    base64StrList = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    bStr = <span class="hljs-string">&#x27;&#x27;</span><br>    ret = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> x == <span class="hljs-string">&#x27;=&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        i = base64StrList.find(x)<br>        s1 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(i))<br>        bStr += <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">10</span>-<span class="hljs-built_in">len</span>(s1)-<span class="hljs-number">2</span>) + s1.lstrip(<span class="hljs-string">&#x27;0b&#x27;</span>)<br><br>    cnt = s.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>    bStr = bStr[: -<span class="hljs-number">2</span> * cnt + <span class="hljs-built_in">len</span>(bStr)]<br><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(bStr):<br>        b = bStr[i: i + <span class="hljs-number">8</span>]<br>        ret += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bStr[i: i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>        i += <span class="hljs-number">8</span><br><br>    <span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><p><strong>代码2：作为字节数组处理</strong></p><p>优点：字节数组+位运算，提高处理速度，减少内存占用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/26/17 9:11 PM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: base64.py </span><br><span class="hljs-string">@function: 实现base64编码解码算法:字节数组+位运算</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># base64编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b64encode</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    table = <span class="hljs-string">b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    encoded = <span class="hljs-built_in">bytearray</span>()<br>    c = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">len</span>(data)+<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):<br>        i = <span class="hljs-built_in">int</span>.from_bytes(data[c: x], <span class="hljs-string">&#x27;big&#x27;</span>)   <span class="hljs-comment"># bytes to int</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>            encoded.append(table[i &gt;&gt; (<span class="hljs-number">24</span> - j*<span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>])<br>        c += <span class="hljs-number">3</span><br>    r = <span class="hljs-built_in">len</span>(data) - c<br>    <span class="hljs-keyword">if</span> r &gt; <span class="hljs-number">0</span>:<br>        i = <span class="hljs-built_in">int</span>.from_bytes(data[c:], <span class="hljs-string">&#x27;big&#x27;</span>) &lt;&lt; (<span class="hljs-number">3</span>-r) * <span class="hljs-number">8</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>-(<span class="hljs-number">3</span>-r)):<br>            encoded.append(table[i &gt;&gt; (<span class="hljs-number">24</span> - j*<span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>])<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>-r):<br>            encoded.append(<span class="hljs-built_in">int</span>.from_bytes(<span class="hljs-string">b&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;big&#x27;</span>))<br>    <span class="hljs-keyword">return</span> encoded.decode()<br><br><br><span class="hljs-comment"># base64解码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b64decode</span>(<span class="hljs-params">data:<span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    table = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    decoded = <span class="hljs-built_in">bytearray</span>()<br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(data)+<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):<br>        tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data[s:e]):<br>            <span class="hljs-keyword">if</span> c != <span class="hljs-string">&#x27;=&#x27;</span>:<br>                tmp += table.index(c) &lt;&lt; <span class="hljs-number">24</span> - (i+<span class="hljs-number">1</span>) * <span class="hljs-number">6</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp += <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-number">24</span> - (i+<span class="hljs-number">1</span>) * <span class="hljs-number">6</span><br>        decoded.extend(tmp.to_bytes(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;big&#x27;</span>))<br>        s += <span class="hljs-number">4</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(decoded.rstrip(<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(b64encode(<span class="hljs-string">b&#x27;abc&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(b64decode(<span class="hljs-string">&#x27;YWJj&#x27;</span>))<br><br></code></pre></td></tr></table></figure><h2 id="实现计数器，可以指定基数和步长"><a href="#实现计数器，可以指定基数和步长" class="headerlink" title="实现计数器，可以指定基数和步长"></a>实现计数器，可以指定基数和步长</h2><p>生成器和匿名函数的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/27/17 9:30 AM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: make_inc.py </span><br><span class="hljs-string">@function: 实现计数器，可以指定基数和步长</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_inc</span>(<span class="hljs-params">base, step</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>():<br>        <span class="hljs-keyword">nonlocal</span> base<br>        <span class="hljs-keyword">nonlocal</span> step<br>        x = base<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            x += step<br>            <span class="hljs-keyword">yield</span> x<br>    c = counter()<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> : <span class="hljs-built_in">next</span>(c)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># inc这个函数封装了一个生成器c，并且每次调用inc的时候都是在执行next(c)</span><br>    inc = make_inc(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(inc())<br>    <span class="hljs-built_in">print</span>(inc())<br>    <span class="hljs-built_in">print</span>(inc())<br>    <span class="hljs-built_in">print</span>(inc())<br><br></code></pre></td></tr></table></figure><h2 id="查找两个字符串的最长公共子串"><a href="#查找两个字符串的最长公共子串" class="headerlink" title="查找两个字符串的最长公共子串"></a>查找两个字符串的最长公共子串</h2><ul><li>暴力法： 找出两个字符串各自所有的子串，然后一一比较，更新最长的值</li><li>动态规划：<ol><li>两个字符串分别为s1和s2</li><li>s1[i]和s2[j]分别表示其第i和第j个字符(字符顺序从0开始)</li><li>令L[i, j]表示以s1[i]和s2[j]为结尾的相同子串的最大长度。</li><li>L[i, j] &#x3D; L[i-1, j-1] + 1 如果s1[i] &#x3D;&#x3D; s2[j]</li><li>L[i, j] &#x3D; 0 如果s1[i] !&#x3D; s2[j]</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python  </span><br><span class="hljs-comment"># encoding: utf-8  </span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on 2/27/17 9:48 AM</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: longest_common_substring.py </span><br><span class="hljs-string">@function: </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">longest_common_substring</span>(<span class="hljs-params">s1: <span class="hljs-built_in">str</span>,s2:<span class="hljs-built_in">str</span></span>):<br>    s = <span class="hljs-string">&#x27;&#x27;</span><br>    dp = []<br>    maxL = <span class="hljs-number">0</span>    <span class="hljs-comment"># 记录子串的最长长度</span><br>    maxI = <span class="hljs-number">0</span>    <span class="hljs-comment"># 记录子串最长的下标</span><br>    <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s1):<br>        dp.append([])<br>        <span class="hljs-keyword">for</span> j, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s2):<br>            <span class="hljs-keyword">if</span> x == y:<br>                <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j &gt; <span class="hljs-number">0</span>:<br>                    dp[i].append(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    dp[i].append(<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> dp[i][j] &gt; maxL:<br>                    maxI = i<br>                    maxL = dp[i][j]<br>            <span class="hljs-keyword">else</span>:<br>                dp[i].append(<span class="hljs-number">0</span>)<br>    s = s1[maxI + <span class="hljs-number">1</span> - maxL: maxI + <span class="hljs-number">1</span>]    <span class="hljs-comment"># maxI是下标</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dp:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s1 = <span class="hljs-string">&#x27;I-love-Python&#x27;</span><br>    s2 = <span class="hljs-string">&#x27;snow-love-other&#x27;</span><br>    s = longest_common_substring(s1, s2)<br>    <span class="hljs-built_in">print</span>(s)<br><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;-love-&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="实现命令分发器"><a href="#实现命令分发器" class="headerlink" title="实现命令分发器"></a>实现命令分发器</h2><p>实现函数可带任意参数(可变参数除外)，解析参数并要求用户输入</p><h2 id="实现ls命令"><a href="#实现ls命令" class="headerlink" title="实现ls命令"></a>实现ls命令</h2><p>实现 -l -a -h 选项</p><h2 id="实现find命令"><a href="#实现find命令" class="headerlink" title="实现find命令"></a>实现find命令</h2><p>实现 -name -type -ctime -mtime -cnewer -executable -newer -gid -uid 测试</p><h2 id="实现cp命令"><a href="#实现cp命令" class="headerlink" title="实现cp命令"></a>实现cp命令</h2><p>实现 -r -p选项</p><h2 id="实现LinkedList"><a href="#实现LinkedList" class="headerlink" title="实现LinkedList"></a>实现LinkedList</h2><p>函数实现</p><p>类实现</p><h2 id="实现优先队列"><a href="#实现优先队列" class="headerlink" title="实现优先队列"></a>实现优先队列</h2><p>函数实现</p><p>类实现</p><h2 id="实现字典"><a href="#实现字典" class="headerlink" title="实现字典"></a>实现字典</h2><p>函数实现</p><p>类实现</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>practice</tag>
      
      <tag>习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python答疑解惑</title>
    <link href="/2016/12/04/python%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91/"/>
    <url>/2016/12/04/python%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Python自动化运维答疑解惑"><a href="#Python自动化运维答疑解惑" class="headerlink" title="Python自动化运维答疑解惑"></a>Python自动化运维答疑解惑</h1><p>以下为Python入门的几个常见疑惑，现在统一在下面列出。</p><p><strong>1、如果使用Python3.5.2，但是一般公司的生产环境上都是linux默认的Python，一般是2.6.6，而且没有权限更改，这种情况下我们有什么好的办法吗？</strong></p><blockquote><p> python2一般都有的第三方库，在Python3中都会有的，而且Python2在2020年就彻底停止支持了，所以没有特殊情况，直接选择python最新版本即可。除非你的项目必须依赖一个python2的第三方库且这个库在python3中并没有。</p></blockquote><p><strong>2、Python在现在以及未来主要应用的方向是什么？</strong></p><blockquote><p>Python的应用的主要方向就是两类，一类是爬虫方向，一类是自动化方向。至于自动化方向，分为自动化运维和自动化测试。Python做web开发在未来几年都不会是主流，web开发的主流还是会Java这种工业语言。</p></blockquote><span id="more"></span><p><strong>3、自动化运维方面主要项目是哪些？</strong></p><blockquote><p>CMDB(Configuration Management Database)-&gt;远程执行和调度系统-&gt;自动化流程平台。其中CMDB主要是存储与管理企业IT架构中设备的各种配置信息，远程执行和调度系统主要是负责对各个设备进行调度并执行相关命令，所以难点在于调度。自动化流程平台主要是定义日常操作的具体流程控制。做好这三点之后就有了一个基本的运维自动化管理平台，然后再集成自动化监控平台和运维安全方面的认证堡垒机，即可形成一个比较完善的运维自动化管理平台。</p></blockquote><p><strong>4、运维开发日常工作是什么？</strong></p><blockquote><p>写代码，包括CMDB，任务调度、流程系统、DB管理、日志分析</p></blockquote><p><strong>5、Python在网上的练习题较少，那平时需要去哪儿练手，才能达到一天一百行代码？</strong></p><blockquote><p>网上有不少的在线online judge支持Python语言，比如：</p><p>高中生NOIP常用的tyvj：<a href="http://www.tyvj.cn/Problem">http://www.tyvj.cn/Problem</a>，是中文网站</p><p>平时经常听说的LeetCode OJ：<a href="https://leetcode.com/problemset/algorithms">https://leetcode.com/problemset/algorithms</a></p><p>浙江大学的在线OJ： <a href="http://acm.zju.edu.cn/">http://acm.zju.edu.cn</a> 超过2000题，支持&#x2F;Python在内的主流语言</p><p>国外的Sphere online judge：<a href="http://www.spoj.com/problems/classical">http://www.spoj.com/problems/classical</a>，几乎什么语言都支持</p><p>再有来源就是书籍里面的题目了，推荐：cookbook和a byte of python</p></blockquote><p><strong>6、Python做GUI应用程序的时候用什么比较好？</strong></p><blockquote><p>推荐使用Pyqt，使用过qt开发C++GUI程序的人都知道。</p></blockquote><p><strong>7、Python的版本有很多，做不同的项目都需要不同的版本，需要准备多套环境，如何做版本管理？</strong></p><blockquote><p>可以使用pyenv管理Python环境。版本再多都没事，而且永远都不要动系统自带的Python环境，有很多程序依赖于系统自带Python</p></blockquote><p><strong>8、Python面试有什么技巧？</strong></p><p>面试还是得看基础，看编程功底。比如以下几个面试题就很考验功底：</p><ul><li><p>实现一个栈</p></li><li><p>栈的应用，括号匹配的检测</p></li><li><p>四则运算的解析：优先级，括号，中括号，大括号</p></li><li><p>写一个正则引擎</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【填坑系列】Python基础知识总目录</title>
    <link href="/2016/12/04/%E3%80%90%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97%E3%80%91python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%9B%AE%E5%BD%95/"/>
    <url>/2016/12/04/%E3%80%90%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97%E3%80%91python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>Python基础知识初步分为以下几个部分</p><ul><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/pdf/pyenv%E7%AE%A1%E7%90%86python%E5%A4%9A%E7%89%88%E6%9C%AC%E5%92%8Cjupyter%E7%9A%84%E4%BD%BF%E7%94%A8.pdf">pyenv管理python多版本和jupyter的使用</a></li><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/pdf/2016-12-04%20python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.pdf">Python基础语法</a></li><li><a href="https://suncle.me/2016/09/02/Python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-list-tuple-dict-set/">Python内置结构-列表-元组-字典-集合</a></li><li><a href="https://suncle.me/2016/08/30/Python%E5%AD%97%E7%AC%A6%E4%B8%B2/">Python内置结构-字符串</a></li><li><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/pdf/2016-12-11%20python%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%92%8C%E5%88%87%E7%89%87.pdf">Python线性结构和切片</a></li><li><a href="https://suncle.me/2017/01/11/Python%E8%A7%A3%E6%9E%90%E5%BC%8F/">Python解析式</a></li><li><a href="https://suncle.me/2017/01/12/Python%E6%8B%89%E9%93%BE%E6%B3%95%E5%92%8C%E5%BC%80%E5%9C%B0%E5%9D%80%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8/">Python拉链法和开地址法实现字典</a></li><li><a href="https://suncle.me/2017/01/07/Python%E5%87%BD%E6%95%B0/">Python函数</a></li><li><a href="https://suncle.me/2017/02/15/Python%E8%A3%85%E9%A5%B0%E5%99%A8/">Python装饰器</a></li><li><a href="https://suncle.me/2017/02/13/Python-IO/">Python IO</a></li><li><a href="https://suncle.me/2017/03/08/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/">Python面向对象基础</a></li><li><a href="https://suncle.me/2017/03/15/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/">Python面向对象的魔术方法</a></li><li><a href="https://suncle.me/2017/03/05/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">Python异常处理</a></li><li><a href="https://suncle.me/2017/03/16/Python%E6%8F%8F%E8%BF%B0%E5%99%A8/">Python描述器</a></li><li><a href="https://suncle.me/2017/03/23/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B/">Python多线程</a></li><li><a href="https://suncle.me/2017/03/24/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">Python网络编程</a></li><li><a href="https://suncle.me/2017/04/07/Python-WSGI%E6%8E%A5%E5%8F%A3/">Python-WSG接口</a></li><li><a href="https://suncle.me/2017/04/14/Python-pymysql/">Python-pymysql</a></li></ul><p>每次实现一个部分就在上面添加该部分的链接。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle的userenv和nls_lang详解</title>
    <link href="/2016/12/01/oracle%E7%9A%84userenv%E5%92%8Cnls-lang%E8%AF%A6%E8%A7%A3/"/>
    <url>/2016/12/01/oracle%E7%9A%84userenv%E5%92%8Cnls-lang%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="oracle的userenv和nls-lang详解"><a href="#oracle的userenv和nls-lang详解" class="headerlink" title="oracle的userenv和nls_lang详解"></a>oracle的userenv和nls_lang详解</h1><h2 id="1、userenv最常见的使用"><a href="#1、userenv最常见的使用" class="headerlink" title="1、userenv最常见的使用"></a>1、userenv最常见的使用</h2><p>userenv函数返回当前会话（session）的相关信息。以下sql语句可以查询当前会话连接的数据库字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><p>有关<code>userenv(&#39;parameter&#39;)</code>返回值的官网介绍如下</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_194757.jpg"></p><p>意思就是：返回的是当前会话使用的language和territory。characterset是数据库的字符集。</p><p>下面我们就去验证这种情况</p><span id="more"></span><h2 id="2、windows上plsql使用userenv"><a href="#2、windows上plsql使用userenv" class="headerlink" title="2、windows上plsql使用userenv"></a>2、windows上plsql使用userenv</h2><p>先看下数据库真实的语言、地区和字符集</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_205128.jpg"></p><p>再看下windows上NLS_LANG环境变量</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/oracle%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpg"></p><p>最后看下plsql上userenv执行的结果</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_205210.jpg"></p><p>可以发现在windows上使用plsql的时候语言和地区使用的是plsql的环境变量NLS_LANG。</p><h2 id="3、Linux上sqlplus使用userenv"><a href="#3、Linux上sqlplus使用userenv" class="headerlink" title="3、Linux上sqlplus使用userenv"></a>3、Linux上sqlplus使用userenv</h2><p>首先看一下NLS_LANG为空的情况下userenv的返回值</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_220921.jpg"></p><p>可以看到<code>userenv(&#39;language&#39;)</code>的返回值是<code>AMERICAN_AMERICA.ZHS16GBK</code>。这个值是怎么来的呢？从Oracle官网上看是取的默认值，如下图</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_222032.jpg"></p><ul><li>如果Oracle通用安装程序没有指定NLS_LANG，则默认值是<code>AMERICAN_AMERICA.US7ASCII</code></li><li>如果language没有指定，则language的默认值是<code>AMERICAN</code></li><li>如果territory没有指定，则territory的默认值由language这个值派生而来。</li><li>如果charset没有指定，则在创建session的时候charset的值是数据库的characterset。</li><li>NLS_LANG的每一个component都是可选的，如果只想指定NLS_LANG的territory，那么需要这样指定：<code>NLS_LANG=_JAPAN</code>。此时territory的值是<code>JAPAN</code></li></ul><p>具体参见：<a href="https://docs.oracle.com/cd/E11882_01/server.112/e10729/ch3globenv.htm#NLSPG189">Choosing a Locale with the NLS_LANG Environment Variable</a></p><p>下面继续验证</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_223909.jpg"></p><p>可以看到指定NLS_LANG之后，<code>userenv(&#39;language&#39;)</code>从会话中取得的语言和地区发生了变化，但是字符集仍然取得的是数据库的字符集。</p><h2 id="4、问题：中文乱码在哪个环节产生的？"><a href="#4、问题：中文乱码在哪个环节产生的？" class="headerlink" title="4、问题：中文乱码在哪个环节产生的？"></a>4、问题：中文乱码在哪个环节产生的？</h2><p>由以上分析可知，不管是什么样的客户端程序（不管是plsql还是sqlplus），在创建会话的时候字符都是取数据库本身的字符集。因此客户端程序和session的字符集不一致的时候会产生转码。如果转码的过程中出现了字节损失，则存储的真实数据就是损失之后的数据。至于我们看到的乱码是因为存储的数据会在查询的时候再次转码成客户端程序的字符集，由于数据缺失，因此就乱码了。</p><p>至于中文乱码的验证可以参见<a href="http://blog.itpub.net/519536/viewspace-626952/">【字符集】论Oracle字符集“转码”过程</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符集</tag>
      
      <tag>nls_lang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle字符集检查和修改</title>
    <link href="/2016/12/01/oracle%E5%AD%97%E7%AC%A6%E9%9B%86%E6%A3%80%E6%9F%A5%E5%92%8C%E4%BF%AE%E6%94%B9/"/>
    <url>/2016/12/01/oracle%E5%AD%97%E7%AC%A6%E9%9B%86%E6%A3%80%E6%9F%A5%E5%92%8C%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Oracle字符集检查和修改"><a href="#Oracle字符集检查和修改" class="headerlink" title="Oracle字符集检查和修改"></a>Oracle字符集检查和修改</h1><p>在部署重构版测试环境时，需要创建Oracle数据库，使用dbca创建数据库之后没有注意数据库本身的字符集，导致后续所有的数据库脚本执行后中文乱码。最后的解决办法是清掉全库数据，再修改字符集，重启数据库。</p><h2 id="1、Oracle字符集概述"><a href="#1、Oracle字符集概述" class="headerlink" title="1、Oracle字符集概述"></a>1、Oracle字符集概述</h2><p>系统或者程序运行的环境就是一个我们常见的locale。而设置数据库locale最简单的方法就是设置NLS_LANG这个环境参数。在linux中NLS_LANG是一个环境变量，在windows中NLS_LANG是写在注册表中的。NLS_LANG这个参数由三个组成部分，分别是语言（language）, 区域（territory）和字符集（character set），格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">NLS_LANG = language_territory.charset<br></code></pre></td></tr></table></figure><p>我们平时最常见的就是：<code>AMERICAN_AMERICA.ZHS16GBK</code>和<code>SIMPLIFIED CHINESE_CHINA.ZHS16GBK</code></p><p>NLS_LANG的作用官网是这样说的：</p><ul><li>It sets the language and territory used by the client application and the database server. It also sets the client’s character set, which is the character set for data entered or displayed by a client program</li></ul><span id="more"></span><p>意思就是说：</p><ul><li>NLS_LANG设置了客户端应用程序和数据库服务器使用的语言和区域。它还设置了客户端的字符集，这是<strong>客户端程序用于数据输入或者显示的字符集</strong>。也就是说如果客户端字符集和NLS_LANG中的charset不同，则会乱码。</li></ul><h2 id="2、检查Oracle-Server字符集"><a href="#2、检查Oracle-Server字符集" class="headerlink" title="2、检查Oracle Server字符集"></a>2、检查Oracle Server字符集</h2><p>检查Oracle Server字符集最常用的方法有两种</p><h3 id="▶查询nls-database-parameters"><a href="#▶查询nls-database-parameters" class="headerlink" title="▶查询nls_database_parameters"></a>▶查询nls_database_parameters</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> nls_database_parameters;<br></code></pre></td></tr></table></figure><h3 id="▶使用userenv函数"><a href="#▶使用userenv函数" class="headerlink" title="▶使用userenv函数"></a>▶使用userenv函数</h3><p>userenv函数返回当前会话（session）的相关信息。以下sql语句可以查询当前会话连接的数据库字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><p>有关<code>userenv(&#39;parameter&#39;)</code>返回值的官网介绍如下</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/2016-11-29_194757.jpg"></p><p>意思就是：返回的是当前会话使用的language和territory。characterset是数据库的字符集。</p><p>userenv函数的具体使用和当前会话字符集的取值详见以下链接</p><p><a href="https://suncle.me/2016/12/01/oracle%E7%9A%84userenv%E5%92%8Cnls-lang%E8%AF%A6%E8%A7%A3/">oracle的userenv和nls_lang详解</a></p><h2 id="3、修改Oracle-Server字符集"><a href="#3、修改Oracle-Server字符集" class="headerlink" title="3、修改Oracle Server字符集"></a>3、修改Oracle Server字符集</h2><p>一旦数据库创建后，数据库的字符集理论上讲是不能改变的。因此，在设计和安装之初考虑使用哪一种字符集十分重要。根据Oracle的官方说明，字符集的转换是从子集到超集受支持,反之不行。如果两种字符集之间根本没有子集和超集的关系，那么字符集的转换是不受oracle支持的。对数据库server而言，错误的修改字符集将会导致很多不可测的后果，可能会严重影响数据库的正常运行，所以在修改之前一定要确认两种字符集是否存在子集和超集的关系。一般来说，除非万不得已，我们不建议修改oracle数据库server端的字符集。</p><p>以下是修改server端字符集的方法——不建议使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn <span class="hljs-operator">/</span><span class="hljs-keyword">as</span> sysdba <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> shutdown immediate; <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> startup mount <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">SYSTEM</span> ENABLE RESTRICTED SESSION; <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-keyword">SET</span> JOB_QUEUE_PROCESSES<span class="hljs-operator">=</span><span class="hljs-number">0</span>; <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-keyword">SET</span> AQ_TM_PROCESSES<span class="hljs-operator">=</span><span class="hljs-number">0</span>; <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> database <span class="hljs-keyword">open</span>; <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> ZHS16GBK; <br><span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> ZHS16GBK <br><span class="hljs-operator">*</span> <br>ERROR <span class="hljs-keyword">at</span> line <span class="hljs-number">1</span>: <br>ORA<span class="hljs-number">-12712</span>: <span class="hljs-keyword">new</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> must be a superset <span class="hljs-keyword">of</span> <span class="hljs-keyword">old</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> <br>提示我们的字符集：新字符集必须为旧字符集的超集，这时我们可以跳过超集的检查做更改： <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> INTERNAL_USE ZHS16GBK; <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v$nls_parameters; <br>重启检查是否更改完成： <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> shutdown immediate;  <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> startup <br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v$nls_parameters; <br></code></pre></td></tr></table></figure><p>具体使用方法参见：<a href="https://blog.csdn.net/dream19881003/article/details/6800056">oracle服务器和客户端字符集的查看和修改</a></p><h2 id="4、检查Oracle-Client字符集"><a href="#4、检查Oracle-Client字符集" class="headerlink" title="4、检查Oracle Client字符集"></a>4、检查Oracle Client字符集</h2><p>windows查看nls_lang</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set NLS_LANG<br></code></pre></td></tr></table></figure><p>linux查看nls_lang</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $NLS_LANG<br></code></pre></td></tr></table></figure><h2 id="5、修改Oracle-Client字符集"><a href="#5、修改Oracle-Client字符集" class="headerlink" title="5、修改Oracle Client字符集"></a>5、修改Oracle Client字符集</h2><p>修改客户端字符集只需要修改上述检查结果中的NLS_LANG即可。</p><h2 id="6、整理补充"><a href="#6、整理补充" class="headerlink" title="6、整理补充"></a>6、整理补充</h2><p><strong>▶数据库字符集</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> nls_database_parameters ;<br><span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><ul><li>以上两种方法取得的都是数据库字符集，来源于props$，是表示数据库的字符集。</li></ul><p><strong>▶实例字符集</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> nls_instance_parameters; <br></code></pre></td></tr></table></figure><ul><li>主要涉及NLS_LANGUAGE、NLS_TERRITORY的值. NLS_INSTANCE_PARAMETERS其来源于v$parameter</li></ul><p><strong>▶会话字符集</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> nls_session_parameters; <br></code></pre></td></tr></table></figure><ul><li>来源于v$nls_parameters，表示会话自己的设置，可能是会话的环境变量或者是alter session完成，如果会话没有特殊的设置，将与nls_instance_parameters一致。</li></ul><p>详见oracle官网：<a href="https://docs.oracle.com/cd/E11882_01/server.112/e10729/ch3globenv.htm#NLSPG194">NLS Database Parameters</a></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/oracle/NLS%20Data%20Dictionary%20Views.jpg"></p><hr>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>字符集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数定义及参数详解</title>
    <link href="/2016/09/05/python%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <url>/2016/09/05/python%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python函数定义及参数详解"><a href="#Python函数定义及参数详解" class="headerlink" title="Python函数定义及参数详解"></a>Python函数定义及参数详解</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>首先我们来创建一个函数，输出指定范围内的斐波拉契数列（Fibonacci series）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Created on 2016年9月4日下午2:37:31</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: D:/Workspaces/eclipse/HelloPython/main/FibonacciSeries.py</span><br><span class="hljs-string">@function: 定义函数-输出给定范围内的斐波拉契数列</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fibonacci</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-comment">#print &quot;success&quot;</span><br>    a=<span class="hljs-number">0</span><br>    b=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a&lt;n:<br>        <span class="hljs-built_in">print</span> a,<br>        a,b=b,a+b<br><br><span class="hljs-comment">#call the function Fibonacci</span><br>Fibonacci(<span class="hljs-number">2000</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;\n&#x27;</span>,<br><span class="hljs-built_in">print</span> Fibonacci<br>f=Fibonacci<br>f(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;\n&#x27;</span>,<br><span class="hljs-built_in">print</span> Fibonacci(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><span id="more"></span><p>输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">13</span> <span class="hljs-number">21</span> <span class="hljs-number">34</span> <span class="hljs-number">55</span> <span class="hljs-number">89</span> <span class="hljs-number">144</span> <span class="hljs-number">233</span> <span class="hljs-number">377</span> <span class="hljs-number">610</span> <span class="hljs-number">987</span> <span class="hljs-number">1597</span> <br><span class="hljs-section">&lt;function Fibonacci at 0x000000000258D9E8&gt;</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">13</span> <span class="hljs-number">21</span> <span class="hljs-number">34</span> <span class="hljs-number">55</span> <span class="hljs-number">89</span> <br><span class="hljs-attribute">None</span><br></code></pre></td></tr></table></figure><blockquote><p>由第一行可知 Fibonacci函数输出了2000以内的斐波拉契数列。</p><p>由第二行可知 Fibonacci函数在内存中的地址</p><p>由第三行可知 将Fibonacci函数的地址值赋给另外一个变量f之后，f也就是一个函数了，这类似于重名机制</p><p>由第四行可知 虽然Fibonacci函数没有<code>return</code>语句，但是如果我们使用<code>print</code>输出的时候可以发现还是有返回值的，只是这个返回值是<code>None</code>，这是Python的內建名称。</p></blockquote><p>我们也可以写一个函数，不输出斐波拉契数列的值，而是把值作为返回值返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Created on 2016年9月4日下午3:07:06</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: D:/Workspaces/eclipse/HelloPython/main/FibonacciSeriesAdv.py</span><br><span class="hljs-string">@function: 函数定义-返回斐波拉契数列，而不是直接打印</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fibonacci</span>(<span class="hljs-params">n</span>):<br>    a=<span class="hljs-number">0</span><br>    b=<span class="hljs-number">1</span><br>    result=[]<br>    <span class="hljs-keyword">while</span> a&lt;n:<br>        result.append(a)<br>        a,b=b,a+b<br>    <span class="hljs-keyword">return</span> result<br>result=Fibonacci(<span class="hljs-number">2000</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span> x, <br></code></pre></td></tr></table></figure><p>输出结果：0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597</p><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><p>Python 的内建标准类型有一种分类标准是分为可变类型与不可变类型</p><ul><li>可变类型：列表、字典</li><li>不可变类型：数字、字符串、元组</li></ul><p>上面函数定义中的参数都是属于不可变类型的。</p><p>可变参数三种情况：默认参数，位置参数<code>*args</code>关键字参数<code>**kwargs</code>。</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数的好处就是在调用函数的时候写上去的参数比在函数定义时的参数少。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python </span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Created on 2016年9月5日下午2:50:12</span><br><span class="hljs-string">@author: Flowsnow</span><br><span class="hljs-string">@file: D:/Workspaces/eclipse/HelloPython/main/askYesOrNo.py</span><br><span class="hljs-string">@function: 测试默认参数的使用</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ask_ok</span>(<span class="hljs-params">prompt, retries=<span class="hljs-number">4</span>, complaint=<span class="hljs-string">&#x27;Yes or no, please!&#x27;</span></span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        ok = raw_input(prompt)<br>        <span class="hljs-keyword">if</span> ok <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;ye&#x27;</span>, <span class="hljs-string">&#x27;yes&#x27;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> ok <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;no&#x27;</span>, <span class="hljs-string">&#x27;nop&#x27;</span>, <span class="hljs-string">&#x27;nope&#x27;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        retries = retries - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> retries &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> IOError(<span class="hljs-string">&#x27;refusenik user&#x27;</span>)<br>        <span class="hljs-built_in">print</span> complaint<br></code></pre></td></tr></table></figure><p>这个函数的调用方法有很多，比如：</p><ul><li>只给必选参数：<code>ask_ok(&#39;OK to overwrite the file?&#39;)</code></li><li>给一个可选参数：<code>ask_ok(&#39;OK to overwrite the file?&#39;, 2)</code></li><li>给所有的可选参数：<code>ask_ok(&#39;OK to overwrite the file?&#39;, 2, &#39;Come on, only yes or no!&#39;)</code></li></ul><p>关于默认值，应该注意的是默认值只会在函数定义的时候被python解析一次。因此</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">5</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">arg=i</span>):<br>    <span class="hljs-built_in">print</span> arg<br><br>i = <span class="hljs-number">6</span><br>f()<br></code></pre></td></tr></table></figure><p>这段代码输出的应该是5，而不是6，就是因为i是在函数定义的时候解析的，这个时候i&#x3D;5。</p><p><strong>重要警告：</strong>默认值只会解析一次。当默认参数是可变对象时，影响比较大，比如列表，字典或者类的对象。下面演示的这个函数会把参数积累并传到随后的函数调用里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, L=[]</span>):<br>    L.append(a)<br>    <span class="hljs-keyword">return</span> L<br><br><span class="hljs-built_in">print</span> f(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span> f(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> f(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>这段代码会输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>如果不想默认参数在后面的函数调用中共享，可以把函数写成这种形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, L=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> L <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        L = []<br>    L.append(a)<br>    <span class="hljs-keyword">return</span> L<br></code></pre></td></tr></table></figure><p>这段代码会输出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1]</span><br><span class="hljs-string">[2]</span><br><span class="hljs-string">[3]</span><br></code></pre></td></tr></table></figure><h3 id="位置参数-args"><a href="#位置参数-args" class="headerlink" title="位置参数*args"></a>位置参数*args</h3><p>位置参数需要在参数前面加一个星号。把参数收集到一个元tuple中，作为变量args。至于为什么叫位置参数，这个是因为各个参数是按照顺序接收的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">argTest</span>(<span class="hljs-params">arg1,*args</span>):<br>    <span class="hljs-built_in">print</span> arg1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;~start to print *args~&#x27;</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-built_in">print</span> x,<br><br>argTest(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>这段代码会输出</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1<br>~start <span class="hljs-keyword">to</span> <span class="hljs-built_in">print</span> <span class="hljs-number">*a</span>rgs~<br>two 3<br></code></pre></td></tr></table></figure><p>args被解释为包含多个变量的元组tuple。因此也可用如下写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">argTest</span>(<span class="hljs-params">arg1,*args</span>):<br>    <span class="hljs-built_in">print</span> arg1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;~start to print *args~&#x27;</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-built_in">print</span> x,<br><br><span class="hljs-comment">#argTest(1,&#x27;two&#x27;,3)</span><br>args=[<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-number">3</span>]<br>argTest(<span class="hljs-number">1</span>,*args)<br></code></pre></td></tr></table></figure><h3 id="关键字参数-kwargs"><a href="#关键字参数-kwargs" class="headerlink" title="关键字参数**kwargs"></a>关键字参数**kwargs</h3><p>函数也能够按照<code>kwarg=value</code>这种形式的关键字参数来调用。关键字参数需要在参数前面加两个星号。其作用是把参数收集成一个字典类型，包含参数名和值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">argTest</span>(<span class="hljs-params">arg1,**kwargs</span>):<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;arg1&#x27;</span>,arg1<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> kwargs:<br>        <span class="hljs-built_in">print</span> key,kwargs[key]<br>argTest(<span class="hljs-number">1</span>,arg2=<span class="hljs-string">&#x27;aa&#x27;</span>,arg3=<span class="hljs-string">&#x27;bb&#x27;</span>)<br>argTest(arg1=<span class="hljs-number">1</span>,arg2=<span class="hljs-string">&#x27;aa&#x27;</span>,arg3=<span class="hljs-string">&#x27;bb&#x27;</span>,arg4=<span class="hljs-string">&#x27;cc&#x27;</span>)<br>arg=&#123;<span class="hljs-string">&#x27;arg2&#x27;</span>:<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;arg3&#x27;</span>:<span class="hljs-string">&#x27;cc&#x27;</span>,<span class="hljs-string">&#x27;arg4&#x27;</span>:<span class="hljs-string">&#x27;dd&#x27;</span>&#125;<br>argTest(arg1=<span class="hljs-string">&#x27;ss&#x27;</span>,**arg)<br>argTest(arg1=<span class="hljs-string">&#x27;ss&#x27;</span>,**arg)<br></code></pre></td></tr></table></figure><p>这段代码会输出</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ar<span class="hljs-name">g1</span> <span class="hljs-number">1</span><br>ar<span class="hljs-name">g2</span> aa<br>ar<span class="hljs-name">g3</span> bb<br>ar<span class="hljs-name">g1</span> <span class="hljs-number">1</span><br>ar<span class="hljs-name">g2</span> aa<br>ar<span class="hljs-name">g3</span> bb<br>ar<span class="hljs-name">g4</span> cc<br>ar<span class="hljs-name">g1</span> ss<br>ar<span class="hljs-name">g2</span> bb<br>ar<span class="hljs-name">g3</span> cc<br>ar<span class="hljs-name">g4</span> dd<br>ar<span class="hljs-name">g1</span> ss<br>ar<span class="hljs-name">g2</span> bb<br>ar<span class="hljs-name">g3</span> cc<br>ar<span class="hljs-name">g4</span> dd<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.python.org/2/tutorial/controlflow.html#defining-functions">Python官网-defining-functions</a></p><p><a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/pdf/Passing%20arguments%20to%20Python%20functions1.pdf">Passing arguments to Python functions1.pdf </a></p><p><a href="http://bbs.chinaunix.net/thread-3572865-1-1.html">Python中*args与**args的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
      <tag>参数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基本数据类型-list-tuple-dict-set</title>
    <link href="/2016/09/02/python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-list-tuple-dict-set/"/>
    <url>/2016/09/02/python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-list-tuple-dict-set/</url>
    
    <content type="html"><![CDATA[<h1 id="Python基本数据类型-list-tuple-dict-set"><a href="#Python基本数据类型-list-tuple-dict-set" class="headerlink" title="Python基本数据类型-list-tuple-dict-set"></a>Python基本数据类型-list-tuple-dict-set</h1><table><thead><tr><th>数据类型</th><th>表示方法</th><th>特性</th></tr></thead><tbody><tr><td>list</td><td>列表用方括号表示：[]</td><td>list是一种有序的集合，可以随时添加和删除其中的元素。和C++数组的区别就是类型可不同。</td></tr><tr><td>tuple</td><td>元组用圆括号表示：()</td><td>和list相比唯一的差异在于元组是只读的，不能修改。</td></tr><tr><td>dict</td><td>字典用花括号表示：{}</td><td>列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</td></tr><tr><td>set</td><td>set()</td><td>集合是一个无序不重复元素集，基本功能包括关系测试和消除重复元素</td></tr></tbody></table><span id="more"></span><h2 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h2><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p><strong>指定元素初始化列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num=[<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;cc&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> num<br>[<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p><strong>从字符串初始化列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&#x27;oiawoidhoawd97192048f&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num=<span class="hljs-built_in">list</span>(a)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> num<br>[<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>从元组初始化列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>num=<span class="hljs-built_in">list</span>(a)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> num<br></code></pre></td></tr></table></figure><p><strong>创建一个空列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num=[]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> num<br>[]<br></code></pre></td></tr></table></figure><p><strong>用某个固定值初始化列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>initial_value=<span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>list_length=<span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>sample_list=[initial_value]*list_length<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> sample_list<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sample_list=[initial_value <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> sample_list<br>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h3 id="访问列表"><a href="#访问列表" class="headerlink" title="访问列表"></a>访问列表</h3><p><strong>访问单个元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>num[<span class="hljs-number">3</span>]<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>num[<span class="hljs-number">0</span>]<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num[-<span class="hljs-number">1</span>]<br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num[-<span class="hljs-number">3</span>]<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>遍历整个列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> num:<br>    <span class="hljs-built_in">print</span> a,<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num)):<br>    <span class="hljs-built_in">print</span> num[i],<br></code></pre></td></tr></table></figure><p>输出结果：0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7</p><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><p><strong>更新列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>num[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> num<br>[<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><p><strong>删除列表元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num)):<br>    <span class="hljs-built_in">print</span> num[i],<br><span class="hljs-keyword">del</span> num[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span> num<br></code></pre></td></tr></table></figure><p>输出结果：0 1 2 3 4 5 6 7 [0, 1, 3, 4, 5, 6, 7]</p><p><strong>列表操作符+</strong>*</p><p>列表对+和<em>的操作符与字符串相似。+号用于组合列表，</em>号用于重复列表。</p><p>以下为+操作符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b=[<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c=a+b<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> c<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><p>以下为*操作符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c=a*<span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> c<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h3><p>以下是列表相关函数的分类</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/python/xmind/%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C.png" alt="列表分类"></p><p>xmind文件可点<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/xmind/%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C.xmind">这里</a>下载</p><p>以下是<code>help(list)</code>的结果中关于重点函数的介绍部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python">Help on <span class="hljs-built_in">list</span> <span class="hljs-built_in">object</span>:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>(<span class="hljs-title class_ inherited__">object</span>)<br> |  <span class="hljs-built_in">list</span>() -&gt; new empty <span class="hljs-built_in">list</span><br> |  <span class="hljs-built_in">list</span>(iterable) -&gt; new <span class="hljs-built_in">list</span> initialized <span class="hljs-keyword">from</span> iterable<span class="hljs-string">&#x27;s items</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  Methods defined here:</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  append(...)</span><br><span class="hljs-string"> |      L.append(object) -&gt; None -- append object to end</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  clear(...)</span><br><span class="hljs-string"> |      L.clear() -&gt; None -- remove all items from L</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  copy(...)</span><br><span class="hljs-string"> |      L.copy() -&gt; list -- a shallow copy of L</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  count(...)</span><br><span class="hljs-string"> |      L.count(value) -&gt; integer -- return number of occurrences of value</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  extend(...)</span><br><span class="hljs-string"> |      L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  index(...)</span><br><span class="hljs-string"> |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.</span><br><span class="hljs-string"> |      Raises ValueError if the value is not present.</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  insert(...)</span><br><span class="hljs-string"> |      L.insert(index, object) -- insert object before index</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  pop(...)</span><br><span class="hljs-string"> |      L.pop([index]) -&gt; item -- remove and return item at index (default last).</span><br><span class="hljs-string"> |      Raises IndexError if list is empty or index is out of range.</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  remove(...)</span><br><span class="hljs-string"> |      L.remove(value) -&gt; None -- remove first occurrence of value.</span><br><span class="hljs-string"> |      Raises ValueError if the value is not present.</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  reverse(...)</span><br><span class="hljs-string"> |      L.reverse() -- reverse *IN PLACE*</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  sort(...)</span><br><span class="hljs-string"> |      L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  ----------------------------------------------------------------------</span><br><span class="hljs-string"> |  Data and other attributes defined here:</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  __hash__ = None</span><br></code></pre></td></tr></table></figure><h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><p>Python的元组与列表类似，不同之处在于元组的元素不能修改；元组使用小括号()，列表使用方括号[]；元组创建很简单，只需要在括号中添加元素，并使用逗号(,)隔开即可。</p><h3 id="元组初始化"><a href="#元组初始化" class="headerlink" title="元组初始化"></a>元组初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(t)<br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(t)<br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="元组函数"><a href="#元组函数" class="headerlink" title="元组函数"></a>元组函数</h3><p>关于tuple相关的函数可以使用help命令获得。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(<span class="hljs-built_in">tuple</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">Help on <span class="hljs-keyword">class</span> <span class="hljs-title class_">tuple</span> <span class="hljs-keyword">in</span> module builtins:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tuple</span>(<span class="hljs-title class_ inherited__">object</span>)<br> |  <span class="hljs-built_in">tuple</span>() -&gt; empty <span class="hljs-built_in">tuple</span><br> |  <span class="hljs-built_in">tuple</span>(iterable) -&gt; <span class="hljs-built_in">tuple</span> initialized <span class="hljs-keyword">from</span> iterable<span class="hljs-string">&#x27;s items</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  If the argument is a tuple, the return value is the same object.</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  Methods defined here:</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  count(...)</span><br><span class="hljs-string"> |      T.count(value) -&gt; integer -- return number of occurrences of value</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  index(...)</span><br><span class="hljs-string"> |      T.index(value, [start, [stop]]) -&gt; integer -- return first index of value.</span><br><span class="hljs-string"> |      Raises ValueError if the value is not present.</span><br></code></pre></td></tr></table></figure><p>list和index方法的使用和list一模一样。</p><h3 id="命名元组"><a href="#命名元组" class="headerlink" title="命名元组"></a>命名元组</h3><p>Python有一个类似tuple的容器namedtuples（命名元组），位于collection模块中。namedtuple是继承自tuple的子类，可创建一个和tuple类似的对象，而且对象拥有可访问的属性。</p><p>在c&#x2F;c++中，对应的数据类型是结构体struct。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><span class="hljs-comment">//声明一个结构体类型Point,代表一个点</span><br>&#123;<br>    <span class="hljs-type">int</span> x;  <span class="hljs-comment">//包括一个整型变量x</span><br>    <span class="hljs-type">int</span> y;  <span class="hljs-comment">//包括一个整型变量y</span><br>&#125;;  <span class="hljs-comment">//最后有一个分号</span><br></code></pre></td></tr></table></figure><p>这样就声明了一个新的结构体类型Point，有了类型就可以定义结构体的变量了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">Point p1,p2;<br></code></pre></td></tr></table></figure><p>在c&#x2F;c++中结构体的最大作用在于组织数据，也就是对数据的封装（可以把结构体理解为特殊的类）。在python中起相同作用的就是命名元组了。命名元祖的具体使用如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<span class="hljs-comment">#依赖collections包的namedtuple模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="hljs-string">&#x27;Point&#x27;</span>, <span class="hljs-string">&#x27;x,y&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p1 = Point(<span class="hljs-number">11</span>, y=<span class="hljs-number">22</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p1<br>Point(x=<span class="hljs-number">11</span>, y=<span class="hljs-number">22</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(p1)<br>__main__.Point<br><span class="hljs-meta">&gt;&gt;&gt; </span>p1.x<br><span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p1.y<br><span class="hljs-number">22</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p1[<span class="hljs-number">0</span>] + p1[<span class="hljs-number">1</span>]<br><span class="hljs-number">33</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a, b = p1<br><span class="hljs-meta">&gt;&gt;&gt; </span>a, b<br>(<span class="hljs-number">11</span>, <span class="hljs-number">22</span>)<br></code></pre></td></tr></table></figure><p>命名元祖的具体使用可以参见：<a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"><code>namedtuple()</code></a>以及<a href="https://blog.csdn.net/article/details?id=52183211">python 命名元组</a></p><h2 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h2><p>字典相关的所有内容如下</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/python/xmind/%E5%AD%97%E5%85%B8%E5%8F%8A%E5%85%B6%E6%93%8D%E4%BD%9C.png" alt="字典小结"></p><p>xmind文件可点<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/xmind/%E5%AD%97%E5%85%B8%E5%8F%8A%E5%85%B6%E6%93%8D%E4%BD%9C.xmind">这里</a>下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(<span class="hljs-built_in">dict</span>)<br></code></pre></td></tr></table></figure><p>可以发现，dict是python內建的类，是一种key-value结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">Help on <span class="hljs-keyword">class</span> <span class="hljs-title class_">dict</span> <span class="hljs-keyword">in</span> module __builtin__:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dict</span>(<span class="hljs-title class_ inherited__">object</span>)<br> |  <span class="hljs-built_in">dict</span>() -&gt; new empty dictionary<br> |  <span class="hljs-built_in">dict</span>(mapping) -&gt; new dictionary initialized <span class="hljs-keyword">from</span> a mapping <span class="hljs-built_in">object</span><span class="hljs-string">&#x27;s</span><br><span class="hljs-string"> |      (key, value) pairs</span><br><span class="hljs-string"> |  dict(iterable) -&gt; new dictionary initialized as if via:</span><br><span class="hljs-string"> |      d = &#123;&#125;</span><br><span class="hljs-string"> |      for k, v in iterable:</span><br><span class="hljs-string"> |          d[k] = v</span><br><span class="hljs-string"> |  dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs</span><br><span class="hljs-string"> |      in the keyword argument list.  For example:  dict(one=1, two=2)</span><br><span class="hljs-string"> |  </span><br><span class="hljs-string"> |  Methods defined here:</span><br></code></pre></td></tr></table></figure><p>字典(dictionary)是除列表之外python中最灵活的内置数据结构类型。列表是有序的对象结合，<strong>字典是无序的对象集合</strong>。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;Alice&#x27;</span>: <span class="hljs-string">&#x27;2341&#x27;</span>, <span class="hljs-string">&#x27;Beth&#x27;</span>: <span class="hljs-string">&#x27;9102&#x27;</span>, <span class="hljs-string">&#x27;Cecil&#x27;</span>: <span class="hljs-string">&#x27;3258&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>每个键与值必须用冒号隔开(:)，每对用逗号分割，整体放在花括号中({})。键必须独一无二，但值则不必；值可以取任何数据类型，但必须是不可变的，如字符串，数或元组。</p><h3 id="字典初始化"><a href="#字典初始化" class="headerlink" title="字典初始化"></a>字典初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: d = &#123;&#125;<span class="hljs-comment">#&#123;&#125;被字典占用了，所以set不能按照这个初始化</span><br><br>In [<span class="hljs-number">2</span>]: <span class="hljs-built_in">type</span>(d)<br>Out[<span class="hljs-number">2</span>]: <span class="hljs-built_in">dict</span><br><br>In [<span class="hljs-number">3</span>]: d = <span class="hljs-built_in">dict</span>()<br><br>In [<span class="hljs-number">4</span>]: d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">5</span>]: d = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)])<span class="hljs-comment">#可接受以元组为元素的列表</span><br><br>In [<span class="hljs-number">6</span>]: d<br>Out[<span class="hljs-number">6</span>]: &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">7</span>]: d = <span class="hljs-built_in">dict</span>.fromkeys(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<span class="hljs-comment"># 传入的可迭代元素为key， 值为None</span><br><br>In [<span class="hljs-number">8</span>]: d<br>Out[<span class="hljs-number">8</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-literal">None</span>, <span class="hljs-number">1</span>: <span class="hljs-literal">None</span>, <span class="hljs-number">2</span>: <span class="hljs-literal">None</span>, <span class="hljs-number">3</span>: <span class="hljs-literal">None</span>, <span class="hljs-number">4</span>: <span class="hljs-literal">None</span>&#125;<br><br>In [<span class="hljs-number">9</span>]: d = <span class="hljs-built_in">dict</span>.fromkeys(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>), <span class="hljs-string">&#x27;abc&#x27;</span>)<span class="hljs-comment"># 传入的可迭代元素为key， 值为&#x27;abc&#x27;</span><br><br>In [<span class="hljs-number">10</span>]: d<br>Out[<span class="hljs-number">10</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p><code>d[key] = value</code>,<code>update</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">10</span>]: d<br>Out[<span class="hljs-number">10</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br><br>In [<span class="hljs-number">11</span>]: d[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span><span class="hljs-comment"># 可以直接使用key作为下标， 对某个不存在的下标赋值，会增加kv对</span><br><br>In [<span class="hljs-number">12</span>]: d<br>Out[<span class="hljs-number">12</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">13</span>]: d.update([(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-number">0</span>)])<span class="hljs-comment"># update 传入的参数需要和dict保持一致</span><br><br>In [<span class="hljs-number">14</span>]: d<br>Out[<span class="hljs-number">14</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">15</span>]: d.update([(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">4</span>)])<span class="hljs-comment">#对已经存在的update时会进行修改，通常用于合并字典</span><br><br>In [<span class="hljs-number">16</span>]: d<br>Out[<span class="hljs-number">16</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>pop 用于从字典删除一个key， 并返回其value，当删除不存在的key的时候， 会抛出KeyError。当删除不存在的key， 并且指定了默认值时， 不会抛出KeyError， 会返回默认值</li><li>popitem <strong>随机</strong> 返回并删除一个kv对的二元组</li><li>clear 清空一个字典</li><li>del语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">16</span>]: d<br>Out[<span class="hljs-number">16</span>]: &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">17</span>]: <span class="hljs-built_in">help</span>(d.pop)<br>Help on built-<span class="hljs-keyword">in</span> function pop:<br><br>pop(...) method of builtins.<span class="hljs-built_in">dict</span> instance<br>    D.pop(k[,d]) -&gt; v, remove specified key <span class="hljs-keyword">and</span> <span class="hljs-keyword">return</span> the corresponding value.<br>    If key <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> found, d <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">if</span> given, otherwise KeyError <span class="hljs-keyword">is</span> raised<br><br>In [<span class="hljs-number">18</span>]: d.pop(<span class="hljs-number">0</span>)<span class="hljs-comment"># 删除一个key，并且返回对应的value</span><br>Out[<span class="hljs-number">18</span>]: <span class="hljs-string">&#x27;abc&#x27;</span><br><br>In [<span class="hljs-number">19</span>]: d<br>Out[<span class="hljs-number">19</span>]: &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">20</span>]: d.pop(<span class="hljs-number">0</span>)<span class="hljs-comment"># 如果要删除的key不存在，则抛出KeyError</span><br>---------------------------------------------------------------------------<br>KeyError                                  Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">20</span>-e1702b259b84&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> d.pop(<span class="hljs-number">0</span>)<br><br>KeyError: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">21</span>]: d.pop(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;default&#x27;</span>)<span class="hljs-comment"># 如果给定default，则删除不存在的key时会返回default</span><br>Out[<span class="hljs-number">21</span>]: <span class="hljs-string">&#x27;default&#x27;</span><br><br>In [<span class="hljs-number">22</span>]: d.pop(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;default&#x27;</span>)<span class="hljs-comment"># 给定的default对存在的key不会产生影响</span><br>Out[<span class="hljs-number">22</span>]: <span class="hljs-string">&#x27;abc&#x27;</span><br><br>In [<span class="hljs-number">23</span>]: d<br>Out[<span class="hljs-number">23</span>]: &#123;<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><h4 id="单个元素的访问"><a href="#单个元素的访问" class="headerlink" title="单个元素的访问"></a>单个元素的访问</h4><ul><li>通过key直接访问</li><li>通过get函数访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: d = &#123;<span class="hljs-string">&#x27;r&#x27;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;p&#x27;</span>:<span class="hljs-number">0</span>&#125;<br><br>In [<span class="hljs-number">2</span>]: d<br>Out[<span class="hljs-number">2</span>]: &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;r&#x27;</span>: <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">3</span>]: d[<span class="hljs-string">&#x27;p&#x27;</span>]<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">0</span><br><br>In [<span class="hljs-number">4</span>]: d[<span class="hljs-string">&#x27;c&#x27;</span>]<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">5</span>]: d[<span class="hljs-string">&#x27;a&#x27;</span>]<br>---------------------------------------------------------------------------<br>KeyError                                  Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">5</span>-169a40407b7f&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> d[<span class="hljs-string">&#x27;a&#x27;</span>]<br><br>KeyError: <span class="hljs-string">&#x27;a&#x27;</span><br><br>In [<span class="hljs-number">6</span>]: d.get(<span class="hljs-string">&#x27;d&#x27;</span>)<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">2</span><br><br>In [<span class="hljs-number">7</span>]: d.get(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>In [<span class="hljs-number">8</span>]: d.get(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;default&#x27;</span>)<br>Out[<span class="hljs-number">8</span>]: <span class="hljs-string">&#x27;default&#x27;</span><br><br>In [<span class="hljs-number">9</span>]: <span class="hljs-built_in">help</span>(d.setdefault)<br><br><br>In [<span class="hljs-number">10</span>]: d.setdefault(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;default&#x27;</span>)<br>Out[<span class="hljs-number">10</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">11</span>]: d.setdefault(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;default&#x27;</span>)<br>Out[<span class="hljs-number">11</span>]: <span class="hljs-string">&#x27;default&#x27;</span><br><br>In [<span class="hljs-number">12</span>]: d<br>Out[<span class="hljs-number">12</span>]: &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;r&#x27;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h4><p><strong>直接<code>for in</code>遍历</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>直接用for in 遍历字典， 遍历的是字典的key</p><p><strong><code>keys</code>函数遍历</strong></p><ul><li>d.keys() # keys 方法返回一个可迭代对象， 元素是字典所有的key</li><li>d.keys() -&gt; dict_keys([‘d’, ‘a’, ‘c’, ‘r’, ‘p’])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.keys():<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p><strong><code>values</code>函数遍历</strong></p><ul><li>d.values() # values 方法返回一个可迭代对象，元素是字典所有的value</li><li>d.values() -&gt; dict_values([2, ‘default’, 3, 2, 0])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.values():<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p><strong><code>items</code>函数遍历</strong></p><ul><li>d.items() # items 方法返回一个可迭代对象， 元素是字典的所有(k, v)对</li><li>d.items()  -&gt; dict_items([(‘d’, 2), (‘a’, ‘default’), (‘c’, 3), (‘r’, 2), (‘p’, 0)])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d.items():<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-number">2</span>)<br>(<span class="hljs-symbol">&#x27;a</span>&#x27;, <span class="hljs-symbol">&#x27;default</span>&#x27;)<br>(<span class="hljs-symbol">&#x27;c</span>&#x27;, <span class="hljs-number">3</span>)<br>(<span class="hljs-symbol">&#x27;r</span>&#x27;, <span class="hljs-number">2</span>)<br>(<span class="hljs-symbol">&#x27;p</span>&#x27;, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>另外一种方式：解析(k,v)对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():<br><span class="hljs-built_in">print</span>(k, v)<br></code></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">d</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">a</span> default<br><span class="hljs-attribute">c</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">r</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">p</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>keys， values， items 返回的都类似生成器的对象, 它并不会复制一份内存</strong></p><p><strong>Python2对应的函数返回的是列表， 会复制一份内存</strong></p></blockquote><h3 id="字典的限制"><a href="#字典的限制" class="headerlink" title="字典的限制"></a>字典的限制</h3><ul><li>字典的key不能重复</li><li><strong>字典的key需要可hash</strong></li></ul><h3 id="默认字典"><a href="#默认字典" class="headerlink" title="默认字典"></a>默认字典</h3><p>默认字典是<code>defaultdict</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">25</span>]: <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>In [<span class="hljs-number">26</span>]: d1 = &#123;&#125;<br><br>In [<span class="hljs-number">27</span>]: d1<br>Out[<span class="hljs-number">27</span>]: &#123;&#125;<br><br>In [<span class="hljs-number">28</span>]: d2 = defaultdict(<span class="hljs-built_in">list</span>)<span class="hljs-comment"># list在此是list的初始化函数</span><br><br>In [<span class="hljs-number">29</span>]: d2<br>Out[<span class="hljs-number">29</span>]: defaultdict(<span class="hljs-built_in">list</span>, &#123;&#125;)<br><br>In [<span class="hljs-number">30</span>]: d1[<span class="hljs-string">&#x27;a&#x27;</span>]<br>---------------------------------------------------------------------------<br>KeyError                                  Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">30</span>-a9ea8faf9ae0&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> d1[<span class="hljs-string">&#x27;a&#x27;</span>]<br><br>KeyError: <span class="hljs-string">&#x27;a&#x27;</span><br><br>In [<span class="hljs-number">31</span>]: d2[<span class="hljs-string">&#x27;a&#x27;</span>]<br>Out[<span class="hljs-number">31</span>]: []<br></code></pre></td></tr></table></figure><p>default初始化的时候， 需要传入一个工厂函数， 具体的介绍可以使用help(defaultdict)来查看，当我们使用下标访问一个key的时候， 如果这个key不存在， defaultdict会自动调用初始化时传入的函数， 生成一个对象作为这个key的value。因此上面的list函数初始化的时候就生成了一个空列表。</p><p>以下是使用dict和defaultdict的对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;&#125;<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d.keys():<br>            d[k] = []<br>        d[k].append(v)<br></code></pre></td></tr></table></figure><p>如果这段代码使用defaultdict来写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d = defaultdict(<span class="hljs-built_in">list</span>)<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        d[k].append(v)<br></code></pre></td></tr></table></figure><h3 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h3><p>有序字典是OrderedDict（第一个字母大写）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">33</span>]: <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><br>In [<span class="hljs-number">34</span>]: d = OrderedDict()<br><br>In [<span class="hljs-number">35</span>]: d[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">36</span>]: d[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">37</span>]: d[<span class="hljs-number">1</span>] = <span class="hljs-number">5</span><br><br>In [<span class="hljs-number">38</span>]: d<br>Out[<span class="hljs-number">38</span>]: OrderedDict([(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)])<br><br>In [<span class="hljs-number">39</span>]: <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():<br>    ...:     <span class="hljs-built_in">print</span>(k, v)<br>    ...:     <br><span class="hljs-number">0</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">5</span><br><br></code></pre></td></tr></table></figure><p>有序字典会保持插入的顺序</p><h2 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h2><p>集合相关的所有内容如下</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/python/xmind/%E9%9B%86%E5%90%88%E5%92%8C%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C.png" alt="集合小结"></p><p>xmind文件可点<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/xmind/%E9%9B%86%E5%90%88%E5%92%8C%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C.xmind">这里</a>下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(<span class="hljs-built_in">set</span>)<br>Help on <span class="hljs-keyword">class</span> <span class="hljs-title class_">set</span> <span class="hljs-keyword">in</span> module __builtin__:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">set</span>(<span class="hljs-title class_ inherited__">object</span>)<br> |  <span class="hljs-built_in">set</span>() -&gt; new empty <span class="hljs-built_in">set</span> <span class="hljs-built_in">object</span><br> |  <span class="hljs-built_in">set</span>(iterable) -&gt; new <span class="hljs-built_in">set</span> <span class="hljs-built_in">object</span><br> |  <br> |  Build an unordered collection of unique elements.<br> |  <br> |  Methods defined here:<br></code></pre></td></tr></table></figure><p>详细使用可以参考：<a href="https://blog.csdn.net/business122/article/details/7541486">https://blog.csdn.net/business122/article/details/7541486</a></p><p>下面是一个小例子：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">11</span>,<span class="hljs-number">22</span>]  </span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b = <span class="hljs-built_in">set</span>(a)  </span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b  </span><br>set([33, 11, 44, 22])  <br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b]  </span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c  </span><br>[33, 11, 44, 22]  <br></code></pre></td></tr></table></figure><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: s = <span class="hljs-built_in">set</span>()<br>In [<span class="hljs-number">3</span>]: s<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-built_in">set</span>()<br>In [<span class="hljs-number">4</span>]: s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>In [<span class="hljs-number">5</span>]: s<br>Out[<span class="hljs-number">5</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>In [<span class="hljs-number">6</span>]: s = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br>In [<span class="hljs-number">7</span>]: s<br>Out[<span class="hljs-number">7</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h3><p>增加函数有两个<code>add</code>和<code>update</code></p><p><code>add</code>是增加单个元素，和列表的append操作类似，是原地修改</p><p><code>update</code>是增加一个可迭代对象，和列表的extend操作类似，是原地修改</p><p>两个函数对于已经存在的元素会什么也不做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">7</span>]: s<br>Out[<span class="hljs-number">7</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">8</span>]: s.add(<span class="hljs-number">3</span>)<br><br>In [<span class="hljs-number">9</span>]: s<br>Out[<span class="hljs-number">9</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">10</span>]: s.add(<span class="hljs-number">3</span>)<br><br>In [<span class="hljs-number">11</span>]: s<br>Out[<span class="hljs-number">11</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">12</span>]: <span class="hljs-built_in">help</span>(s.update)<br>Help on built-<span class="hljs-keyword">in</span> function update:<br><br>update(...) method of builtins.<span class="hljs-built_in">set</span> instance<br>    Update a <span class="hljs-built_in">set</span> <span class="hljs-keyword">with</span> the union of itself <span class="hljs-keyword">and</span> others.<br><br>In [<span class="hljs-number">13</span>]: s.update(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">7</span>))<br><br>In [<span class="hljs-number">14</span>]: s<br>Out[<span class="hljs-number">14</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br><br>In [<span class="hljs-number">15</span>]: s.update(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">9</span>))<br><br>In [<span class="hljs-number">16</span>]: s<br>Out[<span class="hljs-number">16</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><ul><li>remove 删除给定的元素， 元素不存在抛出KeyError（需要抛出异常时使用此函数）</li><li>discard 删除给定的元素， 元素不存在，什么也不做（和remove的唯一区别）</li><li>pop <strong>随机arbitrary</strong>删除一个元素并返回， 集合为空，抛出KeyError</li><li>clear 清空集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">16</span>]: s<br>Out[<span class="hljs-number">16</span>]: &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><br>In [<span class="hljs-number">17</span>]: s.remove(<span class="hljs-number">0</span>)<br><br>In [<span class="hljs-number">18</span>]: s<br>Out[<span class="hljs-number">18</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><br>In [<span class="hljs-number">19</span>]: s.remove(<span class="hljs-number">10</span>)<br>---------------------------------------------------------------------------<br>KeyError                                  Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">19</span>-99f2b84d3df8&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> s.remove(<span class="hljs-number">10</span>)<br><br>KeyError: <span class="hljs-number">10</span><br><br><br>In [<span class="hljs-number">21</span>]: s<br>Out[<span class="hljs-number">21</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><br>In [<span class="hljs-number">22</span>]: s.discard(<span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">23</span>]: s<br>Out[<span class="hljs-number">23</span>]: &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><br>In [<span class="hljs-number">24</span>]: s.discard(<span class="hljs-number">10</span>)<br><br>In [<span class="hljs-number">25</span>]: s<br>Out[<span class="hljs-number">25</span>]: &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><br>In [<span class="hljs-number">26</span>]: <span class="hljs-built_in">help</span>(s.pop)<br>Help on built-<span class="hljs-keyword">in</span> function pop:<br><br>pop(...) method of builtins.<span class="hljs-built_in">set</span> instance<br>    Remove <span class="hljs-keyword">and</span> <span class="hljs-keyword">return</span> an arbitrary（随机的） <span class="hljs-built_in">set</span> element.<br>    Raises KeyError <span class="hljs-keyword">if</span> the <span class="hljs-built_in">set</span> <span class="hljs-keyword">is</span> empty.<br><br>In [<span class="hljs-number">27</span>]: s.pop()<br>Out[<span class="hljs-number">27</span>]: <span class="hljs-number">3</span><br><br>In [<span class="hljs-number">28</span>]: s.pop()<br>Out[<span class="hljs-number">28</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">29</span>]: s.clear()<br><br>In [<span class="hljs-number">30</span>]: s<br>Out[<span class="hljs-number">30</span>]: <span class="hljs-built_in">set</span>()<br><br>In [<span class="hljs-number">31</span>]: s.pop()<br>---------------------------------------------------------------------------<br>KeyError                                  Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">31</span>-e76f41daca5e&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> s.pop()<br><br>KeyError: <span class="hljs-string">&#x27;pop from an empty set&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>集合不能修改单个元素</p><p>###查找</p><ul><li><p>集合不能通过索引</p></li><li><p>集合没有访问单个元素的方法</p></li><li><p><strong>集合不是线性结构， 集合元素没有顺序</strong></p></li></ul><p>集合的pop操作的随机性可以证明集合不是线性结构的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">32</span>]: s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">88</span>&#125;<br><br>In [<span class="hljs-number">33</span>]: s.pop()<br>Out[<span class="hljs-number">33</span>]: <span class="hljs-number">65</span><br></code></pre></td></tr></table></figure><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><ul><li>in</li><li>not in</li></ul><p>用于判断一个元素是否在容器中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">34</span>]: <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>Out[<span class="hljs-number">34</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">35</span>]: <span class="hljs-number">5</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>Out[<span class="hljs-number">35</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">36</span>]: <span class="hljs-number">5</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>Out[<span class="hljs-number">36</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">37</span>]: <span class="hljs-string">&#x27;love&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;I love python&#x27;</span><br>Out[<span class="hljs-number">37</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">38</span>]: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>Out[<span class="hljs-number">38</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">39</span>]: <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ,<span class="hljs-number">3</span> ,<span class="hljs-number">4</span>)<br>  File <span class="hljs-string">&quot;&lt;ipython-input-39-ed83805ebe55&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ,<span class="hljs-number">3</span> ,<span class="hljs-number">4</span>)<br>                ^<br>SyntaxError: invalid syntax<br><br><br>In [<span class="hljs-number">40</span>]: <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>Out[<span class="hljs-number">40</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">41</span>]: <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>Out[<span class="hljs-number">41</span>]: <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>集合的成员运算和其他线性结构的时间复杂度不同</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">42</span>]: lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>))<br><br>In [<span class="hljs-number">43</span>]: s = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>))<br><br>In [<span class="hljs-number">44</span>]: %%timeit<br>    ...: -<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> lst<br>    ...: <br><span class="hljs-number">1000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">1.61</span> ms per loop<br><br>In [<span class="hljs-number">45</span>]: %%timeit<br>    ...: -<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> s<br>    ...: <br>The slowest run took <span class="hljs-number">29.72</span> times longer than the fastest. This could mean that an intermediate result <span class="hljs-keyword">is</span> being cached.<br><span class="hljs-number">10000000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">49.3</span> ns per loop<br></code></pre></td></tr></table></figure><p>由以上可见，做成员运算的时候 集合的效率远高于列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">46</span>]: lst2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>))<br><br>In [<span class="hljs-number">47</span>]: s = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>))<br><br>In [<span class="hljs-number">48</span>]: %%timeit<br>    ...: -<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> lst2<br>    ...: <br><span class="hljs-number">1000000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">1.6</span> µs per loop<br><br>In [<span class="hljs-number">49</span>]: %%timeit<br>    ...: -<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> s<br>    ...: <br>The slowest run took <span class="hljs-number">20.77</span> times longer than the fastest. This could mean that an intermediate result <span class="hljs-keyword">is</span> being cached.<br><span class="hljs-number">10000000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">56.9</span> ns per loop<br></code></pre></td></tr></table></figure><p>做成员运算时 列表的效率和列表的规模有关，而集合的效率和集合的规模无关。</p><p>成员运算：</p><ul><li>集合 O(1)</li><li>列表(线性结构) O(n)</li></ul><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>集合运算主要有：交集，差集，对称差集，并集</p><p>python中的集合运算都对应两个版本，一个默认版本（返回新的集合），一个update版本（会更新集合本身）。</p><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h4><p><code>intersection</code></p><p>交集的特性：满足交换律，重载了<code>&amp;</code>运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">50</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">51</span>]: s2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">52</span>]: s1.intersection(s2)<br>Out[<span class="hljs-number">52</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">53</span>]: s2.intersection(s1)<span class="hljs-comment">#交集满足交换律</span><br>Out[<span class="hljs-number">53</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">54</span>]: s1<br>Out[<span class="hljs-number">54</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">55</span>]: s2<br>Out[<span class="hljs-number">55</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">56</span>]: s1.intersection_update(s2)<br>    <span class="hljs-comment">#交集的update版本，做原地修改，返回none,相当于  s1 = s1.intersection(s2)</span><br><br>In [<span class="hljs-number">57</span>]: s1<br>Out[<span class="hljs-number">57</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">58</span>]: s2<br>Out[<span class="hljs-number">58</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">59</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">60</span>]: s1 &amp; s2<span class="hljs-comment">#交集重载了&amp;运算符，相当于 s1.intersection(s2)</span><br>Out[<span class="hljs-number">60</span>]: &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h4><p><code>difference</code></p><p>差集特性：不满足交换律，重载了<code>-</code>运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">61</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">62</span>]: s2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">63</span>]: s1.difference(s2)<br>Out[<span class="hljs-number">63</span>]: &#123;<span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">64</span>]: s2.difference(s1)<span class="hljs-comment">#差集不满足交换律</span><br>Out[<span class="hljs-number">64</span>]: &#123;<span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">65</span>]: s1.difference_update(s2)<span class="hljs-comment">#差集的update版本,相当于  s1 = s1.difference(s2)</span><br><br>In [<span class="hljs-number">66</span>]: s1<br>Out[<span class="hljs-number">66</span>]: &#123;<span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">67</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">68</span>]: s1 - s2<span class="hljs-comment">#差集重载了-运算符，相当于  s1.difference(s2)</span><br>Out[<span class="hljs-number">68</span>]: &#123;<span class="hljs-number">1</span>&#125;<br><br>In [<span class="hljs-number">69</span>]: s2 - s1<br>Out[<span class="hljs-number">69</span>]: &#123;<span class="hljs-number">4</span>&#125;<br><br></code></pre></td></tr></table></figure><p>####对称差集</p><p><code>symmetric_difference</code></p><p>对称差集特性：满足交换律，重载了<code>^</code>运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">70</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">71</span>]: s2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">72</span>]: s1.symmetric_difference(s2)<br>Out[<span class="hljs-number">72</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">73</span>]: s2.symmetric_difference(s1)<span class="hljs-comment">#对称差集满足交换律</span><br>Out[<span class="hljs-number">73</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">74</span>]: s1.symmetric_difference_update(s2)<br>    <span class="hljs-comment">#对称差集的update版本，相当于  s1 = s1.symmetric_difference(s2)</span><br><br>In [<span class="hljs-number">75</span>]: s1<br>Out[<span class="hljs-number">75</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">76</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">77</span>]: s1 ^ s2<span class="hljs-comment">#对称差集重载了^运算符，相当于 s1.symmetric_difference(s2)</span><br>Out[<span class="hljs-number">77</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h4><p><code>union</code>,<code>update</code></p><p>并集特性：满足交换律，重载了<code>|</code>运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">78</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">79</span>]: s2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">80</span>]: s1.union(s2)<br>Out[<span class="hljs-number">80</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">81</span>]: s2.union(s1)<span class="hljs-comment">#并集满足交换律</span><br>Out[<span class="hljs-number">81</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">82</span>]: s1.update(s2)<span class="hljs-comment">#update函数就是并集的update版本，相当于 s1 = s1.update(s2)</span><br><br>In [<span class="hljs-number">83</span>]: s1<br>Out[<span class="hljs-number">83</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">84</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br>In [<span class="hljs-number">85</span>]: s1 + s2<span class="hljs-comment">#并集重载的运算符不是+</span><br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">85</span>-<span class="hljs-number">1659087814e1</span>&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> s1 + s2<br><br>TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;set&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;set&#x27;</span><br><br>In [<span class="hljs-number">86</span>]: s1 | s2<span class="hljs-comment">#并集重载的运算符是|</span><br>Out[<span class="hljs-number">86</span>]: &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合相关的判断"><a href="#集合相关的判断" class="headerlink" title="集合相关的判断"></a>集合相关的判断</h3><p><code>issuperset</code>,<code>issubset</code></p><p><code>isdisjoint</code>：判断是否两个集合是否不相交（disjoint），有交集则返回False，没有交集则返回True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">87</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">88</span>]: s2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">89</span>]: s1.issuperset(s2)<span class="hljs-comment">#判断是否是超集</span><br>Out[<span class="hljs-number">89</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">90</span>]: s2.issubset(s1)<span class="hljs-comment">#判断是否是子集</span><br>Out[<span class="hljs-number">90</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">91</span>]: s1.isdisjoint(s2)<span class="hljs-comment">#判断是否不相交</span><br>Out[<span class="hljs-number">91</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">92</span>]: s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br>In [<span class="hljs-number">93</span>]: s2 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>In [<span class="hljs-number">94</span>]: s1.isdisjoint(s2)<br>Out[<span class="hljs-number">94</span>]: <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="集合的限制"><a href="#集合的限制" class="headerlink" title="集合的限制"></a>集合的限制</h3><p>集合的元素不能是可变的，集合的元素必须可hash</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">95</span>]: &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;<br>Out[<span class="hljs-number">95</span>]: &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;<br><br>In [<span class="hljs-number">96</span>]: &#123;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">96</span>-e7ef34388120&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> &#123;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<br><br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;list&#x27;</span><br><br>In [<span class="hljs-number">97</span>]: &#123;<span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&#x27;abc&#x27;</span>)&#125;<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">97</span>-62b530a8195b&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> &#123;<span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&#x27;abc&#x27;</span>)&#125;<br><br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;bytearray&#x27;</span><br><br>In [<span class="hljs-number">98</span>]: &#123;&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;&#125;<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">98</span>-47b1c90a198f&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> &#123;&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;&#125;<br><br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;set&#x27;</span><br><br>In [<span class="hljs-number">99</span>]: &#123;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)&#125;<br>Out[<span class="hljs-number">99</span>]: &#123;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)&#125;<br><br>In [<span class="hljs-number">100</span>]: &#123;<span class="hljs-string">b&#x27;abc&#x27;</span>&#125;<br>Out[<span class="hljs-number">100</span>]: &#123;<span class="hljs-string">b&#x27;abc&#x27;</span>&#125;<br><br><span class="hljs-comment">#hash函数可以直接使用</span><br>In [<span class="hljs-number">101</span>]: <span class="hljs-built_in">hash</span>(<span class="hljs-string">b&#x27;abc&#x27;</span>)<br>Out[<span class="hljs-number">101</span>]: <span class="hljs-number">1955665834644107130</span><br><br>In [<span class="hljs-number">102</span>]: <span class="hljs-built_in">hash</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&lt;ipython-<span class="hljs-built_in">input</span>-<span class="hljs-number">102</span>-0b995650570c&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()<br>----&gt; <span class="hljs-number">1</span> <span class="hljs-built_in">hash</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;list&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/business122/article/details/7541486">Python集合（set）类型的操作</a></p><p><a href="https://www.cnblogs.com/linjiqin/p/3608541.html">python数据类型详解</a></p><p><a href="https://blog.csdn.net/jubincn/article/details/8570327">Python中的List，Tuple和Dictionary</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>列表</tag>
      
      <tag>元组</tag>
      
      <tag>字典</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python字符串</title>
    <link href="/2016/08/30/python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2016/08/30/python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-字符串str"><a href="#Python-字符串str" class="headerlink" title="Python 字符串str"></a>Python 字符串str</h1><h2 id="str本质"><a href="#str本质" class="headerlink" title="str本质"></a>str本质</h2><p>Python str的本质可以通过help命令查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">Help on <span class="hljs-keyword">class</span> <span class="hljs-title class_">str</span> <span class="hljs-keyword">in</span> module __builtin__:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">str</span>(<span class="hljs-title class_ inherited__">basestring</span>)<br> |  <span class="hljs-built_in">str</span>(<span class="hljs-built_in">object</span>=<span class="hljs-string">&#x27;&#x27;</span>) -&gt; string<br> |  <br> |  Return a nice string representation of the <span class="hljs-built_in">object</span>.<br> |  If the argument <span class="hljs-keyword">is</span> a string, the <span class="hljs-keyword">return</span> value <span class="hljs-keyword">is</span> the same <span class="hljs-built_in">object</span>.<br> |  <br> |  Method resolution order:<br> |      <span class="hljs-built_in">str</span><br> |      basestring<br> |      <span class="hljs-built_in">object</span><br> |  <br> |  Methods defined here:<br> ......<br></code></pre></td></tr></table></figure><p>str的本质是Python模块<code>__builtin__</code>中的一个类，里面定义了很多的方法。</p><h2 id="str特性"><a href="#str特性" class="headerlink" title="str特性"></a>str特性</h2><p>Python strings是不能改变的，字符串的值是固定的。因此，给一个字符串的具体下表位置赋值是会出错的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>word=<span class="hljs-string">&#x27;Python&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>word[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;J&#x27;</span><br>  ...<br>TypeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br><span class="hljs-meta">&gt;&gt;&gt; </span>word[<span class="hljs-number">2</span>:] = <span class="hljs-string">&#x27;py&#x27;</span><br>  ...<br>TypeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><p>如果要得到一个不同的字符串，那就得创建一个新的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;J&#x27;</span> + word[<span class="hljs-number">1</span>:]<br><span class="hljs-string">&#x27;Jython&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>word[:<span class="hljs-number">2</span>] + <span class="hljs-string">&#x27;py&#x27;</span><br><span class="hljs-string">&#x27;Pypy&#x27;</span><br></code></pre></td></tr></table></figure><p>可以使用模块<code>__builtin__</code>中的一个內建函数len()获得字符串的长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(<span class="hljs-built_in">len</span>)<br>Help on built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">len</span> <span class="hljs-keyword">in</span> module __builtin__:<br><br><span class="hljs-built_in">len</span>(...)<br>    <span class="hljs-built_in">len</span>(<span class="hljs-built_in">object</span>) -&gt; integer<br><br>    Return the number of items of a sequence <span class="hljs-keyword">or</span> collection.<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;supercalifragilisticexpialidocious&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(s)<br><span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><p>字符串是可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;I love Python&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(s)<br>[<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-meta">... </span><br>I<br><br>l<br>o<br>v<br>e<br><br>P<br>y<br>t<br>h<br>o<br>n<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><h2 id="str-method"><a href="#str-method" class="headerlink" title="str method"></a>str method</h2><p>以下函数均为str类里面的成员函数按照功能分类的结果</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/image/python/xmind/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C.png" alt="字符串操作"></p><p>xmind文件可点<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/file/xmind/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C.xmind">这里</a>下载</p><span id="more"></span><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="str-join-iterable"><a href="#str-join-iterable" class="headerlink" title="str.join(iterable)"></a>str.join(iterable)</h4><p>S.join(iterable) -&gt; string</p><p><strong>函数功能</strong></p><p>将序列iterable中的元素以指定的字符S连接生成一个新的字符串。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">iter</span>=<span class="hljs-string">&quot;apple&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;-&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.join(<span class="hljs-built_in">iter</span>)<br><span class="hljs-string">&#x27;a-p-p-l-e&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="str-find-sub-start-end"><a href="#str-find-sub-start-end" class="headerlink" title="str.find(sub[, start[, end]])"></a>str.find(sub[, start[, end]])</h4><p>S.find(sub [,start [,end]]) -&gt; int</p><p><strong>函数功能</strong></p><p>和C++的字符串的find函数功能一样。检测字符串中是否存在子字符串sub，如果存在，则返回找到的<strong>第一个子串</strong>的下标，如果找不到，则返回-1，而C++返回的是string::nops。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;this is my dog, i love this dog and it&#x27;s a good dog!&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.find(<span class="hljs-string">&quot;dog&quot;</span>)<br><span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.find(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)<br><span class="hljs-number">28</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.find(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">20</span>)<br>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="str-rfind-sub-start-end"><a href="#str-rfind-sub-start-end" class="headerlink" title="str.rfind(sub[, start[, end]])"></a>str.rfind(sub[, start[, end]])</h4><p>S.rfind(sub [,start [,end]]) -&gt; int</p><p><strong>函数功能</strong></p><p>和C++的字符串的find函数功能一样。检测字符串中是否存在子字符串sub，如果存在，则返回找到的<strong>最后一个子串</strong>的下标，如果找不到，则返回-1，而C++返回的是string::nops。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;this is my dog, i love this dog and it&#x27;s a good dog!&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rfind(<span class="hljs-string">&quot;dog&quot;</span>)<br><span class="hljs-number">48</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rfind(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">10</span>)<br><span class="hljs-number">28</span><br></code></pre></td></tr></table></figure><h4 id="str-index-sub-start-end"><a href="#str-index-sub-start-end" class="headerlink" title="str.index(sub[, start[, end]])"></a>str.index(sub[, start[, end]])</h4><p>S.index(sub [,start [,end]]) -&gt; int</p><p><strong>函数功能</strong></p><p>与 python find()方法的功能一样，只不过如果子串sub不在S中会报一个异常(ValueError: substring not found)。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;this is my dog, i love this dog and it&#x27;s a good dog!&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.index(<span class="hljs-string">&quot;dog&quot;</span>)<br><span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.index(<span class="hljs-string">&quot;digw&quot;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: substring <span class="hljs-keyword">not</span> found<br></code></pre></td></tr></table></figure><h4 id="str-rindex-sub-start-end"><a href="#str-rindex-sub-start-end" class="headerlink" title="str.rindex(sub[, start[, end]])"></a>str.rindex(sub[, start[, end]])</h4><p>S.rindex(sub [,start [,end]]) -&gt; int</p><p><strong>函数功能</strong></p><p>与 python rfind()方法的功能一样，只不过如果子串sub不在S中会报一个异常(ValueError: substring not found)。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;this is my dog, i love this dog and it&#x27;s a good dog!&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rindex(<span class="hljs-string">&quot;dog&quot;</span>)<br><span class="hljs-number">48</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rfind(<span class="hljs-string">&quot;dog&quot;</span>)<br><span class="hljs-number">48</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rindex(<span class="hljs-string">&quot;oihofa&quot;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: substring <span class="hljs-keyword">not</span> found<br></code></pre></td></tr></table></figure><h4 id="str-count-sub-start-end"><a href="#str-count-sub-start-end" class="headerlink" title="str.count(sub[, start[, end]])"></a>str.count(sub[, start[, end]])</h4><p>S.count(sub[, start[, end]]) -&gt; int</p><p><strong>函数功能</strong></p><p>在字符串中查找某个子串出现的次数。start和end是两个可选的参数，表示起止下标位置。python默认下标位置是从0开始的。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;this is my dog, i love this dog and it&#x27;s a good dog!&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s<br>this <span class="hljs-keyword">is</span> my dog, i love this dog <span class="hljs-keyword">and</span> it<span class="hljs-string">&#x27;s a good dog!</span><br><span class="hljs-string">&gt;&gt;&gt; s.count(&quot;dog&quot;)</span><br><span class="hljs-string">3</span><br><span class="hljs-string">&gt;&gt;&gt; s.count(&quot; &quot;)</span><br><span class="hljs-string">12</span><br><span class="hljs-string">&gt;&gt;&gt; s.count(&quot;dog&quot;,15)</span><br><span class="hljs-string">2</span><br><span class="hljs-string">&gt;&gt;&gt; s.count(&quot;dog&quot;,15,32)</span><br><span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><h4 id="str-capitalize"><a href="#str-capitalize" class="headerlink" title="str.capitalize()"></a>str.capitalize()</h4><p>S.capitalize() -&gt; string</p><ul><li>Return a copy of the string S with only its first character capitalized.</li></ul><p><strong>函数功能</strong></p><p>首字符是字母，返回第一个字母大写，其他不变</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.capitalize()<br><span class="hljs-string">&#x27;Linux&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;790873linux&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.capitalize()<br><span class="hljs-string">&#x27;790873linux&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="str-center-width-fillchar"><a href="#str-center-width-fillchar" class="headerlink" title="str.center(width[, fillchar])"></a>str.center(width[, fillchar])</h4><p>S.center(width[, fillchar]) -&gt; string</p><p><strong>函数功能</strong></p><p>已字符串S为中心，返回width长度的字符串，其中多余部分都是用fillchar来填充。如果width小于或者等于len(S)，则返回str本身。如果不给定fillchar这个参数，那么默认填充空格</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=s.center(<span class="hljs-built_in">len</span>(s)+<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;m&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> a<br>linuxm<br><span class="hljs-meta">&gt;&gt;&gt; </span>a=s.center(<span class="hljs-built_in">len</span>(s)+<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;m&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> a<br>mlinuxm<br><span class="hljs-meta">&gt;&gt;&gt; </span>a=s.center(<span class="hljs-built_in">len</span>(s)+<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;m&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> a<br>mlinuxmm<br><span class="hljs-meta">&gt;&gt;&gt; </span>a=s.center(<span class="hljs-built_in">len</span>(s)+<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;m&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> a<br>mmlinuxmm<br><span class="hljs-meta">&gt;&gt;&gt; </span>a=s.center(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;m&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> a<br>linux<br></code></pre></td></tr></table></figure><h4 id="str-ljust-width-fillchar"><a href="#str-ljust-width-fillchar" class="headerlink" title="str.ljust(width[, fillchar])"></a>str.ljust(width[, fillchar])</h4><p>S.ljust(width[, fillchar]) -&gt; string</p><p><strong>函数功能</strong></p><p>返回一个原字符串左对齐，并使用字符fillchar填充至指定长度width的新字符串。</p><p>width – 指定字符串长度</p><p>fillchar – 填充字符，默认为空格</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;apple&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.ljust(<span class="hljs-number">10</span>)<br><span class="hljs-string">&#x27;apple     &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.ljust(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-string">&#x27;apple.....&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.ljust(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-string">&#x27;apple&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="str-rjust-width-fillchar"><a href="#str-rjust-width-fillchar" class="headerlink" title="str.rjust(width[, fillchar])"></a>str.rjust(width[, fillchar])</h4><p>S.rjust(width[, fillchar]) -&gt; string</p><p><strong>函数功能</strong></p><p>返回一个原字符串右对齐，并使用字符fillchar填充至指定长度width的新字符串。</p><p>width – 指定字符串长度</p><p>fillchar – 填充字符，默认为空格</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;apple&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.rjust(<span class="hljs-number">10</span>)<br><span class="hljs-string">&#x27;     apple&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.rjust(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-string">&#x27;.....apple&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.rjust(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-string">&#x27;apple&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="str-expandtabs-tabsize"><a href="#str-expandtabs-tabsize" class="headerlink" title="str.expandtabs([tabsize])"></a>str.expandtabs([tabsize])</h4><p>S.expandtabs([tabsize]) -&gt; string</p><p><strong>函数功能</strong></p><p>把字符串中的 tab 符号(‘\t’)转为空格，tab 符号(‘\t’)默认的空格数是8，tabsize – 指定转换字符串中的 tab 符号(‘\t’)转为空格的字符数。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;today is a good d\tay&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s<br>today <span class="hljs-keyword">is</span> a good day<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.expandtabs()<br><span class="hljs-string">&#x27;today is a good d       ay&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.expandtabs(<span class="hljs-number">4</span>)<br><span class="hljs-string">&#x27;today is a good d   ay&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.expandtabs(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;today is a good d ay&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.expandtabs(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;today is a good day&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="str-format-args-kwargs"><a href="#str-format-args-kwargs" class="headerlink" title="str.format(*args, **kwargs)"></a>str.format(*args, **kwargs)</h4><p>S.format(*args, **kwargs) -&gt; string</p><p><strong>函数功能</strong></p><p>格式化字符串变量。2.7版本和3.1版本之后才支持{}这种格式。老版本会报错</p><p><code>ValueError: zero length field name in format</code></p><p>参见：<a href="http://stackoverflow.com/questions/10054122/valueerror-zero-length-field-name-in-format-python">ValueError: zero length field name in format python</a></p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = <span class="hljs-string">&#x27;StivenWang&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>fruit = <span class="hljs-string">&#x27;apple&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;my name is &#123;&#125;,I like &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name,fruit)<br>my name <span class="hljs-keyword">is</span> StivenWang,I like apple<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;my name is &#123;1&#125;,I like &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(fruit,name)<br>my name <span class="hljs-keyword">is</span> StivenWang,I like apple<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;my name is &#123;mingzi&#125;,I like&#123;shuiguo&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(shuiguo=fruit,mingzi=name)<br>my name <span class="hljs-keyword">is</span> StivenWang,I like apple<br></code></pre></td></tr></table></figure><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><h4 id="str-lower"><a href="#str-lower" class="headerlink" title="str.lower()"></a>str.lower()</h4><p>S.lower() -&gt; string</p><p>转换字符串中所有大写字符为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;oiawh92dafawFAWF&#x27;;;,&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.lower()<br><span class="hljs-string">&quot;oiawh92dafawfawf&#x27;;;,&quot;</span><br></code></pre></td></tr></table></figure><h4 id="str-upper"><a href="#str-upper" class="headerlink" title="str.upper()"></a>str.upper()</h4><p>S.upper() -&gt; string</p><p>转换字符串中所有小写字符为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;oiawh92dafawFAWF&#x27;;;,&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.upper()<br><span class="hljs-string">&quot;OIAWH92DAFAWFAWF&#x27;;;,&quot;</span><br></code></pre></td></tr></table></figure><h4 id="str-swapcase"><a href="#str-swapcase" class="headerlink" title="str.swapcase()"></a>str.swapcase()</h4><p>S.swapcase() -&gt; string</p><p><strong>函数功能</strong></p><p>将字符串的大小写转换。小写转大写，大写转小写</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;ugdwAWDgu2323&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.swapcase()<br><span class="hljs-string">&#x27;UGDWawdGU2323&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><h4 id="str-split-sep-maxsplit"><a href="#str-split-sep-maxsplit" class="headerlink" title="str.split([sep[, maxsplit]])"></a>str.split([sep[, maxsplit]])</h4><p>S.split([sep [,maxsplit]]) -&gt; list of strings</p><p><strong>函数功能</strong></p><p>通过指定分隔符sep对字符串进行切片，如果参数maxsplit有指定值，则仅分隔 maxsplit个子字符串。如果分隔符sep没有给定，则默认以空格分割。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;sys:x:3:3:Ownerofsystemfiles:/usr/sys:&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(<span class="hljs-string">&quot;:&quot;</span>)<br>[<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;Ownerofsystemfiles&#x27;</span>, <span class="hljs-string">&#x27;/usr/sys&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.strip(<span class="hljs-string">&quot;:&quot;</span>).split(<span class="hljs-string">&quot;:&quot;</span>)<br>[<span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;Ownerofsystemfiles&#x27;</span>, <span class="hljs-string">&#x27;/usr/sys&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(s.strip(<span class="hljs-string">&quot;:&quot;</span>).split(<span class="hljs-string">&quot;:&quot;</span>))<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;sa aa aa as&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split()<br>[<span class="hljs-string">&#x27;sa&#x27;</span>, <span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="str-splitlines-keepends"><a href="#str-splitlines-keepends" class="headerlink" title="str.splitlines([keepends])"></a>str.splitlines([keepends])</h4><p>S.splitlines(keepends&#x3D;False) -&gt; list of strings</p><p><strong>函数功能</strong></p><p>按照行分隔，返回一个包含各行作为元素的列表。如果参数keepends&#x3D;False后者为空或者为0，则不包含<code>&quot;\n&quot;</code>，否则包含<code>&quot;\n&quot;</code></p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;Line1-a b c d e f\nLine2- a b c\n\nLine4- a b c d&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.splitlines()<br>[<span class="hljs-string">&#x27;Line1-a b c d e f&#x27;</span>, <span class="hljs-string">&#x27;Line2- a b c&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;Line4- a b c d&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.splitlines(<span class="hljs-number">0</span>)<br>[<span class="hljs-string">&#x27;Line1-a b c d e f&#x27;</span>, <span class="hljs-string">&#x27;Line2- a b c&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;Line4- a b c d&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.splitlines(<span class="hljs-number">1</span>)<br>[<span class="hljs-string">&#x27;Line1-a b c d e f\n&#x27;</span>, <span class="hljs-string">&#x27;Line2- a b c\n&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;Line4- a b c d&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.splitlines(<span class="hljs-number">2</span>)<br>[<span class="hljs-string">&#x27;Line1-a b c d e f\n&#x27;</span>, <span class="hljs-string">&#x27;Line2- a b c\n&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;Line4- a b c d&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.splitlines(<span class="hljs-number">3</span>)<br>[<span class="hljs-string">&#x27;Line1-a b c d e f\n&#x27;</span>, <span class="hljs-string">&#x27;Line2- a b c\n&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;Line4- a b c d&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.splitlines(<span class="hljs-number">4</span>)<br>[<span class="hljs-string">&#x27;Line1-a b c d e f\n&#x27;</span>, <span class="hljs-string">&#x27;Line2- a b c\n&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;Line4- a b c d&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="str-partition-sep"><a href="#str-partition-sep" class="headerlink" title="str.partition(sep)"></a>str.partition(sep)</h4><p>S.partition(sep) -&gt; (head, sep, tail)</p><p><strong>函数功能</strong></p><p>根据指定的分隔符sep将字符串进行分割（返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串）。且分隔符不能为空也不能为空串，否则会报错。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;are you know:lilin is lowser&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.partition(<span class="hljs-string">&quot;lilin&quot;</span>)<br>(<span class="hljs-string">&#x27;are you know:&#x27;</span>, <span class="hljs-string">&#x27;lilin&#x27;</span>, <span class="hljs-string">&#x27; is lowser&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.partition(<span class="hljs-string">&quot;&quot;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: empty separator<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.partition()<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: partition() takes exactly one argument (<span class="hljs-number">0</span> given)<br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="str-strip-chars"><a href="#str-strip-chars" class="headerlink" title="str.strip([chars])"></a>str.strip([chars])</h4><p>S.strip([chars]) -&gt; string or unicode</p><p><strong>函数功能</strong></p><p>用于移除字符串头尾指定的字符（默认为空格）。如果字符为unicode的，则先把字符串转化为unicode的再进行strip操作。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;egg is a apple&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.strip(<span class="hljs-string">&quot;e&quot;</span>)<br>gg <span class="hljs-keyword">is</span> a appl<br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;\negg is a apple\n&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s<br><br>egg <span class="hljs-keyword">is</span> a apple<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.strip(<span class="hljs-string">&quot;\n&quot;</span>)<br>egg <span class="hljs-keyword">is</span> a apple<br></code></pre></td></tr></table></figure><h4 id="str-lstrip-chars"><a href="#str-lstrip-chars" class="headerlink" title="str.lstrip([chars])"></a>str.lstrip([chars])</h4><p>S.lstrip([chars]) -&gt;string or unicode</p><p><strong>函数功能</strong></p><p>用于截掉字符串左边的空格或指定字符。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;egg is a apple&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.lstrip(<span class="hljs-string">&quot;e&quot;</span>)<br>gg <span class="hljs-keyword">is</span> a apple<br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;\negg is a apple\n&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.lstrip(<span class="hljs-string">&quot;\n&quot;</span>)<br>egg <span class="hljs-keyword">is</span> a apple<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><h4 id="str-rstrip-chars"><a href="#str-rstrip-chars" class="headerlink" title="str.rstrip([chars])"></a>str.rstrip([chars])</h4><p>S.rstrip([chars]) -&gt; string or unicode</p><p><strong>函数功能</strong></p><p>用于截掉字符串右边的空格或指定字符。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"> &gt;&gt;&gt; s=<span class="hljs-string">&quot;egg is a apple&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.rstrip(<span class="hljs-string">&quot;e&quot;</span>)<br>egg <span class="hljs-keyword">is</span> a appl<br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;\negg is a apple\n&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s.rstrip(<span class="hljs-string">&quot;\n&quot;</span>)<br><br>egg <span class="hljs-keyword">is</span> a apple<br><span class="hljs-meta">&gt;&gt;&gt; </span> <br></code></pre></td></tr></table></figure><h4 id="str-replace-old-new-count"><a href="#str-replace-old-new-count" class="headerlink" title="str.replace(old, new[, count])"></a>str.replace(old, new[, count])</h4><p>S.replace(old, new[, count]) -&gt; unicode</p><p><strong>函数功能</strong></p><p>把字符串中的 old（旧字符串）替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 count次。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;saaas&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.replace(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>)<br><span class="hljs-string">&#x27;saas&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;saaaas&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.replace(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>)<br><span class="hljs-string">&#x27;saaas&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;saaaaas&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.replace(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>)<br><span class="hljs-string">&#x27;saaaas&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&quot;saaaaaas&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.replace(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>)<br><span class="hljs-string">&#x27;saaaas&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>以上替换并不会递归替换，每次都是找到3个a之后替换成两个a，然后继续从3个a后面的位置开始遍历，而不是从头开始遍历。</p></blockquote><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>和编码相关的函数总共就两个str.decode([encoding[, errors]])hestr.encode([encoding[, errors]])</p><p>首先了解下和编码相关的几个概念</p><ul><li><strong>str是文本序列</strong></li><li><strong>bytes是字节序列</strong></li><li>文本是有编码的 (utf-8, gbk, GB18030等)</li><li>字节没有编码这种说法</li><li>文本的编码指的是字符如何使用字节来表示</li><li><strong>Python3</strong>字符串默认使用utf-8编码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;刘亦菲&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(s)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(s.encode)<br>Help on built-<span class="hljs-keyword">in</span> function encode:<br><br>encode(...) method of builtins.<span class="hljs-built_in">str</span> instance<br>    S.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;strict&#x27;</span>) -&gt; <span class="hljs-built_in">bytes</span><br><br>    Encode S using the codec registered <span class="hljs-keyword">for</span> encoding. Default encoding<br>    <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;utf-8&#x27;</span>. errors may be given to <span class="hljs-built_in">set</span> a different error<br>    handling scheme. Default <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;strict&#x27;</span> meaning that encoding errors <span class="hljs-keyword">raise</span><br>    a UnicodeEncodeError. Other possible values are <span class="hljs-string">&#x27;ignore&#x27;</span>, <span class="hljs-string">&#x27;replace&#x27;</span> <span class="hljs-keyword">and</span><br>    <span class="hljs-string">&#x27;xmlcharrefreplace&#x27;</span> <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span> other name registered <span class="hljs-keyword">with</span><br>    codecs.register_error that can handle UnicodeEncodeErrors.<br><br><span class="hljs-comment"># 默认的编码是utf-8，以下按照默认编码 </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.encode()<br><span class="hljs-string">b&#x27;\xe5\x88\x98\xe4\xba\xa6\xe8\x8f\xb2&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;刘&#x27;</span>.encode()<br><span class="hljs-string">b&#x27;\xe5\x88\x98&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;亦&#x27;</span>.encode()<br><span class="hljs-string">b&#x27;\xe4\xba\xa6&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;菲&#x27;</span>.encode()<br><span class="hljs-string">b&#x27;\xe8\x8f\xb2&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">bin</span>(<span class="hljs-number">0xe5</span>)<br><span class="hljs-string">&#x27;0b11100101&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">bin</span>(<span class="hljs-number">0x88</span>)<br><span class="hljs-string">&#x27;0b10001000&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">bin</span>(<span class="hljs-number">0x98</span>)<br><span class="hljs-string">&#x27;0b10011000&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = s.encode()<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-string">b&#x27;\xe5\x88\x98\xe4\xba\xa6\xe8\x8f\xb2&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.decode()<br><span class="hljs-string">&#x27;刘亦菲&#x27;</span><br><br><span class="hljs-comment">#以下为指定编码为GBK</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = s.encode(<span class="hljs-string">&#x27;GBK&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-string">b&#x27;\xc1\xf5\xd2\xe0\xb7\xc6&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.decode(<span class="hljs-string">&#x27;GBK&#x27;</span>)<br><span class="hljs-string">&#x27;刘亦菲&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.decode()<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>UnicodeDecodeError: <span class="hljs-string">&#x27;utf-8&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0xc1 in position 0: invalid start byte</span><br></code></pre></td></tr></table></figure><p>以上对encode和decode的方法的使用中出现了bytes类型。以下是对该类型的简单介绍</p><ul><li>bytes 由str通过 encode方法转化得到</li><li>通过 b前缀定义bytes</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-string">b&#x27;\xe5\x88\x98&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(b)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-string">b&#x27;\xe5\x88\x98&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.decode()<br><span class="hljs-string">&#x27;刘&#x27;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>除了encode外， str操作，都有对应bytes的版本， 但是传入参数也必须是bytes</p></blockquote><p><strong>bytes的可变版本bytearray</strong></p><p>bytearray 是可变，在图像处理中经常会用到变化的bytes。相对bytes来说， bytearray多了 insert, append, extend, pop, remove, clear reverse这些操作，并且可以索引操作。</p><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><h4 id="str-startswith-prefix-start-end"><a href="#str-startswith-prefix-start-end" class="headerlink" title="str.startswith(prefix[, start[, end]])"></a>str.startswith(prefix[, start[, end]])</h4><p><strong>函数功能</strong></p><p>用于判断字符串是否以指定前缀开头，如果以指定后缀结尾返回True，否则返回False。可选参数”start”与”end”为检索字符串的开始与结束位置。prefix可为tuple。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;I am Mary,what&#x27;s your name ?&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.startswith(<span class="hljs-string">&quot;I am&quot;</span>)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.startswith(<span class="hljs-string">&quot;I are&quot;</span>)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.startswith(<span class="hljs-string">&quot;I am&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="str-endswith-suffix-start-end"><a href="#str-endswith-suffix-start-end" class="headerlink" title="str.endswith(suffix[, start[, end]])"></a>str.endswith(suffix[, start[, end]])</h4><p>S.endswith(suffix[, start[, end]]) -&gt; bool</p><p><strong>函数功能</strong></p><p>用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数”start”与”end”为检索字符串的开始与结束位置。suffix可为tuple。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;I am Mary,what&#x27;s your name ?&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> s<br>I am Mary,what<span class="hljs-string">&#x27;s your name ?</span><br><span class="hljs-string">&gt;&gt;&gt; s.endswith(&quot;name ?&quot;)</span><br><span class="hljs-string">True</span><br><span class="hljs-string">&gt;&gt;&gt; s.endswith(&quot;mame ?&quot;)</span><br><span class="hljs-string">False</span><br><span class="hljs-string">&gt;&gt;&gt; s.endswith(&quot;name ?&quot;,0,len(s)-2)</span><br><span class="hljs-string">False</span><br></code></pre></td></tr></table></figure><h4 id="str-isalnum"><a href="#str-isalnum" class="headerlink" title="str.isalnum()"></a>str.isalnum()</h4><p>S.isalnum() -&gt; bool</p><p><strong>函数功能</strong></p><p>检测字符串是否由字母或数字组成。如果是，返回True，如果有别的字符，则返回False。</p><p>字符串不为空，如果为空，则返回False。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalnum()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;daowihd&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalnum()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;ofaweo2131giu&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalnum()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;douha ioh~w80&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalnum()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalnum()<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="str-isalpha"><a href="#str-isalpha" class="headerlink" title="str.isalpha()"></a>str.isalpha()</h4><p>S.isalpha() -&gt; bool</p><p><strong>函数功能</strong></p><p>检测字符串是否只由字母组成。字符串不为空，如果为空，则返回False。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalpha()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;uuagwifo&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalpha()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;oiwhdaw899hdw&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalpha()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isalpha()<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="str-isdigit"><a href="#str-isdigit" class="headerlink" title="str.isdigit()"></a>str.isdigit()</h4><p>S.isdigit() -&gt; bool</p><p><strong>函数功能</strong></p><p>检测字符串是否只由数字组成。字符串不为空，如果为空，则返回False。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isdigit()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;dowaoh90709&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isdigit()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isdigit()<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="str-islower"><a href="#str-islower" class="headerlink" title="str.islower()"></a>str.islower()</h4><p>S.islower() -&gt; bool</p><p><strong>函数功能</strong></p><p>检测字符串是否由小写字母组成。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;uigfa&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.islower()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;uiuiga123141a&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.islower()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;uiuiga12314WATA&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.islower()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.islower()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;doiowhoid;&#x27;&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.islower()<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="str-isupper"><a href="#str-isupper" class="headerlink" title="str.isupper()"></a>str.isupper()</h4><p>S.isupper() -&gt; bool</p><p><strong>函数功能</strong></p><p>检测字符串是否由大写字母组成。</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;SGS&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isupper()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;SGSugdw&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isupper()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;SGS123908;&#x27;,&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isupper()<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="str-isspace"><a href="#str-isspace" class="headerlink" title="str.isspace()"></a>str.isspace()</h4><p>S.isspace() -&gt; bool</p><p><strong>函数功能</strong></p><p>检测字符串是否只由空格组成</p><p><strong>函数示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot;    &quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isspace()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a=<span class="hljs-string">&quot; 12  dw &quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.isspace()<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://docs.python.org/2.7/index.html">Python 2.7.12 documentation</a></p><p>2、<a href="https://www.cnblogs.com/opsedu/p/5501157.html">Shaw Blog–Python str方法总结</a></p><p>3、<a href="https://www.cnblogs.com/huangcong/archive/2011/08/29/2158268.html">hc-Python字符串操作</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql语句中(+)的作用</title>
    <link href="/2016/07/08/sql%E8%AF%AD%E5%8F%A5%E4%B8%AD-%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <url>/2016/07/08/sql%E8%AF%AD%E5%8F%A5%E4%B8%AD-%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="演示示例"><a href="#演示示例" class="headerlink" title="演示示例"></a>演示示例</h2><p>说明：以下示例中，表a是员工表，有a,b,c,d四个员工，性别都是男性m。表b是工资表，有a,b,d四个员工，工资对应的是1000，2000，4000。然后分别演示带(+)符号的和不带(+)符号的，结果如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a;<br><br>NAME                 SEX<br><span class="hljs-comment">-------------------- -----</span><br>a                    m<br>b                    m<br>c                    m<br>d                    m<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> b;<br><br>NAME                      MONEY<br><span class="hljs-comment">-------------------- ----------</span><br>a                          <span class="hljs-number">1000</span><br>b                          <span class="hljs-number">2000</span><br>d                          <span class="hljs-number">4000</span><br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name<span class="hljs-operator">=</span>b.name(<span class="hljs-operator">+</span>);<br><br>NAME                      MONEY<br><span class="hljs-comment">-------------------- ----------</span><br>a                          <span class="hljs-number">1000</span><br>b                          <span class="hljs-number">2000</span><br>d                          <span class="hljs-number">4000</span><br>c<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name<span class="hljs-operator">=</span>b.name;<br><br>NAME                      MONEY<br><span class="hljs-comment">-------------------- ----------</span><br>a                          <span class="hljs-number">1000</span><br>b                          <span class="hljs-number">2000</span><br>d                          <span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>可见，带(+)号时，a表中的所有人都在，即使工资为空。不带(+)时，a表中的没有出现工资为空的员工c。</p><span id="more"></span><h2 id="对-号的解释"><a href="#对-号的解释" class="headerlink" title="对(+)号的解释"></a>对(+)号的解释</h2><p><strong>(+) 表示外连接。</strong>条件关联时，一般只列出表中满足连接条件的数据。如果条件的一边出现（+），则另一边的表就是主表，主表中的所有记录都会出现，即使附表中有的记录为空</p><h2 id="的扩展：SQL表连接"><a href="#的扩展：SQL表连接" class="headerlink" title="(+)的扩展：SQL表连接"></a>(+)的扩展：SQL表连接</h2><h3 id="SQL表连接分类"><a href="#SQL表连接分类" class="headerlink" title="SQL表连接分类"></a>SQL表连接分类</h3><p>内连接，外连接，交叉连接，其中外连接包括左连接和右连接。</p><h3 id="SQL表连接示例"><a href="#SQL表连接示例" class="headerlink" title="SQL表连接示例"></a>SQL表连接示例</h3><p><strong>内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name<span class="hljs-operator">=</span>b.name;<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> b <span class="hljs-keyword">on</span> a.name<span class="hljs-operator">=</span>b.name;<br></code></pre></td></tr></table></figure><p><strong>左连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name<span class="hljs-operator">=</span>b.name(<span class="hljs-operator">+</span>);<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> b <span class="hljs-keyword">on</span> a.name<span class="hljs-operator">=</span>b.name;<br></code></pre></td></tr></table></figure><p><strong>右连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> b <span class="hljs-keyword">on</span> a.name<span class="hljs-operator">=</span>b.name;<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name(<span class="hljs-operator">+</span>)<span class="hljs-operator">=</span>b.name;<br></code></pre></td></tr></table></figure><p><strong>交叉连接</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a <span class="hljs-keyword">full</span> <span class="hljs-keyword">join</span> b <span class="hljs-keyword">on</span> a.name=b.name;<br><br><span class="hljs-type">NAME</span>                      <span class="hljs-type">MONEY</span><br><span class="hljs-comment">-------------------- ----------</span><br>a                          <span class="hljs-number">1000</span><br>b                          <span class="hljs-number">2000</span><br>c<br>d                          <span class="hljs-number">4000</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name(+)=b.name(+);<br><span class="hljs-keyword">select</span> a.name,b.money <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name(+)=b.name(+)<br>                                              *<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-01468</span>: 一个谓词只能引用一个外部联接的表<br></code></pre></td></tr></table></figure><p>所以(+)只是表示外连接，并不表示交叉连接。</p><p><strong>参考：</strong></p><p><a href="http://zhidao.baidu.com/link?url=4_K7GV8c8MfdhAjL6IBQl0hrDbguxmYK1S3B3Xc2GEmSdQHHrwWGu1GWIn7fXPhYRP1ihdgPjdk59c4xFcNilq">SQL Server 数据库 (+) 这个是什么意思</a></p><p><a href="https://www.cnblogs.com/still-windows7/archive/2012/10/22/2734613.html">SQL表连接查询(inner join、full join、left join、right join)</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>表连接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV的Mat类型以及基本函数使用</title>
    <link href="/2016/05/10/opencv%E7%9A%84mat%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
    <url>/2016/05/10/opencv%E7%9A%84mat%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCV的Mat类型以及基本函数使用"><a href="#OpenCV的Mat类型以及基本函数使用" class="headerlink" title="OpenCV的Mat类型以及基本函数使用"></a>OpenCV的Mat类型以及基本函数使用</h1><h2 id="Mat和IplImage的区别"><a href="#Mat和IplImage的区别" class="headerlink" title="Mat和IplImage的区别"></a>Mat和IplImage的区别</h2><h3 id="Mat和IplImage的主要区别"><a href="#Mat和IplImage的主要区别" class="headerlink" title="Mat和IplImage的主要区别"></a>Mat和IplImage的主要区别</h3><p>在OpenCV中IplImage是表示一个图像的结构体，也是从OpenCV1.0到目前最为重要的一个结构；在之前的图像表示用IplImage，而且之前的OpenCV是用C语言编写的，提供的接口也是C语言接口。</p><p>Mat是后来OpenCV封装的一个C++类，用来表示一个图像，和IplImage表示基本一致，但是Mat还添加了一些图像函数。</p><h3 id="IplImage"><a href="#IplImage" class="headerlink" title="IplImage"></a>IplImage</h3><p>IplImage数据结构的定义在opencv\build\include\opencv2\core\types_c.h文件中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IplImage</span><br>&#123;<br>    <span class="hljs-type">int</span>  nSize;             <span class="hljs-comment">/* sizeof(IplImage) */</span><br>    <span class="hljs-type">int</span>  ID;                <span class="hljs-comment">/* version (=0)*/</span><br>    <span class="hljs-type">int</span>  nChannels;         <span class="hljs-comment">/* Most of OpenCV functions support 1,2,3 or 4 channels */</span><br>    <span class="hljs-type">int</span>  alphaChannel;      <span class="hljs-comment">/* Ignored by OpenCV */</span><br>    <span class="hljs-type">int</span>  depth;             <span class="hljs-comment">/* Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,</span><br><span class="hljs-comment">                               IPL_DEPTH_32S, IPL_DEPTH_32F and IPL_DEPTH_64F are supported.  */</span><br>    <span class="hljs-type">char</span> colorModel[<span class="hljs-number">4</span>];     <span class="hljs-comment">/* Ignored by OpenCV */</span><br>    <span class="hljs-type">char</span> channelSeq[<span class="hljs-number">4</span>];     <span class="hljs-comment">/* ditto */</span><br>    <span class="hljs-type">int</span>  dataOrder;         <span class="hljs-comment">/* 0 - interleaved color channels, 1 - separate color channels.</span><br><span class="hljs-comment">                               cvCreateImage can only create interleaved images */</span><br>    <span class="hljs-type">int</span>  origin;            <span class="hljs-comment">/* 0 - top-left origin,</span><br><span class="hljs-comment">                               1 - bottom-left origin (Windows bitmaps style).  */</span><br>    <span class="hljs-type">int</span>  align;             <span class="hljs-comment">/* Alignment of image rows (4 or 8).</span><br><span class="hljs-comment">                               OpenCV ignores it and uses widthStep instead.    */</span><br>    <span class="hljs-type">int</span>  width;             <span class="hljs-comment">/* Image width in pixels.                           */</span><br>    <span class="hljs-type">int</span>  height;            <span class="hljs-comment">/* Image height in pixels.                          */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IplROI</span> *roi;    <span class="hljs-comment">/* Image ROI. If NULL, the whole image is selected. */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IplImage</span> *maskROI;      <span class="hljs-comment">/* Must be NULL. */</span><br>    <span class="hljs-type">void</span>  *imageId;                 <span class="hljs-comment">/* &quot;           &quot; */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IplTileInfo</span> *tileInfo;  <span class="hljs-comment">/* &quot;           &quot; */</span><br>    <span class="hljs-type">int</span>  imageSize;         <span class="hljs-comment">/* Image data size in bytes</span><br><span class="hljs-comment">                               (==image-&gt;height*image-&gt;widthStep</span><br><span class="hljs-comment">                               in case of interleaved data)*/</span><br>    <span class="hljs-type">char</span> *imageData;        <span class="hljs-comment">/* Pointer to aligned image data.         */</span><br>    <span class="hljs-type">int</span>  widthStep;         <span class="hljs-comment">/* Size of aligned image row in bytes.    */</span><br>    <span class="hljs-type">int</span>  BorderMode[<span class="hljs-number">4</span>];     <span class="hljs-comment">/* Ignored by OpenCV.                     */</span><br>    <span class="hljs-type">int</span>  BorderConst[<span class="hljs-number">4</span>];    <span class="hljs-comment">/* Ditto.                                 */</span><br>    <span class="hljs-type">char</span> *imageDataOrigin;  <span class="hljs-comment">/* Pointer to very origin of image data</span><br><span class="hljs-comment">                               (not necessarily aligned) -</span><br><span class="hljs-comment">                               needed for correct deallocation */</span><br>&#125;<br>IplImage;<br></code></pre></td></tr></table></figure><p>可见，IplImage是一个表示图像的结构体：C语言操作OpenCV的数据结构。地位等同于Mat，可以说是历史版本了。</p><span id="more"></span><h3 id="Mat"><a href="#Mat" class="headerlink" title="Mat"></a>Mat</h3><p>Mat这个数据结构定义在opencv\build\include\opencv2\core\core.hpp这个文件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CV_EXPORTS</span> Mat<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//! default constructor</span><br>    <span class="hljs-built_in">Mat</span>();<br>    <span class="hljs-comment">//! constructs 2D matrix of the specified size and type</span><br>    <span class="hljs-comment">// (_type is CV_8UC1, CV_64FC3, CV_32SC(12) etc.)</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">int</span> type);<br>    <span class="hljs-built_in">Mat</span>(Size size, <span class="hljs-type">int</span> type);<br>    <span class="hljs-comment">//! constucts 2D matrix and fills it with the specified value _s.</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">int</span> type, <span class="hljs-type">const</span> Scalar&amp; s);<br>    <span class="hljs-built_in">Mat</span>(Size size, <span class="hljs-type">int</span> type, <span class="hljs-type">const</span> Scalar&amp; s);<br><br>    <span class="hljs-comment">//! constructs n-dimensional matrix</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> ndims, <span class="hljs-type">const</span> <span class="hljs-type">int</span>* sizes, <span class="hljs-type">int</span> type);<br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> ndims, <span class="hljs-type">const</span> <span class="hljs-type">int</span>* sizes, <span class="hljs-type">int</span> type, <span class="hljs-type">const</span> Scalar&amp; s);<br><br>    <span class="hljs-comment">//! copy constructor</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> Mat&amp; m);<br>    <span class="hljs-comment">//! constructor for matrix headers pointing to user-allocated data</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">int</span> type, <span class="hljs-type">void</span>* data, <span class="hljs-type">size_t</span> step=AUTO_STEP);<br>    <span class="hljs-built_in">Mat</span>(Size size, <span class="hljs-type">int</span> type, <span class="hljs-type">void</span>* data, <span class="hljs-type">size_t</span> step=AUTO_STEP);<br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> ndims, <span class="hljs-type">const</span> <span class="hljs-type">int</span>* sizes, <span class="hljs-type">int</span> type, <span class="hljs-type">void</span>* data, <span class="hljs-type">const</span> <span class="hljs-type">size_t</span>* steps=<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//! creates a matrix header for a part of the bigger matrix</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> Mat&amp; m, <span class="hljs-type">const</span> Range&amp; rowRange, <span class="hljs-type">const</span> Range&amp; colRange=Range::<span class="hljs-built_in">all</span>());<br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> Mat&amp; m, <span class="hljs-type">const</span> Rect&amp; roi);<br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> Mat&amp; m, <span class="hljs-type">const</span> Range* ranges);<br>    <span class="hljs-comment">//! converts old-style CvMat to the new matrix; the data is not copied by default</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> CvMat* m, <span class="hljs-type">bool</span> copyData=<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//! converts old-style CvMatND to the new matrix; the data is not copied by default</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> CvMatND* m, <span class="hljs-type">bool</span> copyData=<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//! converts old-style IplImage to the new matrix; the data is not copied by default</span><br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> IplImage* img, <span class="hljs-type">bool</span> copyData=<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//! builds matrix from std::vector with or without copying the data</span><br><br>   ......<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initEmpty</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Mat是OpenCV最基本的数据结构，Mat即矩阵（Matrix）的缩写我们在读取图片的时候就是将图片定义为Mat类型，其重载的构造函数一大堆。</p><p>其中有一个构造函数可以很方便的直接将IplImage转化为Mat</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Mat</span>(<span class="hljs-type">const</span> IplImage* img, <span class="hljs-type">bool</span> copyData=<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h2 id="基本函数使用"><a href="#基本函数使用" class="headerlink" title="基本函数使用"></a>基本函数使用</h2><h3 id="imread"><a href="#imread" class="headerlink" title="imread"></a>imread</h3><p>功能：从一个文件中载入图片</p><p>定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Mat <span class="hljs-title">imread</span><span class="hljs-params">( <span class="hljs-type">const</span> string&amp; filename, <span class="hljs-type">int</span> flags=<span class="hljs-number">1</span> )</span></span>;<br></code></pre></td></tr></table></figure><p>■第一个参数，const string&amp;类型的filename，这是我们需要载入的图片路径名。</p><p>在Windows操作系统下，OpenCV的imread函数支持常用的图片类型，比如bmp,jpg,jpeg,png等等。</p><p>■第二个参数，int类型的flags，为载入标识，它指定一个加载图像的颜色类型。可以看到它自带缺省值1.所以有时候这个参数在调用时我们可以忽略。如果在调用时忽略这个参数，就表示载入三通道的彩色图像。具体原因看下面的解释。</p><p>flags是int型的变量，我们可以按如下方式取值：</p><ul><li>flags &gt;0返回一个3通道的彩色图像。</li><li>flags &#x3D;0返回灰度图像。</li><li>flags &lt;0返回包含Alpha通道的加载的图像。</li></ul><p>需要注意的点：输出的图像默认情况下是不载入Alpha通道进来的。如果我们需要载入Alpha通道的话呢，这里就需要取负值。</p><p> 所以默认值flags&#x3D;1表示载入三通道的彩色图像。</p><h3 id="imshow"><a href="#imshow" class="headerlink" title="imshow"></a>imshow</h3><p>功能：显示一个图像</p><p>定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">imshow</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; winname, InputArray mat)</span></span>;  <br></code></pre></td></tr></table></figure><p> ■ 第一个参数，const string&amp;类型的winname，填需要显示的窗口标识名称。</p><p> ■ 第二个参数，InputArray 类型的mat，填需要显示的图像。</p><p><strong>InputArray 类型是什么类型？</strong></p><p>通过转到定义，我们可以在opencv\build\include\opencv2\highgui\highgui.hpp文件中找到imshow的原型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">CV_EXPORTS_W <span class="hljs-type">void</span> <span class="hljs-title">imshow</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; winname, InputArray mat)</span></span>;<br></code></pre></td></tr></table></figure><p>进一步对InputArray转到定义，在opencv\build\include\opencv2\core\core.hpp文件中查到一个typedef声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> _InputArray&amp; InputArray;  <br></code></pre></td></tr></table></figure><p>这其实一个类型声明引用，就是说<code>_InputArray</code>和<code>InputArray</code>是一个意思，然后再次对_InputArray进行转到定义，终于，在opencv\build\include\opencv2\core\core.hpp文件中发现了InputArray的真身：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> CV_EXPORTS _InputArray<br>&#123;<br>public:<br>    enum &#123;<br>        KIND_SHIFT = <span class="hljs-number">16</span>,<br>        FIXED_TYPE = <span class="hljs-number">0x8000</span> &lt;&lt; KIND_SHIFT,<br>        FIXED_SIZE = <span class="hljs-number">0x4000</span> &lt;&lt; KIND_SHIFT,<br>        KIND_MASK = ~(FIXED_TYPE<span class="hljs-pattern-match">|<span class="hljs-constructor">FIXED_SIZE</span>) - (1 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>) + 1,</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">NONE</span>              = 0 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">MAT</span>               = 1 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">MATX</span>              = 2 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">STD_VECTOR</span>        = 3 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">STD_VECTOR_VECTOR</span> = 4 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">STD_VECTOR_MAT</span>    = 5 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">EXPR</span>              = 6 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">OPENGL_BUFFER</span>     = 7 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">OPENGL_TEXTURE</span>    = 8 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">GPU_MAT</span>           = 9 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span>,</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">OCL_MAT</span>           =10 &lt;&lt; <span class="hljs-constructor">KIND_SHIFT</span></span><br><span class="hljs-pattern-match">    &#125;;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray()</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> Mat&amp; <span class="hljs-params">m</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> MatExpr&amp; <span class="hljs-params">expr</span>)</span>;</span><br><span class="hljs-pattern-match">    template&lt;typename <span class="hljs-constructor">_Tp</span>&gt; <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">_Tp</span><span class="hljs-operator">*</span> <span class="hljs-params">vec</span>, <span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span>;</span><br><span class="hljs-pattern-match">    template&lt;typename <span class="hljs-constructor">_Tp</span>&gt; <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">vector</span>&lt;<span class="hljs-params">_Tp</span>&gt;&amp; <span class="hljs-params">vec</span>)</span>;</span><br><span class="hljs-pattern-match">    template&lt;typename <span class="hljs-constructor">_Tp</span>&gt; <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">vector</span>&lt;<span class="hljs-params">vector</span>&lt;<span class="hljs-params">_Tp</span>&gt; &gt;&amp; <span class="hljs-params">vec</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">vector</span>&lt;Mat&gt;&amp; <span class="hljs-params">vec</span>)</span>;</span><br><span class="hljs-pattern-match">    template&lt;typename <span class="hljs-constructor">_Tp</span>&gt; <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">vector</span>&lt;Mat_&lt;<span class="hljs-params">_Tp</span>&gt; &gt;&amp; <span class="hljs-params">vec</span>)</span>;</span><br><span class="hljs-pattern-match">    template&lt;typename <span class="hljs-constructor">_Tp</span>&gt; <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> Mat_&lt;<span class="hljs-params">_Tp</span>&gt;&amp; <span class="hljs-params">m</span>)</span>;</span><br><span class="hljs-pattern-match">    template&lt;typename <span class="hljs-constructor">_Tp</span>, <span class="hljs-built_in">int</span> m, <span class="hljs-built_in">int</span> n&gt; <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> Matx&lt;<span class="hljs-params">_Tp</span>, <span class="hljs-params">m</span>, <span class="hljs-params">n</span>&gt;&amp; <span class="hljs-params">matx</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> Scalar&amp; <span class="hljs-params">s</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">double</span>&amp; <span class="hljs-params">val</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> &lt; <span class="hljs-constructor">Deprecated</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> GlBuffer&amp; <span class="hljs-params">buf</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> GlTexture&amp; <span class="hljs-params">tex</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> &gt;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">gpu</span>::GpuMat&amp; <span class="hljs-params">d_mat</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">ogl</span>::Buffer&amp; <span class="hljs-params">buf</span>)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_InputArray(<span class="hljs-params">const</span> <span class="hljs-params">ogl</span>::Texture2D&amp; <span class="hljs-params">tex</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-constructor">Mat</span> get<span class="hljs-constructor">Mat(<span class="hljs-params">int</span> <span class="hljs-params">i</span>=-1)</span> const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> void get<span class="hljs-constructor">MatVector(<span class="hljs-params">vector</span>&lt;Mat&gt;&amp; <span class="hljs-params">mv</span>)</span> const;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> &lt; <span class="hljs-constructor">Deprecated</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-constructor">GlBuffer</span> get<span class="hljs-constructor">GlBuffer()</span> const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-constructor">GlTexture</span> get<span class="hljs-constructor">GlTexture()</span> const;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> &gt;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> gpu::<span class="hljs-constructor">GpuMat</span> get<span class="hljs-constructor">GpuMat()</span> const;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span><span class="hljs-keyword">virtual</span><span class="hljs-operator">*</span><span class="hljs-operator">/</span> ogl::<span class="hljs-constructor">Buffer</span> get<span class="hljs-constructor">OGlBuffer()</span> const;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span><span class="hljs-keyword">virtual</span><span class="hljs-operator">*</span><span class="hljs-operator">/</span> ogl::<span class="hljs-constructor">Texture2D</span> get<span class="hljs-constructor">OGlTexture2D()</span> const;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> kind() const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-constructor">Size</span> size(<span class="hljs-built_in">int</span> i=-1) const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> size<span class="hljs-constructor">_t</span> total(<span class="hljs-built_in">int</span> i=-1) const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">type</span>(<span class="hljs-built_in">int</span> i=-1) const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> depth(<span class="hljs-built_in">int</span> i=-1) const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> channels(<span class="hljs-built_in">int</span> i=-1) const;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> empty() const;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">#ifdef <span class="hljs-constructor">OPENCV_CAN_BREAK_BINARY_COMPATIBILITY</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">virtual</span> ~<span class="hljs-constructor">_InputArray()</span>;</span><br><span class="hljs-pattern-match">#endif</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-built_in">int</span> flags;</span><br><span class="hljs-pattern-match">    void<span class="hljs-operator">*</span> obj;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">Size</span> sz;</span><br><span class="hljs-pattern-match">&#125;;</span><br></code></pre></td></tr></table></figure><p>可以看到，_InputArray类的里面首先定义了一个枚举，然后定了各个构造函数和虚函数。很多时候，遇到函数原型中的InputArray类型，我们把它简单地当做Mat类型就行了。</p><p>imshow 函数用于在指定的窗口中显示图像。如果窗口是用CV_WINDOW_AUTOSIZE（默认值）标志创建的，那么显示图像原始大小。否则，将图像进行缩放以适合窗口。而imshow 函数缩放图像，取决于图像的深度：</p><ul><li>如果载入的图像是8位无符号类型（8-bit unsigned），就显示图像本来的样子。</li><li>如果图像是16位无符号类型（16-bit unsigned）或32位整型（32-bit integer），便用像素值除以256。也就是说，值的范围是[0,255 x 256]映射到[0,255]。</li><li>如果图像是32位浮点型（32-bit floating-point），像素值便要乘以255。也就是说，该值的范围是[0,1]映射到[0,255]。</li></ul><h3 id="imwrite"><a href="#imwrite" class="headerlink" title="imwrite"></a>imwrite</h3><p>功能：输出图像到文件</p><p>定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">imwrite</span><span class="hljs-params">( <span class="hljs-type">const</span> string&amp; filename, InputArray img,</span></span><br><span class="hljs-params"><span class="hljs-function">              <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; params=vector&lt;<span class="hljs-type">int</span>&gt;())</span></span>;<br></code></pre></td></tr></table></figure><p> ■ 第一个参数，const string&amp;类型的filename，填需要写入的文件名就行了，带上后缀，比如，“123.jpg”这样。</p><p> ■ 第二个参数，InputArray类型的img，一般填一个Mat类型的图像数据就行了。</p><p> ■ 第三个参数，<code>const vector&lt;int&gt;</code>&amp;类型的params，表示为特定格式保存的参数编码，它有默认值<code>vector&lt;int&gt;()</code>，所以一般情况下不需要填写。</p><h3 id="cvtcolor"><a href="#cvtcolor" class="headerlink" title="cvtcolor"></a>cvtcolor</h3><p>功能：将一个图像的颜色空间转换到另一种（Converts an image from one color space to another.）</p><p>参考：<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/modules/imgproc/doc/miscellaneous_transformations.html?highlight=cvtcolor#cvtcolor">cvtcolor</a></p><p>定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cvtColor</span><span class="hljs-params">( InputArray src, OutputArray dst, <span class="hljs-type">int</span> code, <span class="hljs-type">int</span> dstCn=<span class="hljs-number">0</span> )</span></span>;<br></code></pre></td></tr></table></figure><p> ■ 第一个参数，InputArray类型的src ,– Source image</p><p> ■ 第二个参数，OutputArray类型的dst，Destination image of the same size and depth as src</p><p> ■ 第三个参数，int类型的code，颜色空间变换代码Color space conversion code。</p><p>具体的变换代码参见：opencv\build\include\opencv2\imgproc\types_c.h文件中的第87行，枚举类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Constants for color conversion */</span><br><span class="hljs-keyword">enum</span><br>&#123;<br>    CV_BGR2BGRA    =<span class="hljs-number">0</span>,<br>    CV_RGB2RGBA    =CV_BGR2BGRA,<br><br>    CV_BGRA2BGR    =<span class="hljs-number">1</span>,<br>    CV_RGBA2RGB    =CV_BGRA2BGR,<br><br>    CV_BGR2RGBA    =<span class="hljs-number">2</span>,<br>    CV_RGB2BGRA    =CV_BGR2RGBA,<br><br>    CV_RGBA2BGR    =<span class="hljs-number">3</span>,<br>    CV_BGRA2RGB    =CV_RGBA2BGR,<br><br>    CV_BGR2RGB     =<span class="hljs-number">4</span>,<br>    CV_RGB2BGR     =CV_BGR2RGB,<br><br>    CV_BGRA2RGBA   =<span class="hljs-number">5</span>,<br>    CV_RGBA2BGRA   =CV_BGRA2RGBA,<br><br>    CV_BGR2GRAY    =<span class="hljs-number">6</span>,<br>    CV_RGB2GRAY    =<span class="hljs-number">7</span>,<br>    CV_GRAY2BGR    =<span class="hljs-number">8</span>,<br>    CV_GRAY2RGB    =CV_GRAY2BGR,<br>    CV_GRAY2BGRA   =<span class="hljs-number">9</span>,<br>    CV_GRAY2RGBA   =CV_GRAY2BGRA,<br>    CV_BGRA2GRAY   =<span class="hljs-number">10</span>,<br>    CV_RGBA2GRAY   =<span class="hljs-number">11</span>,<br><br>    CV_BGR2BGR565  =<span class="hljs-number">12</span>,<br>    CV_RGB2BGR565  =<span class="hljs-number">13</span>,<br>    CV_BGR5652BGR  =<span class="hljs-number">14</span>,<br>    CV_BGR5652RGB  =<span class="hljs-number">15</span>,<br>    CV_BGRA2BGR565 =<span class="hljs-number">16</span>,<br>    CV_RGBA2BGR565 =<span class="hljs-number">17</span>,<br>    CV_BGR5652BGRA =<span class="hljs-number">18</span>,<br>    CV_BGR5652RGBA =<span class="hljs-number">19</span>,<br><br>    CV_GRAY2BGR565 =<span class="hljs-number">20</span>,<br>    CV_BGR5652GRAY =<span class="hljs-number">21</span>,<br><br>    CV_BGR2BGR555  =<span class="hljs-number">22</span>,<br>    CV_RGB2BGR555  =<span class="hljs-number">23</span>,<br>    CV_BGR5552BGR  =<span class="hljs-number">24</span>,<br>    CV_BGR5552RGB  =<span class="hljs-number">25</span>,<br>    CV_BGRA2BGR555 =<span class="hljs-number">26</span>,<br>    CV_RGBA2BGR555 =<span class="hljs-number">27</span>,<br>    CV_BGR5552BGRA =<span class="hljs-number">28</span>,<br>    CV_BGR5552RGBA =<span class="hljs-number">29</span>,<br><br>    CV_GRAY2BGR555 =<span class="hljs-number">30</span>,<br>    CV_BGR5552GRAY =<span class="hljs-number">31</span>,<br><br>    CV_BGR2XYZ     =<span class="hljs-number">32</span>,<br>    CV_RGB2XYZ     =<span class="hljs-number">33</span>,<br>    CV_XYZ2BGR     =<span class="hljs-number">34</span>,<br>    CV_XYZ2RGB     =<span class="hljs-number">35</span>,<br><br>    CV_BGR2YCrCb   =<span class="hljs-number">36</span>,<br>    CV_RGB2YCrCb   =<span class="hljs-number">37</span>,<br>    CV_YCrCb2BGR   =<span class="hljs-number">38</span>,<br>    CV_YCrCb2RGB   =<span class="hljs-number">39</span>,<br><br>    CV_BGR2HSV     =<span class="hljs-number">40</span>,<br>    CV_RGB2HSV     =<span class="hljs-number">41</span>,<br><br>    CV_BGR2Lab     =<span class="hljs-number">44</span>,<br>    CV_RGB2Lab     =<span class="hljs-number">45</span>,<br><br>    CV_BayerBG2BGR =<span class="hljs-number">46</span>,<br>    CV_BayerGB2BGR =<span class="hljs-number">47</span>,<br>    CV_BayerRG2BGR =<span class="hljs-number">48</span>,<br>    CV_BayerGR2BGR =<span class="hljs-number">49</span>,<br><br>    CV_BayerBG2RGB =CV_BayerRG2BGR,<br>    CV_BayerGB2RGB =CV_BayerGR2BGR,<br>    CV_BayerRG2RGB =CV_BayerBG2BGR,<br>    CV_BayerGR2RGB =CV_BayerGB2BGR,<br><br>    CV_BGR2Luv     =<span class="hljs-number">50</span>,<br>    CV_RGB2Luv     =<span class="hljs-number">51</span>,<br>    CV_BGR2HLS     =<span class="hljs-number">52</span>,<br>    CV_RGB2HLS     =<span class="hljs-number">53</span>,<br><br>    CV_HSV2BGR     =<span class="hljs-number">54</span>,<br>    CV_HSV2RGB     =<span class="hljs-number">55</span>,<br><br>    CV_Lab2BGR     =<span class="hljs-number">56</span>,<br>    CV_Lab2RGB     =<span class="hljs-number">57</span>,<br>    CV_Luv2BGR     =<span class="hljs-number">58</span>,<br>    CV_Luv2RGB     =<span class="hljs-number">59</span>,<br>    CV_HLS2BGR     =<span class="hljs-number">60</span>,<br>    CV_HLS2RGB     =<span class="hljs-number">61</span>,<br><br>    CV_BayerBG2BGR_VNG =<span class="hljs-number">62</span>,<br>    CV_BayerGB2BGR_VNG =<span class="hljs-number">63</span>,<br>    CV_BayerRG2BGR_VNG =<span class="hljs-number">64</span>,<br>    CV_BayerGR2BGR_VNG =<span class="hljs-number">65</span>,<br><br>    CV_BayerBG2RGB_VNG =CV_BayerRG2BGR_VNG,<br>    CV_BayerGB2RGB_VNG =CV_BayerGR2BGR_VNG,<br>    CV_BayerRG2RGB_VNG =CV_BayerBG2BGR_VNG,<br>    CV_BayerGR2RGB_VNG =CV_BayerGB2BGR_VNG,<br><br>    CV_BGR2HSV_FULL = <span class="hljs-number">66</span>,<br>    CV_RGB2HSV_FULL = <span class="hljs-number">67</span>,<br>    CV_BGR2HLS_FULL = <span class="hljs-number">68</span>,<br>    CV_RGB2HLS_FULL = <span class="hljs-number">69</span>,<br><br>    CV_HSV2BGR_FULL = <span class="hljs-number">70</span>,<br>    CV_HSV2RGB_FULL = <span class="hljs-number">71</span>,<br>    CV_HLS2BGR_FULL = <span class="hljs-number">72</span>,<br>    CV_HLS2RGB_FULL = <span class="hljs-number">73</span>,<br><br>    CV_LBGR2Lab     = <span class="hljs-number">74</span>,<br>    CV_LRGB2Lab     = <span class="hljs-number">75</span>,<br>    CV_LBGR2Luv     = <span class="hljs-number">76</span>,<br>    CV_LRGB2Luv     = <span class="hljs-number">77</span>,<br><br>    CV_Lab2LBGR     = <span class="hljs-number">78</span>,<br>    CV_Lab2LRGB     = <span class="hljs-number">79</span>,<br>    CV_Luv2LBGR     = <span class="hljs-number">80</span>,<br>    CV_Luv2LRGB     = <span class="hljs-number">81</span>,<br><br>    CV_BGR2YUV      = <span class="hljs-number">82</span>,<br>    CV_RGB2YUV      = <span class="hljs-number">83</span>,<br>    CV_YUV2BGR      = <span class="hljs-number">84</span>,<br>    CV_YUV2RGB      = <span class="hljs-number">85</span>,<br><br>    CV_BayerBG2GRAY = <span class="hljs-number">86</span>,<br>    CV_BayerGB2GRAY = <span class="hljs-number">87</span>,<br>    CV_BayerRG2GRAY = <span class="hljs-number">88</span>,<br>    CV_BayerGR2GRAY = <span class="hljs-number">89</span>,<br><br>    <span class="hljs-comment">//YUV 4:2:0 formats family</span><br>    CV_YUV2RGB_NV12 = <span class="hljs-number">90</span>,<br>    CV_YUV2BGR_NV12 = <span class="hljs-number">91</span>,<br>    CV_YUV2RGB_NV21 = <span class="hljs-number">92</span>,<br>    CV_YUV2BGR_NV21 = <span class="hljs-number">93</span>,<br>    CV_YUV420sp2RGB = CV_YUV2RGB_NV21,<br>    CV_YUV420sp2BGR = CV_YUV2BGR_NV21,<br><br>    CV_YUV2RGBA_NV12 = <span class="hljs-number">94</span>,<br>    CV_YUV2BGRA_NV12 = <span class="hljs-number">95</span>,<br>    CV_YUV2RGBA_NV21 = <span class="hljs-number">96</span>,<br>    CV_YUV2BGRA_NV21 = <span class="hljs-number">97</span>,<br>    CV_YUV420sp2RGBA = CV_YUV2RGBA_NV21,<br>    CV_YUV420sp2BGRA = CV_YUV2BGRA_NV21,<br><br>    CV_YUV2RGB_YV12 = <span class="hljs-number">98</span>,<br>    CV_YUV2BGR_YV12 = <span class="hljs-number">99</span>,<br>    CV_YUV2RGB_IYUV = <span class="hljs-number">100</span>,<br>    CV_YUV2BGR_IYUV = <span class="hljs-number">101</span>,<br>    CV_YUV2RGB_I420 = CV_YUV2RGB_IYUV,<br>    CV_YUV2BGR_I420 = CV_YUV2BGR_IYUV,<br>    CV_YUV420p2RGB = CV_YUV2RGB_YV12,<br>    CV_YUV420p2BGR = CV_YUV2BGR_YV12,<br><br>    CV_YUV2RGBA_YV12 = <span class="hljs-number">102</span>,<br>    CV_YUV2BGRA_YV12 = <span class="hljs-number">103</span>,<br>    CV_YUV2RGBA_IYUV = <span class="hljs-number">104</span>,<br>    CV_YUV2BGRA_IYUV = <span class="hljs-number">105</span>,<br>    CV_YUV2RGBA_I420 = CV_YUV2RGBA_IYUV,<br>    CV_YUV2BGRA_I420 = CV_YUV2BGRA_IYUV,<br>    CV_YUV420p2RGBA = CV_YUV2RGBA_YV12,<br>    CV_YUV420p2BGRA = CV_YUV2BGRA_YV12,<br><br>    CV_YUV2GRAY_420 = <span class="hljs-number">106</span>,<br>    CV_YUV2GRAY_NV21 = CV_YUV2GRAY_420,<br>    CV_YUV2GRAY_NV12 = CV_YUV2GRAY_420,<br>    CV_YUV2GRAY_YV12 = CV_YUV2GRAY_420,<br>    CV_YUV2GRAY_IYUV = CV_YUV2GRAY_420,<br>    CV_YUV2GRAY_I420 = CV_YUV2GRAY_420,<br>    CV_YUV420sp2GRAY = CV_YUV2GRAY_420,<br>    CV_YUV420p2GRAY = CV_YUV2GRAY_420,<br><br>    <span class="hljs-comment">//YUV 4:2:2 formats family</span><br>    CV_YUV2RGB_UYVY = <span class="hljs-number">107</span>,<br>    CV_YUV2BGR_UYVY = <span class="hljs-number">108</span>,<br>    <span class="hljs-comment">//CV_YUV2RGB_VYUY = 109,</span><br>    <span class="hljs-comment">//CV_YUV2BGR_VYUY = 110,</span><br>    CV_YUV2RGB_Y422 = CV_YUV2RGB_UYVY,<br>    CV_YUV2BGR_Y422 = CV_YUV2BGR_UYVY,<br>    CV_YUV2RGB_UYNV = CV_YUV2RGB_UYVY,<br>    CV_YUV2BGR_UYNV = CV_YUV2BGR_UYVY,<br><br>    CV_YUV2RGBA_UYVY = <span class="hljs-number">111</span>,<br>    CV_YUV2BGRA_UYVY = <span class="hljs-number">112</span>,<br>    <span class="hljs-comment">//CV_YUV2RGBA_VYUY = 113,</span><br>    <span class="hljs-comment">//CV_YUV2BGRA_VYUY = 114,</span><br>    CV_YUV2RGBA_Y422 = CV_YUV2RGBA_UYVY,<br>    CV_YUV2BGRA_Y422 = CV_YUV2BGRA_UYVY,<br>    CV_YUV2RGBA_UYNV = CV_YUV2RGBA_UYVY,<br>    CV_YUV2BGRA_UYNV = CV_YUV2BGRA_UYVY,<br><br>    CV_YUV2RGB_YUY2 = <span class="hljs-number">115</span>,<br>    CV_YUV2BGR_YUY2 = <span class="hljs-number">116</span>,<br>    CV_YUV2RGB_YVYU = <span class="hljs-number">117</span>,<br>    CV_YUV2BGR_YVYU = <span class="hljs-number">118</span>,<br>    CV_YUV2RGB_YUYV = CV_YUV2RGB_YUY2,<br>    CV_YUV2BGR_YUYV = CV_YUV2BGR_YUY2,<br>    CV_YUV2RGB_YUNV = CV_YUV2RGB_YUY2,<br>    CV_YUV2BGR_YUNV = CV_YUV2BGR_YUY2,<br><br>    CV_YUV2RGBA_YUY2 = <span class="hljs-number">119</span>,<br>    CV_YUV2BGRA_YUY2 = <span class="hljs-number">120</span>,<br>    CV_YUV2RGBA_YVYU = <span class="hljs-number">121</span>,<br>    CV_YUV2BGRA_YVYU = <span class="hljs-number">122</span>,<br>    CV_YUV2RGBA_YUYV = CV_YUV2RGBA_YUY2,<br>    CV_YUV2BGRA_YUYV = CV_YUV2BGRA_YUY2,<br>    CV_YUV2RGBA_YUNV = CV_YUV2RGBA_YUY2,<br>    CV_YUV2BGRA_YUNV = CV_YUV2BGRA_YUY2,<br><br>    CV_YUV2GRAY_UYVY = <span class="hljs-number">123</span>,<br>    CV_YUV2GRAY_YUY2 = <span class="hljs-number">124</span>,<br>    <span class="hljs-comment">//CV_YUV2GRAY_VYUY = CV_YUV2GRAY_UYVY,</span><br>    CV_YUV2GRAY_Y422 = CV_YUV2GRAY_UYVY,<br>    CV_YUV2GRAY_UYNV = CV_YUV2GRAY_UYVY,<br>    CV_YUV2GRAY_YVYU = CV_YUV2GRAY_YUY2,<br>    CV_YUV2GRAY_YUYV = CV_YUV2GRAY_YUY2,<br>    CV_YUV2GRAY_YUNV = CV_YUV2GRAY_YUY2,<br><br>    <span class="hljs-comment">// alpha premultiplication</span><br>    CV_RGBA2mRGBA = <span class="hljs-number">125</span>,<br>    CV_mRGBA2RGBA = <span class="hljs-number">126</span>,<br><br>    CV_RGB2YUV_I420 = <span class="hljs-number">127</span>,<br>    CV_BGR2YUV_I420 = <span class="hljs-number">128</span>,<br>    CV_RGB2YUV_IYUV = CV_RGB2YUV_I420,<br>    CV_BGR2YUV_IYUV = CV_BGR2YUV_I420,<br><br>    CV_RGBA2YUV_I420 = <span class="hljs-number">129</span>,<br>    CV_BGRA2YUV_I420 = <span class="hljs-number">130</span>,<br>    CV_RGBA2YUV_IYUV = CV_RGBA2YUV_I420,<br>    CV_BGRA2YUV_IYUV = CV_BGRA2YUV_I420,<br>    CV_RGB2YUV_YV12  = <span class="hljs-number">131</span>,<br>    CV_BGR2YUV_YV12  = <span class="hljs-number">132</span>,<br>    CV_RGBA2YUV_YV12 = <span class="hljs-number">133</span>,<br>    CV_BGRA2YUV_YV12 = <span class="hljs-number">134</span>,<br><br>    CV_COLORCVT_MAX  = <span class="hljs-number">135</span><br>&#125;;<br></code></pre></td></tr></table></figure><p> ■ 第四个参数，int类型的dstCn，dst中的通道数（channel number ），dstCn默认为0，表示 dst中通道数自动从src和code中获取。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将彩色图像image1变换为灰度图像gray_image1</span><br><span class="hljs-built_in">cvtColor</span>(image1,gray_image1,CV_RGB2GRAY);<br></code></pre></td></tr></table></figure><h2 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// VS2010 + OpenCV2.4.9</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;opencv2/core/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>Mat girl=<span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;girl.jpg&quot;</span>); <span class="hljs-comment">//载入图像到Mat</span><br><span class="hljs-built_in">namedWindow</span>(<span class="hljs-string">&quot;girl.jpg&quot;</span>); <br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;girl.jpg&quot;</span>,girl);<br><br><span class="hljs-comment">//载入图片</span><br>Mat image= <span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;11.jpg&quot;</span>,<span class="hljs-number">199</span>);<br><br><span class="hljs-comment">//载入后先显示</span><br><span class="hljs-built_in">namedWindow</span>(<span class="hljs-string">&quot;11.jpg&quot;</span>);<br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;11.jpg&quot;</span>,image);<br><br><span class="hljs-comment">//输出一张jpg图片到工程目录下</span><br><span class="hljs-built_in">imwrite</span>(<span class="hljs-string">&quot;10.jpg&quot;</span>,image);<br> <br><span class="hljs-built_in">waitKey</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
      <tag>Mat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维人员常用的Linux命令总结</title>
    <link href="/2016/03/28/%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E5%B8%B8%E7%94%A8%E7%9A%84linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/2016/03/28/%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E5%B8%B8%E7%94%A8%E7%9A%84linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>存放可执行文件</td></tr><tr><td>&#x2F;boot</td><td>核心与启动相关文件</td></tr><tr><td>&#x2F;dev</td><td>设备有关的文件</td></tr><tr><td>&#x2F;etc</td><td>相关的配置信息</td></tr><tr><td>&#x2F;etc&#x2F;rc.d</td><td>存放开关机过程中用到的脚本文件</td></tr><tr><td>&#x2F;etc&#x2F;rc.d&#x2F;init.d</td><td>所以服务默认的启动脚本都放在这里</td></tr><tr><td>&#x2F;etc&#x2F;xinetd.d</td><td>启动服务可在此找到</td></tr><tr><td>&#x2F;etc&#x2F;X11</td><td>与X windows有关的配置文件</td></tr><tr><td>&#x2F;lib</td><td>执行或编译某些程序时用到的函数库</td></tr><tr><td>&#x2F;proc</td><td>系统核心与执行程序所需要的一些信息。都是内存中的数据</td></tr><tr><td>&#x2F;root</td><td>系统管理员根目录</td></tr><tr><td>&#x2F;sbin</td><td>系统管理常用的程序</td></tr><tr><td>&#x2F;tmp</td><td>存放临时文件的地方</td></tr><tr><td>&#x2F;usr</td><td>存放系统信息，用来存放程序与指令。类似windows下的program  flies</td></tr></tbody></table><p>其中重点需要掌握的是&#x2F;etc目录和&#x2F;proc目录。</p><span id="more"></span><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="查看CPU详细信息"><a href="#查看CPU详细信息" class="headerlink" title="查看CPU详细信息"></a>查看CPU详细信息</h3><p>cpu相关信息存放在&#x2F;proc&#x2F;cpuinfo目录中，所以要查看cpu信息就可以用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/cpuinfo<br></code></pre></td></tr></table></figure><p>得到相关的cpu信息如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">processor</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">vendor_id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">GenuineIntel</span><br><span class="hljs-attribute">cpu family</span><span class="hljs-punctuation">:</span> <span class="hljs-string">6</span><br><span class="hljs-attribute">model</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60</span><br><span class="hljs-attribute">model name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Intel(R) Pentium(R) CPU G3260 @ 3.30GHz</span><br><span class="hljs-attribute">stepping</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><span class="hljs-attribute">cpu MHz</span><span class="hljs-punctuation">:</span> <span class="hljs-string">800.000</span><br><span class="hljs-attribute">cache size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3072 KB</span><br><span class="hljs-attribute">physical id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">siblings</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">core id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">cpu cores</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">apicid</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">initial apicid</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">fpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">yes</span><br><span class="hljs-attribute">fpu_exception</span><span class="hljs-punctuation">:</span> <span class="hljs-string">yes</span><br><span class="hljs-attribute">cpuid level</span><span class="hljs-punctuation">:</span> <span class="hljs-string">13</span><br><span class="hljs-attribute">wp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">yes</span><br><span class="hljs-attribute">flags</span><span class="hljs-punctuation">:</span> <span class="hljs-string">fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 movbe popcnt tsc_deadline_timer xsave rdrand lahf_lm abm arat epb xsaveopt pln pts dts tpr_shadow vnmi flexpriority ept vpid fsgsbase erms invpcid</span><br><span class="hljs-attribute">bogomips</span><span class="hljs-punctuation">:</span> <span class="hljs-string">6584.81</span><br><span class="hljs-attribute">clflush size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">64</span><br><span class="hljs-attribute">cache_alignment</span><span class="hljs-punctuation">:</span> <span class="hljs-string">64</span><br><span class="hljs-attribute">address sizes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">39 bits physical, 48 bits virtual</span><br><span class="hljs-attribute">power management</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">processor</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br><span class="hljs-attribute">vendor_id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">GenuineIntel</span><br><span class="hljs-attribute">cpu family</span><span class="hljs-punctuation">:</span> <span class="hljs-string">6</span><br><span class="hljs-attribute">model</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60</span><br><span class="hljs-attribute">model name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Intel(R) Pentium(R) CPU G3260 @ 3.30GHz</span><br><span class="hljs-attribute">stepping</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><span class="hljs-attribute">cpu MHz</span><span class="hljs-punctuation">:</span> <span class="hljs-string">800.000</span><br><span class="hljs-attribute">cache size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3072 KB</span><br><span class="hljs-attribute">physical id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">siblings</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">core id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br><span class="hljs-attribute">cpu cores</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">apicid</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">initial apicid</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">fpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">yes</span><br><span class="hljs-attribute">fpu_exception</span><span class="hljs-punctuation">:</span> <span class="hljs-string">yes</span><br><span class="hljs-attribute">cpuid level</span><span class="hljs-punctuation">:</span> <span class="hljs-string">13</span><br><span class="hljs-attribute">wp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">yes</span><br><span class="hljs-attribute">flags</span><span class="hljs-punctuation">:</span> <span class="hljs-string">fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 movbe popcnt tsc_deadline_timer xsave rdrand lahf_lm abm arat epb xsaveopt pln pts dts tpr_shadow vnmi flexpriority ept vpid fsgsbase erms invpcid</span><br><span class="hljs-attribute">bogomips</span><span class="hljs-punctuation">:</span> <span class="hljs-string">6584.81</span><br><span class="hljs-attribute">clflush size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">64</span><br><span class="hljs-attribute">cache_alignment</span><span class="hljs-punctuation">:</span> <span class="hljs-string">64</span><br><span class="hljs-attribute">address sizes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">39 bits physical, 48 bits virtual</span><br><span class="hljs-attribute">power management</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br></code></pre></td></tr></table></figure><p>上面的这些cpu信息我们需要关注的是processor，physical id，siblings，core id，cpu cores这几个字段。这几个字字段的含义如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Linux-cpuinfo.png" alt="Linux-cpuinfo"></p><p>根据上面的介绍可知我这台服务器上有一个物理cpu，2个逻辑处理器（逻辑cpu），这个物理cpu有两个内核。</p><p>可以通过以下方法查询CPU状态。</p><h4 id="查询逻辑CPU个数"><a href="#查询逻辑CPU个数" class="headerlink" title="查询逻辑CPU个数"></a>查询逻辑CPU个数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;processor&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h4 id="查询物理CPU个数"><a href="#查询物理CPU个数" class="headerlink" title="查询物理CPU个数"></a>查询物理CPU个数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;physical id&quot;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h4 id="查询每个物理cpu中core的个数"><a href="#查询每个物理cpu中core的个数" class="headerlink" title="查询每个物理cpu中core的个数"></a>查询每个物理cpu中core的个数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;core id&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h3 id="查看cpu利用率"><a href="#查看cpu利用率" class="headerlink" title="查看cpu利用率"></a>查看cpu利用率</h3><p>查看cpu利用率可以用top命令。top命令可以显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等。</p><p>关于cpu利用率和cpu负载的详细计算方法可以参见：<a href="http://www.penglixun.com/tech/system/how_to_calc_load_cpu.html">Load和CPU利用率是如何算出来的</a></p><h3 id="linux版本信息"><a href="#linux版本信息" class="headerlink" title="linux版本信息"></a>linux版本信息</h3><p>两种方法：查看<code>cat /proc/version</code>文件或者 <code>lsb_release -a</code>命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tcl">[root@localhost /]# cat /<span class="hljs-keyword">proc</span>/version<span class="hljs-title"> </span><br><span class="hljs-title">Linux</span> version 2.6.32-431.el6.x86_64 (mockbuild@x86-023.build.eng.bos.redhat.com) (gcc<span class="hljs-title"> version</span> 4.4.7 20120313 (Red<span class="hljs-title"> Hat</span> 4.4.7-4) (GCC) ) #1<span class="hljs-title"> SMP</span> Sun<span class="hljs-title"> Nov</span> 10 22:19:54<span class="hljs-title"> EST</span> 2013<br><br>[root@localhost /]#<span class="hljs-title"> lsb_release</span> -a<span class="hljs-title"></span><br><span class="hljs-title">LSB</span> Version::base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch<span class="hljs-title"></span><br><span class="hljs-title">Distributor</span> ID:<span class="hljs-title">RedHatEnterpriseServer</span><br>Description:<span class="hljs-title">Red</span> Hat<span class="hljs-title"> Enterprise</span> Linux<span class="hljs-title"> Server</span> release 6.5 (Santiago)<span class="hljs-title"></span><br><span class="hljs-title">Release:</span>6.5<span class="hljs-title"></span><br><span class="hljs-title">Codename:</span>Santiago<br></code></pre></td></tr></table></figure><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tcl">cat/<span class="hljs-keyword">proc</span>/meminfo<span class="hljs-title">   </span><br><span class="hljs-title">free</span> –m<span class="hljs-title">  </span><br><span class="hljs-title">top</span>    <br></code></pre></td></tr></table></figure><p>下面列出free -m的结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@localhost</span> <span class="hljs-string">proc</span>]<span class="hljs-comment"># free -m</span><br>             <span class="hljs-string">total</span>       <span class="hljs-string">used</span>       <span class="hljs-string">free</span>     <span class="hljs-string">shared</span>    <span class="hljs-string">buffers</span>     <span class="hljs-string">cached</span><br><span class="hljs-attr">Mem:</span>          <span class="hljs-number">7747       </span><span class="hljs-number">5392       </span><span class="hljs-number">2355          </span><span class="hljs-number">0</span>        <span class="hljs-number">230</span>       <span class="hljs-number">3258</span><br><span class="hljs-string">-/+</span> <span class="hljs-attr">buffers/cache:</span>       <span class="hljs-number">1903       </span><span class="hljs-number">5843</span><br><span class="hljs-attr">Swap:</span>         <span class="hljs-number">7999          </span><span class="hljs-number">0</span>       <span class="hljs-number">7999</span><br></code></pre></td></tr></table></figure><p><strong>Mem行:</strong></p><table><thead><tr><th>指标</th><th>含义</th><th>大小</th></tr></thead><tbody><tr><td>total</td><td>内存总数</td><td>7747M</td></tr><tr><td>used</td><td>已经使用的内存数</td><td>5392M</td></tr><tr><td>free</td><td>空闲的内存数</td><td>2355M</td></tr><tr><td>shared</td><td>当前已经废弃不用，总是0</td><td>0</td></tr><tr><td>buffers</td><td>Buffer 缓存内存数</td><td>230</td></tr><tr><td>cached</td><td>Page 缓存内存数</td><td>3258</td></tr></tbody></table><p>所以有关系：total(7747M) &#x3D; used(5392M) + free(2355M)</p><p><strong>(-&#x2F;+ buffers&#x2F;cache)行:</strong></p><ul><li><p>(-buffers&#x2F;cache) used内存数（已占用）：1903M(指的Mem行中的used - buffers - cached)</p></li><li><p>(+buffers&#x2F;cache) free内存数（可使用）：5843M (指的Mem行中的free + buffers + cached)</p></li></ul><p>可见-buffers&#x2F;cache反映的是被程序实实在在吃掉的内存，而+buffers&#x2F;cache反映的是可以挪用的内存总数。</p><p><strong>swap行：</strong></p><p>swap内存如果经常是使用很多，就表示内存不足需要加物理内存了。</p><p><strong>内存使用率的计算：</strong></p><ul><li>内存使用率&#x3D;真实内存占用&#x2F;内存总数</li><li>真实内存占用&#x3D;used-buffers-cached</li><li>空闲内存&#x3D;free + buffers + cached</li></ul><h3 id="磁盘情况"><a href="#磁盘情况" class="headerlink" title="磁盘情况"></a>磁盘情况</h3><ul><li><p><code>df -h</code> ：按照G显示，<code>fdisk</code>和<code>lsblk</code>没有权限时最好使用<code>df -h</code></p></li><li><p><code>df -l</code> ：按照K显示       </p></li><li><p><code>fdisk -l</code> ：显示磁盘详细信息     </p></li><li><p><strong><code>lsblk</code> ：格式整齐，最为推荐使用</strong></p></li></ul><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost /]<span class="hljs-comment"># lsblk</span><br>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT<br>sda      8:0   <span class="hljs-number"> 0 </span>  461G <span class="hljs-number"> 0 </span>disk <br>├─sda1   8:1   <span class="hljs-number"> 0 </span>402.9G <span class="hljs-number"> 0 </span>part /<br>├─sda2   8:2   <span class="hljs-number"> 0 </span> 50.4G <span class="hljs-number"> 0 </span>part /home<br>└─sda3   8:3   <span class="hljs-number"> 0 </span>  7.8G <span class="hljs-number"> 0 </span>part [SWAP]<br>sr0     11:0   <span class="hljs-number"> 1 </span> 1024M <span class="hljs-number"> 0 </span>rom <br><br>[root@localhost /]<span class="hljs-comment"># df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/sda1       397G   21G  356G   6% /<br>tmpfs           3.8G    <span class="hljs-number"> 0 </span> 3.8G   0% /dev/shm<br>/dev/sda2        50G  180M   47G   1% /home<br><br>[root@localhost /]<span class="hljs-comment"># df -l</span><br>Filesystem     1K-blocks     Used Available Use% Mounted on<br>/dev/sda1     <span class="hljs-number"> 415787952 </span>21556856<span class="hljs-number"> 373110280 </span>  6% /<br>tmpfs           <span class="hljs-number"> 3966492 </span>      <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3966492 </span>  0% /dev/shm<br>/dev/sda2      <span class="hljs-number"> 51999916 </span> <span class="hljs-number"> 184304 </span><span class="hljs-number"> 49174156 </span>  1% /home<br><br><br>[root@localhost /]<span class="hljs-comment"># fdisk -l</span><br><br>Disk /dev/sda: 495.0 GB,<span class="hljs-number"> 495041143296 </span>bytes<br>255 heads,<span class="hljs-number"> 63 </span>sectors/track,<span class="hljs-number"> 60185 </span>cylinders<br>Units = cylinders of<span class="hljs-number"> 16065 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 8225280 </span>bytes<br>Sector size (logical/physical):<span class="hljs-number"> 512 </span>bytes /<span class="hljs-number"> 4096 </span>bytes<br>I/O size (minimum/optimal):<span class="hljs-number"> 4096 </span>bytes /<span class="hljs-number"> 4096 </span>bytes<br>Disk identifier: 0x66cbb80d<br><br>   Device Boot      Start         End      Blocks   Id  System<br>/dev/sda1   *          <span class="hljs-number"> 1 </span>     <span class="hljs-number"> 52589 </span> <span class="hljs-number"> 422416384 </span> <span class="hljs-number"> 83 </span> Linux<br>/dev/sda2          <span class="hljs-number"> 52589 </span>     <span class="hljs-number"> 59166 </span>  <span class="hljs-number"> 52829184 </span> <span class="hljs-number"> 83 </span> Linux<br>/dev/sda3          <span class="hljs-number"> 59166 </span>     <span class="hljs-number"> 60186 </span>   <span class="hljs-number"> 8192000 </span> <span class="hljs-number"> 82 </span> Linux swap / Solaris<br></code></pre></td></tr></table></figure><h2 id="字符集相关"><a href="#字符集相关" class="headerlink" title="字符集相关"></a>字符集相关</h2><h3 id="查看当前字符集"><a href="#查看当前字符集" class="headerlink" title="查看当前字符集"></a>查看当前字符集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LANG</span><br></code></pre></td></tr></table></figure><h3 id="系统所有字符集"><a href="#系统所有字符集" class="headerlink" title="系统所有字符集"></a>系统所有字符集</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">locale -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h3 id="临时修改字符集"><a href="#临时修改字符集" class="headerlink" title="临时修改字符集"></a>临时修改字符集</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LANG</span>=字符集<br></code></pre></td></tr></table></figure><h3 id="字符集配置文件修改"><a href="#字符集配置文件修改" class="headerlink" title="字符集配置文件修改"></a>字符集配置文件修改</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sysconfig/i18n<br></code></pre></td></tr></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="防火墙开关"><a href="#防火墙开关" class="headerlink" title="防火墙开关"></a>防火墙开关</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#查看防火墙状态</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>iptables status<br><span class="hljs-comment">#开启防火墙</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>iptables start<br><span class="hljs-comment">#关闭防火墙</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>iptables stop<br><span class="hljs-comment">#重启防火墙</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>iptables restart<br></code></pre></td></tr></table></figure><h3 id="ftp服务开关"><a href="#ftp服务开关" class="headerlink" title="ftp服务开关"></a>ftp服务开关</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#查看ftp服务状态</span><br>service vsftpd status<br><span class="hljs-comment">#开启/关闭/重启防火墙</span><br>service vsftpd start<span class="hljs-regexp">/stop/</span>restar<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>###查看文本命令：cat  、tail、vim</p><p>例子:<code>cat/tail/vim  a.txt</code></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment">#查看/proc/cpuinfo的最后五行</span><br>[root@localhost <span class="hljs-keyword">proc</span>]#<span class="hljs-title"> tail</span> -n 5 /<span class="hljs-keyword">proc</span>/cpuinfo<span class="hljs-title"></span><br><span class="hljs-title">clflush</span> size: 64<span class="hljs-title"></span><br><span class="hljs-title">cache_alignment</span>: 64<span class="hljs-title"></span><br><span class="hljs-title">address</span> sizes: 39<span class="hljs-title"> bits</span> physical, 48<span class="hljs-title"> bits</span> virtual<span class="hljs-title"></span><br><span class="hljs-title">power</span> management:<br></code></pre></td></tr></table></figure><h3 id="文本处理sed"><a href="#文本处理sed" class="headerlink" title="文本处理sed"></a>文本处理sed</h3><p>sed命令的使用参考：<a href="https://man.linuxde.net/sed">https://man.linuxde.net/sed</a></p><p>后续会自己总结一篇sed命令的使用心得。</p><h3 id="修改系统时间"><a href="#修改系统时间" class="headerlink" title="修改系统时间"></a>修改系统时间</h3><p>date：系统时间</p><p>clock：硬件时间</p><p>hwclock：同步二者的命令</p><p><strong>修改系统时间</strong>：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">date</span> -<span class="hljs-string">s</span> <span class="hljs-string">&quot;20160408 12:52:00&quot;</span><span class="hljs-comment">#修改系统时间为20160408 12:52:00</span><br><br><span class="hljs-string">hwclock</span> <span class="hljs-built_in">--systohc</span><span class="hljs-comment">#将硬件时钟调整为与目前的系统时钟一致</span><br><br><span class="hljs-string">hwclock</span> <span class="hljs-built_in">--hctosys</span><span class="hljs-comment">#将系统时钟调整为与目前的硬件时钟一致</span><br><br>（这两个选项很容易理解反）<br></code></pre></td></tr></table></figure><h3 id="文件查找find"><a href="#文件查找find" class="headerlink" title="文件查找find"></a>文件查找find</h3><p>在&#x2F;home目录下查找以.txt结尾的文件名</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find/home -name <span class="hljs-string">&quot;*.txt&quot;</span><br></code></pre></td></tr></table></figure><h3 id="远程拷贝scp"><a href="#远程拷贝scp" class="headerlink" title="远程拷贝scp"></a>远程拷贝scp</h3><p><strong>从远处复制到本地</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp -r root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.118</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/opt/soft/mongodb</span> /opt/soft/<br></code></pre></td></tr></table></figure><p>其中-r表示递归复制，类似cp，目录必须已存在。</p><p><strong>从本地复制到远处</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp /opt/soft/mysql<span class="hljs-number">-5.6</span>.<span class="hljs-number">0</span>.tar.gz root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.118</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/opt/soft/scptest</span><br></code></pre></td></tr></table></figure><p><strong>从远程复制到远程</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp -r root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.118</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/opt/soft/mongodb</span> root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.118</span>.<span class="hljs-number">3</span><span class="hljs-symbol">:/opt/soft</span><br></code></pre></td></tr></table></figure><h3 id="目录创建删除"><a href="#目录创建删除" class="headerlink" title="目录创建删除"></a>目录创建删除</h3><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/tmp/</span>aa<span class="hljs-regexp">/bb/</span>cc<br></code></pre></td></tr></table></figure><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><p>只能删除空目录。<code>rmdir /tmp/aa</code>会报错</p><h3 id="文件删除rm"><a href="#文件删除rm" class="headerlink" title="文件删除rm"></a>文件删除rm</h3><p>递归的删除文件或目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf <span class="hljs-regexp">/tmp/</span>aa<br></code></pre></td></tr></table></figure><h3 id="文件移动mv"><a href="#文件移动mv" class="headerlink" title="文件移动mv"></a>文件移动mv</h3><p><strong>文件移动</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mv <span class="hljs-regexp">/tmp/</span>test.<span class="hljs-keyword">file</span> <span class="hljs-regexp">/tmp/</span>lib/<br></code></pre></td></tr></table></figure><p><strong>文件更名</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mv <span class="hljs-regexp">/tmp/</span>test.<span class="hljs-keyword">file</span> <span class="hljs-regexp">/tmp/</span>lib/test1.<span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h3 id="查看登陆用户who"><a href="#查看登陆用户who" class="headerlink" title="查看登陆用户who"></a>查看登陆用户who</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi">[weblogic@gssbf01 /]$ who<br>weblogic pts/<span class="hljs-number">2</span>        <span class="hljs-number">2016</span>-<span class="hljs-number">04</span>-<span class="hljs-number">08</span> <span class="hljs-number">10</span>:<span class="hljs-number">01</span> (ip不显示了<span class="hljs-comment">(*^__^*)</span> 嘻嘻……)<br>weblogic pts/<span class="hljs-number">3</span>        <span class="hljs-number">2016</span>-<span class="hljs-number">04</span>-<span class="hljs-number">08</span> <span class="hljs-number">13</span>:<span class="hljs-number">18</span> (ip不显示了<span class="hljs-comment">(*^__^*)</span> 嘻嘻……)<br>weblogic pts/<span class="hljs-number">4</span>        <span class="hljs-number">2016</span>-<span class="hljs-number">04</span>-<span class="hljs-number">08</span> <span class="hljs-number">14</span>:<span class="hljs-number">11</span> (ip不显示了<span class="hljs-comment">(*^__^*)</span> 嘻嘻……)<br>[weblogic@gssbf01 /]$ whoami<br>weblogi<br></code></pre></td></tr></table></figure><h3 id="系统重启"><a href="#系统重启" class="headerlink" title="系统重启"></a>系统重启</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h3 id="改变权限chmod"><a href="#改变权限chmod" class="headerlink" title="改变权限chmod"></a>改变权限chmod</h3><p>功能：更改文件和目录的权限。</p><p>用法：chomod 权限分配 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+rwx,g+rw,o+r aa.txt<span class="hljs-comment">#分别为属主，属组，其他分配权限</span><br><span class="hljs-built_in">chmod</span> 764 aa.txt<br></code></pre></td></tr></table></figure><h3 id="改变用户和组chown"><a href="#改变用户和组chown" class="headerlink" title="改变用户和组chown"></a>改变用户和组chown</h3><p>功能：更改文件或者目录的属主属组</p><p>用法：<code>chown [OPTION]... [OWNER][:[GROUP]] FILE...</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#改变文件属主</span><br>chown weblogic nohup.<span class="hljs-built_in">log</span><br><span class="hljs-meta">#改变文件属组</span><br>chown :weblogic nohup.<span class="hljs-built_in">log</span><br><span class="hljs-meta">#改变文件属主属组</span><br>chown weblogic:weblogic nohup.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>只有文件主和超级用户才可以使用该命令。（基本都是超级管理员去修改）</p><h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><p>平时遇到的基本都是tar.gzip包，用到的最多的命令就是下面两种。（我们采用在参数前不加’-‘的旧风格，避免报错）</p><p><strong>压缩时：</strong>-c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#打包，-c创建新包，-f制定新包的名称，结果会得到一个名为backup.tar的包</span><br>tar cvf backup.tar /etc<br><span class="hljs-comment">#压缩</span><br>gzip backup.tar<span class="hljs-comment">#压缩之后会得到backup.tar.gz压缩包</span><br>bzip2 backup.tar<span class="hljs-comment">#压缩之后得到backup.tar.bz2压缩包</span><br><br><span class="hljs-comment">#等价于</span><br>tar cvfz backup.tar.gz /etc<span class="hljs-comment">#-z：通过gzip指令处理打包文件</span><br>tar cvfj backup.tar.bz2 /etc<span class="hljs-comment">#-j：通过bzip2指令处理打包文件</span><br></code></pre></td></tr></table></figure><p><strong>解压时：</strong>-x</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#解压缩</span><br>gunzip <span class="hljs-keyword">backup.tar.gz</span><span class="hljs-comment">#得到backup.tar，同时压缩包消失</span><br><span class="hljs-keyword">bunzip2 </span><span class="hljs-keyword">backup.tar.bz2</span><span class="hljs-comment">#得到backup.tar，同时压缩包消失</span><br><span class="hljs-comment">#解包</span><br>tar xvf <span class="hljs-keyword">backup.tar</span><span class="hljs-comment">#得到打包之前的目录，并且backup.tar包不消失</span><br><br>等价于<br>tar xvfz <span class="hljs-keyword">backup.tar.gz</span><span class="hljs-comment">#-z按照gunzip解压，压缩包不消失</span><br>tar xvfj <span class="hljs-keyword">backup.tar.bz2</span><span class="hljs-comment">#-j按照bunzip2解压，压缩包不消失</span><br></code></pre></td></tr></table></figure><h3 id="杀掉进程ps"><a href="#杀掉进程ps" class="headerlink" title="杀掉进程ps"></a>杀掉进程ps</h3><p>ps命令用来列出系统中当前运行的那些进程，为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 top 工具。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ps</span> -ef<span class="hljs-comment">#后面可以跟上grep命令</span><br></code></pre></td></tr></table></figure><p>如果查到需要杀死的进程，则可以用kill命令处理。</p><p>用法：<strong>kill 进程号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[weblogic@localhost ~]$ ps -ef | grep vim<br>root     11588 10104  0 17:16 pts/5    00:00:00 vim aa.txt<br>weblogic 11600 11543  0 17:17 pts/0    00:00:00 grep --color vim<br><br>[root@localhost ~]# kill 11588<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者</span><br>[root@localhost ~]# kill -9 11588#kill发出第九种信号（SIGKILL），可以无条件杀死进程。<br></code></pre></td></tr></table></figure><h3 id="Linux相关配置文件"><a href="#Linux相关配置文件" class="headerlink" title="Linux相关配置文件"></a>Linux相关配置文件</h3><table><thead><tr><th>配置文件</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;profile</td><td>配置全局的环境变量</td></tr><tr><td>~&#x2F;.bash_profile</td><td>配置当前用户的环境变量</td></tr><tr><td>&#x2F;etc&#x2F;xinetd.conf文件和.d&#x2F;etc&#x2F;xinetd.conf目录</td><td>配置常用的服务</td></tr><tr><td>&#x2F;etc&#x2F;rc.d&#x2F;rc.local</td><td>开机启动脚本</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>Linux</tag>
      
      <tag>命令</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务Transaction</title>
    <link href="/2016/03/23/%E4%BA%8B%E5%8A%A1transaction/"/>
    <url>/2016/03/23/%E4%BA%8B%E5%8A%A1transaction/</url>
    
    <content type="html"><![CDATA[<p>参考资料：</p><p><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40540/transact.htmhttps://docs.oracle.com/cd/E11882_01/server.112/e40540/transact.htm" rel="nofollow">Transactions</a></p><p><a href="https://blog.csdn.net/junmail/article/details/5556561">关于Oracle事务的总结</a></p><hr><h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><p>事务(Transaction)是访问并可能更新数据库中各种<a href="http://baike.baidu.com/view/178581.htm">数据项</a>的一个程序执行单元(unit)。事务由事务开始(<strong>begin transaction</strong>)和事务结束(<strong>end transaction</strong>)之间执行的全体操作组成。</p><h2 id="事务的属性-ACID"><a href="#事务的属性-ACID" class="headerlink" title="事务的属性-ACID"></a>事务的属性-ACID</h2><ul><li><p><strong>原子性（Atomicity）</strong>-事务的原子性强调了一个事物是一个逻辑工作单元，是一个整体，是不可分割的。一个事务所包含的操作要么全部做，要不全部不做。</p></li><li><p><strong>一致性（Consistency）</strong>-一个事务执行一项数据库操作，事务使数据库从一种一致性的状态变换成另一种一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong>-在事务未提交前，它操作的数据，对其他用户不可见。</p></li><li><p><strong>持久性（Durability）</strong>-一旦事务成功完成，该事务对数据库所施加的所有更新都是永久的。</p><ul><li>redo日志–提交的事务被永久的记录到redo日志中。</li></ul></li></ul><span id="more"></span><h2 id="数据库事务的开始和结束"><a href="#数据库事务的开始和结束" class="headerlink" title="数据库事务的开始和结束"></a>数据库事务的开始和结束</h2><p>以第一个DML语句的执行作为开始</p><p>以下面的其中之一作为结束：</p><ul><li>commit或rollback语句</li><li>DDL或DCL语句（自动提交）</li><li>用户会话正常结束–commit</li><li>系统异常终了–rollback</li></ul><h2 id="并发与数据的读取"><a href="#并发与数据的读取" class="headerlink" title="并发与数据的读取"></a>并发与数据的读取</h2><p>当多个会话同时访问（操作）相同的数据时，将会出现一些意想不到的结果。包括：</p><ul><li><p>脏读 –dirty reads</p><blockquote><p>一个事务读取了另一个事务未提交的数据,而这个数据是有可能回滚<br>​</p></blockquote></li><li><p>不可重复读 –non-repeatable reads</p><blockquote><p>在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。<br>​</p></blockquote></li><li><p>幻读 –Phantom（虚幻的） reads</p><blockquote><p>事务1读取记录时事务2增加了记录并提交，事务1再次读取时可以看到事务2新增的记录。对事物1而言就好像出现了幻觉一样。</p></blockquote></li></ul><h2 id="事务的隔离等级"><a href="#事务的隔离等级" class="headerlink" title="事务的隔离等级"></a>事务的隔离等级</h2><p><strong>ANSI定义的事务的隔离等级：</strong></p><table><thead><tr><th align="left">事务隔离等级</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="left">Read uncommited（读未提交的）</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="left">Read commited（读提交的）</td><td align="center">N</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="left">Repeatable read</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="left">Serializable</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr></tbody></table><p><strong>Oracle定义的事务隔离等级：</strong></p><table><thead><tr><th align="left">事务隔离等级</th><th align="left">影响</th></tr></thead><tbody><tr><td align="left">Read commited</td><td align="left">Oracle默认的隔离等级，对一条SQL，可以保证数据的一致性，对于一个事务，无法做到repeatable read。</td></tr><tr><td align="left">Serializable</td><td align="left">只能看到事务开始时所有提交的改变以及自身的改变</td></tr><tr><td align="left">Read-only</td><td align="left">只能看到事务开始时所有提交的改变，自身不允许DML操作</td></tr></tbody></table><h2 id="事务的并发控制-锁"><a href="#事务的并发控制-锁" class="headerlink" title="事务的并发控制-锁"></a>事务的并发控制-锁</h2><p>Oracle的锁定机制</p><ul><li><p>Oracle尽可能的减少锁定的使用</p></li><li><p>Oracle的读操作不会对表加锁，一些数据库会使用查询锁定（共享锁，排它锁）</p></li><li><p>Oracle通过回滚机制，保证读不会受到阻塞</p></li><li><p>Oracle没有锁管理器</p></li><li><p>Oracle中锁作为数据块的一种属性存在</p></li></ul><p>Oracle和Sql Server锁的区别</p><table><thead><tr><th>Sql Server</th><th>Oracle</th></tr></thead><tbody><tr><td>并发和读一致性不可兼得，必须牺牲一方</td><td>可兼得</td></tr><tr><td>因为锁实现方式，事务代价昂贵</td><td>没有真正的锁，事务没有资源代价</td></tr><tr><td>提倡尽快提交</td><td>主张按照业务需求确定事务边界</td></tr></tbody></table><h2 id="事务的控制-savepoint"><a href="#事务的控制-savepoint" class="headerlink" title="事务的控制-savepoint"></a>事务的控制-savepoint</h2><p>通过在事务中间设置检查点，可以更加精细的控制事务，防止一部分错误操作导致整个事务重新运行。演示如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">savepoint</span> s1;<br><br>保存点已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> t <span class="hljs-keyword">set</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><br>已更新 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">savepoint</span> s2;<br><br>保存点已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">2</span><br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> s1;<br><br>回退已完成。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>一旦返回到保存点s1之后s2就失去了效果，因为已经回到s1了，这时候s2还不存在。</p><h2 id="自治事务"><a href="#自治事务" class="headerlink" title="自治事务"></a>自治事务</h2><p>自治事务允许在一个事务中存在独立的事务，它的操作不会对当前事务产生影响。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-%E8%87%AA%E6%B2%BB%E4%BA%8B%E5%8A%A1.jpg"></p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">pragma autonomous_transaction<br></code></pre></td></tr></table></figure><p>关于自治事务的使用可以参考：<a href="https://blog.csdn.net/fenglibing/article/details/4059924"><strong>ORACLE中的自治事务</strong></a></p><p>实验演示如下：(演示用例来自参考资料Oracle中的自治事务)</p><p>首先是不使用自治事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> msg (msg varchar2(<span class="hljs-number">120</span>));<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">declare</span><br>  <span class="hljs-number">2</span>    cnt number :<span class="hljs-operator">=</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">--&#125; Global variables</span><br>  <span class="hljs-number">3</span>    <span class="hljs-keyword">procedure</span> <span class="hljs-keyword">local</span> <span class="hljs-keyword">is</span><br>  <span class="hljs-number">4</span>    <span class="hljs-keyword">begin</span><br>  <span class="hljs-number">5</span>       <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnt <span class="hljs-keyword">from</span> msg;<br>  <span class="hljs-number">6</span>       dbms_output.put_line(<span class="hljs-string">&#x27;local: # of rows is &#x27;</span><span class="hljs-operator">||</span>cnt);<br>  <span class="hljs-number">7</span><br>  <span class="hljs-number">8</span>       <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> msg <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;New Record&#x27;</span>);<br>  <span class="hljs-number">9</span>       <span class="hljs-keyword">commit</span>;<br> <span class="hljs-number">10</span>    <span class="hljs-keyword">end</span>;<br> <span class="hljs-number">11</span>    <span class="hljs-keyword">begin</span><br> <span class="hljs-number">12</span>       <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> msg ;<br> <span class="hljs-number">13</span>       <span class="hljs-keyword">commit</span>;<br> <span class="hljs-number">14</span>       <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> msg <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;Row 1&#x27;</span>);<br> <span class="hljs-number">15</span>       <span class="hljs-keyword">local</span>;<br> <span class="hljs-number">16</span>       <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnt <span class="hljs-keyword">from</span> msg;<br> <span class="hljs-number">17</span>       dbms_output.put_line(<span class="hljs-string">&#x27;main: # of rows is &#x27;</span><span class="hljs-operator">||</span>cnt);<br> <span class="hljs-number">18</span>       <span class="hljs-keyword">rollback</span>;<br> <span class="hljs-number">19</span><br> <span class="hljs-number">20</span>       <span class="hljs-keyword">local</span>;<br> <span class="hljs-number">21</span>       <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> msg <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;Row 2&#x27;</span>);<br> <span class="hljs-number">22</span>       <span class="hljs-keyword">commit</span>;<br> <span class="hljs-number">23</span><br> <span class="hljs-number">24</span>       <span class="hljs-keyword">local</span>;<br> <span class="hljs-number">25</span>       <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnt <span class="hljs-keyword">from</span> msg;<br> <span class="hljs-number">26</span>       dbms_output.put_line(<span class="hljs-string">&#x27;main: # of rows is &#x27;</span><span class="hljs-operator">||</span>cnt);<br> <span class="hljs-number">27</span>    <span class="hljs-keyword">end</span>;<br> <span class="hljs-number">28</span>  <span class="hljs-operator">/</span><br><span class="hljs-keyword">local</span>: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>  <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 子程序<span class="hljs-keyword">local</span>中可以’看到’主匿名块中的uncommitted记录<br>main: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>   <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 主匿名块可以’看到’<span class="hljs-number">2</span>条记录(它们都是被<span class="hljs-keyword">local</span> <span class="hljs-keyword">commit</span>掉的)<br><span class="hljs-keyword">local</span>: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>  <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 子程序<span class="hljs-keyword">local</span>首先’看到’<span class="hljs-number">2</span>条记录,然后又<span class="hljs-keyword">commit</span>了第三条记录<br><span class="hljs-keyword">local</span>: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">4</span>  <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 子程序<span class="hljs-keyword">local</span>又’看到’了新增加的记录(它们都是被<span class="hljs-keyword">local</span> <span class="hljs-keyword">commit</span>掉的),然后又<span class="hljs-keyword">commit</span>了第五条记录<br>main: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">5</span>   <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 主匿名块最后’看到’了所有的记录. <br><br>PL<span class="hljs-operator">/</span><span class="hljs-keyword">SQL</span> 过程已成功完成。<br></code></pre></td></tr></table></figure><p>从这个例子中,我们看到COMMIT和ROLLBACK的位置无论是在主匿名块中或者在子程序中,都会影响到整个当前事务. </p><p>现在如果将procedure local改成自治事务,在procedure local后面加上：</p><p><code>pragma AUTONOMOUS_TRANSACTION;</code></p><p>效果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">declare</span><br>  <span class="hljs-number">2</span>    cnt number :<span class="hljs-operator">=</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">--&#125; Global variables</span><br>  <span class="hljs-number">3</span>    <span class="hljs-keyword">procedure</span> <span class="hljs-keyword">local</span> <span class="hljs-keyword">is</span><br>  <span class="hljs-number">4</span>    pragma AUTONOMOUS_TRANSACTION;<br>  <span class="hljs-number">5</span>    <span class="hljs-keyword">begin</span><br>  <span class="hljs-number">6</span>       <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnt <span class="hljs-keyword">from</span> msg;<br>  <span class="hljs-number">7</span>       dbms_output.put_line(<span class="hljs-string">&#x27;local: # of rows is &#x27;</span><span class="hljs-operator">||</span>cnt);<br>  <span class="hljs-number">8</span><br>  <span class="hljs-number">9</span>       <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> msg <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;New Record&#x27;</span>);<br> <span class="hljs-number">10</span>       <span class="hljs-keyword">commit</span>;<br> <span class="hljs-number">11</span>    <span class="hljs-keyword">end</span>;<br> <span class="hljs-number">12</span>    <span class="hljs-keyword">begin</span><br> <span class="hljs-number">13</span>       <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> msg ;<br> <span class="hljs-number">14</span>       <span class="hljs-keyword">commit</span>;<br> <span class="hljs-number">15</span>       <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> msg <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;Row 1&#x27;</span>);<br> <span class="hljs-number">16</span>       <span class="hljs-keyword">local</span>;<br> <span class="hljs-number">17</span>       <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnt <span class="hljs-keyword">from</span> msg;<br> <span class="hljs-number">18</span>       dbms_output.put_line(<span class="hljs-string">&#x27;main: # of rows is &#x27;</span><span class="hljs-operator">||</span>cnt);<br> <span class="hljs-number">19</span>       <span class="hljs-keyword">rollback</span>;<br> <span class="hljs-number">20</span><br> <span class="hljs-number">21</span>       <span class="hljs-keyword">local</span>;<br> <span class="hljs-number">22</span>       <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> msg <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;Row 2&#x27;</span>);<br> <span class="hljs-number">23</span>       <span class="hljs-keyword">commit</span>;<br> <span class="hljs-number">24</span><br> <span class="hljs-number">25</span>       <span class="hljs-keyword">local</span>;<br> <span class="hljs-number">26</span>       <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> cnt <span class="hljs-keyword">from</span> msg;<br> <span class="hljs-number">27</span>       dbms_output.put_line(<span class="hljs-string">&#x27;main: # of rows is &#x27;</span><span class="hljs-operator">||</span>cnt);<br> <span class="hljs-number">28</span>    <span class="hljs-keyword">end</span>;<br> <span class="hljs-number">29</span>  <span class="hljs-operator">/</span><br><span class="hljs-keyword">local</span>: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0</span>  <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 子程序<span class="hljs-keyword">local</span>中无法可以’看到’主匿名块中的uncommitted记录 (因为它是独立的)<br>main: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>   <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 主匿名块可以’看到’<span class="hljs-number">2</span>条记录,但只有一条是被commited.<br><span class="hljs-keyword">local</span>: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>  <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 子程序<span class="hljs-keyword">local</span>中可以’看到’它前一次<span class="hljs-keyword">commit</span>的记录,但是主匿名块中的记录已经被提前<span class="hljs-keyword">rollback</span>了<br><span class="hljs-keyword">local</span>: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">3</span>  <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> 子程序<span class="hljs-keyword">local</span> 中可以’看到’<span class="hljs-number">3</span>条记录包括主匿名块<span class="hljs-keyword">commit</span>的记录<br>main: # <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">is</span> <span class="hljs-number">4</span>   <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>主匿名块最后’看到’了所有的记录.<br><br>PL<span class="hljs-operator">/</span><span class="hljs-keyword">SQL</span> 过程已成功完成。<br></code></pre></td></tr></table></figure><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><ul><li>发生在多台数据库之间的事务。</li><li>通过dblink方式进行事务处理。</li><li>分布式事务要比单机事务要复杂的多。</li><li>可能的风险：软件，服务器，网络。</li></ul><h3 id="分布式事务的组成"><a href="#分布式事务的组成" class="headerlink" title="分布式事务的组成"></a>分布式事务的组成</h3><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td>client</td><td>调用其它数据库信息的节点</td></tr><tr><td>database</td><td>接受来自其它节点请求的节点</td></tr><tr><td>Global coordinate</td><td>发起分布式事务的节点（全局调度者）</td></tr><tr><td>Local coordinate</td><td>处理本地事务，并和其它节点通信的节点（本地调度者）</td></tr><tr><td>Commit point site</td><td>被global coordinate指定第一个提交或回滚事务的节点</td></tr></tbody></table><p>commit Point Strength</p><p>Oracle选取Commit Point Strength（相当于权重）最大的数据库作为Commit point。</p><h3 id="Oracle分布式事务的机制-两阶段提交"><a href="#Oracle分布式事务的机制-两阶段提交" class="headerlink" title="Oracle分布式事务的机制-两阶段提交"></a>Oracle分布式事务的机制-两阶段提交</h3><p>2PC-two phase commit</p><ul><li>prepare phase</li><li>commit phase</li></ul><p><strong>准备阶段prepare phase</strong></p><p>为了完成准备阶段，除了commit point机器外，其它的数据库机器按照以下步骤执行：</p><ul><li><p>每个节点检查自己是否被其它节点所引用，如果有，就通知这些节点准备提交（进入prepare阶段）</p></li><li><p>每个节点检查自己运行的事务，如果发现本地运行的事务不做修改数据操作，则跳过后面的步骤，直接返回一个read only给全局协调进程。</p></li><li><p>如果事务需要修改数据，为事务分配相应的资源用于保证修改的正常进行。</p></li><li><p>对事物做的修改，记录redo信息。</p></li><li><p>本地redo保证事务失败后的回滚。</p></li><li><p>当上面的工作都成功后，给全局协调进程返回准备就绪的信息，反之，返回失败的信号。</p></li></ul><p><strong>提交阶段commit phase</strong></p><p>提交阶段按下面的步骤进行：</p><ul><li>全局协调器通知commit point进行提交</li><li>commit point提交完成。</li><li>commit point服务器通知全局协调器提交完成</li><li>全局协调器通知其它节点进行提交</li><li>其它节点提交本地的事务，释放资源（提交先后顺序根据Commit Point Strength）</li><li>其它节点在redo上记录相应的redo日志，并标注提交完成</li><li>其它节点通知全局协调器提交完成。</li></ul><h3 id="分布式事务的结束"><a href="#分布式事务的结束" class="headerlink" title="分布式事务的结束"></a>分布式事务的结束</h3><p>分布式事务的结束就是全局协调器和commit point两者之间释放资源的顺序。</p><ul><li>全局协调器通知commit point数据库所有节点提交完成。</li><li>commit point数据库释放和事务相关的所有资源，然后通知全局协调器。</li><li>全局协调器释放自己持有的资源</li><li>分布式事务结束</li></ul><p>###分布式事务的安全性</p><p>2PC是否真的可以保证分布式事务的一致性？</p><ul><li>理论上是不可能保证分布式事务的一致性。</li></ul><p>关于CAP理论可以参见：<a href="https://blog.csdn.net/chen77716/article/details/30635543">CAP理论</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
      <tag>Oracle</tag>
      
      <tag>Transaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PL/SQL Developer连接本地Oracle 11g 64位数据库</title>
    <link href="/2016/03/22/pl-sql-developer%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0oracle-11g-64%E4%BD%8D%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2016/03/22/pl-sql-developer%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0oracle-11g-64%E4%BD%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="登陆PL-x2F-SQL"><a href="#登陆PL-x2F-SQL" class="headerlink" title="登陆PL&#x2F;SQL"></a>登陆PL&#x2F;SQL</h2><p>假定本地电脑中已经安装了Oracle 11gR2数据库和PL&#x2F;SQL developer。</p><p>如果没有安装可以在一下地址下载安装：</p><p>Oracle 11gR2数据库：<a href="https://www.oracle.com/technetwork/database/enterprise-edition/downloads/112010-win64soft-094461.html">https://www.oracle.com/technetwork/database/enterprise-edition/downloads/112010-win64soft-094461.html</a></p><p>PL&#x2F;SQL developer(含注册机)：<a href="https://pan.baidu.com/s/1kUfY8GB">https://pan.baidu.com/s/1kUfY8GB</a> 密码: 1ky8</p><p>首先打开PL&#x2F;SQL，会发现没有database可以选择，我们可以以非登录方式登陆PL&#x2F;SQL（直接点cancel即可）。</p><p>开始设置：Tools-&gt;Preferences，进入后点击Oracle下面的connection，设置Oracle home和oci library。</p><p>由于我已经设置过了，如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-PLSQL%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE.png"></p><p>图中路径可能不一样，具体的看你的Oracle Home目录，如果不知道自己的Oracle Home目录的，可以去自己的环境变量中看一下。</p><p>点击Apply-&gt;OK，退出PL&#x2F;SQL Developer，再次登录。</p><span id="more"></span><p>尝试登陆数据库。出现以下错误：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-PLSQL%E9%94%99%E8%AF%AF%E5%8E%9F%E5%9B%A0.png"></p><p>显示初始化错误：Make sure you have the 32 bits Oracle Client installed.</p><p>这个意思就是我们没有安装32位的Oracle客户端。虽然安装的是64位的Oracle，但是我们plsql不能识别，只能识别32的客户端。那么我们就去下载安装32位的客户端。</p><h2 id="安装32-bits-Oracle-Client"><a href="#安装32-bits-Oracle-Client" class="headerlink" title="安装32 bits Oracle Client"></a>安装32 bits Oracle Client</h2><p>首先确定下自己电脑上装的Oracle11g的具体版本：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">C:\Users\clg&gt;sqlplus / <span class="hljs-keyword">as</span> sysdba<br><br><span class="hljs-keyword">SQL</span>*Plus: <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> Production <span class="hljs-keyword">on</span> 星期二 <span class="hljs-number">3</span>月 <span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">40</span>:<span class="hljs-number">19</span> <span class="hljs-number">2016</span><br><br>Copyright (c) <span class="hljs-number">1982</span>, <span class="hljs-number">2010</span>, Oracle.  <span class="hljs-keyword">All</span> rights reserved.<br><br><br>连接到:<br>Oracle <span class="hljs-keyword">Database</span> <span class="hljs-number">11</span>g Enterprise Edition <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> - <span class="hljs-number">64</span>bit Production<br><span class="hljs-keyword">With</span> the Partitioning, OLAP, Data Mining <span class="hljs-keyword">and</span> <span class="hljs-type">Real</span> Application Testing <span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure><p>可以看到版本是11.2.0.1.0，那么就需要下载对应版本的客户端，不过应该是下载11.2的应该都可以。保险起见，我们还是下载11.2.0.1.0版本的。</p><p>32位的Oracle client下载地址：</p><p>官网：<a href="https://www.oracle.com/technetwork/topics/winsoft-085727.html">https://www.oracle.com/technetwork/topics/winsoft-085727.html</a></p><p>CSDN：<a href="http://download.csdn.net/download/ss123sswe/7166681">http://download.csdn.net/download/ss123sswe/7166681</a></p><p>百度云：<a href="https://pan.baidu.com/s/1kTS1hif">https://pan.baidu.com/s/1kTS1hif</a> 密码: a8zr</p><p>下载下来的 Oracle Client是解压版的，因此只要需要解压了。将下载的Oracle Client文件instantclient-basic-win32-11.2.0.1.0.zip（这是客户端，必须是32位）解压到d:\app\（解压到别的地方也可以，只是后面的配置需要按照这个进行）。然后在解压后的D:\app\instantclient_11_2目录下新建NETWORK\ADMIN目录，在ADMIN目录下新建tnsnames.ora文件，添加数据库TNS。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ORCL</span> <span class="hljs-operator">=</span><br>  (DESCRIPTION <span class="hljs-operator">=</span><br>    (ADDRESS <span class="hljs-operator">=</span> (PROTOCOL <span class="hljs-operator">=</span> TCP)(HOST <span class="hljs-operator">=</span> localhost)(PORT <span class="hljs-operator">=</span> <span class="hljs-number">1521</span>))<br>    (CONNECT_DATA <span class="hljs-operator">=</span><br>      (SERVER <span class="hljs-operator">=</span> DEDICATED)<br>      (SERVICE_NAME <span class="hljs-operator">=</span> orcl.servyou.local)<br>    )<br>  )<br></code></pre></td></tr></table></figure><p>tnsnames.ora文件也可以从Oracle数据库HOME目录的NETWORK\ADMIN目录D:\app\clg\product\11.2.0\dbhome_1\NETWORK\ADMIN拷贝过来，还要把sqlnet.ora拷贝过来。由于是连接本地数据库，所以host写成localhost即可。</p><p>个人觉得<strong>采用拷贝的方式比较好</strong>，手写的时候前面一定不能有空格，否则无法识别。</p><h2 id="配置PL-x2F-SQL的Oracle-Home和OCI-Libaray"><a href="#配置PL-x2F-SQL的Oracle-Home和OCI-Libaray" class="headerlink" title="配置PL&#x2F;SQL的Oracle Home和OCI Libaray"></a>配置PL&#x2F;SQL的Oracle Home和OCI Libaray</h2><p>以非登录模式进入PL&#x2F;SQL，按照同样的方法设置路径，将Oracle Home路径指定为Oracle Client目录（D:\app\instantclient_11_2），OCI Libaray路径为Oracle Client目录下面的oci.dll (D:\app\instantclient_11_2\oci.dll)。具体配置情况如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-PLSQL32%E4%BD%8D%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE.png"></p><p>配置完成之后，保存并推出PL&#x2F;SQL。</p><h2 id="验证PL-x2F-SQL是否可以识别新的Oracle-Client"><a href="#验证PL-x2F-SQL是否可以识别新的Oracle-Client" class="headerlink" title="验证PL&#x2F;SQL是否可以识别新的Oracle Client"></a>验证PL&#x2F;SQL是否可以识别新的Oracle Client</h2><p>打开PL&#x2F;SQL，会发现：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-PLSQL%E6%AD%A3%E5%B8%B8%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png"></p><p>下方出现了Connect as选项，可以选择Normal，SYSDBA等等。</p><p>输入用户名和密码，就可以登录。</p><p>登录进去之后我们可以检查一下能否查询数据：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-PLSQL%E6%9F%A5%E8%AF%A2%E7%95%8C%E9%9D%A2.png"></p><p>查询成功，dual表中确实只有一个记录X。</p><p>查询没有问题，也就是实现了PL&#x2F;SQL Developer连接本地Oracle 11g 64位数据库。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>pl/sql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闪回flashback</title>
    <link href="/2016/03/21/%E9%97%AA%E5%9B%9Eflashback/"/>
    <url>/2016/03/21/%E9%97%AA%E5%9B%9Eflashback/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-flashback_pic.png"></p><p><strong>参考资料：</strong><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_flashback.htm">Using Oracle Flashback Technology</a></p><p>Oracle 11g的新特性闪回操作</p><ul><li>闪回查询<ul><li>闪回查询</li><li>闪回版本查询</li><li>闪回事务查询</li></ul></li><li>闪回数据<ul><li>闪回表</li><li>闪回删除</li><li>闪回数据</li><li>闪回归档</li></ul></li></ul><p>下面会分别介绍这些操作。在介绍这些操作之前先看下闪回特性是否开启。</p><span id="more"></span><h2 id="检查闪回特性是否启用"><a href="#检查闪回特性是否启用" class="headerlink" title="检查闪回特性是否启用"></a>检查闪回特性是否启用</h2><p><strong>参考资料：</strong></p><p><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_flashback.htm#ADFNS01002">Configuring Your Database for Oracle Flashback Technology</a></p><p><a href="http://blog.itpub.net/26194851/viewspace-763582/">打开或关闭oracle数据库的闪回功能步骤 </a></p><p>确认数据库闪回特性已经启用:v$database</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">SQL&gt; select flashback_on from v$database;<br><br><span class="hljs-section">FLASHBACK_ON</span><br><span class="hljs-section">------------------</span><br>NO<br></code></pre></td></tr></table></figure><p>如果闪回特性没有启用，则需要先启用闪回。</p><p>打开闪回的步骤：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; shutdown <span class="hljs-keyword">immediate</span>;<br><span class="hljs-keyword">SQL</span>&gt; startup mount;<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> flashback <span class="hljs-keyword">on</span>;<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">open</span>;<br></code></pre></td></tr></table></figure><p>打开之后可再次检查闪回特性是否打开。只要打开了闪回特性，就可以进行闪回操作。</p><h2 id="闪回查询"><a href="#闪回查询" class="headerlink" title="闪回查询"></a>闪回查询</h2><p><strong>参考资料：</strong><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_flashback.htm#i1008579">Using Oracle Flashback Query (SELECT AS OF)</a></p><p>查询某一个历史时间点的数据。</p><p><strong>查询某个时间点表中的数据——某个时间点表中快照的数据。</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t(x <span class="hljs-type">int</span> , y <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt;<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>         X          Y<br><span class="hljs-comment">---------- ----------</span><br>         <span class="hljs-number">1</span>          <span class="hljs-number">2</span><br>         <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">set</span> <span class="hljs-type">time</span> <span class="hljs-keyword">on</span><br><span class="hljs-number">21</span>:<span class="hljs-number">11</span>:<span class="hljs-number">45</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> x=<span class="hljs-number">1</span>;<br><br>已删除 <span class="hljs-number">1</span> 行。<br><span class="hljs-number">21</span>:<span class="hljs-number">12</span>:<span class="hljs-number">11</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-number">21</span>:<span class="hljs-number">12</span>:<span class="hljs-number">18</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>         X          Y<br><span class="hljs-comment">---------- ----------</span><br>         <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br><br><span class="hljs-number">21</span>:<span class="hljs-number">12</span>:<span class="hljs-number">21</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t <span class="hljs-keyword">as</span> <span class="hljs-keyword">of</span> <span class="hljs-type">timestamp</span> to_timestamp(<span class="hljs-string">&#x27;2016-03-21 21:11:45&#x27;</span><br>,<span class="hljs-string">&#x27;yyyy-mm-dd hh24-mi-ss&#x27;</span>);<br><br>         X          Y<br><span class="hljs-comment">---------- ----------</span><br>         <span class="hljs-number">1</span>          <span class="hljs-number">2</span><br>         <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可见删除的数据已经提交，但是还是可以闪回查询到之前时间的数据。其中hh24表示可以用24小时制，否则只能小时不能超过12。至于为什么分钟用mi而不用mm，那是因为规定的格式就是mi，换成mm会显示和之前的月份mm冲突，换成其他的会显示日期格式无法识别。</p><p><strong>基于SCN的闪回查询</strong></p><p>如果有修改时候的SCN，那么就可以基于SCN进行闪回查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">34</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>         X          Y<br><span class="hljs-comment">---------- ----------</span><br>         <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br><br><span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">36</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> current_scn <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">database</span>;<br><br>CURRENT_SCN<br><span class="hljs-comment">-----------</span><br>    <span class="hljs-number">2891887</span><br><br><span class="hljs-number">21</span>:<span class="hljs-number">20</span>:<span class="hljs-number">53</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-number">21</span>:<span class="hljs-number">21</span>:<span class="hljs-number">13</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-number">21</span>:<span class="hljs-number">21</span>:<span class="hljs-number">16</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>         X          Y<br><span class="hljs-comment">---------- ----------</span><br>         <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br>         <span class="hljs-number">3</span>          <span class="hljs-number">4</span><br><br><span class="hljs-number">21</span>:<span class="hljs-number">21</span>:<span class="hljs-number">26</span> <span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t <span class="hljs-keyword">as</span> <span class="hljs-keyword">of</span> scn <span class="hljs-number">2891887</span>;<br><br>         X          Y<br><span class="hljs-comment">---------- ----------</span><br>         <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可见基于SCN闪回查询得到插入数据之前表中的数据</p><h2 id="闪回版本查询"><a href="#闪回版本查询" class="headerlink" title="闪回版本查询"></a>闪回版本查询</h2><p><strong>闪回版本查询</strong>也就是flashback versions query。</p><ul><li>See all versions of a row between two times</li><li>See transactions that changed the row</li></ul><p>一个时间段内的某一行的所有版本，以及改变该行的所有事务。</p><p><strong>参考资料：</strong></p><p><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_flashback.htm#i1019938">Using Oracle Flashback Version Query</a></p><p><a href="https://blog.csdn.net/laoshangxyc/article/details/12405459">闪回版本查询与闪回事务查询</a></p><h2 id="闪回事务查询"><a href="#闪回事务查询" class="headerlink" title="闪回事务查询"></a>闪回事务查询</h2><p><strong>闪回事务查询</strong>也即是flashback trasaction query</p><ul><li>See all changes made by a transaction</li></ul><p>闪回一个事务对数据的所有改变。</p><p><strong>参考资料：</strong></p><p><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_flashback.htm#i1007455">Using Oracle Flashback Transaction Query</a></p><p><a href="https://blog.csdn.net/laoshangxyc/article/details/12405459">闪回版本查询与闪回事务查询</a></p><h2 id="闪回表"><a href="#闪回表" class="headerlink" title="闪回表"></a>闪回表</h2><p>将表闪回到历史的某个时刻。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">100</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">200</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> rowid,id <span class="hljs-keyword">from</span> t;<br><br>ROWID                      ID<br><span class="hljs-comment">------------------ ----------</span><br>AAASaxAABAAAV3xAAA        <span class="hljs-number">100</span><br>AAASaxAABAAAV3xAAB        <span class="hljs-number">200</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> current_scn <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">database</span>;<br><br>CURRENT_SCN<br><span class="hljs-comment">-----------</span><br>    <span class="hljs-number">2960668</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t;<br><br>已删除<span class="hljs-number">2</span>行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t <span class="hljs-keyword">enable</span> <span class="hljs-keyword">row</span> movement;<br><br>表已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; flashback <span class="hljs-keyword">table</span> t <span class="hljs-keyword">to</span> scn <span class="hljs-number">2960668</span><br>  <span class="hljs-number">2</span>  ;<br>flashback <span class="hljs-keyword">table</span> t <span class="hljs-keyword">to</span> scn <span class="hljs-number">2960668</span><br>                *<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-08185</span>: 用户 SYS 不支持闪回<br><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> recyclebin<br><span class="hljs-keyword">SQL</span>&gt;<br><br></code></pre></td></tr></table></figure><p>解释1：由于当前是sys用户，会显示：</p><p>ORA-08185: 用户 SYS 不支持闪回</p><p>闪回技术只适用于普通用户而不适用于sys用户。system用户也不适用。</p><p>解释2：必须要启用表的行移动功能，否则不能闪回表。</p><ul><li>alter table t enable row movement;</li></ul><h2 id="闪回删除"><a href="#闪回删除" class="headerlink" title="闪回删除"></a>闪回删除</h2><p>参考资料：<a href="https://blog.csdn.net/heng_ji/article/details/17968279">Oracle闪回功能详解</a></p><p>由于闪回技术不支持sys用户，所以使用普通用户测试。</p><p>Oracle10g以后，当我们删除表时，默认Oracle只是在数据库字典里面对被删的表的进行了重命名，并没有真正的把表删除。<br>**回收站(recyclebin)**：用来维护表被删除前的名字与删除后系统生成的名字之间的对应关系的数据字典，表上的相关对象（索引、触发器等）也会一并进入回收站。</p><h3 id="查看回收站的状态"><a href="#查看回收站的状态" class="headerlink" title="查看回收站的状态"></a>查看回收站的状态</h3><p>只有dba（sys,system）才有权限执行查询recyclebin的状态。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> parameter recyclebin;<br><br><span class="hljs-type">NAME</span>                                 <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">VALUE</span><br><span class="hljs-comment">------------------------------------ ----------- ------------------------------</span><br>recyclebin                           string      <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><p>可以发现recyclebin是开启状态，如果发现是关闭状态，可以通过下面命令开启</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alter<span class="hljs-built_in"> system </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">recyclebin</span>=on;<br></code></pre></td></tr></table></figure><p>如果要关闭回收站功能，使用下面的命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alter<span class="hljs-built_in"> system </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">recyclebin</span>=off;<br></code></pre></td></tr></table></figure><p>禁用后删除的对象将直接删除，不会写到Recyclebin中。</p><h3 id="闪回删除实验效果"><a href="#闪回删除实验效果" class="headerlink" title="闪回删除实验效果"></a>闪回删除实验效果</h3><p>由于sys用户和system用户不支持闪回技术，所以我们需要切换到普通用户进行实验，实验效果如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> recyclebin;<br>ORIGINAL <span class="hljs-type">NAME</span>    RECYCLEBIN <span class="hljs-type">NAME</span>                <span class="hljs-keyword">OBJECT</span> <span class="hljs-keyword">TYPE</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-type">TIME</span><br><span class="hljs-comment">---------------- ------------------------------ ------------ -------------------</span><br><br>T                BIN$zqOXt7xBRA2SKyG5nGxb5w==<span class="hljs-meta">$0</span> <span class="hljs-keyword">TABLE</span>        <span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-22</span>:<span class="hljs-number">17</span>:<span class="hljs-number">18</span>:<span class="hljs-number">33</span><br><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> recyclebin;<br>ORIGINAL <span class="hljs-type">NAME</span>    RECYCLEBIN <span class="hljs-type">NAME</span>                <span class="hljs-keyword">OBJECT</span> <span class="hljs-keyword">TYPE</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-type">TIME</span><br><span class="hljs-comment">---------------- ------------------------------ ------------ -------------------</span><br><br>T                BIN$lpoDEIX2SSGAQt9TL3gUTA==<span class="hljs-meta">$0</span> <span class="hljs-keyword">TABLE</span>        <span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-22</span>:<span class="hljs-number">17</span>:<span class="hljs-number">22</span>:<span class="hljs-number">24</span><br><br>T                BIN$zqOXt7xBRA2SKyG5nGxb5w==<span class="hljs-meta">$0</span> <span class="hljs-keyword">TABLE</span>        <span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-22</span>:<span class="hljs-number">17</span>:<span class="hljs-number">18</span>:<span class="hljs-number">33</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> &quot;BIN$lpoDEIX2SSGAQt9TL3gUTA==$0&quot;;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br><br><span class="hljs-keyword">SQL</span>&gt; flashback <span class="hljs-keyword">table</span> t <span class="hljs-keyword">to</span> <span class="hljs-keyword">before</span> <span class="hljs-keyword">drop</span>;<br><br>闪回完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="清空回收站操作"><a href="#清空回收站操作" class="headerlink" title="清空回收站操作"></a>清空回收站操作</h3><p>可以全部清空回收站，也可只清空回收站的部分文件。</p><p><strong>全部清空回收站</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SQL&gt; purge recyclebin<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>部分清空回收站</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">##假定回收站中有一个文件的ORIGINAL <span class="hljs-type">NAME</span>是t1，永久删除他t1表<br><span class="hljs-keyword">SQL</span>&gt; purge <span class="hljs-keyword">table</span> t1;<br></code></pre></td></tr></table></figure><h3 id="回收站的空间管理"><a href="#回收站的空间管理" class="headerlink" title="回收站的空间管理"></a>回收站的空间管理</h3><p>虽然Oracle并没真正删除被回收的表，但是在Oracle看来这一块空间已经是自由的（free）。使用下面的演示可以查看效果：（在普通用户下验证即可）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_objects;<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> sum(blocks) <span class="hljs-keyword">from</span> user_free_space <span class="hljs-keyword">where</span> tablespace_name=<span class="hljs-string">&#x27;USERS&#x27;</span>;<br><br>SUM(BLOCKS)<br><span class="hljs-comment">-----------</span><br>         <span class="hljs-number">96</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> sum(blocks) <span class="hljs-keyword">from</span> user_free_space <span class="hljs-keyword">where</span> tablespace_name=<span class="hljs-string">&#x27;USERS&#x27;</span>;<br><br>SUM(BLOCKS)<br><span class="hljs-comment">-----------</span><br>        <span class="hljs-number">104</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> recyclebin;<br>ORIGINAL <span class="hljs-type">NAME</span>    RECYCLEBIN <span class="hljs-type">NAME</span>                <span class="hljs-keyword">OBJECT</span> <span class="hljs-keyword">TYPE</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-type">TIME</span><br><span class="hljs-comment">---------------- ------------------------------ ------------ -------------------</span><br><br>T                BIN$kMskKvD5SJqmwaC5WDQiAg==<span class="hljs-meta">$0</span> <span class="hljs-keyword">TABLE</span>        <span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-22</span>:<span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">43</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> blocks <span class="hljs-keyword">from</span> user_segments <span class="hljs-keyword">where</span> segment_name=<span class="hljs-string">&#x27;BIN$kMskKvD5SJqmwaC5WDQiAg==$0&#x27;</span>;<br><br>    BLOCKS<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>实验效果表明删除表之后用户自由空间增大了，并且大小刚好就是回收站中的对应的表的大小。可见这一块空间在Oracle看来已经是free_space了。</p><h2 id="闪回归档"><a href="#闪回归档" class="headerlink" title="闪回归档"></a>闪回归档</h2><p><strong>参考资料：</strong></p><p><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_flashback.htm#BJFFDCEH">Using Flashback Data Archive (Oracle Total Recall)</a></p><p><a href="https://blog.csdn.net/summerycool/article/details/5925266">Oracle 11g 闪回数据归档</a></p><p>闪回归档：Flashback Data Archive。<strong>Oracle Total Recall</strong>，<strong>也即Oracle全面回忆功能。</strong></p><p>闪回数据归档可以和我们一直熟悉的日志归档类比，日志归档记录的是Redo的历史状态，用于保证恢复的连续性；而闪回归档记录的是UNDO的历史状态，可以用于对数据进行闪回追溯查询；后台进程LGWR用于将Redo信息写出到日志文件，ARCH进程负责进行日志归档；在Oracle 11g中，新增的后台进程FBDA（Flashback Data Archiver Process）则用于对闪回数据进行归档写出。</p><p>具体操作见参考资料。</p><h2 id="闪回数据库"><a href="#闪回数据库" class="headerlink" title="闪回数据库"></a>闪回数据库</h2><p>参考资料：<a href="https://www.linuxidc.com/Linux/2014-09/107257.htm">Oracle DB闪回（Flashback database）开启笔记</a></p><p>数据库的闪回</p><ul><li>是Oracle不同于查询闪回和归档闪回的另外一种闪回机制</li><li>Oracle 10g引入</li><li>需要配置闪回区域</li><li>记录数据块的修改，称为flashback logs（闪回日志）</li><li>通过后台恢复写入进程RVWR（Recovery Writer）来工作</li><li>就像一个向后转的按钮，让数据库向后回退。</li><li>可以用于人为失误操作或者业务的需要。</li></ul><p><strong>闪回数据库架构Flashback database architecture</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Flashback%20database%20architecture.png" alt="Flashback database architecture"></p><p>开启闪回数据库功能之后，会在SGA中开辟内存Flashback buffer，会记录buffer cache中的部分改变然后后台恢复写入进程RVWR将记录写入闪回日志Flashback logs中。FBDA进程（Flashback Data Archive ）则会将Flashback logs进行归档。</p><p>这个过程和重做日志非常非常的类似。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>flashback</tag>
      
      <tag>闪回</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动存储管理ASM</title>
    <link href="/2016/03/21/%E8%87%AA%E5%8A%A8%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86asm/"/>
    <url>/2016/03/21/%E8%87%AA%E5%8A%A8%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86asm/</url>
    
    <content type="html"><![CDATA[<p>参考资料：</p><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14231/storeman.htm#ADMIN036">https://docs.oracle.com/cd/B19306_01&#x2F;server.102&#x2F;b14231&#x2F;storeman.htm#ADMIN036</a></p><h2 id="什么是ASM？"><a href="#什么是ASM？" class="headerlink" title="什么是ASM？"></a>什么是ASM？</h2><p>ASM是Automatic Storage Management（自动存储管理）的缩写。ASM是一个集成的高性能的文件系统和卷管理器。Oracle将所有的存储分为disk groups，我们只需要管理这些disk groups，而不用去管具体的数据文件。</p><p>In the SQL statements that you use for creating database structures such as tablespaces, control files, and redo and archive log files, you specify file location in terms of disk groups. ASM then creates and manages the associated underlying files（底层文件） for you.</p><h2 id="为什么使用ASM？"><a href="#为什么使用ASM？" class="headerlink" title="为什么使用ASM？"></a>为什么使用ASM？</h2><ul><li>提供高效率的存储管理</li><li>提供完整的集群文件系统和卷管理能力</li></ul><p><strong>ASM的优点：</strong></p><p><strong>Mirroring and Striping</strong>（镜像化和条带化）</p><p>条带化是一种用于在多个磁盘驱动器之间分散数据的技术。一个大的数据段被分为较小的单元，这些单元分布在可用设备之间。分隔数据的单元称为“数据单元大小”或“条带大小”，是指向每个磁盘写入这些条带的大小。可以同时读写的并行条带数量称为“条带宽度”。分条可以加快从磁盘存储中获取数据的操作，这是因为它扩展了总I&#x2F;O带宽的能力。这样就优化了性能和磁盘利用率，从而不再需要手动I&#x2F;O 性能调优。</p><p>ASM镜像化选项:</p><table><thead><tr><th>Mirroring Option</th><th>Description</th></tr></thead><tbody><tr><td>2-way mirroring</td><td>Each extent has 1 mirrored copy.</td></tr><tr><td>3-way mirroring</td><td>Each extent has 2 mirrored copies.</td></tr><tr><td>Unprotected</td><td>ASM provides no mirroring. Used when mirroring is provided by the disk subsystem itself.</td></tr></tbody></table><span id="more"></span><p><strong>Dynamic Storage Configuration</strong>（动态存储配置）</p><p>可以在数据库运行时更改数据库的配置，ASM会自动Rebalance。</p><p><strong>ASM Instance</strong>（Oracle实例）</p><p>ASM实例是一种Oracle实例，它为磁盘组、ADVM(ASM动态卷)和ACFS(ASM集群文件系统)管理元数据。所有元数据修改都是由ASM实例完成的，以隔离故障。数据库实例连接到一个ASM实例，以创建、删除、打开、关闭文件或者改变其大小，数据库实例直接读写由ASM实例管理的磁盘。Oracle在内部使用自动内存管理，很少需要对一个Oracle ASM实例进行调优。</p><p><strong>Interoperability with Existing Databases</strong></p><p>已存在数据库的互操作性。ASM并不会消除已存在系统的功能。</p><p><strong>Single Instance and Clustered Environments</strong></p><p>ASM支持单实例和集群环境。</p><h2 id="ASM的Components"><a href="#ASM的Components" class="headerlink" title="ASM的Components"></a>ASM的Components</h2><p>ASM的五项组成：disk groups, disks, failure groups, files, and templates。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-ASM%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB.png"></p><h3 id="disk-groups"><a href="#disk-groups" class="headerlink" title="disk groups"></a>disk groups</h3><p>ASM的首要组成就是disk groups，一组disk作为一个单元构成disk groups。</p><p>三种disk group类型对应的镜像选择：</p><table><thead><tr><th>Disk Group Type</th><th>Supported Mirroring Levels</th><th>Default Mirroring Level</th></tr></thead><tbody><tr><td>Normal redundancy</td><td>2-way3-wayUnprotected (none)</td><td>2-way</td></tr><tr><td>High redundancy</td><td>3-way</td><td>3-way</td></tr><tr><td>External redundancy</td><td>Unprotected (none)</td><td>Unprotected</td></tr></tbody></table><h3 id="disks"><a href="#disks" class="headerlink" title="disks"></a>disks</h3><p>在windows操作系统上，disk可能是一个分区（partition），在其他的平台上可能是：</p><ul><li>A partition of a logical unit number (LUN)</li><li>A network-attached file</li></ul><h3 id="failure-groups"><a href="#failure-groups" class="headerlink" title="failure groups"></a>failure groups</h3><p>故障组定义了一些ASM磁盘，它们可能共用一种潜在的故障装置。故障组是磁盘组中的一个磁盘子集，这个子集内的磁盘依赖于一个必须容忍其故障的公共硬件资源。只有对于普通冗余（Normal redundancy）或高冗余（High redundancy）配置，它才非常重要。相同数据的冗余副本被放置在不同的故障组中。</p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>写到ASM磁盘中的文件称为ASM文件。每个ASM文件都完全包含在单个磁盘组中，平均分布在这个组中的所有ASM磁盘上。一个ASM文件就是一个数据盘区集，每个数据盘区是分配单元的一个集合。由于在ASM文件变大时Oracle会自动增大数据盘区的大小，因此我们不能改变数据盘区的大小。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-%E6%95%B0%E6%8D%AE%E5%9C%A8%E7%A3%81%E7%9B%98%E4%B8%AD%E7%9A%84%E5%88%86%E5%B8%83%E7%AE%A1%E7%90%86.png"></p><h3 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h3><p>Templates是文件属性值的集合。用来给每一种类型的数据库文件设置镜像化和条带化的属性的。</p><p>关于templates：</p><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14231/storeman.htm#i1019485">Managing Disk Group Templates</a></p><h2 id="ASM架构"><a href="#ASM架构" class="headerlink" title="ASM架构"></a>ASM架构</h2><p>ASM支持单实例架构和集群架构。</p><p>在一个数据库服务器中，可以存在多个数据库实例，一个数据库实例可以对应一个ASM实例，也可以多个数据库实例对应一个ASM实例。单实例架构如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-ASM%E5%8D%95%E5%AE%9E%E4%BE%8B%E6%9E%B6%E6%9E%84.png"></p><p>ASM集群架构如下：多个ASM实例共同管理数据文件。数据库实例和ASM实例最常常见的还是一对一。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-ASM%E7%9A%84RAC%E6%9E%B6%E6%9E%84.png"></p><h2 id="Rebalance"><a href="#Rebalance" class="headerlink" title="Rebalance"></a>Rebalance</h2><ul><li>ASM rebalance 操作不会影响数据库的正常使用<ul><li>会影响I&#x2F;O效率</li></ul></li><li>能通过数据的重新分布，使得系统的I&#x2F;O得到最大的提升</li><li>从Oracle 10R2之后，如果关闭数据库实例，Rebalance操作会更快。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>管理</tag>
      
      <tag>ASM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rman备份恢复和管理</title>
    <link href="/2016/03/18/rman%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <url>/2016/03/18/rman%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E5%92%8C%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Rman%E7%BB%84%E4%BB%B6.jpg"></p><p>参考资料：</p><ul><li><p><a href="https://www.cnblogs.com/Ronger/archive/2011/12/29/2306367.html">Oracle之Rman入门指南</a></p></li><li><p><a href="http://www.5ienet.com/note/html/rman/index.shtml">一步一步学Rman</a></p></li></ul><h2 id="Rman简介"><a href="#Rman简介" class="headerlink" title="Rman简介"></a>Rman简介</h2><p>Rman-Recover manager恢复管理工具。</p><p>Oracle集成了很多环境的一个数据库备份和恢复的工具。</p><p>Rman可以做下列事情：</p><ul><li>数据库热备份<ul><li>全库备份和恢复<ul><li>数据库克隆（DG）</li></ul></li><li>增量备份和恢复</li><li>表空间备份和恢复</li><li>数据文件备份和恢复</li><li>归档备份和恢复</li><li>控制文件和参数文件备份和恢复</li></ul></li><li>数据库冷备份</li><li>备份集的管理<ul><li>备份策略</li><li>保留和删除备份数据</li><li>……</li></ul></li></ul><span id="more"></span><p><strong>冷备份和热备份区别</strong>：</p><p>对于oracle数据库只有物理备份和逻辑备份</p><ul><li>物理备份：是将实际组成数据库的操作系统文件从一处拷贝到另一处的备份过程，通常是从磁盘到磁带</li><li>逻辑备份：是利用SQL语言从数据库中抽取数据并存于二进制文件的过程。</li></ul><p><strong>物理备份</strong>用于实现数据库的完整恢复，但<strong>数据库必须运行在归挡模式</strong>下（业务数据库在非归挡模式下运行），且需要极大的外部<a href="http://www.storworld.com/">存储</a>设备，例如磁带库，**具体包括冷备份和热备份。冷备份和热备份是物理备份(也称低级备份)**，它涉及到组成数据库的文件，但不考虑逻辑内容。</p><ul><li><strong>冷备份发生在数据库已经正常关闭</strong>的情况下，当正常关闭时会提供给我们一个完整的数据库</li><li>热备份是在数据库运行的情况下，采用archivelog mode方式备份数据库的方法。</li></ul><p>热备份和冷备份可以参看：<a href="http://news.newhua.com/news/2010/0601/93935.shtml">什么是冷备份和热备份，有什么区别？</a></p><p><strong>应该备份哪些文件？</strong></p><ul><li>Oracle数据文件</li><li>控制文件</li><li>归档日志</li><li>在线日志</li><li>参数文件</li><li>密码文件</li></ul><h2 id="Rman备份实验演示"><a href="#Rman备份实验演示" class="headerlink" title="Rman备份实验演示"></a>Rman备份实验演示</h2><p><strong>备份数据库</strong></p><p>在数据库运行的时候进行Rman备份则是热备份，需要当前数据库处于归档模式</p><p>检查数据库是否是归档模式的命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sqlplus / <span class="hljs-keyword">as</span> sysdba<br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br></code></pre></td></tr></table></figure><p>如果处于archive mod下，则可以进行热备。使用quit退出sqlplus状态，进入恢复管理器。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">C:\Users\clg&gt;rman target /<br><br>恢复管理器: Release 11.2.0.1.0 - Production on 星期一 3月 21 14:46:00 2016<br><br>Copyright (c) 1982, 2009, Oracle<span class="hljs-built_in"> and/or </span>its affiliates.  All rights reserved.<br><br>连接到目标数据库: ORCL (DBID=1433387646)<br></code></pre></td></tr></table></figure><p>备份数据库的命令：（全备）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RMAN&gt; backup database<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>会备份数据文件和控制文件还有spfile。</p><p><strong>备份表空间</strong></p><p>可以备份某个特定的表空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">RMAN&gt; </span><span class="language-bash">backup tablespace <span class="hljs-built_in">users</span>;</span><br></code></pre></td></tr></table></figure><p><strong>备份文件</strong></p><p>备份制定的文件，根据文件号备份。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RMAN&gt; backup datafile <span class="hljs-number">4</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>备份归档日志</strong></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">RMAN&gt; backup <span class="hljs-params">archive</span>log <span class="hljs-literal">all</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>查看备份信息</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RMAN&gt; list backup<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果备份的时候恢复区的空间不够，超出了恢复文件数的限制，那么就会出现backup失败。则可以删除之前的备份。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RMAN&gt; delete backupset<span class="hljs-comment">;</span><br>或者<br>RMAN&gt; delete backup<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>使用这两条命令都会删除备份片段列表。</p><p>Rman可以发出一些管理类的SQL语句。</p><p><strong>从备份文件中恢复数据库文件</strong></p><p>先使用restore命令从备份集中拷贝数据库文件到oradata文件夹下（数据库存放数据文件的地方）。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">restore database<span class="hljs-comment">;</span><br>或者<br>restore tablespace user<span class="hljs-comment">;</span><br>或者<br>restore datafile <span class="hljs-number">4</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>第一个是将整个数据库的数据文件拷贝过来，第二个只是拷贝表空间user的数据文件。</p><p>然后使用recover进行介质恢复。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">recover database<span class="hljs-comment">;</span><br>或者<br>recover datafile <span class="hljs-number">4</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>根据拷贝过来的数据文件dbf进行全库恢或者根据具体的文件进行恢复。</p><h2 id="Rman增量备份"><a href="#Rman增量备份" class="headerlink" title="Rman增量备份"></a>Rman增量备份</h2><p><a href="http://gavinshaw.blog.51cto.com/385947/593340/">使用Rman 全备份以及增量备份</a></p><p>附：</p><p>关于数据文件的状态信息（online or offline等等），可以参见v$datafile视图。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rman</tag>
      
      <tag>备份</tag>
      
      <tag>恢复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客换电脑步骤</title>
    <link href="/2016/03/16/hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E7%94%B5%E8%84%91%E6%AD%A5%E9%AA%A4/"/>
    <url>/2016/03/16/hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E7%94%B5%E8%84%91%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<p><img src="http://upload.chinaz.com/2015/1016/1444964380585.png"></p><p>hexo博客固然好，但是在多个电脑上怎么同步写博客呢？</p><span id="more"></span><p><strong>搭建hexo环境:</strong></p><p>要想在一个电脑上写博客，那肯定就得搭建node.js+hexo的环境。</p><p><strong>首先，安装node.js</strong></p><p>node.js的下载可以在node.js的<a href="https://nodejs.cn/">中文网站</a>下载，也可以使用下列百度云地址：</p><p>链接: <a href="https://pan.baidu.com/s/1kTVhcvd">https://pan.baidu.com/s/1kTVhcvd</a> 密码: mqsy</p><p><strong>然后安装git for windows</strong></p><p>git for windows可以从百度的软件中心<a href="http://dlsw.baidu.com/sw-search-sp/soft/4e/30195/Git-2.7.2-32-bit_setup.1457942412.exe">http://dlsw.baidu.com/sw-search-sp/soft/4e/30195/Git-2.7.2-32-bit_setup.1457942412.exe</a>下载，也可以从github官网下载。还可以使用下面的百度云地址：</p><p>链接: <a href="https://pan.baidu.com/s/1eRtDECE">https://pan.baidu.com/s/1eRtDECE</a> 密码: cxh5</p><p>安装好nodej.js之后，打开git bash安装hexo，安装步骤如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><p>将之前备份的博客站点文件全部复制到本地的一个目录下。就可以使用下列命令操作了</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>至于博客源文件可以用git管理，pull下来即可。</p><p>关于git管理博客源文件的方法参加另一篇blog：<a href="https://suncle.me/2016/03/16/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6/">使用Github管理Hexo博客的源文件</a></p><p><strong>附：</strong></p><p>其实这一篇的主要目的只是为了放置nodejs和git的下载链接，因为官网是在是下载不了，速度慢的要屎了。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>多电脑</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据结构</title>
    <link href="/2016/03/16/oracle%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2016/03/16/oracle%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="Oracle的数据存储结构"><a href="#Oracle的数据存储结构" class="headerlink" title="Oracle的数据存储结构"></a>Oracle的数据存储结构</h2><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png"></p><ul><li>表空间（tablespace）–Oracle中最大的逻辑存储单位</li><li>数据文件（data file）–表空间物理存储载体</li><li>段（segment）–Oracle中所有占用空间的对象的总称</li><li>extend–段的组成单位</li><li>数据块（data block）–extend的组成单位，是Oracle存储和数据操作的最小单位。</li></ul><h2 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h2><p>数据块是Oracle存储和数据操作的最小单位，但不一定和操作系统的os块相同，一个数据块可能有多个os块构成。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-%E6%95%B0%E6%8D%AE%E5%9D%97%E5%92%8Cos%E5%9D%97.png"></p><span id="more"></span><p><strong>数据块的存储属性</strong></p><p><em>PCTFREE (percent free)</em></p><p>为一个块<strong>保留的空间百分比</strong>，表示数据块在什么情况下可以被insert，默认是10，表示当数据块的可用空间低于10%后，就不可以被insert了，只能被用于update；即：当使用一个block时，在达到pctfree之前，该block是一直可以被插入的，这个时候处在上升期。</p><p><em>PCTUSED (percent used)</em></p><p>当数据块的剩余空间达到PCTFREE之后就不可以insert了，但是进行的delete操作和update操作会释放数据块的空间，如果数据块的空间释放到了PCTUSED之后就可以开始insert数据了。</p><p><strong>行链接和行迁移</strong></p><p><strong><em>行迁移</em>——update操作引起的</strong></p><p>当一条记录被更新时，数据库引擎首先会尝试在它保存的数据块中寻找足够的空闲空间，如果没有足够的空闲空间可用，这条记录将被拆分为两个部分，第一个部分包括指向第二个部分的rowid，该部分任然保留在原来的数据块中，第二个部分包含所有的具体数据，将保存到另外一个新的数据块中，这个就成为行迁移。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-%E8%A1%8C%E8%BF%81%E7%A7%BB%E5%9B%BE%E8%A7%A3.png"></p><p>为什么不将整行都放到新的数据块中？<br>原因是这样会导致该行数据rowid发生变化，而rowid被存储在索引中，也有可能被客户端临时保存在内存中，rowid的变化可能导致查询错误。该行不仅存了本行id还有新行的id。相当于存入了指针，并且保留了头指针。</p><p><strong><em>行链接</em>——insert操作或者update操作引起的</strong></p><p>行链接和行迁移不同，行链接是当一条记录太大，在一个数据块中无法存入，这时会被拆分为2个或以上的部分，存储在多个块中，这多个块之间会构造一个链</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-%E8%A1%8C%E9%93%BE%E6%8E%A5%E5%9B%BE%E8%A7%A3.png"></p><p>行链接的原因则可能为：</p><ul><li><p>直接插入大的记录；</p></li><li><p>更新记录导致记录大于一个数据块，在这时，这样记录可能会同时变为行迁移和行链接。</p></li></ul><p>行迁移和行链接的参考资料：</p><p><a href="http://www.2cto.com/database/201410/344139.html">http://www.2cto.com/database/201410/344139.html</a></p><p><strong>数据块空闲空间</strong></p><ul><li><p>可以手工对数据块进行空闲空间合并，数据会被再次使用</p><ul><li>当一个插入或者更新操作哦的行在一个数据块中有足够的空闲空间</li><li>并且这个空闲空间是碎片状态，无法满足一行数据的使用</li></ul></li><li><p>oracle不总是自动整碎片的原因是，这会导致一定的系统资源开销</p></li></ul><p><strong>索引数据块的整理</strong></p><p>Alter index coalesce——合并同一个branch的数据块（coalesce，合并，聚合）</p><p>Alter index REBUILD——重构整个索引段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>,score <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_st <span class="hljs-keyword">on</span> t1(id);<br><br>索引已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">index</span> idx_st coalesce;<br><br>索引已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">index</span> idx_st rebuild;<br><br>索引已更改。<br></code></pre></td></tr></table></figure><p><strong>Oracle的读操作</strong></p><p>①逻辑读：从内存中读取数据块</p><p>②物理读：从磁盘读取数据块到内存</p><p>单块读：每次从磁盘读取一个数据块</p><p>多块读：每次从磁盘读取多个数据块</p><h2 id="Extent-区间"><a href="#Extent-区间" class="headerlink" title="Extent-区间"></a>Extent-区间</h2><p>是由一组连续的数据块组成，多个extent构成一个段（segment）。</p><p>Oracle11g中创建表之后并不会立刻就分配extent，只有在插入一个数据之后才会分配extent。</p><p>关于extent的具体实验效果可以参见如下资料：</p><p><a href="http://blog.itpub.net/12798004/viewspace-1250248/">http://blog.itpub.net/12798004/viewspace-1250248/</a></p><h2 id="Segment-段"><a href="#Segment-段" class="headerlink" title="Segment-段"></a>Segment-段</h2><h3 id="什么是段？"><a href="#什么是段？" class="headerlink" title="什么是段？"></a>什么是段？</h3><p>在Oracle表中，凡是分配了空间的对象，都称之为段。</p><ul><li>表，表分区</li><li>索引，索引分区</li><li>大对象（LOB，large object）</li></ul><h3 id="段的分类"><a href="#段的分类" class="headerlink" title="段的分类"></a>段的分类</h3><ul><li>数据段</li><li>临时段</li><li>回滚段</li></ul><h3 id="临时段"><a href="#临时段" class="headerlink" title="临时段"></a>临时段</h3><p>也成为临时表空间。存在临时表空间中的数据成为临时段。</p><ul><li>排序，hash，merge…（需要一个中间数据处理区域）</li><li>只有在内存空不足时，Oracle才会在临时表空间上创建临时段。</li><li>临时段上的操作并不记录redo log</li></ul><h4 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h4><p><strong>临时表的概念</strong></p><p>临时表就是用来暂时保存临时数据（亦或叫中间数据）的一个数据库对象。</p><ul><li>Oracle的临时表只存在于某个会话或者事务的生命周期里，此时临时表中的数据只对这个会话可见。</li><li>临时表经常被用于存放一个操作的中间数据（数据处理的中间环节）</li><li>临时表由于不产生redo，能够提高数据操作的性能。</li></ul><p><strong>临时表的分类</strong></p><p>根据on commit的设定，可以将临时表分为两类，会话级的临时表和事务级的临时表。</p><ul><li>on commit delete rows</li></ul><blockquote><p>临时表的默认参数，表示临时表中的数据仅在事务（transaction）过程中有效，当事务提交（commit），临时表的临时段将被自动截断（truncate），<strong>但是临时表的结构以及元数据还存在用户的数据字典中，如果临时表完成使命之后，最好删除临时表，否则数据库会残留很多临时表的表结构和元数据。</strong></p></blockquote><ul><li>on commit preserve rows</li></ul><blockquote><p>它表示临时表的内容可以跨事物而存在，不过，当该会话结束时，临时表的暂时段将随着会话的结束而被丢弃，临时表中的数据自然也就随之丢弃。<strong>但是临时表的结构以及元数据还存储在用户的数据字典中。如果临时表完成它的使命后，最好删除临时表，否则数据库会残留很多临时表的表结构和元数据。</strong></p></blockquote><p><strong>临时表-on commit delete rows</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">SQL&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">global</span> temporary table t_temp <span class="hljs-keyword">on</span> commit delete rows <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span><br> dba_objects<span class="hljs-punctuation">;</span><br><br>表已创建。<br><br>SQL&gt; <span class="hljs-keyword">select</span> count<span class="hljs-comment">(*) from t_temp;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  COUNT(*)</span><br>----------<br>         <span class="hljs-number">0</span><br><br>SQL&gt; insert <span class="hljs-keyword">into</span> t_temp <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_objects<span class="hljs-punctuation">;</span><br><br>已创建<span class="hljs-number">72635</span>行。<br><br>SQL&gt; <span class="hljs-keyword">select</span> count<span class="hljs-comment">(*) from t_temp;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  COUNT(*)</span><br>----------<br>     <span class="hljs-number">72635</span><br><br>SQL&gt; commit<span class="hljs-punctuation">;</span><br><br>提交完成。<br><br>SQL&gt; <span class="hljs-keyword">select</span> count<span class="hljs-comment">(*) from t_temp;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  COUNT(*)</span><br>----------<br>         <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><blockquote><p>解释：</p><p>创建临时表空的create语句属于DDL语句，虽然创建的时候有初始数据，但是创建之后就相当于进行了一次commit，所以t_temp中并没有数据。insert插入数据之后t_temp表中就有了72635条数据。经过commit操作，数据就直接truncate掉了，但是表还存在着。</p></blockquote><p><strong>临时表-on commit preserve rows</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">temporary</span> <span class="hljs-keyword">table</span> t_temp <span class="hljs-keyword">on</span> <span class="hljs-keyword">commit</span> <span class="hljs-keyword">preserve rows</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_objects;<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> t_temp;<br><br>  COUNT(*)<br><span class="hljs-comment">----------</span><br>     <span class="hljs-number">72675</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_temp <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_objects;<br><br>已创建<span class="hljs-number">72675</span>行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> t_temp;<br><br>  COUNT(*)<br><span class="hljs-comment">----------</span><br>    <span class="hljs-number">145350</span><br><br><span class="hljs-keyword">SQL</span>&gt; quit;<br>从 Oracle <span class="hljs-keyword">Database</span> <span class="hljs-number">11</span>g Enterprise Edition <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> - <span class="hljs-number">64</span>bit Production<br><span class="hljs-keyword">With</span> the Partitioning, OLAP, Data Mining <span class="hljs-keyword">and</span> <span class="hljs-type">Real</span> Application Testing <span class="hljs-keyword">options</span> 断<br>开<br><br>C:\Users\clg&gt;sqlplus / <span class="hljs-keyword">as</span> sysdba<br><br><span class="hljs-keyword">SQL</span>*Plus: <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> Production <span class="hljs-keyword">on</span> 星期三 <span class="hljs-number">3</span>月 <span class="hljs-number">16</span> <span class="hljs-number">20</span>:<span class="hljs-number">34</span>:<span class="hljs-number">08</span> <span class="hljs-number">2016</span><br><br>Copyright (c) <span class="hljs-number">1982</span>, <span class="hljs-number">2010</span>, Oracle.  <span class="hljs-keyword">All</span> rights reserved.<br><br><br>连接到:<br>Oracle <span class="hljs-keyword">Database</span> <span class="hljs-number">11</span>g Enterprise Edition <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> - <span class="hljs-number">64</span>bit Production<br><span class="hljs-keyword">With</span> the Partitioning, OLAP, Data Mining <span class="hljs-keyword">and</span> <span class="hljs-type">Real</span> Application Testing <span class="hljs-keyword">options</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> t_temp;<br><br>  COUNT(*)<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">0</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t_temp;<br><br>表已删除。<br></code></pre></td></tr></table></figure><p>关于临时表的使用可以参见：</p><p><a href="https://www.cnblogs.com/kerrycode/p/3285936.html">https://www.cnblogs.com/kerrycode/p/3285936.html</a></p><p><strong>临时表-索引</strong></p><p>临时表也是可以创建索引的，基本使用和表-索引差不多。</p><h3 id="段的压缩"><a href="#段的压缩" class="headerlink" title="段的压缩"></a>段的压缩</h3><p>Oracle允许对段进行压缩。oracle的数据段压缩技术可以理解为”块级压缩”技术，也就是说是针对block级别的数据压缩。它是在block中引入记号表(symbol表)，block中的重复数据在symbol中用一个项(指针)表示，即块中相同的row只存储一条，从而节约了空间。</p><p>优点：</p><ul><li>减少存储空间</li><li>减少处理的数据块<ul><li>减少内存占用</li><li>提高I&#x2F;O效率</li><li>提高查询效率</li></ul></li></ul><p>缺点：</p><ul><li>因为要额外对数据做处理，在数据插入时，会消耗更多的资源和时间。</li></ul><p><strong>创建压缩表</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">create <span class="hljs-keyword">table</span> t_comp <span class="hljs-comment">compress</span>;<br></code></pre></td></tr></table></figure><p>或者是：下创建表，后激活压缩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t1 compress;<br><br>表已更改。<br></code></pre></td></tr></table></figure><p><strong>段压缩的级别</strong></p><ul><li><p>表空间级</p></li><li><p>表级</p></li><li><p>分区</p></li><li><p>子分区</p></li></ul><h3 id="段的存储管理"><a href="#段的存储管理" class="headerlink" title="段的存储管理"></a>段的存储管理</h3><p>MSSM–Manual Segment Space Management</p><ul><li>手工设定对象的存储参数：PCTFREE，PCTUSED……</li></ul><p>ASSM–Automatic Segment Space Management</p><ul><li>Oracle自动设定对象的存储参数：只可以手工设定PCTFREE参数，其他参数由Oracle自动设定。</li></ul><h2 id="Tablespace-表空间"><a href="#Tablespace-表空间" class="headerlink" title="Tablespace-表空间"></a>Tablespace-表空间</h2><h3 id="大文件表空间：bigfile字段"><a href="#大文件表空间：bigfile字段" class="headerlink" title="大文件表空间：bigfile字段"></a>大文件表空间：bigfile字段</h3><p>普通的数据文件，收到数据块的限制</p><ul><li>每个数据文件最多只能包含2^22-1（4M）个数据块<ul><li>2k–8G</li><li>4k–16G</li><li>8k–32G</li><li>…</li></ul></li></ul><p>大数据文件,可以使用2^32（4G）个数据块</p><ul><li>2k–8T</li><li>4k–16</li><li>…T</li></ul><p>大数据表空间的优势：</p><ul><li>减少数据库的数据个数限制（每个数据库64k个数据文件）</li><li>方便文件的管理，不需要人工干预表空间的文件大小。</li><li>减少数据库对文件头同步的开销。</li></ul><h3 id="表空间的管理方式"><a href="#表空间的管理方式" class="headerlink" title="表空间的管理方式"></a>表空间的管理方式</h3><p><strong>字典管理表空间</strong>（Dictionary-managed tablespaces）</p><p>所有表空间存储在数据字典中，统一调配。现在基本不用</p><p><strong>本地管理表空间</strong>（locally managed tablespace）</p><p>本地管理表空间不是在数据词典里存储表空间的，由自由区管理的表空间。用位图来自由的管理区间。一个区间对一个位，如果这个位是1表示已经被占用，0表示未被占用。</p><p>词典管理空间表示“中央集权治”，本地管理表空间表示“省市自治区”，一个databases表示中国，tablespaces表示一个省或直辖市。词典管理统一由中央调配。而<strong>本地管理表示有高度的自治权利，自已各种资源的分配不用上报中央。</strong></p><h3 id="表空间的存储属性"><a href="#表空间的存储属性" class="headerlink" title="表空间的存储属性"></a>表空间的存储属性</h3><p>每一个级别的都有自己的管理方式。</p><p>数据管理方式</p><ul><li>local</li><li>dictionary</li></ul><p>段管理</p><ul><li>ASSM</li><li>MSSM</li></ul><p>extent管理</p><ul><li>AutoAllocate（自动分配）</li><li>Uniform（统一大小分配）</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>存储</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回滚段undo</title>
    <link href="/2016/03/16/%E5%9B%9E%E6%BB%9A%E6%AE%B5undo/"/>
    <url>/2016/03/16/%E5%9B%9E%E6%BB%9A%E6%AE%B5undo/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="Undo的作用"><a href="#Undo的作用" class="headerlink" title="Undo的作用"></a>Undo的作用</h2><ul><li>数据的回滚</li><li>一致性读</li><li>表的闪回（事务，查询的闪回..）</li><li>失败会话的恢复</li></ul><h2 id="回滚rollback操作"><a href="#回滚rollback操作" class="headerlink" title="回滚rollback操作"></a>回滚rollback操作</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>ORA<span class="hljs-number">-01031</span>: 权限不足<br><span class="hljs-keyword">SQL</span>&gt; conn /<span class="hljs-keyword">as</span> sysdba<br>已连接。<br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>数据库日志模式            存档模式<br>自动存档             启用<br>存档终点            USE_DB_RECOVERY_FILE_DEST<br>最早的联机日志序列     <span class="hljs-number">45</span><br>下一个存档日志序列   <span class="hljs-number">47</span><br>当前日志序列           <span class="hljs-number">47</span><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">rollback</span>;<br><br>回退已完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">desc</span> t1;<br> 名称                                      是否为空? 类型<br> <span class="hljs-comment">----------------------------------------- -------- ----------------------------</span><br><br> ID                                                 NUMBER(<span class="hljs-number">38</span>)<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br>         <span class="hljs-number">2</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">rollback</span>;<br><br>回退已完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>数据库日志模式            存档模式<br>自动存档             启用<br>存档终点            USE_DB_RECOVERY_FILE_DEST<br>最早的联机日志序列     <span class="hljs-number">45</span><br>下一个存档日志序列   <span class="hljs-number">47</span><br>当前日志序列           <span class="hljs-number">47</span><br><span class="hljs-keyword">SQL</span>&gt; shutdown <span class="hljs-keyword">immediate</span>;<br>数据库已经关闭。<br>已经卸载数据库。<br>ORACLE 例程已经关闭。<br><span class="hljs-keyword">SQL</span>&gt; startup mount;<br>ORACLE 例程已经启动。<br><br>Total <span class="hljs-keyword">System</span> <span class="hljs-keyword">Global</span> Area <span class="hljs-number">3307048960</span> bytes<br>Fixed Size                  <span class="hljs-number">2180264</span> bytes<br>Variable Size            <span class="hljs-number">1828719448</span> bytes<br><span class="hljs-keyword">Database</span> <span class="hljs-keyword">Buffers</span>         <span class="hljs-number">1459617792</span> bytes<br>Redo <span class="hljs-keyword">Buffers</span>               <span class="hljs-number">16531456</span> bytes<br>数据库装载完毕。<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> noarchivelog;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> noarchivelog<br>*<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-38774</span>: 无法禁用介质恢复 - 闪回数据库已启用<br><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> flashback <span class="hljs-keyword">off</span>;<br><br>数据库已更改。<br><br><span class="hljs-keyword">SQL</span>&gt;<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> noarchivelog;<br><br>数据库已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">open</span>;<br><br>数据库已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>数据库日志模式             非存档模式<br>自动存档             禁用<br>存档终点            USE_DB_RECOVERY_FILE_DEST<br>最早的联机日志序列     <span class="hljs-number">45</span><br>当前日志序列           <span class="hljs-number">47</span><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br>         <span class="hljs-number">2</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">rollback</span>;<br><br>回退已完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">rollback</span>;<br><br>回退已完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br>         <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>可见rollback操作和当前数据库 归档模式并没有关系，只和commit操作有关，一旦commit就无法回滚。</p><p>如果没有指定 rollback 到哪一个保存点savepoint上，就意味着全部Rollback，而不是只是rollback一条操作。</p><span id="more"></span><p>关于savepoint的操作见下面的命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t1;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1<br>              *<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-00942</span>: 表或视图不存在<br><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">savepoint</span> s1;<br><br>保存点已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> s1;<br><br>回退已完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>虽然可以rollback到保存点，但是一旦commit，所有的保存点就都没用了。</p><h2 id="undo的逻辑结构"><a href="#undo的逻辑结构" class="headerlink" title="undo的逻辑结构"></a>undo的逻辑结构</h2><p>回滚段的空间是可以循环利用的，就像是分块的圆盘，这个圆盘可以增加块，也可以回收块。</p><p><strong>undo的空间使用机制-增长</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-undo%E7%A9%BA%E9%97%B4%E5%A2%9E%E9%95%BF%E6%9C%BA%E5%88%B6.png"></p><p>如图中所示，块4填满后需要继续向前填充，虽然块2是inactive的，但是中间隔着一个active的块1，所以不能向前覆盖。这个时候空间就必须要增长了，则会加入新的块5，然后就可以继续向块5中写入undo信息。</p><p><strong>undo的空间使用机制-回收</strong></p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-undo%E7%A9%BA%E9%97%B4%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.png"></p><p>当块4块5块6连续并且都是inactive的时候，此时空间回收机制，可以将这几个块合并成单独的块，块6。</p><h2 id="一致性读"><a href="#一致性读" class="headerlink" title="一致性读"></a>一致性读</h2><p>回滚段解决了写操作不会阻塞读操作的问题。</p><p>一致性读并非总要去读回滚段。</p><p><strong>实现的一致性读产生的代价——ORA-01555</strong></p><p>ORA-01555: “snapshot too old: rollback segment number string with name “string” too small”</p><p>Cause: rollback records needed by a reader for consistent read are overwritten by other writers;</p><p>Action: if in Automatic Undo Management mode, increase undo_retention setting.otherwise,use larger rollback segments.</p><p>快照太久，回滚段太小，回滚记录被覆盖</p><p>具体可以参见：<a href="http://www.dbtan.com/2010/01/ora-01555-reason-and-solution.html">ORA-01555 原因与解决</a></p><h2 id="自动管理Undo-AUM"><a href="#自动管理Undo-AUM" class="headerlink" title="自动管理Undo-AUM"></a>自动管理Undo-AUM</h2><p>Automatic Undo Management</p><p>查看undo配置信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> parameter undo;<br><br><span class="hljs-type">NAME</span>                                 <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">VALUE</span><br><span class="hljs-comment">------------------------------------ ----------- ------------------------------</span><br>undo_management                      string      AUTO<br>undo_retention                       <span class="hljs-type">integer</span>     <span class="hljs-number">900</span><br>undo_tablespace                      string      UNDOTBS1<br></code></pre></td></tr></table></figure><p>Undo配置参数含义</p><p>-DNDO_MANAGEMENT     undo的管理模式，分自动和手动</p><p>-UNDO_TABLESPACE      当前正在被使用的undo表</p><p>-UNDO_RETENTION        规定多长时间内，数据不能被覆盖。</p><p>-—————————————- </p><p>AUTO             表示undo 为自动管理模式。</p><p>900               表示在900秒内，undo上的数据不能被覆盖。</p><p>UNDOTBS1    是当前正在使用的undo表空间。</p><p>注意：undo_retention是一个动态调整的参数，同时，Oracle无法保证在这个保留时间内的undo数据不被覆盖，当undo空间不足时，Oracle将覆盖即使未过保留期的数据以释放空间。</p><p>强制保留undo_retention时间内的数据</p><ul><li>设置undo tablespace guarantee属性</li><li>设置该属性之后也可以取消</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>space undotbs1 retention guarantee;<br><br>表空间已更改。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span>space undotbs1 retention noguarantee;<br><br>表空间已更改。<br></code></pre></td></tr></table></figure><h2 id="Undo调优"><a href="#Undo调优" class="headerlink" title="Undo调优"></a>Undo调优</h2><p>Undo的设置取决于我们实际的生产系统。如何设置undo更合理地为我们工作呢？</p><p><strong>Undo表空间的大小</strong>：</p><p>　　我们在创建一个undo表空间的使用，就指定了它的大小，这个大小一旦创建是不可变更的。设置过大，是一种浪费，设置过小，例如删除100万条记录，这些删除的记录都要临时存放到undo表空间中，如果undo的大小不能存储100万条记录，那么就会出问题。</p><p><strong>Undo数据的存放时间</strong>：</p><p>　　也就是undo_retention 参数所对应的时间，undo上有数据存放时间与undo大小的密切关系。存放时间越长，需要的表空间越大。就像理发师的数量与理发师的效率的关系一样。理发师效率很高，一秒钟解决一个客户，那么就不需要太多的理发师傅。</p><p><strong>Undo表空间的历史信息</strong>：</p><p>如何合理设置undo表空间的大小和存放时间呢？那么就需要参考历史记录</p><p>关于如何设置undo表空间的大小可以参见：</p><p><a href="http://support.huawei.com/ecommunity/bbs/10180041.html">【技术分享】如何确定或调整undo表空间的大小</a></p><p>关于如何设置undo表空间的存放时间可以参见：</p><p><a href="https://blog.csdn.net/zq9017197/article/details/14446165">undo_retention：确定最优的撤销保留时间</a></p><p>参考资料：<a href="https://www.cnblogs.com/fnng/archive/2012/09/23/2699110.html">oracle undo 解析</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>Undo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重做日志和日志挖掘</title>
    <link href="/2016/03/16/%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97%E5%92%8C%E6%97%A5%E5%BF%97%E6%8C%96%E6%8E%98/"/>
    <url>/2016/03/16/%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97%E5%92%8C%E6%97%A5%E5%BF%97%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<h2 id="重做日志-Redo-log"><a href="#重做日志-Redo-log" class="headerlink" title="重做日志-Redo log"></a>重做日志-Redo log</h2><p><strong>首先给出参考资料：</strong></p><p><a href="https://docs.oracle.com/database/121/ADMIN/onlineredo.htm#ADMIN007">1、Oracle官网-Managing the Redo Log</a></p><h3 id="为什么需要redo-log"><a href="#为什么需要redo-log" class="headerlink" title="为什么需要redo log"></a>为什么需要redo log</h3><ul><li>内存中数据修改后，不必立即更新到磁盘—效率</li><li>由日志完成数据的保护目的—效率</li><li>其他副产品<ul><li>数据恢复（备份集+归档日志）</li><li>数据同步（DG，streams，goldengate）</li><li>日志挖掘</li></ul></li></ul><h3 id="什么是Redo-log"><a href="#什么是Redo-log" class="headerlink" title="什么是Redo log"></a>什么是Redo log</h3><p>重做日志包含所有数据产生的历史改变记录。</p><p>重做日志文件通常用于</p><ul><li>恢复</li><li>日志挖掘</li><li>流</li><li>数据库产生的每个改动<ul><li>写入数据块缓冲之前，先写入redo log buffer –内存</li><li>写入数据文件之前先写入日志文件 –数据文件</li></ul></li><li>当提交后，redo log buffer被刷入redo log files</li></ul><h3 id="关于v-log视图"><a href="#关于v-log视图" class="headerlink" title="关于v$log视图"></a>关于v$log视图</h3><p>v$log从控制文件中显示日志文件的信息。可参考官网资料<a href="https://docs.oracle.com/database/121/REFRN/GUID-FCD3B70B-7B98-40D8-98AB-9F6A85E69F57.htm#REFRN30127">v$log</a></p><table><thead><tr><th>Column</th><th>Datatype</th><th>Description</th></tr></thead><tbody><tr><td>GROUP#</td><td>NUMBER</td><td>Log group number</td></tr><tr><td>THREAD#</td><td>NUMBER</td><td>Log thread number</td></tr><tr><td>SEQUENCE#</td><td>NUMBER</td><td>Log sequence number</td></tr><tr><td>BYTES</td><td>NUMBER</td><td>Size of the log (in bytes)</td></tr><tr><td>BLOCKSIZE</td><td>NUMBER</td><td>Block size of the logfile (512 or 4096)</td></tr><tr><td>MEMBERS</td><td>NUMBER</td><td>Number of members in the log group</td></tr><tr><td>ARCHIVED</td><td>VARCHAR2(3)</td><td>Archive status (<code>YES</code>) or (<code>NO</code>)</td></tr><tr><td>STATUS</td><td>VARCHAR2(16)</td><td>UNUSED,CURRENT,ACTIVE,CLEARING,CLEARING_CURRENT,INACTIVE</td></tr><tr><td>FIRST_CHANGE#</td><td>NUMBER</td><td>Lowest system change number (SCN) in the log</td></tr><tr><td>FIRST_TIME</td><td>DATE</td><td>Time of the first SCN in the log</td></tr><tr><td>NEXT_CHANGE#</td><td>NUMBER</td><td>Highest change number (SCN) in the log. When <code>STATUS=CURRENT</code>, <code>NEXT_CHANGE#</code>is set to the highest possible SCN, 281474976710655.</td></tr><tr><td>NEXT_TIME</td><td>DATE</td><td>Time of the highest SCN in the log. When <code>STATUS=CURRENT</code>, <code>NEXT_TIME</code> is set to<code>NULL</code>.</td></tr><tr><td>CON_ID</td><td>NUMBER</td><td>0，1，n三种情况</td></tr></tbody></table><p>日志文件的六种状态UNUSED,CURRENT,ACTIVE,CLEARING,CLEARING_CURRENT,INACTIVE代表的意思分别如下所述：</p><ul><li><strong>UNUSED</strong> - Online redo log has never been written to. This is the state of a redo log that was just added, or just after a <em>RESETLOGS</em>, when it is not the current redo log.</li><li><strong>CURRENT</strong> - Current redo log. This implies that the redo log is active. The redo log could be open or closed.</li><li><strong>ACTIVE</strong> - Log is active but is not the current log. It is needed for crash recovery. It may be in use for block recovery. It may or may not be archived.</li><li><strong>CLEARING</strong> - Log is being re-created as an empty log after an <code>ALTER DATABASE CLEAR LOGFILE</code> statement. After the log is cleared, the status changes to <code>UNUSED</code>.</li><li><strong>CLEARING_CURRENT</strong> - Current log is being cleared of a closed thread. The log can stay in this status if there is some failure in the switch such as an I&#x2F;O error writing the new log header.</li><li><strong>INACTIVE</strong> - Log is no longer needed for instance recovery. It may be in use for media recovery. It may or may not be archived.</li></ul><h3 id="LGWR如何重复使用redo-log-files"><a href="#LGWR如何重复使用redo-log-files" class="headerlink" title="LGWR如何重复使用redo log files"></a>LGWR如何重复使用redo log files</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Reuse%20of%20Redo%20Log%20Files%20by%20LGWR.gif" alt="Figure 11-1 Reuse of Redo Log Files by LGWR"></p><p>上图就是Oracle LGWR进程向redo log files中写入redo记录的过程，可见，Oracle数据库每次只是用一个redo log file来存储redo log buffer中的redo记录。LGWR正在写入的那个redo log file就是current redo log file。</p><p>可用于实例恢复的redo log files就是active redo log files。</p><p>不再用于实例恢复的redo log files就是inactive redo log files。</p><p>如果数据库当前是Archivelog模式，那么直到有一个后台归档进程ARCn已经归档成功，数据库才能重用或者覆盖active online log file。</p><p>如果数据库当前是NoArchivelog模式，当最后一个redo log file写满的时候，LGWR会继续按顺序覆盖下一个inactive redo log file。</p><span id="more"></span><h3 id="查询使用的日志文件的组数及每组的状态"><a href="#查询使用的日志文件的组数及每组的状态" class="headerlink" title="查询使用的日志文件的组数及每组的状态"></a>查询使用的日志文件的组数及每组的状态</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">group</span>#,status <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">log</span>;<br><br>    <span class="hljs-keyword">GROUP</span># STATUS<br><span class="hljs-comment">---------- ----------------</span><br>         <span class="hljs-number">1</span> <span class="hljs-keyword">CURRENT</span><br>         <span class="hljs-number">2</span> INACTIVE<br>         <span class="hljs-number">3</span> INACTIVE<br></code></pre></td></tr></table></figure><p>有代码可知当前所用的日志文件组数为3组，其中第一组是curren状态，第二三组是inactive状态。</p><p>我们也可以使用以下命令手动切换当前LGWR操作的redo log file。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">system</span> switch logfile;<br><br>系统已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">group</span>#,status <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">log</span>;<br><br>    <span class="hljs-keyword">GROUP</span># STATUS<br><span class="hljs-comment">---------- ----------------</span><br>         <span class="hljs-number">1</span> ACTIVE<br>         <span class="hljs-number">2</span> <span class="hljs-keyword">CURRENT</span><br>         <span class="hljs-number">3</span> INACTIVE<br></code></pre></td></tr></table></figure><p>可见当前LGWR操作的redo log file已经由之前的第一组修改为第二组了，并且第一组的redo log file变成了Active，也就是说可以用于实例恢复。</p><p>过了一会之后再次查询redo log file状态出现的结果如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">group</span>#,status <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">log</span>;<br><br>    <span class="hljs-keyword">GROUP</span># STATUS<br><span class="hljs-comment">---------- ----------------</span><br>         <span class="hljs-number">1</span> INACTIVE<br>         <span class="hljs-number">2</span> <span class="hljs-keyword">CURRENT</span><br>         <span class="hljs-number">3</span> INACTIVE<br></code></pre></td></tr></table></figure><p>此时会发现后台进程会自动将第一个处于active的redo log file变成inactive。这是为什么呢？原来是后台归档进程ARCn将active redo log file归档成归档日志文件，相应的状态就由active变成了inactive。此时group1就不再用于实例恢复了。这个过程用下图来解释：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Redo%20to%20Archive.png"></p><h2 id="Multiplexed-Redo-Log-Files"><a href="#Multiplexed-Redo-Log-Files" class="headerlink" title="Multiplexed Redo Log Files"></a>Multiplexed Redo Log Files</h2><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Multiplexed%20Redo%20Log%20Files.gif" alt="Multiplexed Redo Log Files"></p><p>Oracle数据库允许多路复用重做日志，也就是说，重做日志的两个或多个相同的拷贝可以自动保持在不同的地点。为了最大效益，存储的位置应在分开的磁盘。即使重做日志的所有副本都在同一磁盘上，这种冗余措施也是可以防止I &#x2F; O错误，文件损坏，等等。当使用复用重做日志时，LGWR会将相同的redo log信息同时写入多个相同的重做日志文件，从而解决重做日志的单点故障问题。</p><p>图中A_LOG1和B_LOG1是第1组的成员，A_LOG2和B_LOG2是第2组的两个成员，等等。一组中的每个成员都必须是相同的大小，并且是状态也是同步的（active or inactive）。</p><h3 id="SCN–system-change-number"><a href="#SCN–system-change-number" class="headerlink" title="SCN–system change number"></a>SCN–system change number</h3><p>Oracle中的SCN（system change number）和我们的北京时间的意义是相同的，<strong>SCN是Oracle中的时间号</strong>。</p><p>为什么Oracle不用时间来界定呢？</p><p>我在北京时间8：00的时候执行一条DML语句，然后修改机器上的时间为7：00，再执行一条DML语句。如果用机器上的时间区分的话，那Oracle根本区分不出来这两条DML语句的执行顺序——而这一点对于Oracle是很重要的。所以它<strong>采用自己产生的SCN来区分所有操作的先后顺序。</strong></p><p>关于SCN的具体讲解可以参见：<a href="http://blog.chinaunix.net/uid-18974058-id-3068592.html">http://blog.chinaunix.net/uid-18974058-id-3068592.html</a></p><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>日志文件使用操作系统块大小</p><ul><li>通常是512bytes</li><li>格式依赖于<ul><li>操作系统</li><li>Oracle版本</li></ul></li></ul><p>Redo日志组成</p><ul><li>数据头</li><li>redo record</li></ul><p><strong>Redo record</strong></p><p>一个redo record记录包括</p><ul><li>Redo记录台</li><li>一个或多个改变向量</li></ul><p>每个redo record包含每个原子改变的undo和redo</p><p>某些改动不需要undo（临时表，直接加载…）</p><p><strong>redo log总结</strong></p><ul><li><p>redo log是Oracle中极其重要的组件，它的目的在于保证数据的安全性</p></li><li><p>redo log的丢失可能导致数据库中数据的丢失</p></li><li><p>应该讲Oracle至于归档模式下</p></li></ul><h2 id="日志挖掘-logminer"><a href="#日志挖掘-logminer" class="headerlink" title="日志挖掘-logminer"></a>日志挖掘-logminer</h2><p>参考：</p><p><a href="https://docs.oracle.com/cd/E11882_01/server.112/e22490/logminer.htm#SUTIL019">Oracle官网-Using LogMiner to Analyze Redo Log Files</a></p><p><a href="https://www.cnblogs.com/shishanyuan/p/3140440.html">cnblogs-LogMiner配置使用手册</a></p><p>用途</p><ul><li>对Oracle在线redo和归档日志进行分析</li></ul><p>目的</p><ul><li>修正误操作</li><li>审计</li></ul><h3 id="dbms-logmnr"><a href="#dbms-logmnr" class="headerlink" title="dbms_logmnr"></a>dbms_logmnr</h3><ul><li>可以基于日志文件分析（一个或者多个）</li><li>可以基于时间段分析</li><li>可以基于SCN分析</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>重做日志</tag>
      
      <tag>日志挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle内存结构和后台进程</title>
    <link href="/2016/03/16/oracle%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/"/>
    <url>/2016/03/16/oracle%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E5%86%85%E5%AD%98%E5%92%8C%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B.png"></p><p><strong>Oracle实例&#x3D;内存+后台进程</strong></p><p><strong>Oracle数据库&#x3D;实例+物理存储结构</strong></p><p>由上图可知Oracle实例（一个Instance）由内存结构和程序结构组成，内存结构主要是SGA，程序结构主要是后台进程。</p><p>物理存储结构主要是数据库文件。</p><p>这次仔细学习了Oracle实例的具体内容。</p><h2 id="为什么Oracle数据库做的这么复杂？"><a href="#为什么Oracle数据库做的这么复杂？" class="headerlink" title="为什么Oracle数据库做的这么复杂？"></a>为什么Oracle数据库做的这么复杂？</h2><p><strong>内存</strong></p><ul><li>数据查询的速度</li><li>更好的提升数据处理的速度</li></ul><p><strong>后台进程</strong></p><ul><li>为了完成特定的任务的服务进程</li></ul><p><strong>数据文件</strong></p><ul><li>数据的永久性保存</li><li>也是数据库性能下降的主要原因</li></ul><h2 id="实例之内存结构"><a href="#实例之内存结构" class="headerlink" title="实例之内存结构"></a>实例之内存结构</h2><h3 id="System-global-area-SGA"><a href="#System-global-area-SGA" class="headerlink" title="System global area(SGA)"></a>System global area(SGA)</h3><p>SGA区包括Oracle实例需要的一系列内存组件，用于存放数据信息和数据控制信息，这些<strong>内存信息被所有进程所共享</strong>。SGA的各个组成包括：</p><table><thead><tr><th align="left">组成</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>Database buffer cache</strong></td><td align="left">数据库高速缓冲区，里面存放着从磁盘读取到内存的数据块，这些数据块可以被所有的会话访问，是全局共享的。buffer cache分为三个部分，分别是default pool，keep pool，recycle pool。default pool是正常情况下，数据块存放的内存区域，default pool会根据一个过期算法（LRU，Least Recently Used，近期最少使用）将过期的脏数据（修改过的数据，没有修改的数据可以不写到磁盘上）写到磁盘上。keep pool这个区域用于将一些数据始终固定在内存中。recycle pool存放一些不经常使用的数据块，避免这些数据块在default pool中占据空间。</td></tr><tr><td align="left"><strong>Shared pool</strong></td><td align="left">共享池缓存着一些用户可以共用的信息：1、可以重新使用的SQL语句  2、存放一些数据字典的信息，包括用户账户数据，表，索引，权限等等。  3、存储存放在数据库中的可执行代码。</td></tr><tr><td align="left"><strong>Redo log buffer</strong></td><td align="left">重做日志缓冲区，存放着数据库操作产生的redo数据，Redo log buffer以循环的方式写入，当redo log已经写到磁盘后，就可以被后续的日志数据覆盖。</td></tr><tr><td align="left"><strong>Large pool</strong></td><td align="left">对数据的处理不适用LRU算法，比shared pool更搞笑的内存收取方式。并行执行时会使用large pool。Rman备份时启动并行备份方式时，使用large pool。</td></tr><tr><td align="left"><strong>Java pool</strong></td><td align="left">这块内存区域用来存放所有特定会话的JVM（Java Virtual Machine）中的java代码和数据。</td></tr><tr><td align="left"><strong>Streams pool</strong></td><td align="left">里面存放着流相关的信息，比如流队列，其中也会流复制中capture进程提供进程内存空间。Streams pool只为流复制提供内存空间，如果没有手工配置，也没有配置流复制，这个空间将设置为0。</td></tr><tr><td align="left"><strong>Result cache</strong></td><td align="left">结果缓存，当表的访问方式以读为主前提下，从一张大表中过滤出少量的记录作为结果集，把查询结果集放入result cache，后续相同的查询语句可以直接从result cache里获取想要的结果，省去了CPU、I&#x2F;O上的开销。这个SGA组件加速了频繁运行的查询语句的执行速度。</td></tr></tbody></table><span id="more"></span><h3 id="Program-global-area-PGA"><a href="#Program-global-area-PGA" class="headerlink" title="Program global area(PGA)"></a>Program global area(PGA)</h3><p>不同于SGA，PGA属于独占式内存区，它的数据和控制信息为某个会话所独有，当一个会话产生时，Oracle会为这个会话分配一个PGA内存区域。可以理解为操作系统在一个进程启动时，为他分配的内存空间，是一个操作系统含义上的内存区。</p><h3 id="User-global-Area-UGA"><a href="#User-global-Area-UGA" class="headerlink" title="User global Area(UGA)"></a>User global Area(UGA)</h3><p>UGA中保存和当前会话相关的信息，比如会话登录的信息，pl&#x2F;sql的变量，绑定变量的值等等。UGA随着连接方式不一样可以在SGA中也可以在PGA中。</p><h3 id="Software-code-areas"><a href="#Software-code-areas" class="headerlink" title="Software code areas"></a>Software code areas</h3><p>Oracle存放自身软件代码的一部分内存区，不允许其他会话访问</p><h2 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h2><p><strong>Oracle的进程</strong></p><p>用户进程user process</p><p>服务器进程 server process</p><p>实例后台进程 background process</p><p><strong>windows查看Oracle有哪些后台进程</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">SQL&gt; select program from v$session where program like <span class="hljs-emphasis">&#x27;ORACLE.EXE%&#x27;</span>;<br><br><span class="hljs-section">PROGRAM</span><br><span class="hljs-section">----------------------------------------------------------------</span><br>ORACLE.EXE (GEN0)<br>ORACLE.EXE (DIA0)<br>ORACLE.EXE (CKPT)<br>ORACLE.EXE (MMNL)<br>ORACLE.EXE (RVWR)<br>ORACLE.EXE (ARC0)<br>ORACLE.EXE (QMNC)<br>ORACLE.EXE (ARC1)<br>ORACLE.EXE (DIAG)<br>ORACLE.EXE (MMAN)<br>ORACLE.EXE (SMON)<br><br><span class="hljs-section">PROGRAM</span><br><span class="hljs-section">----------------------------------------------------------------</span><br>ORACLE.EXE (Q001)<br>ORACLE.EXE (SMCO)<br>ORACLE.EXE (PMON)<br>ORACLE.EXE (DBRM)<br>ORACLE.EXE (DBW0)<br>ORACLE.EXE (RECO)<br>ORACLE.EXE (ARC2)<br>ORACLE.EXE (Q002)<br>ORACLE.EXE (CJQ0)<br>ORACLE.EXE (W000)<br>ORACLE.EXE (VKTM)<br><br><span class="hljs-section">PROGRAM</span><br><span class="hljs-section">----------------------------------------------------------------</span><br>ORACLE.EXE (PSP0)<br>ORACLE.EXE (LGWR)<br>ORACLE.EXE (MMON)<br>ORACLE.EXE (ARC3)<br><br>已选择26行。<br></code></pre></td></tr></table></figure><p>下面重点看一些Oracle后台进程（链接内存和磁盘的桥梁）</p><h3 id="系统监控进程SMON"><a href="#系统监控进程SMON" class="headerlink" title="系统监控进程SMON"></a>系统监控进程SMON</h3><p>Oracle数据库至关重要的一个后台进程，SMON 是System Monitor 的缩写，意即：系统监控。</p><p><strong>SMON的主要工作：</strong></p><ul><li><p>数据库启动时的实例恢复，在RAC环境下，一个节点的SMON可以对另外一个节点做实例恢复</p></li><li><p>清理和释放临时段上的数据（排序、临时表…）</p></li><li><p>对于DMT（字典管理表空间），SMON可以合并连续空闲的extent</p></li><li><p>维护回滚段的online，offline以及空间的回收</p></li></ul><h3 id="进程监控进程PMON"><a href="#进程监控进程PMON" class="headerlink" title="进程监控进程PMON"></a>进程监控进程PMON</h3><p>PMON是Process Monitor的缩写，PMON主要有下面的用途：</p><ul><li><p>在进程非正常中断后，做清理工作</p></li><li><p>在进程abort后，PMON进行清理工作。</p></li><li><p>PMON的第三个用途是，向Oracle TNS listener注册实例信息。</p></li></ul><h3 id="数据库写进程DBWn"><a href="#数据库写进程DBWn" class="headerlink" title="数据库写进程DBWn"></a>数据库写进程DBWn</h3><p>DBWn是Database writer的缩写，n代表可以设置多个写进程。</p><p>DBWn负责把缓冲区的脏数据写到磁盘上，DBW进程是分散地把数据写到磁盘上的。而LGWR是连续写redo log。分散写要比连续写耗时的多。</p><p><strong>DBWn触发条件：</strong></p><ul><li><p>当buffer cache空间不足时触发。</p></li><li><p>DBWn接到checkpoint的指令时触发。</p></li></ul><h3 id="日志写进程LGWR"><a href="#日志写进程LGWR" class="headerlink" title="日志写进程LGWR"></a>日志写进程LGWR</h3><p>LGWR是把SGA中redo log buffer的信息写到redo log file的进程。LGWR是顺序写入到redo log file中，因此速度很快。LGWR会在下面情况发生：</p><p>1，每隔3秒钟，进行一次LGWR</p><p>2，任何事务进行了commit操作</p><p>3，当redo log buffer是1&#x2F;3满，或者里面有1MB的数据</p><p>基于以上的原因，<strong>把redo log buffer设置的很大就没必要的</strong>。</p><h3 id="检查点进程CKPT"><a href="#检查点进程CKPT" class="headerlink" title="检查点进程CKPT"></a>检查点进程CKPT</h3><p>CKPT是checkpoint的缩写，根据checkpoint信息和DBW向磁盘写数据块的信号，CKPT更新控制文件和数据文件头。 Checkpoint information includes the checkpoint position, SCN, location in online redo log to begin recovery, and so on. CKPT 既不向数据文件中写数据块，也不向online redo log files写redo块。</p><h3 id="归档进程ARCn"><a href="#归档进程ARCn" class="headerlink" title="归档进程ARCn"></a>归档进程ARCn</h3><p>ARCn，Archive归档进程。ARCn的工作是在LGWR把onlone redo log填满后，ARCn把redo log file的内容copy到其他的地方。（也就是说是把联机重做日志变成归档日志）。online redo log 是被用来为实例失败的时候，恢复数据文件。而归档日志是被用来在media recovery的时候，恢复数据文件。</p><h3 id="checkpoint和commit的区别"><a href="#checkpoint和commit的区别" class="headerlink" title="checkpoint和commit的区别"></a>checkpoint和commit的区别</h3><p><strong>commit</strong>的作用是提交那些事务修改的数据产生的日志，即触发LGWR将redo log buffer中的内容写到redo log files，此时并没有把真正的数据写到磁盘上。<strong>commit的目的就是为了写到redo log files中去保护数据。</strong></p><p><strong>checkpoint</strong>会触发DBWn进程，将脏数据块写到数据文件中。如果DBWR进程要将事务的结果写入数据文件，但发现要写入的脏数据块相关的重做信息仍然处于重做日志缓存中，它将通知oracle启动LGWR进程，先将这些重做信息写入重做日志文件，直到重做信息全部被写入后，DBWR进程才开始将脏缓存写入数据文件。所以<strong>checkpoint的目的是保证数据一致性。</strong></p><p>参考：</p><p><a href="https://docs.oracle.com/cd/E25054_01/server.1111/e10897/instance.htm">Oracle官网-Managing the Oracle Instance</a></p><p><a href="https://docs.oracle.com/cd/E29597_01/server.1111/e25789/process.htm">Oracle官网-Process Architecture</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>内存结构</tag>
      
      <tag>后台进程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DBA日常工作和职责</title>
    <link href="/2016/03/16/dba%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%E5%92%8C%E8%81%8C%E8%B4%A3/"/>
    <url>/2016/03/16/dba%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%E5%92%8C%E8%81%8C%E8%B4%A3/</url>
    
    <content type="html"><![CDATA[<hr><p>经过前面的学习，对数据库有了一个大致的了解，从这周起对Oracle数据库进行进一步的深入学习。先来学习下DBA日常工作和职责</p><p><em><strong>Oracle DBA的职责</strong></em></p><p>系统建设当中：</p><ul><li>数据库的设计</li><li>数据库的建模</li><li>数据安全（备份方案，容灾方案）</li><li>数据库性能（系统性能）</li></ul><p>运维当中：</p><ul><li>保证数据的安全（备份方案，容灾方案）</li><li>数据库的可用性</li><li>日常故障处理</li><li>性能分析处理</li><li>数据库升级（打补丁），改造</li></ul><p><em><strong>Oracle DBA的日常工作</strong></em></p><p>通用数据库的监控</p><ul><li>表空间（磁盘，ASM）容量的监控</li></ul><blockquote><p>一整块存储使用ASM管理，将数据文件设置为自动扩展，最后只需要监控ASM的使用率</p></blockquote><ul><li>告警日志文件（alert_sid.ora）</li></ul><blockquote><p>写一个自动分析alert文件的程序，做到alert错误实时告警</p></blockquote><p>定制监控指标</p><ul><li>某个表空间的数据增长率</li><li>某个对象（表，索引）的数据增长率</li><li>阻塞（v$lock）</li><li>cpu</li><li>i&#x2F;o</li><li>内存（SGA+PGA）</li><li>会话数（session number）</li></ul><p><em><strong>养成好的习惯</strong></em></p><p>DBA应该多使用sqlplus工具</p><ul><li>sqlplus是Oracle最基本的配置，不受任何环境的影响。</li><li>熟练掌握SQL语句</li><li>熟悉Oracle的性能视图</li></ul><p>开发人员可以考虑使用图形工具</p><ul><li>更高的代码编写的效率</li><li>更好的继承开发环境</li></ul><p><em><strong>Oracle DBA常用的SQL语句</strong></em></p><p>常用的SQL语句应该包括以下几个方面：</p><ul><li><p>表空间的大小（数据库的大小）</p></li><li><p>数据对象的大小（数据对象占用的空间）</p></li><li><p>会话当前的SQL语句</p></li><li><p>会话对应的进程号</p></li><li><p>会话的阻塞</p></li><li><p>SQL的执行计划</p></li><li><p>跟踪SQL语句</p></li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DBA</tag>
      
      <tag>职责</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DBA常用的SQL语句</title>
    <link href="/2016/03/16/dba%E5%B8%B8%E7%94%A8%E7%9A%84sql%E8%AF%AD%E5%8F%A5/"/>
    <url>/2016/03/16/dba%E5%B8%B8%E7%94%A8%E7%9A%84sql%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<hr><p>DBA常用的SQL语句</p><p><strong>数据库的大小</strong></p><p>数据库的大小主要是数据文件（dba_data_files）和临时文件(dba_temp_files;)的大小之和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询数据文件大小</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes) <span class="hljs-keyword">from</span> dba_data_files;<br><br><span class="hljs-built_in">SUM</span>(BYTES)<br><span class="hljs-comment">----------</span><br><span class="hljs-number">1515192320</span><br><br><span class="hljs-comment">--查询临时文件大小</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes) <span class="hljs-keyword">from</span> dba_temp_files;<br><br><span class="hljs-built_in">SUM</span>(BYTES)<br><span class="hljs-comment">----------</span><br>  <span class="hljs-number">30408704</span><br><br><span class="hljs-comment">--查询数据库的大小：两项相加</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes) <span class="hljs-keyword">from</span> dba_data_files)<span class="hljs-operator">+</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes) <span class="hljs-keyword">from</span> dba_<br>temp_files) <span class="hljs-keyword">from</span> dual;<br><br>(SELECTSUM(BYTES)FROMDBA_DATA_FILES)<span class="hljs-operator">+</span>(SELECTSUM(BYTES)FROMDBA_TEMP_FILES)<br><span class="hljs-comment">-------------------------------------------------------------------------</span><br>                                                               <span class="hljs-number">1545601024</span><br><br><span class="hljs-comment">--取一个别名total_size</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes) <span class="hljs-keyword">from</span> dba_data_files)<span class="hljs-operator">+</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes) <span class="hljs-keyword">from</span> dba_<br>temp_files) <span class="hljs-keyword">as</span> total_size <span class="hljs-keyword">from</span> dual;<br><br>TOTAL_SIZE<br><span class="hljs-comment">----------</span><br><span class="hljs-number">1545601024</span><br></code></pre></td></tr></table></figure><span id="more"></span><p><strong>查询某个段对象（表，索引）的大小</strong></p><p><strong>dba_segments:</strong>  <strong>DBA_SEGMENTS</strong>describes the storage allocated for all segments in the database</p><p><strong>查看有哪些表空间</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">SQL&gt; select tablespace_name from dba_tablespaces;<br><br><span class="hljs-section">TABLESPACE_NAME</span><br><span class="hljs-section">------------------------------</span><br>SYSTEM<br>SYSAUX<br>UNDOTBS1<br>TEMP<br>USERS<br>EXAMPLE<br><br>已选择6行。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DBA</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做一名合格的DBA</title>
    <link href="/2016/03/16/%E5%81%9A%E4%B8%80%E5%90%8D%E5%90%88%E6%A0%BC%E7%9A%84dba/"/>
    <url>/2016/03/16/%E5%81%9A%E4%B8%80%E5%90%8D%E5%90%88%E6%A0%BC%E7%9A%84dba/</url>
    
    <content type="html"><![CDATA[<hr><p><em><strong>Oracle DBA的角色定义</strong></em></p><p><strong>开发型DBA</strong></p><ul><li>数据库安装</li><li>数据库架构设计（架构和建模）</li><li>代码开发（存储过程，SQL）</li></ul><p><strong>运维型DBA</strong></p><ul><li>数据库日常监控</li><li>故障处理</li><li>性能优化</li><li>数据备份，容灾</li><li>数据库安全规划</li></ul><p><em><strong>DBA的操守</strong></em></p><p><strong>在自己的责任范围内</strong></p><ul><li>让数据库设计更合理，预防设计导致的性能或安全隐患</li><li>数据更安全</li><li>数据库性能更优</li><li>数据库日常管理更合理</li><li>故障发现，处理及时</li></ul><p><em><strong>数据库的架构设计</strong></em></p><p>数据库架构</p><ul><li>分布or单库</li></ul><p>实例的冗余</p><ul><li>RAC or single</li></ul><p>数据库的安全和容灾</p><ul><li>DG or streams or Rman</li></ul><p>空间的考虑存储的规划</p><ul><li>ASM （自动存储管理）+ SAN（Storage Area Network，SAN网络存储）</li></ul><p>软件的生命周期和业务（数据）增长的预测</p><p><em><strong>数据库的建模</strong></em></p><p>实体，关系的设计E-R</p><ul><li>表</li><li>索引</li><li>主、外键的引用</li></ul><p><em><strong>数据库的开发–SQL和存储过程</strong></em></p><ul><li>SQL是否绑定变量</li><li>SQL语句的性能问题</li><li>表的分析的方式-分析选项，分析频率等…</li><li>影响SQL执行效率的性能参数</li></ul><span id="more"></span><p><em><strong>数据库的运维</strong></em></p><p>数据库的监控</p><ul><li>定制</li><li>开源软件+脚本</li><li>OEM+grid control</li><li>第三方软件Quest等</li></ul><p>数据的管理及安全</p><ul><li><p>备份策略</p></li><li><p>数据的保留，删除策略</p></li><li><p>分区，压缩，只读表空间…</p></li><li><p>最首要的问题是数据的安全问题</p></li></ul><p>故障处理</p><ul><li>对数据库的深入理解</li><li>Oracle support（metalink，metalinkOracle的官方技术支持站点Oracle公司通过该网站来支持全球的客户）</li><li>asktom.oracle.com</li><li><a href="http://www.itpub.net/">www.itpub.net</a></li></ul><p>数据库的性能优化</p><ul><li>对业务流程的深入理解</li><li>用户感知为导向的优化思路</li><li>性能基线的建立-cpu,i&#x2F;o,sessions…</li><li>定期的AWR（Automatic Workload Repository，Oracle AWR）报告分析</li></ul><p>数据库的安全</p><ul><li>口令管理策略（精细化的授权机制）</li><li>Oracle的安全产品DB vault和Audit vault</li><li>Oracle的细粒度审计（FGA）</li><li>数据加密</li><li>操作系统口令管理</li></ul><p><em><strong>Oracle的学习思路</strong></em></p><p>入门-&gt;深入Oracle-&gt;Oracle性能优化艺术-&gt;基于海量数据的数据库设计</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>DBA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RAC与DG</title>
    <link href="/2016/03/16/rac%E4%B8%8Edg/"/>
    <url>/2016/03/16/rac%E4%B8%8Edg/</url>
    
    <content type="html"><![CDATA[<h2 id="RAC"><a href="#RAC" class="headerlink" title="RAC"></a>RAC</h2><p>RAC: real application clustersrac</p><p>RAC: real application clustersrac</p><p>单节点数据库：数据文件和示例文件一一对应</p><blockquote><p>实例损坏时数据库就损坏了</p></blockquote><p>RAC架构数据库：数据文件和多个实例对应</p><blockquote><p>RAC最根本的初衷是实例级的容错，并不是基于数据的</p><p>实例都是基于数据的。</p><p>dataguard是基于数据容错的。</p><p>Oracle数据库支持网格计算环境的核心技术</p><p>SAN网络存储（Storage Area Network）：集中式管理的高速存储网络<br><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-RAC%E6%9E%B6%E6%9E%84.png"></p></blockquote><p>RAC的目的</p><ul><li>提供实例级别的冗余</li><li>提供更多的系统资源</li><li>增加更多的并行处理</li></ul><p>RAC的优点和缺点</p><p>  优点</p><ul><li><p>提供系统冗余</p></li><li><p>更多的系统资源</p></li><li><p>业务分割处理</p><p>缺点</p></li><li><p>内存共享和资源竞争（cache fusion）</p></li><li><p>底层技术复杂，对DBA技术要求高</p></li></ul><p>什么时候需要使用RAC？</p><ul><li>实例冗余——第一考虑的目的</li><li>处理能力和性能的提升</li></ul><span id="more"></span><h2 id="DG"><a href="#DG" class="headerlink" title="DG"></a>DG</h2><p>DataGuard，数据卫士，一种数据库级别的高可用性（HA）方案，用作数据<a href="http://baike.baidu.com/view/1088749.htm">容灾</a>解决方案。对于联机事务处理（OLTP，数据量不太大）非常合适，对于联机分析处理（OLAP，数据量太大），只能选择关键数据创建DG，常规数据，选择其他方式备份。</p><p>容灾级别的DG：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-%E5%AE%B9%E7%81%BE%E7%BA%A7%E5%88%AB%E7%9A%84DG.png"></p><p>本地，同城，异地，多种容灾，创建很多standby</p><p><em><strong>DataGuard的保护模式</strong></em></p><p><strong>最大保护模式</strong></p><p>最安全的模式，这种模式主备库之间数据是同步的。即主库提交的同时，备库会做相应的恢复。最大限度的保证了<a href="http://baike.baidu.com/view/702953.htm">数据完整性</a>。不允许数据的丢失。</p><p>如果主备库之间网络，或者备库出现问题会直接影响主库操作。导致主库宕机。因此一般不会选择最大保护模式。</p><p><strong>最大性能模式</strong></p><p>这种模式保证主库性能最大化，主备库之间数据是<a href="http://baike.baidu.com/view/817251.htm">异步传输</a>的。即，主备日志归档以后才会传输到备用库，在备库上使用归档日志文件做恢复操作。</p><p><strong>最高可用性模式</strong></p><p>这种模式和”最大保护”基本上差不多。正常情况下，主备库之间是同步的。</p><p>当网络或者备库出现问题时，不会影响到主库的宕机，主库会自动转换到”最大性能”模式，等待备库可用时，将归档传输到备库做恢复。</p><p>可以把这种模式理解为”最大保护”和”最大性能”两种模式的中间体。</p><p><em><strong>如何选择DG的保护模式</strong></em></p><p>影响DG保护模式选择的最大因素就是网络质量，如果网络质量比较好，比如本地的局域网，则可以选择最高可用模式。如果网络质量一般，则选择最大性能模式。一般不会选择最大保护模式，最大保护模式损害了系统的可用性。</p><p><em><strong>DG中standby数据库的类型</strong></em></p><p><strong>物理standby数据库：physical standby databases</strong></p><p>物理Standby与Primary数据库完全一模一样，在物理数据库磁盘上具有主库相同架构的块，<strong>通过REDO应用（属于块对块的应用）来维护物理Standby数据库</strong>。</p><p><strong>逻辑standby数据库：logical standby databases</strong></p><p>逻辑Standby也要通过Primary数据库（或其备份，或其复制库，如物理Standby）创建，因此在创建之初与物理Standby数据库类似。不过由于<strong>逻辑Standby通过SQL应用的方式应用REDO数据</strong>，因此逻辑Standby的物理文件结构，甚至数据的逻辑结构都可以与Primary不一致。</p><p><em><strong>附：</strong></em></p><p>关于Oracle11gR2 之  DataGuard_03   三种保护模式的探索可见下面这篇blog</p><p><a href="https://blog.csdn.net/wuweilong/article/details/9989785">探索Oracle11gR2 之  DataGuard_03   三种保护模式</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>RAC</tag>
      
      <tag>DG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库备份和恢复</title>
    <link href="/2016/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/"/>
    <url>/2016/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>commit –lgwr</p><ul><li>事务相关的操作，保证事务的安全</li></ul><p>checkpoint –dbwr</p><ul><li>数据相关的操作，保证数据的安全</li></ul><h2 id="实例的恢复-crash-recovery"><a href="#实例的恢复-crash-recovery" class="headerlink" title="实例的恢复 crash recovery"></a><strong>实例的恢复 crash recovery</strong></h2><p>什么时候发生oracle实例恢复</p><ul><li>shutdown abort</li><li>数据库异常down掉（机器死机，掉电）</li></ul><p>###从Redo的什么位置开始恢复？</p><p>在某一点，在这一点之前的所有数据，Oracle都已经成功的写入到了磁盘上。</p><p>实例恢复是一个自动的过程，不需要人工干预</p><p><strong>实例恢复发生在那个阶段？</strong></p><p>–sql&gt;startup nomount（读取spfle) ，没有实例恢复。</p><p>–sql&gt;alter database mount (读取控制文件），没有实例恢复。</p><p>–sql&gt;alter database open （检查控制文件，数据文件头），发生实例恢复。</p><ul><li>如果直接startup命令，会经过启动装载打开三个步骤。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; shutdown <span class="hljs-keyword">abort</span>;<br>ORACLE 例程已经关闭。<br><span class="hljs-keyword">SQL</span>&gt; startup;<br>ORACLE 例程已经启动。<br><br>Total <span class="hljs-keyword">System</span> <span class="hljs-keyword">Global</span> Area <span class="hljs-number">3307048960</span> bytes<br>Fixed Size                  <span class="hljs-number">2180264</span> bytes<br>Variable Size            <span class="hljs-number">1828719448</span> bytes<br><span class="hljs-keyword">Database</span> <span class="hljs-keyword">Buffers</span>         <span class="hljs-number">1459617792</span> bytes<br>Redo <span class="hljs-keyword">Buffers</span>               <span class="hljs-number">16531456</span> bytes<br>数据库装载完毕。<br>数据库已经打开。<br><span class="hljs-keyword">SQL</span>&gt; shutdown <span class="hljs-keyword">abort</span>;<br>ORACLE 例程已经关闭。<br><span class="hljs-keyword">SQL</span>&gt; startup nomount;<br>ORACLE 例程已经启动。<br><br>Total <span class="hljs-keyword">System</span> <span class="hljs-keyword">Global</span> Area <span class="hljs-number">3307048960</span> bytes<br>Fixed Size                  <span class="hljs-number">2180264</span> bytes<br>Variable Size            <span class="hljs-number">1828719448</span> bytes<br><span class="hljs-keyword">Database</span> <span class="hljs-keyword">Buffers</span>         <span class="hljs-number">1459617792</span> bytes<br>Redo <span class="hljs-keyword">Buffers</span>               <span class="hljs-number">16531456</span> bytes<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> mount;<br><br>数据库已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">open</span>;<br><br>数据库已更改。<br></code></pre></td></tr></table></figure><blockquote><p>oracle在打开数据库时（alter database open），会检查每个文件头上的信息（SCN），并同控制文件中相应的信息（SCN）比较，如果不一致就进行实例恢复。</p></blockquote><p>实例恢复的过程</p><ul><li>前滚rolling forward</li></ul><blockquote><p>读取状态为current和active状态的日志（redo log），将发生crash时，没有来得及写磁盘的数据块，使用redo信息来恢复。</p></blockquote><ul><li>打开数据库alter database open</li><li>回滚rolling back</li></ul><blockquote><p>将没有提交的事务进行回滚</p></blockquote><span id="more"></span><h2 id="介质恢复"><a href="#介质恢复" class="headerlink" title="介质恢复"></a><strong>介质恢复</strong></h2><p>当发生以下情况时，实例恢复无效，需要进行介质恢复：</p><ul><li>数据文件丢失，损坏。</li><li>在线日志文件(onlineredo)丢失，损坏。</li><li>数据文件太旧(比如从一个备份集中恢复过来的文件。)</li><li>文件太新（比如，其它所有的文件都是从备份中恢复过来的）</li></ul><blockquote><p>数据损坏时基本都要进行介质恢复</p></blockquote><h2 id="Oracle的备份方式"><a href="#Oracle的备份方式" class="headerlink" title="Oracle的备份方式"></a>Oracle的备份方式</h2><h3 id="Rman-物理备份）–Recovery-Manager"><a href="#Rman-物理备份）–Recovery-Manager" class="headerlink" title="Rman(物理备份）–Recovery Manager"></a>Rman(物理备份）–Recovery Manager</h3><p>备份和还原数据库文件、归档日志和控制文件。它也可以用来执行完全或不完全的数据库恢复。</p><blockquote><p>Rman比较慢，相同情况下一般使用Dataguard</p></blockquote><p>Rman是是oracle数据库自带的一个备份工具，用Rman备份的步骤如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">C:\Users\clg&gt;sqlplus / <span class="hljs-keyword">as</span> sysdba<br><br><span class="hljs-keyword">SQL</span>*Plus: <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> Production <span class="hljs-keyword">on</span> 星期二 <span class="hljs-number">3</span>月 <span class="hljs-number">8</span> <span class="hljs-number">17</span>:<span class="hljs-number">33</span>:<span class="hljs-number">37</span> <span class="hljs-number">2016</span><br><br>Copyright (c) <span class="hljs-number">1982</span>, <span class="hljs-number">2010</span>, Oracle.  <span class="hljs-keyword">All</span> rights reserved.<br><br><br>连接到:<br>Oracle <span class="hljs-keyword">Database</span> <span class="hljs-number">11</span>g Enterprise Edition <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> - <span class="hljs-number">64</span>bit Production<br><span class="hljs-keyword">With</span> the Partitioning, OLAP, Data Mining <span class="hljs-keyword">and</span> <span class="hljs-type">Real</span> Application Testing <span class="hljs-keyword">options</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">open</span>;<br><br>数据库已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; quit;<br>从 Oracle <span class="hljs-keyword">Database</span> <span class="hljs-number">11</span>g Enterprise Edition <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> - <span class="hljs-number">64</span>bit Production<br><span class="hljs-keyword">With</span> the Partitioning, OLAP, Data Mining <span class="hljs-keyword">and</span> <span class="hljs-type">Real</span> Application Testing <span class="hljs-keyword">options</span> 断<br>开<br><br>C:\Users\clg&gt;rman target /<br><br>恢复管理器: <span class="hljs-keyword">Release</span> <span class="hljs-number">11.2</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> - Production <span class="hljs-keyword">on</span> 星期二 <span class="hljs-number">3</span>月 <span class="hljs-number">8</span> <span class="hljs-number">17</span>:<span class="hljs-number">34</span>:<span class="hljs-number">10</span> <span class="hljs-number">2016</span><br><br>Copyright (c) <span class="hljs-number">1982</span>, <span class="hljs-number">2009</span>, Oracle <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its affiliates.  <span class="hljs-keyword">All</span> rights reserved.<br><br>连接到目标数据库: ORCL (DBID=<span class="hljs-number">1433387646</span>)<br><br>RMAN&gt; backup <span class="hljs-keyword">database</span>;<br><br>启动 backup 于 <span class="hljs-number">08</span><span class="hljs-number">-3</span>月 <span class="hljs-number">-16</span><br>使用目标数据库控制文件替代恢复目录<br>分配的通道: ORA_DISK_1<br>通道 ORA_DISK_1: SID=<span class="hljs-number">134</span> 设备类型=DISK<br>通道 ORA_DISK_1: 正在启动全部数据文件备份集<br>通道 ORA_DISK_1: 正在指定备份集内的数据文件<br>输入数据文件: 文件号=<span class="hljs-number">00001</span> 名称=D:\APP\CLG\ORADATA\ORCL\SYSTEM01.DBF<br>输入数据文件: 文件号=<span class="hljs-number">00002</span> 名称=D:\APP\CLG\ORADATA\ORCL\SYSAUX01.DBF<br>输入数据文件: 文件号=<span class="hljs-number">00003</span> 名称=D:\APP\CLG\ORADATA\ORCL\UNDOTBS01.DBF<br>输入数据文件: 文件号=<span class="hljs-number">00005</span> 名称=D:\APP\CLG\ORADATA\ORCL\EXAMPLE01.DBF<br>输入数据文件: 文件号=<span class="hljs-number">00004</span> 名称=D:\APP\CLG\ORADATA\ORCL\USERS01.DBF<br>通道 ORA_DISK_1: 正在启动段 <span class="hljs-number">1</span> 于 <span class="hljs-number">08</span><span class="hljs-number">-3</span>月 <span class="hljs-number">-16</span><br>通道 ORA_DISK_1: 已完成段 <span class="hljs-number">1</span> 于 <span class="hljs-number">08</span><span class="hljs-number">-3</span>月 <span class="hljs-number">-16</span><br>段句柄=D:\APP\CLG\FLASH_RECOVERY_AREA\ORCL\BACKUPSET\<span class="hljs-number">2016</span>_03_08\O1_MF_NNNDF_TAG2<br><span class="hljs-number">0160308</span>T173510_CFX76H7L_.BKP 标记=TAG20160308T173510 注释=<span class="hljs-keyword">NONE</span><br>通道 ORA_DISK_1: 备份集已完成, 经过时间:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">35</span><br>通道 ORA_DISK_1: 正在启动全部数据文件备份集<br>通道 ORA_DISK_1: 正在指定备份集内的数据文件<br>备份集内包括当前控制文件<br>备份集内包括当前的 SPFILE<br>通道 ORA_DISK_1: 正在启动段 <span class="hljs-number">1</span> 于 <span class="hljs-number">08</span><span class="hljs-number">-3</span>月 <span class="hljs-number">-16</span><br>通道 ORA_DISK_1: 已完成段 <span class="hljs-number">1</span> 于 <span class="hljs-number">08</span><span class="hljs-number">-3</span>月 <span class="hljs-number">-16</span><br>段句柄=D:\APP\CLG\FLASH_RECOVERY_AREA\ORCL\BACKUPSET\<span class="hljs-number">2016</span>_03_08\O1_MF_NCSNF_TAG2<br><span class="hljs-number">0160308</span>T173510_CFX77M5Q_.BKP 标记=TAG20160308T173510 注释=<span class="hljs-keyword">NONE</span><br>通道 ORA_DISK_1: 备份集已完成, 经过时间:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span><br>完成 backup 于 <span class="hljs-number">08</span><span class="hljs-number">-3</span>月 <span class="hljs-number">-16</span><br></code></pre></td></tr></table></figure><p>如果这是备份表空间，可以用一下语句实现</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">SQL&gt; select tablespace_name from dba_tablespaces;<br><br><span class="hljs-section">TABLESPACE_NAME</span><br><span class="hljs-section">------------------------------</span><br>SYSTEM<br>SYSAUX<br>UNDOTBS1<br>TEMP<br>USERS<br>EXAMPLE<br><br>已选择6行。<br>SQL&gt; quit;<br>C:\Users\clg&gt;rman target /<br>RMAN&gt;<br><br>RMAN&gt; backup tablespace users;<br></code></pre></td></tr></table></figure><p>这样就可以备份制定的表空间。</p><h3 id="exp-expdp-逻辑备份）"><a href="#exp-expdp-逻辑备份）" class="headerlink" title="exp,expdp(逻辑备份）"></a>exp,expdp(逻辑备份）</h3><p>–用户，数据库对象（表，分区…）</p><h3 id="只读表空间-传递表空间"><a href="#只读表空间-传递表空间" class="headerlink" title="只读表空间+传递表空间"></a>只读表空间+传递表空间</h3><p>OLAP（Online Analytical Process）数据库的一种备份方案</p><h3 id="Dataguard–重点"><a href="#Dataguard–重点" class="headerlink" title="Dataguard–重点"></a>Dataguard–重点</h3><p>最简单的备份方案</p><ul><li>备份自动</li><li>故障恢复时间非常短</li></ul><p>缺点和限制</p><ul><li>需要数据库归档（OLAP类型的数据库不适宜归档）</li><li>对于海量数据不合适</li></ul><h3 id="Oracle的闪回技术–flashback"><a href="#Oracle的闪回技术–flashback" class="headerlink" title="Oracle的闪回技术–flashback"></a>Oracle的闪回技术–flashback</h3><h4 id="数据库的闪回"><a href="#数据库的闪回" class="headerlink" title="数据库的闪回"></a>数据库的闪回</h4><p>默认数据库的闪回是关闭的。</p><p>可以用以下命令查询看是否是开启的</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> flashback_on <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">database</span>;<br></code></pre></td></tr></table></figure><p>可以用以下命令开启，建议开启flashback</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> flashback <span class="hljs-keyword">on</span>;<br></code></pre></td></tr></table></figure><p><strong>基于SCN的闪回</strong></p><p>一般不太容易知道SCN，不易获得SCN</p><p><strong>基于时间的闪回</strong></p><p>数据库闪回到具体时间</p><h4 id="表的闪回"><a href="#表的闪回" class="headerlink" title="表的闪回"></a>表的闪回</h4><p>system用户删除的table不进recyclebin,普通用户删除的table会进入recyclebin。具体如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">USER</span> 为 &quot;SYS&quot;<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t1;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> recyclebin;<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> RECYCLEBIN;<br><br>未选定行<br><br><span class="hljs-comment">/*可见回收站中并没有t1表*/</span><br><br><span class="hljs-keyword">SQL</span>&gt; conn liuyifei/a4852396<br>已连接。<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t1;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> recyclebin;<br>ORIGINAL <span class="hljs-type">NAME</span>    RECYCLEBIN <span class="hljs-type">NAME</span>                <span class="hljs-keyword">OBJECT</span> <span class="hljs-keyword">TYPE</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-type">TIME</span><br><span class="hljs-comment">---------------- ------------------------------ ------------ -------------------</span><br><br>T1               BIN$EqiCMfIYSHGQW4KrIX0Alg==<span class="hljs-meta">$0</span> <span class="hljs-keyword">TABLE</span>        <span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-08</span>:<span class="hljs-number">19</span>:<span class="hljs-number">20</span>:<span class="hljs-number">23</span><br><br><span class="hljs-keyword">SQL</span>&gt; flashback <span class="hljs-keyword">table</span> t1 <span class="hljs-keyword">to</span> <span class="hljs-keyword">before</span> <span class="hljs-keyword">drop</span>;<br><br>闪回完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">desc</span> t1;<br> 名称                                      是否为空? 类型<br> <span class="hljs-comment">----------------------------------------- -------- ----------------------------</span><br><br> ID                                                 NUMBER(<span class="hljs-number">38</span>)<br></code></pre></td></tr></table></figure><p>彻底删除表，不进入回收站的办法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> t1 purge;<br></code></pre></td></tr></table></figure><p>关于回收站的资料如下：</p><p><a href="http://www.jb51.net/article/34733.htm">http://www.jb51.net/article/34733.htm</a></p><h4 id="DML操作的闪回"><a href="#DML操作的闪回" class="headerlink" title="DML操作的闪回"></a>DML操作的闪回</h4><h4 id="事务的闪回"><a href="#事务的闪回" class="headerlink" title="事务的闪回"></a>事务的闪回</h4><h4 id="版本的闪回"><a href="#版本的闪回" class="headerlink" title="版本的闪回"></a>版本的闪回</h4><p>上面三种闪回后面在进行补充</p><p><em><strong>以下是关于归档模式和非归档模式的知识：</strong></em></p><p><strong>归档模式转换为非归档模式：</strong></p><p>查看数据库是否是归档模式：两种方式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,log_mode <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">database</span>;<br><br><span class="hljs-type">NAME</span>      LOG_MODE<br><span class="hljs-comment">--------- ------------</span><br>ORCL      NOARCHIVELOG<br><br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>数据库日志模式             非存档模式<br>自动存档             禁用<br>存档终点            USE_DB_RECOVERY_FILE_DEST<br>最早的联机日志序列     <span class="hljs-number">28</span><br>当前日志序列           <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>非归档模式转换为归档模式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt;SHUTDOWN NORMAL/<span class="hljs-keyword">IMMEDIATE</span>;   先down下数据  <br><span class="hljs-keyword">SQL</span>&gt;<span class="hljs-keyword">START</span> MOUNT;                                启动数据库实例到mount状态，但不要打开  <br><span class="hljs-keyword">SQL</span>&gt;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> ARCHIVELOG;      设置数据库为归档日志模式  <br><span class="hljs-keyword">SQL</span>&gt;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">OPEN</span>;                  打开数据库  <br><span class="hljs-keyword">SQL</span>&gt;archive <span class="hljs-keyword">log</span> list;                  确认数据库现在处于归档日志模式  <br></code></pre></td></tr></table></figure><p>一般设置数据库为归档日志模式时会出现如下错误：</p><p><em><strong>ORA-00265: 要求实例恢复, 无法设置 ARCHIVELOG 模式</strong></em></p><p>这是我们可以按照如下步骤解决：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> archivelog;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> archivelog<br>*<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-00265</span>: 要求实例恢复, 无法设置 ARCHIVELOG 模式<br><br><br><span class="hljs-keyword">SQL</span>&gt; shutdown <span class="hljs-keyword">immediate</span>;<br>ORA<span class="hljs-number">-01109</span>: 数据库未打开<br><br><br>已经卸载数据库。<br>ORACLE 例程已经关闭。<br><span class="hljs-keyword">SQL</span>&gt; startup <span class="hljs-keyword">restrict</span>;<br>ORACLE 例程已经启动。<br><br>Total <span class="hljs-keyword">System</span> <span class="hljs-keyword">Global</span> Area <span class="hljs-number">3307048960</span> bytes<br>Fixed Size                  <span class="hljs-number">2180264</span> bytes<br>Variable Size            <span class="hljs-number">1828719448</span> bytes<br><span class="hljs-keyword">Database</span> <span class="hljs-keyword">Buffers</span>         <span class="hljs-number">1459617792</span> bytes<br>Redo <span class="hljs-keyword">Buffers</span>               <span class="hljs-number">16531456</span> bytes<br>数据库装载完毕。<br>数据库已经打开。<br><span class="hljs-keyword">SQL</span>&gt; shutdown <span class="hljs-keyword">immediate</span>;<br>数据库已经关闭。<br>已经卸载数据库。<br>ORACLE 例程已经关闭。<br><span class="hljs-keyword">SQL</span>&gt; startup mount;<br>ORACLE 例程已经启动。<br><br>Total <span class="hljs-keyword">System</span> <span class="hljs-keyword">Global</span> Area <span class="hljs-number">3307048960</span> bytes<br>Fixed Size                  <span class="hljs-number">2180264</span> bytes<br>Variable Size            <span class="hljs-number">1828719448</span> bytes<br><span class="hljs-keyword">Database</span> <span class="hljs-keyword">Buffers</span>         <span class="hljs-number">1459617792</span> bytes<br>Redo <span class="hljs-keyword">Buffers</span>               <span class="hljs-number">16531456</span> bytes<br>数据库装载完毕。<br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>数据库日志模式             非存档模式<br>自动存档             禁用<br>存档终点            USE_DB_RECOVERY_FILE_DEST<br>最早的联机日志序列     <span class="hljs-number">30</span><br>当前日志序列           <span class="hljs-number">32</span><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> archivelog;<br><br>数据库已更改。<br><br><span class="hljs-keyword">SQL</span>&gt; archive <span class="hljs-keyword">log</span> list;<br>数据库日志模式            存档模式<br>自动存档             启用<br>存档终点            USE_DB_RECOVERY_FILE_DEST<br>最早的联机日志序列     <span class="hljs-number">30</span><br>下一个存档日志序列   <span class="hljs-number">32</span><br>当前日志序列           <span class="hljs-number">32</span><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">open</span>;<br><br>数据库已更改。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>备份</tag>
      
      <tag>恢复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据字典</title>
    <link href="/2016/03/16/oracle%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/"/>
    <url>/2016/03/16/oracle%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<p><strong>数据字典的组成——两类视图</strong></p><p>静态数据字典：描述数据库的信息</p><ul><li>这些数据经常是静止的。</li></ul><p>动态数据字典：描述实例的信息</p><ul><li>反映数据局运行的状态，反映数据库实例运行的信息，这些信息经常是变化的。</li></ul><p><strong>users</strong></p><p>ALL_USERS–lists all users of the database visible to the current user. This view does not describe the users </p><ul><li>描述不是用户自己，而是当前用户可见（也就是有权访问）的数据库的所有的用户。</li></ul><p>DBA_USERS–describes all users of the database</p><p>USER_USERS–describes the current user</p><p><strong>数据字典视图</strong></p><p>查询所有的数据字典视图</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dict;<br></code></pre></td></tr></table></figure><p>数据字典的基表</p><ul><li>是保存数据的真正的表</li><li>数据字典视图的数据来自于基表</li><li>Oracle不对基表做支持和解释</li></ul><p><strong>DBA常用的一些数据字典视图——静态视图</strong></p><p><strong>user_tables</strong></p><p>内容和ALL_TABLES类似。</p><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14237/statviews_2105.htm#REFRN20286">https://docs.oracle.com/cd/B19306_01&#x2F;server.102&#x2F;b14237&#x2F;statviews_2105.htm#REFRN20286</a></p><p><strong>user_tab_partitions</strong></p><p>内容和ALL_TAB_PARTITIONS类似</p><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14237/statviews_2098.htm#i1591118">https://docs.oracle.com/cd/B19306_01&#x2F;server.102&#x2F;b14237&#x2F;statviews_2098.htm#i1591118</a></p><span id="more"></span><p>附：</p><p><a href="http://www.360doc.com/content/14/1114/11/17440478_425032377.shtml">Oracle数据字典详解</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>数据字典</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复杂一点的SQL语句</title>
    <link href="/2016/02/19/%E5%A4%8D%E6%9D%82%E4%B8%80%E7%82%B9%E7%9A%84sql%E8%AF%AD%E5%8F%A5/"/>
    <url>/2016/02/19/%E5%A4%8D%E6%9D%82%E4%B8%80%E7%82%B9%E7%9A%84sql%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="DDL：对表或者表的属性进行了改变"><a href="#DDL：对表或者表的属性进行了改变" class="headerlink" title="DDL：对表或者表的属性进行了改变"></a>DDL：对表或者表的属性进行了改变</h2><h3 id="create：创建表创建用户创建视图"><a href="#create：创建表创建用户创建视图" class="headerlink" title="create：创建表创建用户创建视图"></a>create：创建表创建用户创建视图</h3><p>创建表</p><p>create table student(id int,score int) ;</p><p>student后面与括号之间可以有空格可以没有</p><p>创建用户</p><p>create user liuyifei identified by 4852396;</p><p>drop：删除整个表、删除指定的用户、删除指定的存储空间</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span>;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> user_name;<br><br><span class="hljs-comment">--删除空的表空间，但是不包含物理文件</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">tablespace</span> tablespace_name;<br><span class="hljs-comment">--删除非空表空间，但是不包含物理文件</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">tablespace</span> tablespace_name including contents;<br><span class="hljs-comment">--删除空表空间，包含物理文件</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">tablespace</span> tablespace_name including datafiles;<br><span class="hljs-comment">--删除非空表空间，包含物理文件</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">tablespace</span> tablespace_name including contents <span class="hljs-keyword">and</span> datafiles;<br><span class="hljs-comment">--如果其他表空间中的表有外键等约束关联到了本表空间中的表的字段，就要加上CASCADE CONSTRAINTS</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">tablespace</span> tablespace_name including contents <span class="hljs-keyword">and</span> datafiles <span class="hljs-keyword">CASCADE</span> CONSTRAINTS;<br></code></pre></td></tr></table></figure><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>删除表中的所有数据，但是表还是存在的。和drop的先后参见如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> st1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> st1;<br><br>表被截断。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> st1;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> st1(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> st1;<br><br>表已删除。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> st1;<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> st1<br>               <span class="hljs-operator">*</span><br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-00942</span>: 表或视图不存在<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="alter：增加删除修改字段"><a href="#alter：增加删除修改字段" class="headerlink" title="alter：增加删除修改字段"></a>alter：增加删除修改字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> s1(id <span class="hljs-type">int</span>,a <span class="hljs-type">int</span>,score <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s1 <span class="hljs-keyword">add</span> name varchar2(<span class="hljs-number">10</span>);<br><br>表已更改。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> s1;<br> 名称                                      是否为空? 类型<br> <span class="hljs-comment">----------------------------------------- -------- ----------------------------</span><br><br> ID                                                 NUMBER(<span class="hljs-number">38</span>)<br> A                                                  NUMBER(<span class="hljs-number">38</span>)<br> SCORE                                              NUMBER(<span class="hljs-number">38</span>)<br> NAME                                               VARCHAR2(<span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s1 <span class="hljs-keyword">drop</span> a;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s1 <span class="hljs-keyword">drop</span> a<br>                    <span class="hljs-operator">*</span><br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-00905</span>: 缺失关键字<br><br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s1 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> a;<br><br>表已更改。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s1 rename <span class="hljs-keyword">to</span> s2;<br><br>表已更改。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> s2;<br> 名称                                      是否为空? 类型<br> <span class="hljs-comment">----------------------------------------- -------- ----------------------------</span><br><br> ID                                                 NUMBER(<span class="hljs-number">38</span>)<br> SCORE                                              NUMBER(<span class="hljs-number">38</span>)<br> NAME                                               VARCHAR2(<span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> s1;<br>ERROR:<br>ORA<span class="hljs-number">-04043</span>: 对象 s1 不存在<br><br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s2 rename <span class="hljs-keyword">column</span> name <span class="hljs-keyword">to</span> sname;<br><br>表已更改。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> s2;<br> 名称                                      是否为空? 类型<br> <span class="hljs-comment">----------------------------------------- -------- ----------------------------</span><br><br> ID                                                 NUMBER(<span class="hljs-number">38</span>)<br> SCORE                                              NUMBER(<span class="hljs-number">38</span>)<br> SNAME                                              VARCHAR2(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="DML：只对表的数据改变，没有改变表的属性"><a href="#DML：只对表的数据改变，没有改变表的属性" class="headerlink" title="DML：只对表的数据改变，没有改变表的属性"></a>DML：只对表的数据改变，没有改变表的属性</h2><p>DML操作之后要进行commit操作才会更改数据库。</p><h3 id="select：查询"><a href="#select：查询" class="headerlink" title="select：查询"></a>select：查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> score,sname <span class="hljs-keyword">from</span> s2 <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>;<br><br>     SCORE SNAME<br><span class="hljs-comment">---------- ----------</span><br>        <span class="hljs-number">99</span> ayun<br></code></pre></td></tr></table></figure><h3 id="insert：插入记录"><a href="#insert：插入记录" class="headerlink" title="insert：插入记录"></a>insert：插入记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> s2 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;aming&#x27;</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> s2 <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-number">99</span>,<span class="hljs-string">&#x27;ayun&#x27;</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> s2 <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-number">79</span>,<span class="hljs-string">&#x27;ahe&#x27;</span>);<br><br>已创建 <span class="hljs-number">1</span> 行。<br></code></pre></td></tr></table></figure><h3 id="delete：删除记录，不改变表的属性。"><a href="#delete：删除记录，不改变表的属性。" class="headerlink" title="delete：删除记录，不改变表的属性。"></a>delete：删除记录，不改变表的属性。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> s2 <span class="hljs-keyword">where</span> score<span class="hljs-operator">=</span><span class="hljs-string">&#x27;100&#x27;</span>;<br><br>已删除 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> s2;<br><br>        ID      SCORE SNAME<br><span class="hljs-comment">---------- ---------- ----------</span><br>         <span class="hljs-number">2</span>         <span class="hljs-number">99</span> ayun<br>         <span class="hljs-number">3</span>         <span class="hljs-number">79</span> ahe<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> s2;<br><br>已删除<span class="hljs-number">2</span>行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> s2;<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> s2;<br> 名称                                      是否为空? 类型<br> <span class="hljs-comment">----------------------------------------- -------- ----------------------------</span><br><br> ID                                                 NUMBER(<span class="hljs-number">38</span>)<br> SCORE                                              NUMBER(<span class="hljs-number">38</span>)<br> SNAME                                              VARCHAR2(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="update：更新记录"><a href="#update：更新记录" class="headerlink" title="update：更新记录"></a>update：更新记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> s2 <span class="hljs-keyword">set</span> score<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ahe&#x27;</span>;<br><br>已更新 <span class="hljs-number">1</span> 行。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> s2;<br><br>        ID      SCORE SNAME<br><span class="hljs-comment">---------- ---------- ----------</span><br>         <span class="hljs-number">1</span>        <span class="hljs-number">100</span> aming<br>         <span class="hljs-number">2</span>         <span class="hljs-number">99</span> ayun<br>         <span class="hljs-number">3</span>        <span class="hljs-number">100</span> ahe<br></code></pre></td></tr></table></figure><h2 id="DCL：只改变属性"><a href="#DCL：只改变属性" class="headerlink" title="DCL：只改变属性"></a>DCL：只改变属性</h2><p>grant：授权</p><p>revoke：收回权限</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">grant语法：GRANT privilege[, ...] ON object[, ...] TO &#123; PUBLIC | GROUP group| username&#125;<br><br>权限privilege：<br>    <span class="hljs-keyword">select</span>：查询<br>    <span class="hljs-keyword">insert</span>：插入<br>    <span class="hljs-keyword">update</span>：更新<br>    <span class="hljs-keyword">delete</span>：删除<br>    rule：<br>    <span class="hljs-keyword">all</span>：所有<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> tablename <span class="hljs-keyword">to</span> <span class="hljs-keyword">public</span>;<br>给所有用户授予查询、插入、更新tablename表的权限<br>revoke <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> tablename <span class="hljs-keyword">from</span> <span class="hljs-keyword">public</span>;//收回所有用户查询、插入、更新tablename表的权限<br><br>object:<br>    table：表<br>    view：视图<br>    sequence：序列<br>    <span class="hljs-keyword">index</span>：索引<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> tablename,viewname,sequencename,indexname <span class="hljs-keyword">to</span> <span class="hljs-keyword">public</span>;<br><br>public:对所有用户开放权限<br>GROUP groupname:对该组所有用户开放权限<br>username：对指定用户开放权限<br></code></pre></td></tr></table></figure><p>给用户授权，connect权限和resource权限。</p><p>不给新建用户授予<em>connect</em>权限，新建用户无法通过SID或SERVICE_NAME连接数据库实例。</p><p>不给新建用户授予resource权限，新建用户无法创建表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> liuyifei identified <span class="hljs-keyword">by</span> a4852396;<br><br>用户已创建。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn liuyifei<span class="hljs-operator">/</span>a4852396;<br>ERROR:<br>ORA<span class="hljs-number">-01045</span>: <span class="hljs-keyword">user</span> LIUYIFEI lacks <span class="hljs-keyword">CREATE</span> SESSION privilege; logon denied<br><br><br>警告: 您不再连接到 ORACLE。<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">USER</span> 为 &quot;&quot;<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn <span class="hljs-operator">/</span> <span class="hljs-keyword">as</span> sysdba;<br>已连接。<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">USER</span> 为 &quot;SYS&quot;<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> liuyifei;<br><br>授权成功。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn liuyifei<span class="hljs-operator">/</span>a4852396;<br>已连接。<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">USER</span> 为 &quot;LIUYIFEI&quot;<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(id <span class="hljs-type">int</span>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(id <span class="hljs-type">int</span>)<br><span class="hljs-operator">*</span><br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-01031</span>: 权限不足<br><br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn <span class="hljs-operator">/</span> <span class="hljs-keyword">as</span> sysdba;<br>已连接。<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">USER</span> 为 &quot;SYS&quot;<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">grant</span> resource <span class="hljs-keyword">to</span> liuyifei;<br><br>授权成功。<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn liuyifei<span class="hljs-operator">/</span>a4852396;<br>已连接。<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br></code></pre></td></tr></table></figure><p>查看指定用户有哪些系统权限</p><p>这项操作只可以是dba查看，普通用户是不能查看的，即使是查看自己的。下面的代码已经验证了这个问题。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_tab_privs <span class="hljs-keyword">where</span> grantee=uper(<span class="hljs-string">&#x27;liuyifei&#x27;</span>);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_tab_privs <span class="hljs-keyword">where</span> grantee=uper(<span class="hljs-string">&#x27;liuyifei&#x27;</span>)<br>              *<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-00942</span>: 表或视图不存在<br><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_roles_privs <span class="hljs-keyword">where</span> grantee=uper(<span class="hljs-string">&#x27;liuyifei&#x27;</span>);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_roles_privs <span class="hljs-keyword">where</span> grantee=uper(<span class="hljs-string">&#x27;liuyifei&#x27;</span>)<br>              *<br>第 <span class="hljs-number">1</span> 行出现错误:<br>ORA<span class="hljs-number">-00942</span>: 表或视图不存在<br><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">USER</span> 为 &quot;LIUYIFEI&quot;<br><span class="hljs-keyword">SQL</span>&gt; conn / <span class="hljs-keyword">as</span> sysdba;<br>已连接。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_tab_privs <span class="hljs-keyword">where</span> grantee=upper(<span class="hljs-string">&#x27;liuyifei&#x27;</span>);<br><br>未选定行<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_role_privs <span class="hljs-keyword">where</span> grantee=upper(<span class="hljs-string">&#x27;liuyifei&#x27;</span>);<br><br>GRANTEE                        GRANTED_ROLE                   ADM DEF<br><span class="hljs-comment">------------------------------ ------------------------------ --- ---</span><br>LIUYIFEI                       <span class="hljs-keyword">CONNECT</span>                        <span class="hljs-keyword">NO</span>  YES<br>LIUYIFEI                       RESOURCE                       <span class="hljs-keyword">NO</span>  YES<br></code></pre></td></tr></table></figure><p><strong>附录1：</strong></p><p>truncate和delete的区别</p><p>truncate会收回表空间，delete不会收回表空间</p><p><strong>附录2：</strong></p><p>sys用户和system用户的区别：</p><p>SYS用户，缺省始终创建，且未被锁定，拥有数据字典及其关联的所有对象</p><p>SYSTEM用户，缺省始终创建，且未被锁定，可以访问数据库内的所有对象</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>plsql</title>
    <link href="/2016/02/19/plsql/"/>
    <url>/2016/02/19/plsql/</url>
    
    <content type="html"><![CDATA[<p><strong>PL&#x2F;SQL</strong></p><p>PL&#x2F;SQL也是一种程序语言，叫做<strong>过程化SQL语言</strong>（Procedural Language&#x2F;SQL）。PL&#x2F;SQL是Oracle数据库对SQL语句的扩展。在普通SQL语句的使用上增加了编程语言的特点，所以PL&#x2F;SQL就是把数据操作和查询语句组织在PL&#x2F;SQL代码的过程性单元中，通过逻辑判断、循环等操作实现复杂的功能或者计算的程序语言。</p><ul><li><p>SQL是一种集合性语言</p></li><li><p>PL&#x2F;SQL语句效率比SQL低，尽量用SQL。</p></li></ul><p><strong>PL&#x2F;SQL循环</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t(id <span class="hljs-type">int</span>);<br><br>表已创建。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">begin</span><br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.100</span> <span class="hljs-keyword">loop</span><br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(i);<br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br>  <span class="hljs-number">5</span>  <span class="hljs-keyword">end</span>;<br>  <span class="hljs-number">6</span>  /<br><br>PL/<span class="hljs-keyword">SQL</span> 过程已成功完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> t;<br><br>  COUNT(*)<br><span class="hljs-comment">----------</span><br>       <span class="hljs-number">100</span><br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">commit</span>;<br><br>提交完成。<br><br></code></pre></td></tr></table></figure><span id="more"></span><p><strong>PL&#x2F;SQL变量</strong></p><p>首先看看sql内置的数据类型</p><table><thead><tr><th align="center"><strong>数据类型</strong></th><th><strong>长度</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">CHAR(n BYTE&#x2F;CHAR)</td><td>默认1字节，n值最大为2000</td><td>末尾填充空格以达到指定长度，超过最大长度报错。默认指定长度为字节数，字符长度可以从1字节到四字节。</td></tr><tr><td align="center">NCHAR(n)</td><td>默认1字符，最大存储内容2000字节</td><td>末尾填充空格以达到指定长度，n为Unicode字符数。默认为1字节。</td></tr><tr><td align="center">NVARCHAR2(n)</td><td>最大长度必须指定，最大存储内容4000字节</td><td>变长类型。n为Unicode字符数</td></tr><tr><td align="center">VARCHAR2(n BYTE&#x2F;CHAR)</td><td>最大长度必须指定，至少为1字节或者1字符，n值最大为4000</td><td>变长类型。超过最大长度报错。默认存储的是长度为0的字符串。</td></tr><tr><td align="center">VARCHAR</td><td>同VARCHAR2</td><td>不建议使用</td></tr><tr><td align="center">NUMBER(p[,s])</td><td>1-22字节。P取值范围1到38。S取值范围-84到127</td><td>存储定点数，值的绝对值范围为1.0 x 10 -130至1.0 x 10 126。值大于等于1.0 x 10 126时报错。p为有意义的10进制位数，正值s为小数位数，负值s表示四舍五</td></tr><tr><td align="center">BINARY_FLOAT</td><td>5字节，其中有一长度字节。</td><td>32位单精度浮点数类型。符号位1位，指数位8位，尾数位23</td></tr><tr><td align="center">BINARY_DOUBLE</td><td>9字节，其中有一长度字节。</td><td>64位双精度浮点数类型。</td></tr></tbody></table><p>具体变量声明参见一下链接：<a href="https://blog.csdn.net/wang_zhou_jian/article/details/5693219">https://blog.csdn.net/wang_zhou_jian&#x2F;article&#x2F;details&#x2F;5693219</a></p><p>例、</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">declare</span><br>  <span class="hljs-number">2</span>  a number(<span class="hljs-number">10</span>):=<span class="hljs-number">10</span>;<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">begin</span><br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.a <span class="hljs-keyword">loop</span><br>  <span class="hljs-number">5</span>  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(i);<br>  <span class="hljs-number">6</span><br>  <span class="hljs-number">7</span>  <span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br>  <span class="hljs-number">8</span>  <span class="hljs-keyword">end</span>;<br>  <span class="hljs-number">9</span>  /<br><br>PL/<span class="hljs-keyword">SQL</span> 过程已成功完成。<br><br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t;<br><br>        ID<br><span class="hljs-comment">----------</span><br>         <span class="hljs-number">1</span><br>         <span class="hljs-number">2</span><br>         <span class="hljs-number">3</span><br>         <span class="hljs-number">4</span><br>         <span class="hljs-number">5</span><br>         <span class="hljs-number">6</span><br>         <span class="hljs-number">7</span><br>         <span class="hljs-number">8</span><br>         <span class="hljs-number">9</span><br>        <span class="hljs-number">10</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>plsql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据库的对象</title>
    <link href="/2016/02/19/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <url>/2016/02/19/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>查看oracle数据库中的所有对象</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> object_type <span class="hljs-keyword">from</span> dba_objects; <span class="hljs-comment">/*distinct??*/</span><br></code></pre></td></tr></table></figure><blockquote><p>dba_objects是存放数据库对象的一个视图</p></blockquote><p><strong>schema</strong>：数据库中一个对象的合集称为一个schema，它的名字和拥有这些对象的用户名相同。—比如scott用户和它下面的表统一称为一个schema</p><p>下面分别介绍一下Oracle数据库中的各个对象</p><h2 id="1、表"><a href="#1、表" class="headerlink" title="1、表"></a>1、表</h2><h3 id="表-段（segment）"><a href="#表-段（segment）" class="headerlink" title="表-段（segment）"></a>表-段（segment）</h3><p>段是表物理化的过程，在Oracle数据库里只要是分配了存储空间的对象，都可以叫做段。</p><p>CLOB是内置类型，它将字符大对象 (Character Large Object) 存储为数据库表某一行中的一个列值。</p><h3 id="表-分区（partition）"><a href="#表-分区（partition）" class="headerlink" title="表-分区（partition）"></a>表-分区（partition）</h3><p>便于对表的管理。</p><p>对分区的具体操作如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E8%A1%A8%E5%88%86%E5%8C%BA%E7%9A%84%E6%93%8D%E4%BD%9C.jpg"></p><span id="more"></span><h2 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h2><ul><li>目的–用于加快数据的访问</li><li>缺点：占据额外空间，影响DML操作的效率</li></ul><blockquote><p>对数据库增删改查的操作都需要在索引中多执行一次</p></blockquote><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>创建索引命令如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_student <span class="hljs-keyword">on</span> student(id);<br></code></pre></td></tr></table></figure><p>为student表的id列创建名为idx_student的索引</p><h3 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h3><p>按数据的组织方式分类</p><ul><li>B-tree B树索引 （有利于资源的节约利用）</li><li>Bitmap 位图索引 （对于重复次数很多的数据专门建立的索引）</li><li>Text    全文索引 （上述索引方式不好用时可以采用全文索引）</li></ul><h2 id="3、视图-view"><a href="#3、视图-view" class="headerlink" title="3、视图-view"></a>3、视图-view</h2><p>只是一句SQL代码，并不占用内存空间</p><p><strong>物化视图</strong></p><ul><li>将查询的结果集保存下来，用于后续的查询，提高查询效率</li><li>和普通的视图不同，物化视图是一个段对象，占用物理空间</li><li>提高查询效率，可以用于数据复制</li></ul><h2 id="4、sequence"><a href="#4、sequence" class="headerlink" title="4、sequence"></a>4、sequence</h2><ul><li>为业务提供一个序列号</li><li>唯一但不保证连续</li></ul><h2 id="5、同义词-SYNONYM"><a href="#5、同义词-SYNONYM" class="headerlink" title="5、同义词-SYNONYM"></a>5、同义词-SYNONYM</h2><ul><li>提供对象的一个别名</li><li>使不同用户下对象的引用变得方便</li><li><a href="https://www.cnblogs.com/kerrycode/archive/2012/12/19/2824963.html">https://www.cnblogs.com/kerrycode/archive/2012/12/19/2824963.html</a></li></ul><h2 id="6、数据库链-database-link"><a href="#6、数据库链-database-link" class="headerlink" title="6、数据库链-database link"></a>6、数据库链-database link</h2><ul><li>用于数据库之间的数据访问和操作</li><li>由oracle保证数据访问和操作的事务性</li><li><a href="https://www.cnblogs.com/sumsen/archive/2013/03/04/2943471.html">https://www.cnblogs.com/sumsen/archive/2013/03/04/2943471.html</a></li></ul><h2 id="7、表空间"><a href="#7、表空间" class="headerlink" title="7、表空间"></a>7、表空间</h2><p>逻辑存储对象</p><h2 id="8、重做日志-Redo"><a href="#8、重做日志-Redo" class="headerlink" title="8、重做日志-Redo"></a>8、重做日志-Redo</h2><p>见视频</p><h2 id="9、undo"><a href="#9、undo" class="headerlink" title="9、undo"></a>9、undo</h2><p>见视频</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据库的文件以及Oracle体系架构</title>
    <link href="/2016/02/06/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8Aoracle%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    <url>/2016/02/06/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8Aoracle%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="第一部分、Oracle数据库的文件"><a href="#第一部分、Oracle数据库的文件" class="headerlink" title="第一部分、Oracle数据库的文件"></a>第一部分、Oracle数据库的文件</h2><h3 id="1、参数文件-控制实例的行为的参数的集合"><a href="#1、参数文件-控制实例的行为的参数的集合" class="headerlink" title="1、参数文件:控制实例的行为的参数的集合"></a>1、参数文件:控制实例的行为的参数的集合</h3><h4 id="参数文件的作用"><a href="#参数文件的作用" class="headerlink" title="参数文件的作用"></a>参数文件的作用</h4><ul><li>设定数据库的限制</li><li>设置用户或者进程的限制</li><li>设定数据库资源的限制</li><li>调整系统的性能</li></ul><h4 id="主要的参数文件"><a href="#主要的参数文件" class="headerlink" title="主要的参数文件"></a>主要的参数文件</h4><p>SGA_TARGET：Oracle在SGA区（SGA是Oracle最重要的一块内存区域，存放各种各样的数据、SQL解析以及redo日志等等）需要分配多大的内存。</p><p>PGA_AGGREGATE_TARGET：此参数用来指定所有session总计可以使用最大PGA（程序全局区，会话分配的内存）内存。SGA和PGA基本就是oracle使用的内存的总和。</p><p>DB_CACHE_SIZE：数据块缓冲缓存区大小</p><p>DB_FILES：db_files参数限制了数据库数据文件总的个数,datafiles数目达到db_files指定后数据库不能添加新的数据文件</p><p>LOG_ARCHIVE_DEST_n：此参数可以设置最多10(n&#x3D;[1..10])个不同的归档路径</p><p>USER_DUMP_DEST：specifies the pathname for a directory where the server will write debugging trace files on behalf of a user process.</p><p>查看参数文件初始化值可以在oracle的官方文档上去看。在<a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/initparams002.htm#REFRN00101">Basic Initialization Parameters</a>就可以查看各项初始化参数了。每个基本参数点进去就有了详细的说明。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8F%82%E6%95%B0.jpg"></p><span id="more"></span><p>其中SGA_TARGET的初始化参数如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-OracleSGA_TARGET%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6.jpg"></p><p>查看当前数据库的参数文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">parameter</span> SGA; <span class="hljs-comment">/*显示和sga相关的参数*/</span><br><br><span class="hljs-keyword">select</span> name,<span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">parameter</span>; <span class="hljs-comment">/*显示所有的参数*/</span><br><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">parameter</span> spfile; <span class="hljs-comment">/*显示spfile参数文件*/</span><br></code></pre></td></tr></table></figure><p>spfile对应的SPFILEORCL.ORA是二进制文件，用show parameter spfile;可以显示该二进制文件的路径（D:\Oracle11g\Administrator\product\11.2.0\dbhome_1\database）。</p><p>使用create pfile from spfile;可以生成INITorcl.ORA文件，这是一个文本格式的文件，里面显示的参数可以直接修改。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E7%9A%84pfile%E7%9A%84%E4%BD%BF%E7%94%A8.jpg"></p><h3 id="2、控制文件"><a href="#2、控制文件" class="headerlink" title="2、控制文件"></a>2、控制文件</h3><h4 id="控制文件包含的信息"><a href="#控制文件包含的信息" class="headerlink" title="控制文件包含的信息"></a>控制文件包含的信息</h4><ul><li>数据库名字（DBID）</li><li>数据库建立时间</li><li>数据文件，在线日志文件和归档文件三中文件的信息</li><li>表空间的信息</li><li>Rman的备份信息</li></ul><h4 id="控制文件的作用"><a href="#控制文件的作用" class="headerlink" title="控制文件的作用"></a>控制文件的作用</h4><ul><li>它包含数据文件，在线数据文件，归档文件的信息，这些文件用于数据库open时的 文件验证。当数据库的架构改变时，比如增减，删除文件时，会更新数据文件。</li><li>包含了数据库恢复时候需要的一些信息，用于数据库的恢复。</li></ul><h4 id="控制文件的结构"><a href="#控制文件的结构" class="headerlink" title="控制文件的结构"></a>控制文件的结构</h4><ul><li>空间允许重用区</li></ul><blockquote><p>这个区域的信息是可以被重用的（覆盖的），当空间不足或者规则满足时，允许覆盖以前的信息，比如归档日志和Rman备份集的信息。</p></blockquote><ul><li>空间不允许重用区</li></ul><blockquote><p>这个区域的信息是不允许重用的（覆盖的），因为他们是数据库必须的信息，比如表空间，数据文件，在线日志文件等。</p></blockquote><h4 id="控制文件丢失了怎么办？"><a href="#控制文件丢失了怎么办？" class="headerlink" title="控制文件丢失了怎么办？"></a>控制文件丢失了怎么办？</h4><ul><li><p>备份控制文件</p></li><li><p>重建控制文件</p><p>​</p></li></ul><blockquote><p>参数文件和控制文件的丢失都不是致命的，都不会导致数据库的损坏。</p></blockquote><h3 id="3、数据文件"><a href="#3、数据文件" class="headerlink" title="3、数据文件"></a>3、数据文件</h3><p>存放实际的数据，隶属于某个表空间。</p><p>查看表空间及对应的数据文件信息：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> file_name,tablespace_name <span class="hljs-keyword">from</span> dba_data_files;<br><span class="hljs-keyword">select</span> file_name,tablespace_name <span class="hljs-keyword">from</span> dba_temp_files;<br></code></pre></td></tr></table></figure><h4 id="数据文件的损坏"><a href="#数据文件的损坏" class="headerlink" title="数据文件的损坏"></a>数据文件的损坏</h4><p>需用通过备份恢复</p><ul><li>还原备份文件</li><li>用归档+在线redo恢复</li></ul><p>使用Redo信息恢复</p><ul><li>创建新数据文件</li><li>用归档+在线Redo恢复</li></ul><h3 id="4、重做日志文件-Redo-Log-File"><a href="#4、重做日志文件-Redo-Log-File" class="headerlink" title="4、重做日志文件-Redo Log File"></a>4、重做日志文件-Redo Log File</h3><h4 id="重做日志文件的作用"><a href="#重做日志文件的作用" class="headerlink" title="重做日志文件的作用"></a>重做日志文件的作用</h4><ul><li><p>保护数据的安全</p></li><li><p>恢复数据</p></li><li><p>数据同步和分析 -golden gate，Data guard</p></li></ul><h4 id="日志文件损坏"><a href="#日志文件损坏" class="headerlink" title="日志文件损坏"></a>日志文件损坏</h4><p>活动日志损坏：数据丢失，数据库损坏</p><p>非活动日志损坏：数据不会丢失，可以重建日志文件</p><p>Oracle日志文件的状态可参见：<a href="https://www.linuxidc.com/Linux/2014-09/106795.htm">Oracle日志文件的状态current&#x2F;active&#x2F;inactive&#x2F;unused</a></p><h2 id="第二部分、Oracle体系架构"><a href="#第二部分、Oracle体系架构" class="headerlink" title="第二部分、Oracle体系架构"></a>第二部分、Oracle体系架构</h2><h3 id="Oracle整体架构图"><a href="#Oracle整体架构图" class="headerlink" title="Oracle整体架构图"></a>Oracle整体架构图</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg"></p><p>由上图可知，主要分为三个部分：实例instance，数据库database，其他组成部分。上半部分中的Instance就是实例，有内存加进程构成，内存分为SGA（System Global Area）和PGA（Program Global Area）。下方的Database就是数据库，包含数据文件，控制文件，重做日志文件。数据库文件是一种相对静止的东西。</p><p>下面分别介绍SGA区，PGA区和后台进程。</p><h3 id="SGA区"><a href="#SGA区" class="headerlink" title="SGA区"></a>SGA区</h3><p><a href="http://blog.itpub.net/25264937/viewspace-694917/">http://blog.itpub.net/25264937/viewspace-694917/</a></p><h3 id="PGA区"><a href="#PGA区" class="headerlink" title="PGA区"></a>PGA区</h3><p><a href="http://blog.itpub.net/25264937/viewspace-694917/">http://blog.itpub.net/25264937/viewspace-694917/</a></p><!--more-->]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>CentOS</tag>
      
      <tag>文件</tag>
      
      <tag>体系架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle SQL语句分类</title>
    <link href="/2016/01/27/oracle-sql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB/"/>
    <url>/2016/01/27/oracle-sql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>SQL语句按照功能分为三类，数据库操作语言，数据库定义语言，数据库控制语言。</p><h2 id="一、DML—data-manipulation-language"><a href="#一、DML—data-manipulation-language" class="headerlink" title="一、DML—data manipulation language"></a>一、DML—data manipulation language</h2><p>数据库操作语言(select,insert,update,delete)</p><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><h2 id="二、DDL—data-definition-language"><a href="#二、DDL—data-definition-language" class="headerlink" title="二、DDL—data definition language"></a>二、DDL—data definition language</h2><p>数据库定义语言(create,drop,truncate,alter)</p><h3 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h3><h3 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h3><h3 id="TRUNCATE（空间收回）"><a href="#TRUNCATE（空间收回）" class="headerlink" title="TRUNCATE（空间收回）"></a>TRUNCATE（空间收回）</h3><h3 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h3><h2 id="三、DCL—data-control-language"><a href="#三、DCL—data-control-language" class="headerlink" title="三、DCL—data control language"></a>三、DCL—data control language</h2><p>数据库控制语言(grant,revoke)</p><h3 id="GRANT"><a href="#GRANT" class="headerlink" title="GRANT"></a>GRANT</h3><h3 id="REVOKE"><a href="#REVOKE" class="headerlink" title="REVOKE"></a>REVOKE</h3><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS6.7环境下安装配置Oracle数据库</title>
    <link href="/2016/01/26/centos6-7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEoracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2016/01/26/centos6-7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEoracle%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux下静默安装Oracle数据库"><a href="#Linux下静默安装Oracle数据库" class="headerlink" title="Linux下静默安装Oracle数据库"></a>Linux下静默安装Oracle数据库</h3>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>安装</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win7x64安装配置Oracle 11g R2数据库</title>
    <link href="/2016/01/25/win7x64%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEoracle-11g-r2%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2016/01/25/win7x64%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEoracle-11g-r2%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><p>Oracle数据库安装文件，下载地址见Oracle官网：<a href="https://www.oracle.com/">https://www.oracle.com/</a></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>1、Oracle11gR2的安装文件分成了两个，需要我们在解压的时候，解压到相同的目录下边，里面文件的目录名是默认的database，如图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E5%8C%85.jpg"></p><p>2、解压到相同目录之后，双击文件夹中的setup.exe文件，双击之后，出现启动安装界面的命令窗口，会检查监视器配置，并且启动安装界面进入正式安装界面，如图所示，取消下图所示的选中，即不接受安全更新，然后单击”下一步”继续，会提示尚未提供电子邮件，不管，直接点是，Oracle默认是选择基本安装。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-oracle%E6%AD%A3%E5%BC%8F%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A2.jpg"></p><span id="more"></span><p>3、在“选择安装选项”界面中，按照默认的设置选择“创建和配置数据库”，单击“下一步”按钮，如图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E9%80%89%E9%A1%B9.jpg"></p><p>4、在“系统类”界面中，选择“桌面类”即可，单击“下一步”按钮，如图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E7%B3%BB%E7%BB%9F%E7%B1%BB.jpg"></p><p>5、在“典型安装配置”界面中，输入oralce的根目录，最好不要包含空格和中文。全局数据库名就是本地数据库的实例名，管理口令适用于sys，system等系统用户。如下图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E5%85%B8%E5%9E%8B%E5%AE%89%E8%A3%85.jpg"></p><p>6、然后出现“执行先决条件检查”界面，所出现错误就逐个解决即可，或者直接全部忽略。然后出现“概要”界面，可以看到一些安装的基本信息，单击“完成”按钮，开始安装，进入“安装产品”界面，如下图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E4%BA%A7%E5%93%81%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.jpg"></p><p>7、在安装的过程中，会出现数据库配置助手，帮助我们默认的建立一个数据库，默认创建的数据库是orcl，数据库创建完成之后显示如下的界面如图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E5%8A%A9%E6%89%8B%E7%95%8C%E9%9D%A2.jpg"></p><p>8、点击口令管理，进入在弹出的“口令管理”界面中，我们可以看到SYS和SYSTEM用户已经解锁，然后我们可以解锁并且设置scott账户的密码，并激活账户，设置完成后，单击“确定”按钮，如图所示：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Oracle-Oracle%E5%8F%A3%E4%BB%A4%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2.jpg"></p><p>9、数据库安装完成。</p><p>数据库控制网址（Enterprise Manager Database Control URL - (orcl) ）：</p><p><a href="https://localhost:1158/em">https://localhost:1158/em</a></p><p>数据库配置文件已经安装到 D:\Oracle11g\Administrator,同时其他选定的安装组件也已经安装到 D:\Oracle11g\Administrator\product\11.2.0\dbhome_1。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>Oracle数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程管理</title>
    <link href="/2016/01/22/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2016/01/22/linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h2><h3 id="Linux系统中进程的类型"><a href="#Linux系统中进程的类型" class="headerlink" title="Linux系统中进程的类型"></a>Linux系统中进程的类型</h3><p>分为三种不同的类型，分别是:</p><ul><li><p>交互进程：由一个启动的进程，交互进程既可以在前台运行，也可以后台运行。</p></li><li><p>批处理进程：不与特定的终端相关联，提交到等待队列中顺序执行的进程。</p></li><li><p>守护进程：在Linux在启动时初始化，需要时运行于后台的进程。</p></li></ul><h3 id="进程的启动方式"><a href="#进程的启动方式" class="headerlink" title="进程的启动方式"></a>进程的启动方式</h3><p>手工启动：1、前台启动  2、后台启动</p><p>调度启动：事先进行设置，根据用户要求自行启动</p><span id="more"></span><h2 id="查看系统中的进程"><a href="#查看系统中的进程" class="headerlink" title="查看系统中的进程"></a>查看系统中的进程</h2><h3 id="ps命令：Process-Status"><a href="#ps命令：Process-Status" class="headerlink" title="ps命令：Process Status"></a>ps命令：Process Status</h3><p>ps命令的使用参见<a href="https://man.linuxde.net/ps">ps命令</a>和<a href="https://www.cnblogs.com/peida/archive/2012/12/19/2824418.html">每天一个linux命令：ps命令</a></p><p>ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。</p><h3 id="top命令-display-Linux-tasks"><a href="#top命令-display-Linux-tasks" class="headerlink" title="top命令 - display Linux tasks"></a>top命令 - display Linux tasks</h3><p>top命令的使用参见<a href="https://man.linuxde.net/top">top命令</a>和<a href="https://www.cnblogs.com/peida/archive/2012/12/24/2831353.html">每天一个linux命令：top命令</a></p><p>top命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具，类似于Windows的任务管理</p><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><blockquote><p>top [参数]</p></blockquote><h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h4><h2 id="控制系统中的进程"><a href="#控制系统中的进程" class="headerlink" title="控制系统中的进程"></a>控制系统中的进程</h2><h2 id="了解守护进程"><a href="#了解守护进程" class="headerlink" title="了解守护进程"></a>了解守护进程</h2>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>进程管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络配置和管理</title>
    <link href="/2016/01/22/linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <url>/2016/01/22/linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="网络设备信息查看和配置"><a href="#网络设备信息查看和配置" class="headerlink" title="网络设备信息查看和配置"></a>网络设备信息查看和配置</h2><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p>在CentOS中，系统网络设备的配置文件保存在“&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts”目录下，ifcfg-eth0包含第一块网卡的配置信息，ifcfg-eth1包含第二块网卡的配置信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0<br><br></code></pre></td></tr></table></figure><p>可以得到配置信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DEVICE</span>=eth0<br><span class="hljs-attr">HWADDR</span>=<span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">35</span>:<span class="hljs-number">50</span>:<span class="hljs-number">5</span>B<br><span class="hljs-attr">TYPE</span>=Ethernet<br><span class="hljs-attr">UUID</span>=e9e3400b-<span class="hljs-number">1</span>e20-<span class="hljs-number">49</span>c1-a12c-de3b6b221048<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">NM_CONTROLLED</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">118.10</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-attr">NETWORK</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">118.0</span><br><span class="hljs-attr">BROADCAST</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">118.255</span><br></code></pre></td></tr></table></figure><p>若希望手工修改网络地址，可以通过修改对应的文件（ifcfg-ethN）或创建新的文件来实现。</p><p>具体对应修改方法参见我的csdn博客：<a href="https://blog.csdn.net/u013637931/article/details/49287643">CentOS6.7配置静态IP</a></p><span id="more"></span><p>每次修改网卡之后需要重启对应网卡才能生效，重启命令如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service network restart</span><br></code></pre></td></tr></table></figure><p>命令配置</p><p>ifconfig，参见<a href="https://man.linuxde.net/ifconfig">ifconfig命令</a></p><p>ifconfig命令被用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后或机器重启后，配置就不存在。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@localhost ~]# ifconfig<br>eth0      Link encap:Ethernet  HWaddr <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">35</span>:<span class="hljs-number">50</span>:<span class="hljs-number">5</span>B<br>          inet addr:<span class="hljs-number">192.168</span>.<span class="hljs-number">118.10</span>  Bcas<span class="hljs-variable">t:192</span>.<span class="hljs-number">168.118</span>.<span class="hljs-number">255</span>  Mask:<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>          inet6 addr: fe80::<span class="hljs-number">20</span><span class="hljs-keyword">c</span>:<span class="hljs-number">29</span>ff:fe35:<span class="hljs-number">505</span><span class="hljs-keyword">b</span>/<span class="hljs-number">64</span> Scope:Link<br>          UP BROADCAST RUNNING MULTICAST  MTU:<span class="hljs-number">1500</span>  Metric:<span class="hljs-number">1</span><br>          RX packet<span class="hljs-variable">s:433</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> frame:<span class="hljs-number">0</span><br>          TX packet<span class="hljs-variable">s:214</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> carrier:<span class="hljs-number">0</span><br>          collision<span class="hljs-variable">s:0</span> txqueuelen:<span class="hljs-number">1000</span><br>          RX byte<span class="hljs-variable">s:41843</span> (<span class="hljs-number">40.8</span> KiB)  TX byte<span class="hljs-variable">s:22969</span> (<span class="hljs-number">22.4</span> KiB)<br>          Interrup<span class="hljs-variable">t:19</span> Base addres<span class="hljs-variable">s:0x2000</span><br><br><span class="hljs-keyword">lo</span>        Link encap:Local Loopback<br>          inet addr:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>  Mask:<span class="hljs-number">255.0</span>.<span class="hljs-number">0.0</span><br>          inet6 addr: ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> Scope:Host<br>          UP LOOPBACK RUNNING  MTU:<span class="hljs-number">65536</span>  Metric:<span class="hljs-number">1</span><br>          RX packet<span class="hljs-variable">s:14</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> frame:<span class="hljs-number">0</span><br>          TX packet<span class="hljs-variable">s:14</span> error<span class="hljs-variable">s:0</span> dropped:<span class="hljs-number">0</span> overrun<span class="hljs-variable">s:0</span> carrier:<span class="hljs-number">0</span><br>          collision<span class="hljs-variable">s:0</span> txqueuelen:<span class="hljs-number">0</span><br>          RX byte<span class="hljs-variable">s:1410</span> (<span class="hljs-number">1.3</span> KiB)  TX byte<span class="hljs-variable">s:1410</span> (<span class="hljs-number">1.3</span> KiB)<br><br></code></pre></td></tr></table></figure><p>配置ip地址：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># ifconfig eth0 192.168.2.10 </span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0 </span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255</span><br></code></pre></td></tr></table></figure><p>启动关闭指定网卡：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">ifconfig eth0 <span class="hljs-meta">up</span><br>ifconfig eth0 <span class="hljs-meta">down</span><br></code></pre></td></tr></table></figure><p>ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非有多网卡（即有多ip）。</p><p>配置虚拟ip：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> eth0:<span class="hljs-number">1</span> <span class="hljs-number">192.168.118.2</span><br></code></pre></td></tr></table></figure><p>如果要用就配置eth0:1需要在&#x2F;etc&#x2F;sysoconfig&#x2F;network-scripts&#x2F;下面创建一个eth0:1文件，并且设定ip为192.168.118.2，设定device名称为eth0:1，然后重启网卡，就可以永久配置了。</p><h2 id="网络配置信息"><a href="#网络配置信息" class="headerlink" title="网络配置信息"></a>网络配置信息</h2><p>相关的配置文件是&#x2F;etc&#x2F;sysconfig&#x2F;network</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sysconfig/network<br></code></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NETWORKING</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">NETWORKING_IPV6</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">HOSTNAME</span>=localhost.localdomain<br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">118.1</span><br></code></pre></td></tr></table></figure><p>解释：</p><blockquote><p>NETWORKING&#x3D;yes 网络是否可用。</p></blockquote><blockquote><p>HOSTNAME&#x3D;xxxxxxxx为新设置的主机名。</p></blockquote><h2 id="域名解析配置-x2F-etc-x2F-resolv-conf"><a href="#域名解析配置-x2F-etc-x2F-resolv-conf" class="headerlink" title="域名解析配置&#x2F;etc&#x2F;resolv.conf"></a>域名解析配置&#x2F;etc&#x2F;resolv.conf</h2><p>&#x2F;etc&#x2F;resolv.conf文件是由域名解析器（resolver，一个根据主机名解析ip地址的库）使用的配置文件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># vi /etc/resolv.conf</span><br>nameserver <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>nameserver <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><br></code></pre></td></tr></table></figure><p>“nameserver”表示解析域名时使用该地址制定的主机为域名服务器。</p><h2 id="主机名配置-x2F-etc-x2F-hosts"><a href="#主机名配置-x2F-etc-x2F-hosts" class="headerlink" title="主机名配置&#x2F;etc&#x2F;hosts"></a>主机名配置&#x2F;etc&#x2F;hosts</h2><p>&#x2F;etc&#x2F;hosts, 包括主机名的用途、配置文件的操作方法等。用来把主机名字映射到IP地址</p><p>需要修改主机名时可用hostname命令修改，如下所示：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hostname</span> flowsnow <span class="hljs-comment">#将主机名称暂时改为flowsnow</span><br></code></pre></td></tr></table></figure><h2 id="网络服务配置-x2F-etc-x2F-services"><a href="#网络服务配置-x2F-etc-x2F-services" class="headerlink" title="网络服务配置&#x2F;etc&#x2F;services"></a>网络服务配置&#x2F;etc&#x2F;services</h2><p>&#x2F;etc&#x2F;services文件是记录网络服务名和它们对应使用的端口号及协议。端口号和标准服务之间的对应关系在RFC 1700中有详细的定义。这个文件使得程序能够把服务的名字转换成端口号，这张表在每一台计算机上都存在。只有root用户才能修改这个文件。而且通常情况下这个文件不需要修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/services<br>...<br>mysql           3306/tcp                        <span class="hljs-comment"># MySQL</span><br>mysql           3306/udp                        <span class="hljs-comment"># MySQL</span><br>...<br></code></pre></td></tr></table></figure><h2 id="主机查找方法配置"><a href="#主机查找方法配置" class="headerlink" title="主机查找方法配置"></a>主机查找方法配置</h2><p>指定主机名查找方法，通常指先查找文件&#x2F;etc&#x2F;hosts,找不到时再向DNS服务器请求。对于大多数用户不用改动此文件内容。</p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>参见：<a href="https://man.linuxde.net/netstat">netstat命令</a> <a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.html">netstat命令详解</a></p><p>netstat命令用来打印Linux中网络系统的状态信息。</p><p>常见选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a (all)显示所有选项，默认不显示LISTEN相关</span><br><span class="hljs-deletion">-t (tcp)仅显示tcp相关选项</span><br><span class="hljs-deletion">-u (udp)仅显示udp相关选项</span><br><span class="hljs-deletion">-n 拒绝显示别名，能显示数字的全部转化成数字。</span><br><span class="hljs-deletion">-l 仅列出有在 Listen (监听) 的服務状态</span><br><br><span class="hljs-deletion">-p 显示建立相关链接的程序名</span><br><span class="hljs-deletion">-r 显示路由信息，路由表</span><br><span class="hljs-deletion">-e 显示扩展信息，例如uid等</span><br><span class="hljs-deletion">-s 按各个协议进行统计</span><br><span class="hljs-deletion">-c 每隔一个固定时间，执行该netstat命令。</span><br><br>注：LISTEN和LISTENING的状态只有用-a或者-l才能看到<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的文件和文件系统的管理</title>
    <link href="/2016/01/14/linux%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%A1%E7%90%86/"/>
    <url>/2016/01/14/linux%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><h3 id="什么是文件系统？"><a href="#什么是文件系统？" class="headerlink" title="什么是文件系统？"></a>什么是文件系统？</h3><p>文件系统是操作系统在分区上保存文件信息的方法和数据结构。</p><h3 id="文件有哪些权限？"><a href="#文件有哪些权限？" class="headerlink" title="文件有哪些权限？"></a>文件有哪些权限？</h3><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Flowsnow%E6%96%87%E4%BB%B6%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9D%83%E9%99%90.jpg" alt="文件有那些权限"></p><p> 三种基本权限分别为：读、写、执行，说明如下：</p><table><thead><tr><th align="center">代表字符</th><th align="center">权限</th><th align="center">对文件的意义</th><th align="center">对目录的意义</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">读权限</td><td align="center">可以读文件内容</td><td align="center">可以列出目录中的文件列表</td></tr><tr><td align="center">w</td><td align="center">写权限</td><td align="center">可以修改和删除文件</td><td align="center">可以在目录中创建和删除文件</td></tr><tr><td align="center">x</td><td align="center">执行权限</td><td align="center">可以执行该文件</td><td align="center">可以使用cd命令进入该目录</td></tr></tbody></table><ol><li>目录上只有执行权限，便是可以进入或穿越他进入更深层次的子目录</li><li>目录上只有执行权限，要访问该目录下的又读权限的文件，必须知道文件名才可以访问</li><li>目录上只有执行权限，不能列出目录列表也不能删除该目录</li><li>目录上执行权限和读权限，表示可以进入目录并且列出目录列表</li><li>目录上执行权限和写权限的组合，表示可以在目录中创建、删除和重命名文件</li></ol><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><p>有三种特殊权限suid、sgid和sticky bit。参见<a href="http://alan-hjkl.iteye.com/blog/1526858">Linux中的文件特殊权限</a></p><span id="more"></span><h4 id="suid和sgid"><a href="#suid和sgid" class="headerlink" title="suid和sgid"></a>suid和sgid</h4><p>例如查看&#x2F;usr&#x2F;bin&#x2F;passwd 与&#x2F;etc&#x2F;passwd文件的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@MyLinux ~]# ls -l /usr/bin/passwd /etc/passwd<br>-rw-r--r-- 1 root root  1549 08-19 13:54 /etc/passwd<br>-rwsr-xr-x 1 root root 22984 2007-01-07 /usr/bin/passwd<br></code></pre></td></tr></table></figure><p>众所周知，&#x2F;etc&#x2F;passwd文件存放的各个用户的账号与密码信息，&#x2F;usr&#x2F;bin&#x2F;passwd是执行修改和查看此文件的程序，但从权限上看，&#x2F;etc&#x2F;passwd仅有root权限的写（w）权，可实际上每个用户都可以通过&#x2F;usr&#x2F;bin&#x2F;passwd命令修改这个文件，于是这里就涉及了linux里的特殊权限setuid，如-rwsr-xr-x中的s</p><p><strong>suid就是：让普通用户拥有可以执行“只有root权限才能执行”的特殊权限，sgid同理指”组“</strong></p><p>作为普通用户是没有权限修改&#x2F;etc&#x2F;passwd文件的，但给&#x2F;usr&#x2F;bin&#x2F;passwd以suid权限后，普通用户就可以通过执行passwd命令，临时的拥有root权限，去修改&#x2F;etc&#x2F;passwd文件了</p><h4 id="sticky-bit"><a href="#sticky-bit" class="headerlink" title="sticky bit"></a>sticky bit</h4><p>例如查看&#x2F;tmp目录的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost test]# ll -d /tmp<br>drwxrwxrwt. 4 root root 4096 1月  18 03:53 /tmp<br></code></pre></td></tr></table></figure><p>tmp目录是所有用户共有的临时文件夹，所有用户都拥有读写权限，这就必然出现一个问题，A用户在&#x2F;tmp里创建了文件a.file，此时B用户看了不爽，在&#x2F;tmp里把它给删了（因为拥有读写权限），那肯定是不行的。实际上是不会发生这种情况，因为有特殊权限sticky bit（粘贴位）权限，正如drwxrwxrwt中的最后一个t。</p><p><strong>sticky bit (粘贴位)就是：除非目录的属主和root用户有权限删除它，除此之外其它用户不能删除和修改这个目录</strong>。</p><p>也就是说，在&#x2F;tmp目录中，只有文件的拥有者和root才能对其进行修改和删除，其他用户则不行，避免了上面所说的问题产生。</p><p><strong>粘贴位的用途一般是把一个文件夹的的权限都打开，然后来共享文件，象&#x2F;tmp目录一样。</strong></p><h2 id="文件格式和类型"><a href="#文件格式和类型" class="headerlink" title="文件格式和类型"></a>文件格式和类型</h2><p>一切皆文件。</p><p>Linu系统下的文件类型包括：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">普通文件<span class="hljs-comment">(-)</span><br>目录<span class="hljs-comment">(d)</span><br>符号链接<span class="hljs-comment">(l)</span><br>字符设备文件<span class="hljs-comment">(c)</span><br>块设备文件<span class="hljs-comment">(b)</span><br>套接字<span class="hljs-comment">(s)</span><br>命名管道<span class="hljs-comment">(p)</span><br></code></pre></td></tr></table></figure><h3 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h3><p>链接文件分为软链接和硬链接</p><h4 id="硬链接（Hard-Link）"><a href="#硬链接（Hard-Link）" class="headerlink" title="硬链接（Hard Link）"></a>硬链接（Hard Link）</h4><p>硬链接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬链接。硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。</p><p>也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。</p><h4 id="软链接（Symbolic-Link）"><a href="#软链接（Symbolic-Link）" class="headerlink" title="软链接（Symbolic Link）"></a>软链接（Symbolic Link）</h4><p>除了硬链接之外的一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><h4 id="硬链接和软链接的区别演示"><a href="#硬链接和软链接的区别演示" class="headerlink" title="硬链接和软链接的区别演示"></a>硬链接和软链接的区别演示</h4><p>ln命令，参见<a href="https://man.linuxde.net/ln">ln命令</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost test]# touch file1#创建一个测试文件file1<br>[root@localhost test]# ln file1 file2#创建file1的一个硬链接文件file2<br>[root@localhost test]# ln -s file1 file3#创建file1的一个软链接文件file3<br>[root@localhost test]# ls -li#-i参数显示文件的inode节点信息<br>总用量 0<br>528483 -rw-r--r--. 2 root root 0 1月  18 05:46 file1<br>528483 -rw-r--r--. 2 root root 0 1月  18 05:46 file2<br>528484 lrwxrwxrwx. 1 root root 5 1月  18 05:47 file3 -&gt; file1<br></code></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件file2与原文件file1的inode节点相同，均为528483，然而符号连接文件的inode节点不同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost test]# echo &quot;hello liuyifei&quot; &gt;&gt;file1#向file1中输入信息<br>[root@localhost test]# cat file1<br>hello liuyifei<br>[root@localhost test]# cat file2<br>hello liuyifei<br>[root@localhost test]# cat file3<br>hello liuyifei<br>[root@localhost test]# rm -f file1<br>[root@localhost test]# ls -li<br>总用量 4<br>528483 -rw-r--r--. 1 root root 15 1月  18 05:53 file2<br>528484 lrwxrwxrwx. 1 root root  5 1月  18 05:47 file3 -&gt; file1<br>[root@localhost test]# cat file2<br>hello liuyifei<br>[root@localhost test]# cat file3#可以发现file3这个软链接虽然在，但是没有内容了<br>cat: file3: 没有那个文件或目录<br></code></pre></td></tr></table></figure><h2 id="改变文件权限"><a href="#改变文件权限" class="headerlink" title="改变文件权限"></a>改变文件权限</h2><p>改变文件权限的命令：chmod，chown（更改所有者），chgrp（更改用户组）</p><p>三个命令使用方法参见：</p><ul><li><a href="https://man.linuxde.net/chmod">https://man.linuxde.net/chmod</a></li><li><a href="https://man.linuxde.net/chown">https://man.linuxde.net/chown</a></li><li><a href="https://man.linuxde.net/chgrp">https://man.linuxde.net/chgrp</a></li></ul><h3 id="权限范围的表示法"><a href="#权限范围的表示法" class="headerlink" title="权限范围的表示法"></a>权限范围的表示法</h3><p><code>u</code> User，即文件或目录的拥有者； </p><p><code>g</code> Group，即文件或目录的所属群组； </p><p><code>o</code> Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围； </p><p><code>a</code> All，即全部的用户，包含拥有者，所属群组以及其他用户； </p><p><code>r</code> 读取权限，数字代号为“4”; </p><p><code>w</code> 写入权限，数字代号为“2”； </p><p><code>x</code> 执行或切换权限，数字代号为“1”； </p><p><code>-</code>不具任何权限，数字代号为“0”；</p><p><code>s</code> 特殊功能说明：变更文件或目录的权限。</p><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><p>语法：chmod (选项) (参数)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">-f或--quiet或--silent：不显示错误信息； <br><br>-R或--recursive：递归处理，将指令目录下的所有文件及子目录一并处理； <br><br>-v或--verbose：显示指令执行过程； <br><br>--reference=<span class="hljs-tag">&lt;<span class="hljs-name">参考文件或目录</span>&gt;</span>：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；<br><br><span class="hljs-tag">&lt;<span class="hljs-name">权限范围</span>&gt;</span>+<span class="hljs-tag">&lt;<span class="hljs-name">权限设置</span>&gt;</span>：开启权限范围的文件或目录的该选项权限设置； <br><br><span class="hljs-tag">&lt;<span class="hljs-name">权限范围</span>&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">权限设置</span>&gt;</span>：关闭权限范围的文件或目录的该选项权限设置； <br><br><span class="hljs-tag">&lt;<span class="hljs-name">权限范围</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">权限设置</span>&gt;</span>：指定权限范围的文件或目录的该选项权限设置；<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x,g+w file1　　#为文件file1设置自己可以执行，组员可以写入的权限 <br>chmod u=rwx,g=rw,o=r file1 <br>chmod 764 file1#数字设定法，rwxrw-r--<br>chmod a+x file1#对文件file1的u,g,o都设置可执行属性<br></code></pre></td></tr></table></figure><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>改变某个文件或目录的所有者和所属的组，只有文件主和超级用户才可以使用该命令。</p><p>选项：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-f或--quite或——silent：不显示错误信息； </span><br><span class="hljs-deletion">-h或--no-dereference：只对符号连接的文件作修改，而不更改其他任何相关文件； </span><br><span class="hljs-deletion">-R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理； </span><br><span class="hljs-deletion">-v：显示指令执行过程；</span><br></code></pre></td></tr></table></figure><p>参数：</p><blockquote><p>用户:组：指定所有者和所属工作组。当省略“：组”，仅改变文件所有者； </p><p>文件：指定要改变所有者和工作组的文件列表。支持多个文件和目标，支持shell通配符。</p></blockquote><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R liuyifei /usr/test#将目录/tmp/test及其下面的所有文件、子目录的文件主改成 liuyifei<br>chown liuyifei:mingxing file1　　//把文件file1属主改成liuyifei，属组改为mingxing<br></code></pre></td></tr></table></figure><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>用来改变文件或目录所属的用户组，只有文件主和超级用户才可以使用该命令。</p><p>语法：chgrp(选项)(参数)</p><p>选项：类似chown</p><p>参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">组：指定新组名称； <br>文件：指定要改变所属组的文件列表。多个文件或者目录之间使用空格隔开。<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp -R mengxin .#将当前目录及子目录下的所有文件的用户组改为liuyifei<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>文件系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux vi的使用</title>
    <link href="/2016/01/10/linux-vi%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2016/01/10/linux-vi%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-vi的使用"><a href="#Linux-vi的使用" class="headerlink" title="Linux vi的使用"></a>Linux vi的使用</h1><hr><h2 id="vi模式转换"><a href="#vi模式转换" class="headerlink" title="vi模式转换"></a>vi模式转换</h2><p>经常使用的三种基本模式：命令模式(Command Mode)，输入模式(Input Mode)，末行模式(Last Line Mode)，其他的9种模式不做介绍，很少会使用。</p><p>三种基本模式的相互转换如下图：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Flowsnowvi%E6%A8%A1%E5%BC%8F%E8%BD%AC%E6%8D%A2.jpg" alt="vi模式转换"></p><span id="more"></span><h2 id="vi文件保存和退出"><a href="#vi文件保存和退出" class="headerlink" title="vi文件保存和退出"></a>vi文件保存和退出</h2><ul><li><p>:w 保存文件</p></li><li><p>:q 退出文件，若文件有改动则提示不能退出</p></li><li><p>:q! 强制退出，即不保存就退出</p></li><li><p>:wq 保存并且退出</p></li></ul><h2 id="vi常用操作"><a href="#vi常用操作" class="headerlink" title="vi常用操作"></a>vi常用操作</h2><h3 id="1、插入文本-i-I-a-A-o-O"><a href="#1、插入文本-i-I-a-A-o-O" class="headerlink" title="1、插入文本(i,I,a,A,o,O)"></a>1、插入文本(i,I,a,A,o,O)</h3><h4 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h4><ul><li><p>输入a后，在光标的右边插入文本</p></li><li><p>输入A，在一行的结尾处添加文本</p></li></ul><h4 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h4><ul><li><p>通过在命令模式下输入i，在光标的左边插入文本</p></li><li><p>通过在命令模式下输入I，在行首插入文本</p></li></ul><h4 id="插入新行："><a href="#插入新行：" class="headerlink" title="插入新行："></a>插入新行：</h4><ul><li><p>输入o，在当前光标位置下面打开一行</p></li><li><p>输入O，在当前光标位置上面打开一行</p></li></ul><h3 id="2、撤消更改"><a href="#2、撤消更改" class="headerlink" title="2、撤消更改"></a>2、撤消更改</h3><ul><li><p>撤消前一个命令：在最后一个命令之后立即输入u来撤消该命令</p></li><li><p>重复某个命令：“.”</p></li><li><p>撤消对一行的更改：输入U来撤消你对一行所做的所有更改，这个命令只有在你没将光标移动到该行以外时才生效</p></li></ul><h3 id="3、删除文本"><a href="#3、删除文本" class="headerlink" title="3、删除文本"></a>3、删除文本</h3><h4 id="删除一个字符"><a href="#删除一个字符" class="headerlink" title="删除一个字符"></a>删除一个字符</h4><ul><li><p>为删除一个字符，需将光标放置在要删除的字符上并输入x</p></li><li><p>为删除光标之前（其左边）的一个字符，需输入X</p></li></ul><h4 id="删除一个词或词的部分内容"><a href="#删除一个词或词的部分内容" class="headerlink" title="删除一个词或词的部分内容"></a>删除一个词或词的部分内容</h4><ul><li><p>为删除一个词，需将光标放置到该词的开头并输入dw</p></li><li><p>为删除词的部分内容，需将光标放置到该词要保存部分的右边。输入dw来删除该词余下的部分</p></li></ul><h4 id="删除一行"><a href="#删除一行" class="headerlink" title="删除一行"></a>删除一行</h4><ul><li>将光标放置到该行的任意处并输入dd</li></ul><h4 id="删除多行"><a href="#删除多行" class="headerlink" title="删除多行"></a>删除多行</h4><ul><li>ndd　　　　包括当前行</li></ul><h4 id="删除到文件的结尾"><a href="#删除到文件的结尾" class="headerlink" title="删除到文件的结尾"></a>删除到文件的结尾</h4><ul><li>为删除从当前行到文件结尾的所有内容(包括当前行)，需输入dG</li></ul><h3 id="4、复制"><a href="#4、复制" class="headerlink" title="4、复制"></a>4、复制</h3><ul><li><p>复制一行命令：yy</p></li><li><p>粘贴命令：p　　（粘贴到当前行的下一行）</p></li><li><p>复制指定文件的内容　　: r filename</p></li></ul><h3 id="5、查找一个字符串"><a href="#5、查找一个字符串" class="headerlink" title="5、查找一个字符串"></a>5、查找一个字符串</h3><ul><li><p>输入&#x2F;，并在&#x2F;后面输入要查找的串，然后按下回车</p></li><li><p>输入“n”跳转到该串的下一个出现处，跳到最后一个时会循环跳到第一个</p></li><li><p>输入“N”跳转到该串的上一个出现处</p></li></ul><h3 id="6、替换一个字符串"><a href="#6、替换一个字符串" class="headerlink" title="6、替换一个字符串"></a>6、替换一个字符串</h3><ul><li><p>在一行内替换头一个字符串old为新的字符串new    :s&#x2F;old&#x2F;new</p></li><li><p>在一行内替换所有的字符串old为新的字符串new    :s&#x2F;old&#x2F;new&#x2F;g</p></li><li><p>在文件内替换所有的字符串old为新的字符串new    :%s&#x2F;old&#x2F;new&#x2F;g</p></li><li><p>进行全文替换时询问用户确认每个替换需添加c选项     :%s&#x2F;old&#x2F;new&#x2F;gc</p></li></ul><h2 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h2><p>vimrc文件</p><p>找到vim配置文件的位置。如果是默认安装，CentOS和RHEL一般在&#x2F;etc&#x2F;vimrc下面，Debian和Ubuntu一般在&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vimrc</p><h2 id="vi的使用参考资料"><a href="#vi的使用参考资料" class="headerlink" title="vi的使用参考资料"></a>vi的使用参考资料</h2><p><a href="http://wiki.dzsc.com/info/7313.html">http://wiki.dzsc.com/info/7313.html</a></p><p><a href="https://www.cnblogs.com/mahang/archive/2011/09/01/2161672.html">https://www.cnblogs.com/mahang/archive/2011/09/01/2161672.html</a></p><p><a href="http://blog.chinaunix.net/uid-384966-id-2411343.html">http://blog.chinaunix.net/uid-384966-id-2411343.html</a></p><p><a href="https://www.cnblogs.com/zgx/archive/2011/04/12/2013356.html">https://www.cnblogs.com/zgx/archive/2011/04/12/2013356.html</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>vi</tag>
      
      <tag>vim</tag>
      
      <tag>模式</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux用户和组管理</title>
    <link href="/2016/01/09/linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%AE%A1%E7%90%86/"/>
    <url>/2016/01/09/linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>只有root用户才能管理用户和组，所以一切命令都是root执行。</p><h3 id="用户分类"><a href="#用户分类" class="headerlink" title="用户分类"></a>用户分类</h3><ol><li><p>超级用户：root，UID&#x3D;0</p></li><li><p>普通用户：具有操作系统有限的权限，500&lt;&#x3D;UID&lt;&#x3D;65535(2^32-1),有限个</p></li><li><p>伪用户：为了安全,1&lt;&#x3D;UID&lt;&#x3D;499</p><blockquote><p>伪用户解释：linux中任何一个命令的操作都必须有一个用户的身份。伪用户一般和系统或者程序服务相关，比如bin,daemon,shutdown ,halt等，linux默认都有这些伪用户，伪用户通常不需要或无法登陆系统（nologin），可以没有宿主目录</p></blockquote></li></ol><span id="more"></span><h3 id="用户和组的配置文件"><a href="#用户和组的配置文件" class="headerlink" title="用户和组的配置文件"></a>用户和组的配置文件</h3><h4 id="用户信息文件：-x2F-etc-x2F-passwd"><a href="#用户信息文件：-x2F-etc-x2F-passwd" class="headerlink" title="用户信息文件：&#x2F;etc&#x2F;passwd"></a>用户信息文件：&#x2F;etc&#x2F;passwd</h4><ul><li><p>vim &#x2F;etc&#x2F;passwd</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-symbol">adm:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">4</span><span class="hljs-symbol">:adm</span><span class="hljs-symbol">:/var/adm</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-symbol">linzhiling:</span><span class="hljs-symbol">x:</span><span class="hljs-number">500</span><span class="hljs-symbol">:</span><span class="hljs-number">500</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/linzhiling</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/sbin/nologin</span><br></code></pre></td></tr></table></figure><p>在该文件中，每一行用户记录的各个数据段用“：”分隔，分别定义了用户的各方面属性。各个字段的顺序和含义如下：</p></li></ul><p><strong>LOGNAME</strong>:注册名，用于区分不同的用户</p><p><strong>PASSWORD</strong>:口令，系统用口令来验证用户的合法性口令不再直接保存在passwd文件中，通常将passwd文件中的口令字段使用一个“x”来代替，将&#x2F;etc &#x2F;shadow作为真正的口令文件，用于保存包括个人口令在内的数据。当然shadow文件是不能被普通用户读取的，只有超级用户才有权读取。</p><p><strong>UID</strong>:Linux系统中惟一的用户标识，用于区别不同的用户。在系统内部管理进程和文件保护时使用 UID字段。在Linux系统中，注册名和UID都可以用于标识用户，只不过对于系统来说UID更为重要；而对于用户来说注册名使用起来更方便。在某些特 定目的下，系统中可以存在多个拥有不同注册名、但UID相同的用户，事实上，这些使用不同注册名的用户实际上是同一个用户。</p><p><strong>GID</strong>:用户组id</p><p><strong>USERINFO</strong>:用户名，包含有关用户的一些信息，如用户的真实姓名、办公室地址、联系电话等。</p><p><strong>HOME</strong>:用户主目录，home_directory</p><p><strong>SHELL</strong>:命令解释程序(Shell),Shell是当用户登录系统时运行的程序名称，通常是一个Shell程序的全路径名，比如&#x2F;bin&#x2F;bash</p><p>参考网址：<a href="http://luzl.iteye.com/blog/564404">http://luzl.iteye.com/blog/564404</a></p><h4 id="用户密码文件：-x2F-etc-x2F-shadow"><a href="#用户密码文件：-x2F-etc-x2F-shadow" class="headerlink" title="用户密码文件：&#x2F;etc&#x2F;shadow"></a>用户密码文件：&#x2F;etc&#x2F;shadow</h4><ul><li><p>vim &#x2F;etc&#x2F;shadow</p><p>在该文件中每一行密码记录的各个数据段也是用‘:’分隔，一共有九位， 这九个位的含义参考网址：</p><p><a href="https://www.cnblogs.com/zhousir1991/archive/2011/07/25/2116520.html">https://www.cnblogs.com/zhousir1991/archive/2011/07/25/2116520.html</a></p></li></ul><h4 id="组配置文件"><a href="#组配置文件" class="headerlink" title="组配置文件"></a>组配置文件</h4><ul><li><p>vim &#x2F;etc&#x2F;group</p><p>字段解释参考如下网址：</p><p><a href="https://www.cnblogs.com/peida/archive/2012/12/05/2802419.html">https://www.cnblogs.com/peida/archive/2012/12/05/2802419.html</a></p></li></ul><h2 id="Linux用户管理命令"><a href="#Linux用户管理命令" class="headerlink" title="Linux用户管理命令"></a>Linux用户管理命令</h2><h3 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h3><ul><li>useradd liuyifei</li><li>passwd 123456 #创建一个用户之后必须设置一个密码才能登陆，也是用来修改密码的</li></ul><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><ul><li><p>userdel liuyifei</p><p>如果只是暂时停用用户，可以用root用户直接在&#x2F;etc&#x2F;passwd文件中在该用户前面加上注释符就行，再次启用时去掉就行。</p></li></ul><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><ul><li>w #查看当前登录的所有用户</li><li>who #查看当前登录的所有用户</li><li>whoami #查看当前登录用户名</li><li>finger liuyifei #查看单个用户信息</li><li>yum install finger #finger命令需要自行安装</li></ul><h2 id="Linux组管理命令"><a href="#Linux组管理命令" class="headerlink" title="Linux组管理命令"></a>Linux组管理命令</h2><h3 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h3><ul><li>groupadd mingxing</li></ul><h3 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h3><ul><li>groupmod [-g gid [-o]] [-n group_name] group</li><li>groupmod -n mingxing1 mingxing #将mingxing组的名称改为mingxing1</li></ul><h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><ul><li>groupdel mingxing</li></ul><h3 id="查看组"><a href="#查看组" class="headerlink" title="查看组"></a>查看组</h3><ul><li>cat &#x2F;etc&#x2F;group #查看所有组</li><li>groups liuyifei #查看用户所在的组</li></ul><h3 id="gpasswd将用户从组中添加删除"><a href="#gpasswd将用户从组中添加删除" class="headerlink" title="gpasswd将用户从组中添加删除"></a>gpasswd将用户从组中添加删除</h3><p>参考：<a href="https://man.linuxde.net/gpasswd">https://man.linuxde.net/gpasswd</a></p><ul><li>gpasswd -a linzhiling mingxing #-a&#x3D;add 添加</li><li>gpasswd -d linzhiling mingxing #-d&#x3D;del 删除</li><li>gpasswd mingxing #为mingxing组修改密码</li></ul><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>id命令：显示用户的uid和gid</p><ul><li>id liuyifei</li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>配置</tag>
      
      <tag>命令</tag>
      
      <tag>用户</tag>
      
      <tag>管理</tag>
      
      <tag>组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机的三种网络模式</title>
    <link href="/2016/01/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2016/01/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机的三种网络模式"><a href="#虚拟机的三种网络模式" class="headerlink" title="虚拟机的三种网络模式"></a>虚拟机的三种网络模式</h1><p>首先说下写这篇文章的原因，记得刚开始接触Linux的时候，使用的是ubuntu Kylin 14.04，那时候为了联上互联网使用Vmware的NAT模式。后来开始学习服务器的相关知识，换成了CentOS6.7，这时候为了能远程登录使用的是Bridge模式，但是一直没有让这个服务器连互联网（Bridge模式是可以联网的），连安装软件都是通过本地的yum源，现在放假回家，电脑连的是无线网（没有插网线），突然发现一直ping不同虚拟机，才发现是模式选择的问题，查了资料之后才发现原来是需要使用Host-Only模式，由此我就想写一下三种模式的区别。</p><span id="more"></span><h2 id="虚拟机的网络模式"><a href="#虚拟机的网络模式" class="headerlink" title="虚拟机的网络模式"></a>虚拟机的网络模式</h2><p>大家一般使用vmware和virtual box这两款虚拟机软件，一般来说，虚拟机有三种网络模式:</p><ol><li>NAT</li><li>Bridge</li><li>Host-Only</li></ol><p>初学者看到虚拟机有三种网络，估计就慌了，笔者也是。哪一种网络是适合自己的虚拟机呢？下面分别介绍三者虚拟机的区别，以供选择。</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p><strong>NAT：Network Address Translation（网络地址转换）</strong></p><p>NAT模式中，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。</p><p>NAT模式中，虚拟机的网卡和物理网卡的网络，不是同一个网络，虚拟机的网卡，是在Vmware提供的一个虚拟网络中。NAT模式下的虚拟系统的TCP&#x2F;IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。</p><p>采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。 这种方式也可以实现Host OS与Guest OS的双向访问。但网络内其他机器不能访问Guest OS，Guest OS可通过Host OS用NAT协议访问网络内其他机器。NAT方式的IP地址配置方法是由VMware的虚拟DHCP服务器中分配一个IP。</p><p><strong>改好之后需要修改vmnet8的网关，即可脸上互联网了</strong></p><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。</p><p>在bridged模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机。它可以和局域网内的任何一台主机进行方向访问。</p><p>在bridged模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP&#x2F;IP配置信息，以实现通过局域网的网关或路由器访问互联网。 使用bridged模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。 </p><p>主机不在局域网中时不可使用</p><h2 id="Host-Only"><a href="#Host-Only" class="headerlink" title="Host-Only"></a>Host-Only</h2><p>在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机，相当于和主机公用一个私有网络。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p><p>Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。</p><h2 id="选择适合自己的模式"><a href="#选择适合自己的模式" class="headerlink" title="选择适合自己的模式"></a>选择适合自己的模式</h2><h3 id="选择NAT模式"><a href="#选择NAT模式" class="headerlink" title="选择NAT模式"></a>选择NAT模式</h3><blockquote><p>如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式</p></blockquote><h3 id="选择Bridge模式"><a href="#选择Bridge模式" class="headerlink" title="选择Bridge模式"></a>选择Bridge模式</h3><blockquote><p>如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择bridge模式</p></blockquote><h3 id="选择Host-Only模式"><a href="#选择Host-Only模式" class="headerlink" title="选择Host-Only模式"></a>选择Host-Only模式</h3><blockquote><p>主机断网时可以选用Host-Only模式，链接无线网时也可以使用，这样可以避免NAT的ip变化，不利于实验</p></blockquote><h2 id="三种模式下虚拟机和物理机通信的设置方式"><a href="#三种模式下虚拟机和物理机通信的设置方式" class="headerlink" title="三种模式下虚拟机和物理机通信的设置方式"></a>三种模式下虚拟机和物理机通信的设置方式</h2><p>要通信，必定设置虚拟机和物理机在同一网段。</p><p>Bridge：设置本地连接和虚拟机的eth0在同一网段</p><p>Host-Only：设置WMnet1和虚拟机的eth0在同一网段</p><p>NAT：设置VMnet8的ip，但是DHCP动态变化，不利于实验。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>模式</tag>
      
      <tag>配置</tag>
      
      <tag>网络</tag>
      
      <tag>Vmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux规划、安装、远程管理</title>
    <link href="/2015/12/27/linux%E8%A7%84%E5%88%92%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2015/12/27/linux%E8%A7%84%E5%88%92%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux规划"><a href="#Linux规划" class="headerlink" title="Linux规划"></a>Linux规划</h2><p>一定要根据服务项目，才来进行硬盘的规划。</p><p>如果是邮件主机，一般&#x2F;var通常会给个数GB的大小， 如此一来就可以不担心会邮件空间不足！如果是多用户多终端主机,一般&#x2F;home通常比较大。这些都是和当初预计的主机服务是有关的！</p><span id="more"></span><p>我的wmware中的CentOS分区如下图(使用df -th可以查看)：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/history/Flowsnow%E6%9F%A5%E7%9C%8BLinux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.jpg"></p><p>&#x2F;boot 该分区存放Linux的Grub(bootloader)和内核源码,一般给200MB即可&gt; </p><p>swap 该分区没有对应的目录，故用户无法访问，只能由系统访问。Linux下的swap分区即为虚拟内存.虚拟内存用于当系统内存空间不足时，先将临时数据存放在swap分区，等待一段时间后，然后再将数据调入到内存中执行.所以说，虚拟内存只是暂时存放数据，在该空间内并没有执行。swap分区大小一般为物理内存的两倍，物理内存最多给4G足够了，我的是2000MB&gt; </p><p>&#x2F;home 根据用户分配给即可，我的是2000MB&gt; </p><p>&#x2F; 根分区，剩余空间都给&#x2F;分区</p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>wmware虚拟机安装Linux操作系统参见我的csdn博客:</p><p><a href="https://blog.csdn.net/u013637931/article/details/49288073">https://blog.csdn.net/u013637931/article/details/49288073</a></p><h2 id="Linux远程管理"><a href="#Linux远程管理" class="headerlink" title="Linux远程管理"></a>Linux远程管理</h2><p>Linux能够远程管理的前提:</p><ol><li>配置静态IP（如果是动态则每次都要配置）</li><li>主机开启登陆服务（ssh，telnet等）</li><li>登陆工具使用和配置</li></ol><h3 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h3><p>如何配置静态IP参见我的csdn博客:</p><p><a href="https://blog.csdn.net/u013637931/article/details/49287643">https://blog.csdn.net/u013637931/article/details/49287643</a></p><h3 id="检查主机是否开启登陆服务"><a href="#检查主机是否开启登陆服务" class="headerlink" title="检查主机是否开启登陆服务"></a>检查主机是否开启登陆服务</h3><h4 id="telnet-明文传输"><a href="#telnet-明文传输" class="headerlink" title="telnet  (明文传输)"></a>telnet  (明文传输)</h4><p>系统默认是没有安装telnet服务的，因此我们先安装telenet-server和telnet服务</p><ul><li><p>yum install telnet-server #服务端</p></li><li><p>yum install telnet #客户端</p><p>查看telnet版本</p></li><li><p>rpm -qa | grep telnet</p><p>检查是否开启telnet服务</p></li><li><p>rpm -qa telnet</p><p>启动telnet 服务</p></li><li><p>vi &#x2F;etc&#x2F;xinetd.d&#x2F;telnet</p><blockquote><p>找到 disable &#x3D; yes 将 yes 改成 no 。</p></blockquote><p>启动或者重启telnet服务的守护进程xinetd</p></li><li><p>service xinetd start</p></li><li><p>service xinetd restart</p><p>修改防火墙，允许端口23通过</p></li><li><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</p><blockquote><p>添加如下一行内容：&gt; </p><p>A INPUT -m state –state NEW -m tcp -p tcp –dport 23 -j ACCEPT<br>​</p></blockquote></li><li><p>service iptables restart #重启防火墙</p><p>本地测试telnet(也可以putty远程测试)</p></li><li><p>telnet localhost</p><p>参考：<a href="https://www.cnblogs.com/xlmeng1988/archive/2012/04/24/telnet-server.html">Centos 开启telnet-service服务</a></p></li></ul><h4 id="ssh-加密传输"><a href="#ssh-加密传输" class="headerlink" title="ssh  (加密传输)"></a>ssh  (加密传输)</h4><p>系统默认安装了ssh</p><p>检查CentOS是否安装ssh</p><ul><li><p>rpm -qa | grep ssh</p><p>检查是否启动ssh服务</p></li><li><p>ps -ef | grep ssh</p><p>若出现&#x2F;usr&#x2F;bin&#x2F;sshd进程，则表示启动成功</p></li></ul><p>启动或重启SSH服务</p><ul><li><p>service sshd start</p></li><li><p>service sshd restart</p><p>使用putty或者secureCRT远程ssh登录即可测试</p></li></ul><h3 id="远程登录的工具"><a href="#远程登录的工具" class="headerlink" title="远程登录的工具"></a>远程登录的工具</h3><p>putty，secureCRT，xmanager都可以登录CentOS系统操作，个人偏爱于putty和secureCRT。</p><p>WinSCP可以进行windows和linux之间进行文件传输</p><p>各个安装包下载链接：</p><p>WinSCP链接：<a href="https://pan.baidu.com/s/1brodEu">https://pan.baidu.com/s/1brodEu</a> 密码: ar59</p><p>secureCRT链接：<a href="https://pan.baidu.com/s/1hrnEbn2">https://pan.baidu.com/s/1hrnEbn2</a> 密码: 2qgi</p><p>putty链接:<a href="https://pan.baidu.com/s/1o6XSKSa">https://pan.baidu.com/s/1o6XSKSa</a> 密码: 47na</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>远程管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的四年，我的校招</title>
    <link href="/2015/11/27/%E6%88%91%E7%9A%84%E5%9B%9B%E5%B9%B4%EF%BC%8C%E6%88%91%E7%9A%84%E6%A0%A1%E6%8B%9B/"/>
    <url>/2015/11/27/%E6%88%91%E7%9A%84%E5%9B%9B%E5%B9%B4%EF%BC%8C%E6%88%91%E7%9A%84%E6%A0%A1%E6%8B%9B/</url>
    
    <content type="html"><![CDATA[<p>机遇只会光顾有准备的人</p><p>然而我没有任何的准备。距离签工作已经过去了一个多月了，我清晰的记得那天是2015年10月17号，这一个多月里面一直想写一下东西来记录这苦逼的找工作的经历，但是一直没有一个合适的形式展现出来。就在昨天（2015年11月26号），一个偶然的机会看到了曾经一起ACM的大牛JCF在Hexo上写下了自己的保研经历，写的真的很深刻。然后我就用wordpress搭建了一个个人技术博客，打算也写一写我那不值得一提的经历吧。</p><span id="more"></span><h2 id="坚定的大一"><a href="#坚定的大一" class="headerlink" title="坚定的大一"></a>坚定的大一</h2><p>上大学之前我就很坚定不读研，不管是考还是保，一概不考虑，。这其中有一些家庭原因也有不少个人原因。一直到现在我心里都没有一丝想读研的念头。</p><p>整个大一都非常的认真基本都是泡在图书馆和机房，也算是真正做到了“晨兴理荒秽,带月荷锄归”。我也真的很佩服自己，在一年内在机房消费了753块（机房是一块钱一小时），平均下来我每天呆在机房的时间超过了3小时，现在想来那时候我是有多大的毅力。等到了大一结束的时候我还特地去机房值班室看了一下，好像我打破了机房记录。在机房的时间里多数还是在敲代码。那时候就是对代码那么有兴趣，只要完全正确自己就有很大的成就感。</p><p>就这样大一结束的那个暑假，报名参加了校ACM集训，从开始集训的好几十人一直坚持到了暑假结束，这个时候有多少人呢？就五个而已。不知不觉少了那么多人，竟没觉得又一点奇怪。</p><!--more--><h2 id="混沌的大二"><a href="#混沌的大二" class="headerlink" title="混沌的大二"></a>混沌的大二</h2><p>就这样，最后的五个人YW，NM，ZW，LJB and I。还有几个老队员LW，JCF，LQ，PSW。就这样开启了称不上“ACM之旅”的刷题之路。净做一些水题，没有什么指导，完全靠自己。</p><p>慢慢的，刷题的兴趣也消减了好多，之前的至少一天一道题，到后来的未必一周有一道。</p><p>期间也参加了一些比赛，网络赛，邀请赛，现场赛，都去过，但是都没有什么好成绩，各种优秀奖，基本都是去打铁，连铸铜的希望都看不到。</p><p>但还是很开心，至少出去过，也见识了世面，看到了人外有人天外有天，看到了自己变得更菜。</p><!--more--><h2 id="不知道干嘛的大三"><a href="#不知道干嘛的大三" class="headerlink" title="不知道干嘛的大三"></a>不知道干嘛的大三</h2><p>大三的上学期现在没有了一点点印象了，直至大三下学期开始才开始想到找工作快来了，开始着手复习以前学的，开始复习C++ Primer，开始复习数据结构，大概在暑假之前只是自己感觉复习的差不多了。</p><p>其实那时候牛逼的人早就开始找实习的机会了，各大公司的暑期实习，然而我们整个专业好像都无动于衷，没有一个人去积极准备。</p><p>暑假来临摆在面前的实习机会有两个，一个是去西安行知汇元公司做软件开发，后来才知道其实都是做网站的东西，另一个是去西安公路研究所驻南京办事处做网络调研员。前者没工资不包吃住，后者包吃住每天100，毫无疑问我果断选择了后者。也正是这个实习经历，影响了我后来的职业。实习结束到开学之前因为看不惯VS生成的巨大应用程序，花了半个月的时间去学了QT。</p><!--more--><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="迷茫的秋招"><a href="#迷茫的秋招" class="headerlink" title="迷茫的秋招"></a>迷茫的秋招</h2><p>九月份来到学校，等我来的时候发现同学门的简历都已经做的很好了，当他们出去跑招聘会的时候，我才开始做简历，也不知道做了多久，做了一个自己都觉得很low的简历，因为自己平时做的那些课程设计太平常没有能拿得出手的。这时候做了一些笔试题，又感觉自己很多东西都没有复习到。</p><p>基础知识记不清 + 项目太low &#x3D; 找工作没希望</p><p>接下来开始使劲的做项目，重点做的有两个QT网络五子棋，Linux下SVN考试系统。</p><p>自己的方向是C++，但是这个方向太宽泛，而且必须要掌握Linux，就这样自学了一段时间的Linux服务器的东西。</p><p>在这期间参加了一场招聘会。</p><ul><li><p>北京软通动力        （外包公司）</p><p>没什么经验，笔试过了，面试的时候满是看不起人家公司的意思，并没有表现出很大的求职欲望，被刷也是意料之中的。</p></li></ul><p>再后来看到同学LSH的一个西电同学的简历，那真是太牛逼了，又是做了扫码系统又是做了快牙，瞬间被打击的不行。就这样把简历大刀阔斧的改了，自己觉得还很满意。毕竟学会了吹牛逼。</p><p>慢慢的就国庆长假到了，原本计划在这几天里面好好复习好好准备，结果和舍友在宿舍打游戏过去了.（不要问我九月份去哪儿跑了，我哪儿都没去）</p><!--more--><h2 id="国庆之后跑过的公司"><a href="#国庆之后跑过的公司" class="headerlink" title="国庆之后跑过的公司"></a>国庆之后跑过的公司</h2><ul><li><p>完美世界    （最想去的公司，结果笔试没过）</p></li><li><p>滴滴打车    （在线测试题全是那种恶心的图形题）</p></li><li><p>同花顺        （在线笔试没有过）</p></li><li><p>中邮建        （头脑发热报了个通信设备工程师）</p><p>从这之后我觉得貌似我不做软件开发也可以，我觉得我对运维的兴趣貌似也很不错。</p></li><li><p>跟谁学        （一家很不错的在线O2O公司，但是还是自己忘记的东西太多）</p></li><li><p>税友            （最终签约的公司，与面试官谈的很开心，了解了很多运维开发方面的问题，很满意）</p><p>写到最后不知道写啥，最开始要找C++开发工作的我现在做的是Linux运维开发，其实也很有意思。貌似我一直都是没有提前准备的习惯的人。但是又能很快适应新环境的人。</p></li></ul><p>经历能让人变成熟，谢谢一直伴我走来的家人、朋友、老师和同学！</p><!--more--><p>立志做一个有准备的人</p><p>附录:</p><p><a href="https://jcf94.com/2015/11/24/2015-11-24-baoyan/">JCF的保研路</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>秋招</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于OpenCV的stitching使用</title>
    <link href="/2014/12/13/%E5%85%B3%E4%BA%8Eopencv%E7%9A%84stitching%E4%BD%BF%E7%94%A8/"/>
    <url>/2014/12/13/%E5%85%B3%E4%BA%8Eopencv%E7%9A%84stitching%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>配置环境：VS2010+OpenCV2.4.9</p><p>为了使用 OpenCV 实现图像拼接头痛了好长时间，一直都没时间做，今天下定决心去实现基本的图像拼接。</p><h3 id="首先，看一看使用-OpenCV-进行拼接的方法"><a href="#首先，看一看使用-OpenCV-进行拼接的方法" class="headerlink" title="首先，看一看使用 OpenCV 进行拼接的方法"></a>首先，看一看使用 OpenCV 进行拼接的方法</h3><p>基本都是用 Stitcher 类中的 stitch 方法。下面是网上的代码，同时也是 opencv\samples\cpp\stitching.cpp 的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/highgui/highgui.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/stitching/stitcher.hpp&quot;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br> <br><span class="hljs-type">bool</span> try_use_gpu = <span class="hljs-literal">false</span>;<br>vector imgs;<br>string result_name = <span class="hljs-string">&quot;result.jpg&quot;</span>;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printUsage</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parseCmdArgs</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> retval = <span class="hljs-built_in">parseCmdArgs</span>(argc, argv);<br>    <span class="hljs-keyword">if</span> (retval) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br> <br>    Mat pano;<br>    Stitcher stitcher = Stitcher::<span class="hljs-built_in">createDefault</span>(try_use_gpu);<br>    Stitcher::Status status = stitcher.<span class="hljs-built_in">stitch</span>(imgs, pano);<br> <br>    <span class="hljs-keyword">if</span> (status != Stitcher::OK)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Can&#x27;t stitch images, error code = &quot;</span> &lt;&lt; <span class="hljs-built_in">int</span>(status) &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    <span class="hljs-built_in">imwrite</span>(result_name, pano);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printUsage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt;<br>        <span class="hljs-string">&quot;Rotation model images stitcher.\n\n&quot;</span><br>        <span class="hljs-string">&quot;stitching img1 img2 [...imgN]\n\n&quot;</span><br>        <span class="hljs-string">&quot;Flags:\n&quot;</span><br>        <span class="hljs-string">&quot;  --try_use_gpu (yes|no)\n&quot;</span><br>        <span class="hljs-string">&quot;      Try to use GPU. The default value is &#x27;no&#x27;. All default values\n&quot;</span><br>        <span class="hljs-string">&quot;      are for CPU mode.\n&quot;</span><br>        <span class="hljs-string">&quot;  --output \n&quot;</span><br>        <span class="hljs-string">&quot;      The default is &#x27;result.jpg&#x27;.\n&quot;</span>;<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">parseCmdArgs</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printUsage</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; argc; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>(argv[i]) == <span class="hljs-string">&quot;--help&quot;</span> || <span class="hljs-built_in">string</span>(argv[i]) == <span class="hljs-string">&quot;/?&quot;</span>)<br>        &#123;<br>            <span class="hljs-built_in">printUsage</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>(argv[i]) == <span class="hljs-string">&quot;--try_use_gpu&quot;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>(argv[i + <span class="hljs-number">1</span>]) == <span class="hljs-string">&quot;no&quot;</span>)<br>                try_use_gpu = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>(argv[i + <span class="hljs-number">1</span>]) == <span class="hljs-string">&quot;yes&quot;</span>)<br>                try_use_gpu = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Bad --try_use_gpu flag value\n&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>(argv[i]) == <span class="hljs-string">&quot;--output&quot;</span>)<br>        &#123;<br>            result_name = argv[i + <span class="hljs-number">1</span>];<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Mat img = <span class="hljs-built_in">imread</span>(argv[i]);<br>            <span class="hljs-keyword">if</span> (img.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Can&#x27;t read image &#x27;&quot;</span> &lt;&lt; argv[i] &lt;&lt; <span class="hljs-string">&quot;&#x27;\n&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>            imgs.<span class="hljs-built_in">push_back</span>(img);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>感觉这个说的比较繁琐，我就改写成了下面的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/highgui/highgui.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/stitching/stitcher.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br> <br><span class="hljs-type">bool</span> try_use_gpu = <span class="hljs-literal">false</span>;<br>vector imgs;<br>string result_name = <span class="hljs-string">&quot;result.jpg&quot;</span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Mat img1=<span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br>    Mat img2=<span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;2.jpg&quot;</span>);<br>    imgs.<span class="hljs-built_in">push_back</span>(img1);<br>    imgs.<span class="hljs-built_in">push_back</span>(img2);<br>    Mat pano;<br>    Stitcher stitcher = Stitcher::<span class="hljs-built_in">createDefault</span>(try_use_gpu);<br>    Stitcher::Status status = stitcher.<span class="hljs-built_in">stitch</span>(imgs, pano);<br>    <span class="hljs-keyword">if</span> (status != Stitcher::OK)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Can&#x27;t stitch images, error code = &quot;</span> &lt;&lt; status &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">namedWindow</span>(result_name);<br>    <span class="hljs-built_in">imshow</span>(result_name,pano);<br>    <span class="hljs-built_in">imwrite</span>(result_name,pano);<br>    <span class="hljs-built_in">waitKey</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面看一下原图和效果图，（以四张原图为例，分为左上，右上，左下，右下）<br><img src="http://images0.cnblogs.com/blog/637108/201501/011635050598186.jpg"></p><p><img src="http://images0.cnblogs.com/blog/637108/201501/011635227786873.jpg"></p><p><img src="http://images0.cnblogs.com/blog/637108/201501/011635309345981.jpg"></p><p><img src="http://images0.cnblogs.com/blog/637108/201501/011635439816729.jpg"><br>效果图如下：</p><p><img src="http://images0.cnblogs.com/blog/637108/201501/011636424349671.jpg"></p><p>可以发现代码中最关键的两句就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Stitcher stitcher = Stitcher::<span class="hljs-built_in">createDefault</span>(try_use_gpu);<br>Stitcher::Status status = stitcher.<span class="hljs-built_in">stitch</span>(imgs, pano);<br></code></pre></td></tr></table></figure><p>Stitcher 是 OpenCV 的一个类，下面看一下这个类的源代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CV_EXPORTS</span> Stitcher<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">enum</span> &#123; ORIG_RESOL = <span class="hljs-number">-1</span> &#125;;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Status</span> &#123; OK, ERR_NEED_MORE_IMGS &#125;;<br> <br>    <span class="hljs-comment">// Creates stitcher with default parameters</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> Stitcher <span class="hljs-title">createDefault</span><span class="hljs-params">(<span class="hljs-type">bool</span> try_use_gpu = <span class="hljs-literal">false</span>)</span></span>;<br> <br>    <span class="hljs-function">Status <span class="hljs-title">estimateTransform</span><span class="hljs-params">(InputArray images)</span></span>;<br>    <span class="hljs-function">Status <span class="hljs-title">estimateTransform</span><span class="hljs-params">(InputArray images, <span class="hljs-type">const</span> std::vector &gt; &amp;rois)</span></span>;<br> <br>    <span class="hljs-function">Status <span class="hljs-title">composePanorama</span><span class="hljs-params">(OutputArray pano)</span></span>;<br>    <span class="hljs-function">Status <span class="hljs-title">composePanorama</span><span class="hljs-params">(InputArray images, OutputArray pano)</span></span>;<br> <br>    <span class="hljs-function">Status <span class="hljs-title">stitch</span><span class="hljs-params">(InputArray images, OutputArray pano)</span></span>;<br>    <span class="hljs-function">Status <span class="hljs-title">stitch</span><span class="hljs-params">(InputArray images, <span class="hljs-type">const</span> std::vector &gt; &amp;rois, OutputArray pano)</span></span>;<br> <br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">registrationResol</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> registr_resol_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setRegistrationResol</span><span class="hljs-params">(<span class="hljs-type">double</span> resol_mpx)</span> </span>&#123; registr_resol_ = resol_mpx; &#125;<br> <br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">seamEstimationResol</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> seam_est_resol_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setSeamEstimationResol</span><span class="hljs-params">(<span class="hljs-type">double</span> resol_mpx)</span> </span>&#123; seam_est_resol_ = resol_mpx; &#125;<br> <br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">compositingResol</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> compose_resol_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setCompositingResol</span><span class="hljs-params">(<span class="hljs-type">double</span> resol_mpx)</span> </span>&#123; compose_resol_ = resol_mpx; &#125;<br> <br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">panoConfidenceThresh</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> conf_thresh_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setPanoConfidenceThresh</span><span class="hljs-params">(<span class="hljs-type">double</span> conf_thresh)</span> </span>&#123; conf_thresh_ = conf_thresh; &#125;<br> <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">waveCorrection</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> do_wave_correct_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setWaveCorrection</span><span class="hljs-params">(<span class="hljs-type">bool</span> flag)</span> </span>&#123; do_wave_correct_ = flag; &#125;<br> <br>    <span class="hljs-function">detail::WaveCorrectKind <span class="hljs-title">waveCorrectKind</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> wave_correct_kind_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setWaveCorrectKind</span><span class="hljs-params">(detail::WaveCorrectKind kind)</span> </span>&#123; wave_correct_kind_ = kind; &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">featuresFinder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> features_finder_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">featuresFinder</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> features_finder_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFeaturesFinder</span><span class="hljs-params">(Ptr features_finder)</span></span><br><span class="hljs-function">        </span>&#123; features_finder_ = features_finder; &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">featuresMatcher</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> features_matcher_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">featuresMatcher</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> features_matcher_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFeaturesMatcher</span><span class="hljs-params">(Ptr features_matcher)</span></span><br><span class="hljs-function">        </span>&#123; features_matcher_ = features_matcher; &#125;<br> <br>    <span class="hljs-function"><span class="hljs-type">const</span> cv::Mat&amp; <span class="hljs-title">matchingMask</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> matching_mask_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setMatchingMask</span><span class="hljs-params">(<span class="hljs-type">const</span> cv::Mat &amp;mask)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">CV_Assert</span>(mask.<span class="hljs-built_in">type</span>() == CV_8U &amp;&amp; mask.cols == mask.rows);<br>        matching_mask_ = mask.<span class="hljs-built_in">clone</span>();<br>    &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">bundleAdjuster</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> bundle_adjuster_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">bundleAdjuster</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> bundle_adjuster_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setBundleAdjuster</span><span class="hljs-params">(Ptr bundle_adjuster)</span></span><br><span class="hljs-function">        </span>&#123; bundle_adjuster_ = bundle_adjuster; &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">warper</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> warper_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">warper</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> warper_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setWarper</span><span class="hljs-params">(Ptr warper)</span> </span>&#123; warper_ = warper; &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">exposureCompensator</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> exposure_comp_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">exposureCompensator</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> exposure_comp_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setExposureCompensator</span><span class="hljs-params">(Ptr exposure_comp)</span></span><br><span class="hljs-function">        </span>&#123; exposure_comp_ = exposure_comp; &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">seamFinder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> seam_finder_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">seamFinder</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> seam_finder_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setSeamFinder</span><span class="hljs-params">(Ptr seam_finder)</span> </span>&#123; seam_finder_ = seam_finder; &#125;<br> <br>    <span class="hljs-function">Ptr <span class="hljs-title">blender</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> blender_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">const</span> Ptr <span class="hljs-title">blender</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> blender_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setBlender</span><span class="hljs-params">(Ptr blender)</span> </span>&#123; blender_ = blender; &#125;<br> <br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">/* hidden */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p> 可以看到 Stitcher 大致有这些成员函数：createDefault，estimateTransform，composePanorama，stitch 等等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"> Stitcher stitcher = Stitcher::<span class="hljs-built_in">createDefault</span>(try_use_gpu);这句话表示使用默认参数创建Stitcher类的对象stitcher，try_use_gpu表示是否打开GPU，默认不打开，即try_use_gpu=<span class="hljs-literal">false</span>;下面是这个函数的原型：<br><br>C++: <span class="hljs-function">Stitcher <span class="hljs-title">Stitcher::createDefault</span><span class="hljs-params">(<span class="hljs-type">bool</span> try_use_gpu=<span class="hljs-literal">false</span>)</span></span><br><span class="hljs-function">参数：Flag indicating whether GPU should be used whenever it’s possible.</span><br><span class="hljs-function"><span class="hljs-keyword">return</span>：Stitcher <span class="hljs-keyword">class</span> instance.（即创建了一个对象）</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">Stitcher::Status status = stitcher.<span class="hljs-built_in">stitch</span>(imgs, pano);这句话表示：<span class="hljs-keyword">try</span> to stitch the given images <br><br>C++: <span class="hljs-function">Status <span class="hljs-title">Stitcher::stitch</span><span class="hljs-params">(InputArray images, OutputArray pano)</span></span><br><span class="hljs-function">C++: Status Stitcher::stitch(InputArray images, const std::vector&gt;&amp; rois, OutputArray pano)</span><br><span class="hljs-function">参数：images – Input images.</span><br><span class="hljs-function">　　  rois – Region of interest rectangles.（感兴趣区）</span><br><span class="hljs-function">      pano – Final pano.</span><br><span class="hljs-function">return：Status code.（数据成员中枚举数组的一项）</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>Stitcher::estimateTransform 和 Stitcher::composePanorama 的使用为高级使用，需要清楚Stitching pipeline 的过程。</p><p>下面贴出 pipeline：<br><img src="http://images0.cnblogs.com/blog/637108/201412/131600301659984.jpg"></p><p>可以看出这个过程很复杂，需要涉及到很多的算法，比如：特征点的提取、特征点匹配、图像融合等等。这些过程 OpenCV 都为我们封装在 Stitcher 类中，不在此细述。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然用 OpenCV 中的 Stitcher 类实现了基本的拼接，但是有一个最大的问题是，运行的效率是极低的，就这个代码中，拼接 3 张图片差不多用了一分钟，这在需要做实时拼接的时候是根本不可能使用的，所以后面需要做的工作任然是弄清楚 Stitching pipeline 的详细过程，进一步优化代码，提高拼接运行效率。</p><p>下面贴出参考资料：<br><a href="http://docs.opencv.org/2.4.2/modules/stitching/doc/high_level.html">http://docs.opencv.org/2.4.2/modules/stitching/doc/high_level.html</a></p><p>下面贴出源代码和 OpenCV 中的 stiching.cpp 和 stitching_detailed.cpp 的下载地址：<br><a href="http://download.csdn.net/detail/u013637931/8255767">http://download.csdn.net/detail/u013637931/8255767</a></p>]]></content>
    
    
    <categories>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学知识综述</title>
    <link href="/2014/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%BB%BC%E8%BF%B0/"/>
    <url>/2014/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%9F%A5%E8%AF%86%E7%BB%BC%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CG-复习总结-Computer-Graphics"><a href="#CG-复习总结-Computer-Graphics" class="headerlink" title="CG 复习总结 Computer Graphics"></a>CG 复习总结 Computer Graphics</h1><h2 id="Goals-in-Detail"><a href="#Goals-in-Detail" class="headerlink" title="Goals in Detail"></a>Goals in Detail</h2><ol><li>Introduce basic concepts of computer graphics </li><li>Describe the 3D graphic representation flow in current PC </li><li>Describe some fundamental algorithms used in computer graphics </li><li>Introduce the computer graphics programming with OpenGL </li><li>Enhance the ability on programming and data structure exertion </li><li>Research in CG community</li></ol><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ol><li>Survey of CG and Overview of Graphics Systems </li><li>Line&#x2F;Circle Drawing algorithm </li><li>Polygon Fill Algorithm</li><li>Introduction to OpengGL Programming </li><li>Lighting model  </li><li>Geometric Transformations </li><li>Clipping </li><li>Visible-Surface Detection</li></ol><h2 id="Graphics-in-“Computer-Graphics”"><a href="#Graphics-in-“Computer-Graphics”" class="headerlink" title="Graphics in “Computer Graphics”"></a>Graphics in “Computer Graphics”</h2><p>是指由点、线、面、体等几何要素 (geometric attribute) 和明暗、灰度（亮度）、色彩等视觉要素 (visual attribute) 构成的，从现实世界中抽象出来的图或形</p><h2 id="Tasks-of-CG"><a href="#Tasks-of-CG" class="headerlink" title="Tasks of CG"></a>Tasks of CG</h2><p>Generating 2D images of a 3D world represented in Computer by Computing, NOT by sensing.</p><p>(3D Models -&gt; rendering -&gt; 2D images)</p><h2 id="Overview-of-the-course"><a href="#Overview-of-the-course" class="headerlink" title="Overview of the course"></a>Overview of the course</h2><h3 id="Geometry-Modeling"><a href="#Geometry-Modeling" class="headerlink" title="Geometry (Modeling)"></a>Geometry (Modeling)</h3><ul><li>View, Transformation of Models (模型的投影和变换)</li><li>Bezier Curves </li><li>B-Spline Curves </li><li>Triangle Mesh（三角网） </li><li>Deformation （变形）</li></ul><h3 id="Rendering-photorealistic-rendering-and-non-photorealistic-rendering"><a href="#Rendering-photorealistic-rendering-and-non-photorealistic-rendering" class="headerlink" title="Rendering : photorealistic rendering and non-photorealistic rendering"></a>Rendering : photorealistic rendering and non-photorealistic rendering</h3><ul><li>Basic Concepts, OpenGL</li><li>Lighting （光照）</li><li>Ray Tracing （光线跟踪）</li><li>Acceleration of Ray Tracing（光线跟踪加速）</li><li>Texture （纹理）</li><li>Shadow （阴影）</li><li>Radiosity（辐射度）</li></ul><h2 id="Research-Hot-Topics"><a href="#Research-Hot-Topics" class="headerlink" title="Research Hot Topics"></a>Research Hot Topics</h2><ul><li>Rendering</li><li>Computer Animation</li><li>Geometry</li><li>Video-based rendering</li></ul><h2 id="Geometric-Transformation"><a href="#Geometric-Transformation" class="headerlink" title="Geometric Transformation"></a>Geometric Transformation</h2><ul><li>Geometric transformation in 3D space</li><li>Translation(平移)</li><li>Scaling(放缩)</li><li>Rotation(旋转)</li><li>Homogeneous Coordinates(齐次坐标)</li><li>Global Transformation and Local Transformation</li></ul><h2 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h2><h3 id="Perspective-projection-透视投影"><a href="#Perspective-projection-透视投影" class="headerlink" title="Perspective projection (透视投影)"></a>Perspective projection (透视投影)</h3><h3 id="Perspective-projections-in-OpenGL"><a href="#Perspective-projections-in-OpenGL" class="headerlink" title="Perspective projections in OpenGL"></a>Perspective projections in OpenGL</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">glFrustum</span><span class="hljs-params">(GLdouble left, GLdouble right, GLdouble bottom, GLdouble   top, GLdouble znear, GLdouble zfar)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">gluPerspective</span><span class="hljs-params">(GLdouble fovy, GLdouble aspect, GLdouble zNear,  GLdouble zFar)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="Parallel-projection-平行投影"><a href="#Parallel-projection-平行投影" class="headerlink" title="Parallel projection (平行投影)"></a>Parallel projection (平行投影)</h3><h3 id="Clipping"><a href="#Clipping" class="headerlink" title="Clipping"></a>Clipping</h3><p>Point clipping (点的裁减) ：是否在区域内部</p><h3 id="Line-clipping-线的裁减"><a href="#Line-clipping-线的裁减" class="headerlink" title="Line clipping (线的裁减)"></a>Line clipping (线的裁减)</h3><p>Binary Region Codes(区域编码) ：4-digit code CtCbCrCl（上下右左）<br>Mid-point Partition Algorithm（中点分割算法：二分）</p><h3 id="Polygon-clipping-多边形的裁减"><a href="#Polygon-clipping-多边形的裁减" class="headerlink" title="Polygon clipping (多边形的裁减)"></a>Polygon clipping (多边形的裁减)</h3><h3 id="Transformation-from-window-to-viewport"><a href="#Transformation-from-window-to-viewport" class="headerlink" title="Transformation from window to viewport"></a>Transformation from window to viewport</h3><p>glFrustum 函数和 glViewport 函数</p><h2 id="Graphics-Pipeline"><a href="#Graphics-Pipeline" class="headerlink" title="Graphics Pipeline"></a>Graphics Pipeline</h2><p><img src="http://images0.cnblogs.com/blog/637108/201412/120045005407688.png"></p><p>图形学流水线可以概括为：</p><p>局部坐标的 3D 模型通过 3D 空间的几何转换得到全局坐标的 3D 模型，通过投影得到投影坐标系中的 2D 图形，通过窗口裁剪得到窗口坐标系中已裁剪的 2D 图形，通过窗口到视口的变换，得到视口坐标系中的 2D 图形，通过光栅化得到视口坐标系中的 2D 图像</p><h2 id="Visibility-Detection"><a href="#Visibility-Detection" class="headerlink" title="Visibility Detection"></a>Visibility Detection</h2><h3 id="Why-to-do-it"><a href="#Why-to-do-it" class="headerlink" title="Why to do it"></a>Why to do it</h3><ul><li>Avoiding ambiguity (消除二义性)</li><li>Get the correct visual effect (正确绘制）</li><li>Improving rendering rates (提高绘制效率)</li></ul><h3 id="Back-Face-Detection-后向面判别"><a href="#Back-Face-Detection-后向面判别" class="headerlink" title="Back-Face Detection(后向面判别)"></a>Back-Face Detection(后向面判别)</h3><p>实现与平面法向的夹角 V· N&lt;0 为前向面，V· N&gt;0 为后向面</p><h3 id="Visible-Surface-Detection-Methods"><a href="#Visible-Surface-Detection-Methods" class="headerlink" title="Visible-Surface Detection Methods"></a>Visible-Surface Detection Methods</h3><ul><li>Ray Casting Method（了解）：光线投射法</li><li>Z-buffer, Scan-Line Z-buffer（详细掌握）</li><li>stores a depth value for each pixel on the screen</li><li>Scan-Line Z-buffer:To process one scan-line of the screen at a time in order  to reduce storage requirements</li><li>Area-Subdivision Method（了解）</li><li>Depth Sorting Method（整体掌握）</li></ul><h2 id="Lighting"><a href="#Lighting" class="headerlink" title="Lighting"></a>Lighting</h2><h2 id="Shading-着色"><a href="#Shading-着色" class="headerlink" title="Shading(着色)"></a>Shading(着色)</h2><h3 id="Polygonal-Shading"><a href="#Polygonal-Shading" class="headerlink" title="Polygonal Shading"></a>Polygonal Shading</h3><ul><li>Flat shading(平面着色)</li><li>Interpolative shading(插值着色)：Interpolate color in interior</li><li>Gouraud shading(高洛德着色 )<ul><li>Face normal 取平均得到 vertex normal 计算得到 vertex color 然后 Interpolate  colors across polygon</li></ul></li><li>Phong shading (different from Phong illumination)(Phong 着色)<ul><li>Interpolate normals rather than colors</li></ul></li></ul><h2 id="Photorealistic-Rendering-Ray-tracing"><a href="#Photorealistic-Rendering-Ray-tracing" class="headerlink" title="Photorealistic Rendering Ray-tracing"></a>Photorealistic Rendering Ray-tracing</h2><ul><li>Introduction of ray tracing </li><li>Ray intersection(光线求交)</li><li>shadows(阴影)</li><li>Transparence and specular reflection(透明和镜面反射)</li><li>textures(纹理)</li></ul><p>光线追踪的核心在于光线求交（Ray intersection）<br>The Simplest Ray Tracing：Ray Casting(光线投射)</p><h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><p>Texture mapping(纹理映射) or texturing(贴纹理)</p><h3 id="Texture-usage"><a href="#Texture-usage" class="headerlink" title="Texture usage"></a>Texture usage</h3><ul><li>Texture acquisition(纹理获取)<ul><li>Taking photograph </li><li>Procedure texture(过程纹理)</li><li>Texture synthesis(纹理合成)</li></ul></li><li>Texture mapping(贴纹理)</li><li>Texture filtering(纹理滤波)<ul><li>Aliasing(走样) 和 Anti-aliasing(反走样)</li></ul></li></ul><h2 id="NPR-stroke-非真实感绘制过程"><a href="#NPR-stroke-非真实感绘制过程" class="headerlink" title="NPR stroke(非真实感绘制过程)"></a>NPR stroke(非真实感绘制过程)</h2><p>Let computer have partial or aggressively complete capability of artists, that is selectively rendering objects stylized and abstracted.（让计算机有艺术家的能力：抽象）</p><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><ul><li>Animation ：动画</li><li>Simulation ：模拟，仿真 </li><li>Deformation ：变形 </li><li>Triangle Mesh ：三角网 </li><li>3D Data Acquisition and Modeling ：三维数据采集和建模</li><li>Color Space ：RGB、CMY、HSV、CIE XYZ</li><li>Diffuse ：漫发射 </li><li>Ambient ：环境光 </li><li>Specular ：高光（镜面反射）</li><li>Cathode ray tube(CRT) ：阴极射线管</li><li>Raster-Scan Display ：光栅扫描显示器</li><li>frame buffer ：帧缓冲（A memory area that image is stored in） </li><li>Resolution  ：分辨率 </li><li>OpenGL ：Open Graphic Library (开放的图形编程库)</li><li>Clipping ：剪裁 </li><li>Composite Transformation ：综合变换 </li><li>Depth overlaps checking ：深度重叠测试</li></ul><h1 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h1><ol><li>画出多个茶壶围绕中心一周</li><li>void glTranslatef(float x, float y, float z); 如何使用，平移前的坐标是如何指定的？（移动整个物体）x, y and z is the translation distances along the three axes.</li><li>void glRotate{fd} (TYPE angle, TYPE x, TYPE y, TYPE z); 绕 vector(x,y,z) 旋转 angle 角度 </li><li>void  glScale{fd}(TYPE Sx, TYPE Sy, TYPE Sz); Sx，Sy，Sz 分别为 x，y，z 变换的倍数</li><li>Local transformation can be implemented by inverse the multiplying order of the global transformation ：局部变换可以通过全局变换的逆乘法顺序实现（顺序完全颠倒即可）</li><li>Global Transformation and Local Transformation <ol><li>Global transformation<ol><li>每一次变换均可以看成是相对于原始坐标系执行的</li><li>后调用的变换矩阵乘在先前矩阵的左边</li><li>先调用的变换矩阵先执行</li></ol></li><li>Local transformation<ol><li>每一次变换均可以看成是在上一次变换所形成的新的坐标系中进行</li><li>后调用的变换矩阵乘在先前矩阵的右边</li><li>后调用的变换矩阵先执行</li></ol></li></ol></li><li>两个函数的使用方法：<ol><li>void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble  znear, GLdouble zfar );</li><li>void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar);</li></ol></li><li>Z-buffer 算法: Z-Buffer 算法在像素级上以近物取代远物。面片在屏幕上的出现顺序是无关紧要的。</li></ol>]]></content>
    
    
    <categories>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Differentiated Services Field (DS Field)的诸多疑问</title>
    <link href="/2014/11/22/%E5%85%B3%E4%BA%8Edifferentiated-services-field-ds-field-%E7%9A%84%E8%AF%B8%E5%A4%9A%E7%96%91%E9%97%AE/"/>
    <url>/2014/11/22/%E5%85%B3%E4%BA%8Edifferentiated-services-field-ds-field-%E7%9A%84%E8%AF%B8%E5%A4%9A%E7%96%91%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p>先上疑问截图：</p><p><img src="https://images0.cnblogs.com/blog/637108/201411/221335248908436.png"></p><p><strong>这是用wireshark抓包时协议树的某一项的展开结果：IPV4 header。其中有一项如下：</strong></p><p><img src="https://images0.cnblogs.com/blog/637108/201411/221338404212533.png"></p><p>大家在抓包时看到这儿也许很多人和我一样都会有疑问，但是又不知道是什么原因，下面我们就来分析一下：</p><p>Differentiated Services Field（下面简称为DS Field）的意思是区分服务领域。DS Field总共有8位。下面是DS字段的结构：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">0    1    2    3    4    5    6    7  <br>     +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+  <br>|          DSCP           |   CU   |  <br>     +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br></code></pre></td></tr></table></figure><p>DSCP：区分服务代码点，即DS标记值，IETF于1998年12月发布了Diff-Serv（Differentiated Service）的QoS分类标准. 它在每个数据包IP头部的服务类别TOS标识字节中，利用已使用的6比特和未使用的2比特字节，通过编码值来区分优先级。用于选择PHB（单中断段行为）。PHB描述了DS节点对具有相同DSCP的分组采用的外部可见的转发行为<br>CU：当前尚未使用</p><p>在这个IPV4 header中DS Field的8位为0x00。</p><p>低2位explicit congestion notification：显示拥塞通知（ECN），使 BIG-IP 系统能够前瞻性地向同类设备发出调度路由器将超载的信号，以便它们能够采取避退措施。</p><p>后面的两位0有四个不同编码codepoints（CU&#x3D;ECN）:</p><ul><li><code>00</code>——Non-ECT非ECN-Capable运输</li><li><code>10</code>——ECN运输能力等(0)</li><li><code>01</code>——ECN运输能力等(1)</li><li><code>11——遇到交通堵塞，CE</code></li></ul><p> <strong>总结：DS Field的两个部分DSCP和CU组合成一个可扩展性相对较强的方法以此来保证IP的服务质量。</strong></p><p>参考资料：</p><p>关于Explicit_Congestion_Notification：<a href="http://en.wikipedia.org/wiki/Explicit_Congestion_Notification">http://en.wikipedia.org/wiki/Explicit_Congestion_Notification</a></p><p>关于Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers:<a href="http://www.cnblogs.com/CHLL55/p/4115107.html">http://www.cnblogs.com/CHLL55/p/4115107.html</a></p>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark中的Checksum 0x90c5 validation disabled问题</title>
    <link href="/2014/11/21/wireshark%E4%B8%AD%E7%9A%84checksum-0x90c5-validation-disabled%E9%97%AE%E9%A2%98/"/>
    <url>/2014/11/21/wireshark%E4%B8%AD%E7%9A%84checksum-0x90c5-validation-disabled%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Wireshark中的Checksum-0x90c5-validation-disabled-问题"><a href="#Wireshark中的Checksum-0x90c5-validation-disabled-问题" class="headerlink" title="Wireshark中的Checksum: 0x90c5 [validation disabled]问题"></a>Wireshark中的Checksum: 0x90c5 [validation disabled]问题</h1><p>废话不多说先上问题图：</p><p><img src="https://images0.cnblogs.com/blog/637108/201411/212041362505163.png"></p><p>这是我在做关于DNS协议PPT的时候出现的协议树第五项展开结果，可以发现其中有一行为：</p><p><strong>Header checksum:0x90c5[validation disabled]</strong></p><p>按正常情况来说中括号中出现的应该是[correct]而不是[validation disabled]，意识是验证禁用，在Wireshark官网上查询了到了这个问题，问题的链接如下：</p><p>　　<a href="https://ask.wireshark.org/questions/2253/tcp-checksum-validation-disabled">https://ask.wireshark.org/questions/2253/tcp-checksum-validation-disabled</a></p><p>这是ask的问题：</p><blockquote><p>Is there any reason why the TCP checksum validation would be disabled. I believe I spotted a host communicating to a CnC server then being redirected to another potential drive by download site.</p><p>The TCP validation disabled checksum is for incoming traffic from the potential CnC server.</p><p>Thanks</p></blockquote><p>这是其中的一个支持率比较高的answer：</p><blockquote><p>Yes. The reason is that Wireshark is very often used to capture the network frames of the same PC that is running Wireshark. This usually results in the checksums of outgoing frames being incorrect since they are only calculated for transmission by the network card after they were already recorded by Wireshark. To avoid constant “checksum error” messages it was decided to have the checksum validation disabled by default.</p><p>It may sound stupid to disabled checkum validation since we want to find damaged packets with Wireshark when tracking down errors. But the fact is that frames with damaged checksums won’t survive much long anyway since every switch or router will probably drop them for being defective - and still, if the frame makes it to your network card it will still drop it before Wireshark even sees it. This is the reason why some commercial sniffers have specialized NIC drivers for certain cards that will allow capturing damaged frames with them.</p></blockquote><p>大致意思就是：</p><p>　　有时候TCP和UDP校验和会由网卡计算，因此wireshark抓到的本机发送的TCP&#x2F;UDP数据包的校验和都是错误的，这样检验校验和根本没有意义。所以Wireshark不自动做TCP和UDP校验和的校验</p><p>如果要校验校验和：可以在edit-&gt;preference-&gt;protocols中选择相应的TCP或者UDP协议，在相应的地方打钩。操作截图如下：</p><p><img src="https://images0.cnblogs.com/blog/637108/201411/212108392656254.png"></p><p>好了，关于checksum的validation disabled问题就介绍到这里。</p>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Wireshark分析DNS时遇到的Epoch time</title>
    <link href="/2014/11/21/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90dns%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84epoch-time/"/>
    <url>/2014/11/21/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90dns%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84epoch-time/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Wireshark分析DNS时遇到的Epoch-time"><a href="#使用Wireshark分析DNS时遇到的Epoch-time" class="headerlink" title="使用Wireshark分析DNS时遇到的Epoch time"></a>使用Wireshark分析DNS时遇到的Epoch time</h1><p>首先看一下Wireshark分析DNS的情况（如下图）：<br><img src="https://images0.cnblogs.com/blog/637108/201411/211855521096466.png"></p><p>这是协议树的第一项，第一项中的第五行出现了Epoch Time，查阅资料之后才知道：</p><p><strong>Epoch指的是一个特定的时间（新纪元时间）：1970-01-01 00:00:00 UTC。（协调世界时Universal Time Coordinated）</strong></p><p>图片中的epoch time是1416328469.028274000seconds，假如我们将一年算作365天</p><p>1416328469.028274000&#x2F;3600&#x2F;24&#x2F;365约等于44.91148.当然后面还有很多小数了。</p><p>也就是从1970年1月1号开始的44.91148年，推到现在刚好是2014年11月左右，这个数据肯定是不完全准确的，因为一年可能有366天。</p><p><strong>wireshark中显示新纪元时间<code>Epoch Time</code>的方法</strong></p><p>依次选择菜单中的View–&gt;Time Display Fromat–&gt;Seconds Since Epoch (1970-01-01): 1234567890.123456</p><p>即可将wireshark显示的时间格式设置为新纪元时间（Epoch Time），自 1970 年 1 月 1 日（00:00:00 GMT）以来的秒数。</p><p><strong>最后，epoch time涉及到一个2038 bug</strong></p><p>32位二进制数字表示时间，它们最多只能表示至协调世界时间2038年1月19日3时14分07秒，目前解决方案是把系统由32位转为64位系统。在64位系统下，此时间最多可以表示到292,277,026,596年12月4日15时30分08秒。</p>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">它在我的机器上可以很好运行！——大部分程序员<br>它在所有机器上可以很好运行！——suncle</blockquote><p>嗨，我是 suncle，16年7月毕业于长安大学计算机科学与技术专业，目前就职于YY的Hago团队，任职后端研发工程师。</p><h1 id="Contact-Me"><a href="#Contact-Me" class="headerlink" title="Contact Me"></a>Contact Me</h1><ul><li><a href="https://github.com/suncle1993" target="_blank">github</a></li><li><a href="https://weibo.com/3655576503" target="_blank">新浪微博</a></li><li><a href="https://www.zhihu.com/people/flowsnow" target="_blank">知乎</a></li><li>im.suncle#gmail.com | 572924509#qq.com</li></ul><h1 id="Coding-Activity"><a href="#Coding-Activity" class="headerlink" title="Coding Activity"></a>Coding Activity</h1><figure><embed src="https://wakatime.com/share/@Suncle/4b1da157-f481-446b-b486-66a003ea2f22.svg"></embed></figure><h1 id="Program-Languages"><a href="#Program-Languages" class="headerlink" title="Program Languages"></a>Program Languages</h1><figure><embed src="https://wakatime.com/share/@Suncle/270b9b64-ad69-4cbe-a45c-66bf9c4ec1d7.svg"></embed></figure><h1 id="Editors"><a href="#Editors" class="headerlink" title="Editors"></a>Editors</h1><figure><embed src="https://wakatime.com/share/@Suncle/559ef220-67ac-42b6-bec7-a206343b26bb.svg"></embed></figure>]]></content>
    
  </entry>
  
  
  
</search>
