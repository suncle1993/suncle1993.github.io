<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suncle&#39;s Blog</title>
  
  
  <link href="https://suncle.me/atom.xml" rel="self"/>
  
  <link href="https://suncle.me/"/>
  <updated>2022-07-10T15:53:56.000Z</updated>
  <id>https://suncle.me/</id>
  
  <author>
    <name>Suncle Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“有用之用”还是“无用之用” -#4</title>
    <link href="https://suncle.me/2022/07/10/%E2%80%9C%E6%9C%89%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D%E8%BF%98%E6%98%AF%E2%80%9C%E6%97%A0%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D-4/"/>
    <id>https://suncle.me/2022/07/10/%E2%80%9C%E6%9C%89%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D%E8%BF%98%E6%98%AF%E2%80%9C%E6%97%A0%E7%94%A8%E4%B9%8B%E7%94%A8%E2%80%9D-4/</id>
    <published>2022-07-10T01:56:37.000Z</published>
    <updated>2022-07-10T15:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是 Suncle Lab 第 4 期，我会在这里更新区块链、技术、金融、旅行和个人成长相关的内容。每期都会同步发布在我<a href="https://suncle.me/">博客</a>，欢迎你<a href="https://suncle.zhubai.love/">邮箱订阅</a>，这样就可以第一时间收到更新推送。</p><p>读书时代，我们经常会听到老师和家长告诫我们，学习一定要能学以致用，不能产生价值的不要浪费时间。</p><p>比如在高中，老师会说，一切对高考没有用处的杂事，都应该舍弃，不要看没办法直接增加分数的杂志，甚至《读者》、《意林》、《青年文摘》这类杂志都不建议看。</p><p>但是庄子在《人间世》中又这样说道：</p><blockquote><p>山木自寇也，膏火自煎也。桂可食，故伐之；漆可用，故割之。人皆知有用之用，而莫知无用之用也。</p></blockquote><p>讲人话就是：树木、油脂、桂树皮、树漆这些具有使用价值的物品，都会因使用而毁灭。反而森林中那种不能用于造船而且容易腐烂，百无一用的树种，最终能长成参天大树。</p><p>所以，本期内容主要会围绕无用之用讨论以下内容：</p><ul><li>“有用之用”还是“无用之用”？</li><li>比特币和以太坊谁更有价值？</li></ul><h2 id="“有用之用”还是“无用之用”"><a href="#“有用之用”还是“无用之用”" class="headerlink" title="“有用之用”还是“无用之用”"></a>“有用之用”还是“无用之用”</h2><p>首先，我们判断一个东西是有用还是无用，更多的是在讨论一个东西是否具有使用价值。 </p><p>生活中有使用价值的东西有很多，比如说，石油，除了作为燃油，还可以练出各种化学产品。</p><p>最常见的有塑料 、沥青、衣服、合成橡胶、制药、清洁用品等等，可以说现代文明把石油比作“工业的血液”一点也不为过。</p><p>但是，生活中很多东西是没有使用价值但又很有价值的。</p><p>阅读有没有用呢？你可能会说看书又不会立刻提升工资，也没办法让你买得起今晚上要吃的面包。</p><p>旅游有没有用呢？你去旅游领导也不会给你升职，还可能会说你不务正业，当然也不只是领导了，你的父母大概率也都会这样说的。</p><p>还记得我毕业之后的几年里面，几乎每个周末都到周边看看，差不多走遍了整个江浙沪，也被我爸妈劝诫了无数次：整天就知道出去玩，工作不好好干，以后怎么娶媳妇？怎么买房？</p><p>如果毕业的时候只是着眼于当前的生活，所有的努力都只是为了谋生，就很容易陷入绝大多数毕业生都无法逃脱的迷茫。</p><p>我们要跳出局部空间，从更长远的时间维度去思考，做自己的主人，将业余时间放在提升认知上，多去研究数学，多去深入哲学，尽可能的摒弃重复工作，多一些高屋建瓴，少一些原地打转。</p><p><strong>无用之用，是为大用。</strong></p><p>除了阅读、旅游、数学、哲学，还有一个很典型的没有使用价值但很有价值的东西就是法币。</p><p>如果说纸制的法币还能用来燃烧，那么数字化的法币就完全丢失了使用价值，只剩下和面值相等的数额价值了。</p><p>那在加密世界里面的比特币和以太坊又都有什么价值呢？</p><h2 id="比特币和以太坊谁更有价值"><a href="#比特币和以太坊谁更有价值" class="headerlink" title="比特币和以太坊谁更有价值"></a>比特币和以太坊谁更有价值</h2><p>有人说比特币是空气，除了炒作，没有任何用处。</p><p>如果从使用价值的角度看，比特币和数字化的法币确实很像，除了用于交换，你并不能用比特币干任何事情。</p><p>但是从时间和空间两个角度去考虑，比特币有两个实实在在的价值。</p><p>一个是在相同时间下，实现不同空间的价值交换。你可以从地球一端将价值传输到另一端，而不需要任何第三方中心化结算机构。</p><p>另一个是在不同时间之间，实现价值的传承。你可以将你现在的收入存储到比特币中，在将来的某一天从比特币中取出价值。</p><p>而且比特币的总量有限，一个比特币永远等于一个比特币。在法币超发的大背景下，便携、低手续费、去中心化的比特币是远胜黄金的价值存储手段。</p><p>法币越贬值，比特币币价就越高，但是币价越高，并不会给比特币系统造成任何的负面影响。</p><p>以太坊呢？以太坊诞生的目的就是为了给比特币增加使用价值，只是这个理念，和比特币是相悖的。</p><p>作为世界上最大的使用率最高的智能合约平台，以太坊生态上蓬勃发展的去中心化金融和非同质化代币项目数不胜数。比如常见的去中心化交易所uniswap，去中心化借贷aave，加密朋克NFT，无聊猿猴NFT。</p><p>以太币的价格想要上涨，就需要其内在价值越高，而内在价值取决于以太坊生态的繁荣程度。</p><p>但是以太币又是以太坊生态系统中的燃气（gas），再加上以太坊的竞价打包机制，以太币价格的升高，gas就会越高，会反过来抑制用户对以太坊的使用。</p><p>记得在去年加密货币牛市期间，以太坊的一笔交易费用高达千元人民币，几乎到了无法使用的地步，这也间接的催生了各种高性能低费率公链和侧链的诞生。</p><p>在这之后，一些项目的协议和代币发行迁移到了这些低费率的公链或者侧链上，比如Polygon，这也意味着过高的币价导致了以太坊生态的外溢。</p><p>这样的负反馈也就导致了以太坊具有与生俱来的自限性。</p><p>在我看来，随着加密行业快速发展，行业快速扩张，越来越多的用户加入，在价值存储方面，拥有自限性的以太坊自然无法和比特币相提并论。</p><h2 id="最近看了什么"><a href="#最近看了什么" class="headerlink" title="最近看了什么"></a>最近看了什么</h2><ul><li><a href="%5Bhttps://addyosmani.com/blog/software-engineering-soft-parts/%5D(https://mirror.xyz/rolex1.eth/_ruqwO5vvrZiNxr_MZBtOYgTo-gpjhaijQ7yeELPKBs)">2022上半年回顾与展望</a> - 大姨妈对2022上半年暴跌的复盘，记得顺势而为，永远不要逆周期</li><li><a href="https://www.btcstudy.org/2022/06/16/proof-of-stake-is-not-objective/"># 以太坊今天过审的可租赁NFT ERC-4907为什么这么重要？</a> - 将NFT使用权与所有权进行分离的协议</li><li><a href="%5Bhttps://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek%5D(https://ri.firesbox.com/#/cn/)">定投改变命运</a> - 李笑来文集，定投才是投资中的正派武功，改变的不仅仅是你一个人的命运，也是与你有关的几代人的命运</li></ul><hr><blockquote><p>往期推荐：</p></blockquote><ul><li><a href="https://suncle.zhubai.love/posts/2155790361623166976">打破信息茧房-我主动获取信息的方法 -#3</a></li><li><a href="https://suncle.zhubai.love/posts/2152510668208181248">如何筹备一场感人的婚礼 -#2</a></li><li><a href="https://suncle.zhubai.love/posts/2114096491819589632">追求不舒适的地方，直到整个世界都是我的家 -#1</a></li></ul><p>声明：本文出自作者，不代表任何机构或公司，亦不构成投资建议。</p><p>你可以在这里找到我：</p><ul><li><a href="https://suncle.me/">Blog</a></li><li><a href="http://twitter.com/suncle_chen">Twitter</a> @suncle_chen</li><li>公众号：<strong>职场亮哥</strong></li></ul><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a> <em>，欢迎</em> <a href="https://suncle.zhubai.love/"><em>订阅</em></a> <em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是 Suncle Lab 第 4 期，我会在这里更新区块链、技术、金融、旅行和个人成长相关的内容。每期都会同步发布在我&lt;a href=&quot;https://suncle.me/&quot;&gt;博客&lt;/a&gt;，欢迎你&lt;a href=&quot;https://suncle.zhubai.love/&quot;&gt;</summary>
      
    
    
    
    <category term="newsletter" scheme="https://suncle.me/categories/newsletter/"/>
    
    
    <category term="newletter" scheme="https://suncle.me/tags/newletter/"/>
    
  </entry>
  
  <entry>
    <title>打破信息茧房-我主动获取信息的方法 -#3</title>
    <link href="https://suncle.me/2022/07/02/%E6%89%93%E7%A0%B4%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF-%E6%88%91%E4%B8%BB%E5%8A%A8%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E6%B3%95-3/"/>
    <id>https://suncle.me/2022/07/02/%E6%89%93%E7%A0%B4%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF-%E6%88%91%E4%B8%BB%E5%8A%A8%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E6%B3%95-3/</id>
    <published>2022-07-01T22:46:37.000Z</published>
    <updated>2022-07-04T17:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是 Suncle Lab 第 3 期，我会在这里更新区块链、技术、金融、旅行和个人成长相关的内容。每期都会同步发布在我<a href="https://suncle.me/">博客</a>，欢迎你<a href="https://suncle.zhubai.love/">邮箱订阅</a>，这样就可以第一时间收到更新推送。</p><p>我在之前写过两篇 blog 介绍我推荐的 mac alfred 工作流和 google chrome 插件，都是用于提高效率的。</p><p>Alfred 工作流的阅读量有 3600+，而 chrome 插件的阅读量只有 100+，这个比例和我在工作中实际的使用频率也是相符合的。</p><ul><li><a href="https://suncle.me/2020/12/09/tool-recommendation-useful-alfred-workflow/">神兵利器推荐——你一定不能错过的mac alfred工作流</a></li><li><a href="https://suncle.me/2020/12/09/tool-recommendation-chrome-browser-extension/">神兵利器推荐——你一定不能错过的chrome插件</a></li></ul><p>但是除了提高工作效率之外，我的生活中还有很大一部分是处理信息的输入，所以本期会分享一下我在繁忙的工作中，保持信息高效率获取的方法。</p><p>首先说一点，我不反对通过算法推荐来获取信息，但是我不看快速冲击的并且只有爽点的短视频，比如抖音，快手和微信短视频。</p><p>生活中除了推荐之外，应该还有一些自己去主动搜寻的信息，而这些主动获得的信息，才会对你的生活现状有指导作用，才可能对你的生活有长远的帮助。</p><p>所以，本期内容主要有这些：</p><ul><li>获取信息的渠道</li><li>分享我的信息源</li><li>主动扩展信息源的方法</li><li>获取信息的工具</li></ul><h2 id="获取信息的渠道"><a href="#获取信息的渠道" class="headerlink" title="获取信息的渠道"></a>获取信息的渠道</h2><p>目前我获取信息的渠道主要有以下 6 种：</p><ol><li>RSS 简易信息聚合 </li><li>Newsletter 通讯周刊</li><li>YouTube 最大的视频网站 </li><li>Column 专栏</li><li>Podcast 播客</li><li>EBook 电子书</li></ol><p>6 种渠道的使用频率依次递减，但是这个频率不是一成不变的，而是动态变化的。</p><p>比如之前在欢聚-Hago 工作的时候，坐地铁单程上班时间是 40 分钟左右，但是 newsletter 和 rss 我习惯是用电脑 App 阅读。因此那段时间，使用频率最高的是在手机上看 <code>得到</code> 和 <code>极客时间</code> 的专栏。</p><p>今年开始的远程工作，没有了路上的通勤时间，就可以按照自己的喜好来决定阅读顺序。</p><p>下面我会对 RSS, Newsletter, Youtube 这 3 种渠道分别做些简单的阐述。</p><p><strong>RSS 简易信息聚合</strong></p><p>RSS 是起源于互联网早期一种很基础的协议，可以轻松获取网站的文章，通过 RSS 阅读器，也很清楚的知道这些文章从哪里来的。</p><p>而且一旦发现文章对自己没有用了，就可以随时取消订阅。</p><p>简单的说，RSS 有 4 个优点。</p><p><strong>即时性</strong>，对于 RSS 的订阅者而言，可以最快的得到最新讯息以及头条新闻。而不用被动式的打开每个网站上去搜索。</p><p><strong>统一的标准</strong>，RSS 有一套统一的标准，每个有提供 RSS 的网站都会依循此标准，方便阅读器解析和迁移。</p><p><strong>隐私性</strong>，对于订阅者而言，基于拉取模式的 RSS 并不需要提供自己的电子信箱；而发行者并不能利用电子邮件重复不断的寄广告信或是垃圾信件。因此 RSS 意味着真正的隐私。</p><p>最近兴起的 RSS3，在 RSS 的基础上，实现了去中心化的内容分发协议。</p><p>基于 RSS3，用户在各种去中心化的网络中创作的数字内容，也可以实现聚合，比如以太坊和 solana 上的内容。</p><p>信息聚合在一起之后，可以作为自己的个人主页或者个人博客。</p><p><strong>Newsletter 通讯周刊</strong></p><p>这个我是今年（2022 年）才开始重点使用的信息渠道。有一次在刷推特的时候，偶然发现一篇关于加密货币的文章，文章的最后就有提醒订阅的邮箱输入框，从此打开了我的 newsletter 大门。</p><p>到现在我已经订阅了不少领域的 newsletter，而且几乎都是周刊性质的。我很少看日刊，是因为信息频率太高，就意味着质量不会那么高。</p><p>想象一下，你在工作之余，写出了一篇高质量的文章，但是日复一日的去写，绝对不可能每篇都是精品。</p><p>比如我知道的那些在公众号做到日更的作者，除了极少数高产，其他的都是接受读者投稿，或者掺杂水文和广告。</p><p>因此我觉得写作的频率，周更是最合适的，多数 newsletter 都是周更的，非常契合我的日常节奏。</p><p>而且，newsletter 读起来并不会很枯燥，除了本周的主题之外，作者还会介绍一下自己的近况以及本周读过并且推荐的文章链接。</p><p>因此从一篇 newsletter 里面获取到的信息远远不止文章本身，相当于得到了一个同频的人为你筛选好了精华文章。</p><p>随着订阅的 newsletter 数量越来越多，也不可能每一篇都精读，很多 newsletter 我都只读标题，和开篇的粗略介绍，觉得有意思才会精读。</p><p>此外订阅的 newsletter 也不仅限于技术和 crypto 领域的，也会主动订阅一些金融，音乐相关的，永远都不要把自己局限在某一个小圈子里面，很有可能在别的领域，你能得到意想不到的收获。</p><p><strong>YouTube 最大的视频网站</strong></p><p>Youtube 创作者的广告收入是所有平台里面最高的，国内没有一个平台可以与之相比，收入高，生态好，持续正循环。</p><p>而想要玩转youtube，只要学好英语就够了，教程&#x2F;测评&#x2F;全世界旅游vlog&#x2F;大学课程等各种各样的英语资源等着你去发掘。</p><p>还记得我大一时搭建的个人网站，就是在 youtube 上搜到的基于 wordpress 的搭建教程，通俗易懂，还能练习英语。</p><h2 id="我的信息源"><a href="#我的信息源" class="headerlink" title="我的信息源"></a>我的信息源</h2><ul><li>我订阅的 <a href="https://github.com/suncle1993/share/blob/main/rss/RSS-Subscriptions.opml">RSS 列表</a>  - 技术部分读的比较多，其他几乎都是 crypto 相关的（集成过<a href="https://twitter.com/nake13">潘老师</a>的一部分列表）</li><li>我订阅的 <a href="https://github.com/suncle1993/share/blob/main/newsletter/suncle-newsletter-subscription-list.md">newsletter 列表</a> - 只列了常看的，会持续更新 </li><li>我订阅的 <a href="https://github.com/suncle1993/share/blob/main/youtube/suncle-youtube-subscription-list.md">YouTube列表</a> - 全部列表都在这里了，写了个简单的 python 脚本解析的。如果只能推荐一个频道那就是 <a href="https://youtube.com//channel/UCMUnInmOkrWN4gof9KlhNmQ">老高與小茉 Mr &amp; Mrs Gao</a></li></ul><p>专栏列表和播客列表后续会继续在这篇 newsletter 更新，欢迎收藏并且订阅我的 newsletter。</p><h2 id="主动扩展信息源的方法"><a href="#主动扩展信息源的方法" class="headerlink" title="主动扩展信息源的方法"></a>主动扩展信息源的方法</h2><p>思考一下，互联网的本质是什么？</p><p>互联网本质是一个图状的网络，这个网络的节点是各个网站，而这个网络中一个节点到另一个节点的边，就是一个网站到另一个网站的外链。</p><p>因此，我们需要做的就是 2 步，第一步根据喜好找到你的种子网站，第二步通过种子网站的外链一层一层的找到那些你感兴趣的站点。</p><p>此外，现在很多的 newsletter 都会互相推荐，比如在文章最后会推荐一些其他文章，还有其他的 newsletter 作者，从这些外链可以找到一些高质量的作者，比如在上文，我分享的信息源里面就有很多优质作者。</p><p>博客同样也是如此，如果你想找到一些活跃的作者，有一个电报频道 <a href="https://t.me/FindBlog">Find Blogs</a>，是专门做优质博客推荐的，可以作为参考。</p><p>当然除了拓展新的信息源，也要时常更新已有的，那些质量降低的就直接取消订阅就好了。</p><h2 id="获取信息的工具"><a href="#获取信息的工具" class="headerlink" title="获取信息的工具"></a>获取信息的工具</h2><p>下面到了我最喜欢的推荐环节，按照信息渠道依次推荐对应的工具。</p><p><strong>RSS：NetNewsWire</strong></p><p>对比使用了 Reeder, InoReader, Feedly 和 NetNewsWire 之后，只推荐你使用 NetNewsWire 作为阅读器，最看重它的 3 大优势：完全开源，零广告，免费。</p><p><strong>Newsletter： Spark 邮箱客户端</strong></p><p>用了 Spark 之后再也不想用 Apple Mail。优异的速度，隐式的自动重连，阅后即归档的理念，彻底告别信息焦虑，这个世界上信息不是太少，而是太多，阅读完了就不要继续挂念了。</p><p><strong>专栏：得到 App ｜ 极客时间</strong></p><p>中文世界里，通识教育专栏就去得到 App，技术提升专栏就选极客时间。</p><p><strong>播客：Apple Podcast ｜ 小宇宙</strong></p><p>很多大佬不愿意写文章，但是愿意接受访谈。国外的大佬基本都在 Apple Podcast 或者是 Spotify，国内的大佬基本都在小宇宙。</p><p>所以，我的睡前时间，经常是贡献给播客的。</p><h2 id="最近看了什么"><a href="#最近看了什么" class="headerlink" title="最近看了什么"></a>最近看了什么</h2><ul><li><a href="https://addyosmani.com/blog/software-engineering-soft-parts/">Software Engineering - The Soft Parts</a> - Addy 在 Google Chrome 10 年软件开发工作的软技能总结</li><li><a href="https://www.btcstudy.org/2022/06/16/proof-of-stake-is-not-objective/">PoS 不具备客观性</a> - 这也是我不看好以太坊转 POS 的原因之一，还有一个原因是 POS 存在的循环证明问题</li><li><a href="https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek">Web3 DApp 最佳编程实践指南</a> - @guoyu DApp 开发全周期的经验分享，twitter上也有答疑的Space，非常推荐有意向转 Web3 的同学精读</li></ul><hr><blockquote><p>往期推荐：</p></blockquote><ul><li><a href="https://suncle.zhubai.love/posts/2152510668208181248">如何筹备一场感人的婚礼 -#2</a></li><li><a href="https://suncle.zhubai.love/posts/2114096491819589632">追求不舒适的地方，直到整个世界都是我的家 -#1</a></li></ul><p>声明：本文出自作者，不代表任何机构或公司，亦不构成投资建议。</p><p>你可以在这里找到我：</p><ul><li><a href="https://suncle.me/">Blog</a></li><li><a href="http://twitter.com/suncle_chen">Twitter</a> @suncle_chen</li><li>公众号：<strong>职场亮哥</strong></li></ul><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a> <em>，欢迎</em> <a href="https://suncle.zhubai.love/"><em>订阅</em></a> <em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是 Suncle Lab 第 3 期，我会在这里更新区块链、技术、金融、旅行和个人成长相关的内容。每期都会同步发布在我&lt;a href=&quot;https://suncle.me/&quot;&gt;博客&lt;/a&gt;，欢迎你&lt;a href=&quot;https://suncle.zhubai.love/&quot;&gt;</summary>
      
    
    
    
    <category term="newsletter" scheme="https://suncle.me/categories/newsletter/"/>
    
    
    <category term="newletter" scheme="https://suncle.me/tags/newletter/"/>
    
  </entry>
  
  <entry>
    <title>如何筹备一场感人的婚礼 -#2</title>
    <link href="https://suncle.me/2022/06/24/%E5%A6%82%E4%BD%95%E7%AD%B9%E5%A4%87%E4%B8%80%E5%9C%BA%E6%84%9F%E4%BA%BA%E7%9A%84%E5%A9%9A%E7%A4%BC-2/"/>
    <id>https://suncle.me/2022/06/24/%E5%A6%82%E4%BD%95%E7%AD%B9%E5%A4%87%E4%B8%80%E5%9C%BA%E6%84%9F%E4%BA%BA%E7%9A%84%E5%A9%9A%E7%A4%BC-2/</id>
    <published>2022-06-24T07:57:37.000Z</published>
    <updated>2022-08-25T05:34:22.477Z</updated>
    
    <content type="html"><![CDATA[<p>3月底拍婚纱照，然后开始正式筹备，5月1号开始陆续接待客人，5月2号婚前双方亲人的晚宴，5月3号婚礼最重要的日子。</p><p>一直到今天（6月25号），才完成婚礼视频的上传，整个婚礼圆满结束。</p><p>我问了参加婚礼的亲戚朋友对这场婚礼的评价，他们的回答都是“这是一场非常感人的婚礼”。</p><p>从结婚当天他们眼睛的泪水，我也能知道，这不是客套话。</p><p>今天刚好是周末，记录一下这场婚礼的过程，和我们的筹备细节。</p><p>这也意味着拖更了很久的第二期newsletter终于动笔了。（婚礼结束，后续还是会尽力保证更新了）</p><h2 id="克服恐婚心理"><a href="#克服恐婚心理" class="headerlink" title="克服恐婚心理"></a>克服恐婚心理</h2><p>讲细节之前，先谈一下我认为很重要的一点：克服你内心的恐婚情绪。</p><p>要做到这一点，你需要想明白两个问题。</p><p><strong>第一个问题她是不是你认为最适合的伴侣</strong>。</p><p>这个问题每个人有自己的判断，你是否足够喜欢她，你能否欣赏她的优点，你能否接受她的缺点，她是不是一个践行终生学习的人。</p><p>除了这些之外，对我来说还有一点很重要，她是否支持你内心最深处的梦想。</p><p>如果有一天你要去追梦了，她是否愿意陪着你一起东奔西跑，爱和不爱，只有在这种时刻才会展现的淋漓尽致。</p><p><strong>第二个问题是你对你们的未来是否有足够的信心</strong>。</p><p>倘若在五年前，甚至是三年前，如果说我不恐婚，我自己都不相信。</p><p>刚出社会的时候，是很迷茫的，不只是你我，绝大多数大学生都是如此。</p><p>就算过了很多年，很多人也没办法找到迷茫的根治方法。</p><p>前两年公众号改名为<strong>职场亮哥</strong>，其实就是想写写我是怎么一步一步破除迷茫的。</p><p>后来因缘际会接触了加密行业，便全力投入到这个行业，帮大学生破除迷茫的大理想就搁下了。</p><p>如果你单身的时候就是内心迷茫的，信心不足的，对未来不坚定的。</p><p>再加上一个伴侣，再以后可能加上一个孩子，又怎么可能会有充足信心呢？</p><p>信心来源于什么呢？来源于你的人生阅历。</p><p>至于怎么增进对未来的信心，老实说，我也没什么好的解决方法给你。</p><p>只能劝你多出去走走，多看看世界，了解不同人的生活方式，认识到自己的普通，也多参加几场婚礼。</p><p>趁早想明白这辈子自己想成为什么样的人，想做什么。</p><p>王阳明临终时指着心说的“此心光明，亦复何言”，我希望你现在就可以说。</p><p>但我又知道，从普鲁士教育诞生的我们，本质上是很难想透彻这些问题的。</p><p>你看，我就是很矛盾的，既很理想，又很现实。但我并不觉得有什么不适应。</p><p>从我的亲身经历来看，想明白这些的最快捷的方法是去仙本那玩一次“潜水”。</p><p>清澈见底水深20米的碧绿海平面上，从小船自由落体直下，如果你不会游泳就更有效了，能更快的想明白。</p><p>当然这是我自己经历的有生命危险的馊主意了。简单的方法是假设自己在生命的尽头，想明白有什么是你觉得这这辈子必须要实现的。</p><p>人啊，一旦大彻大悟，真的无敌。</p><h2 id="感人婚礼的筹备"><a href="#感人婚礼的筹备" class="headerlink" title="感人婚礼的筹备"></a>感人婚礼的筹备</h2><p>如果你很确定，你不恐婚了，然后遇到对的人想结婚了，那就开始筹备吧。</p><p>多预留点时间，最少最少2个月，半年应该比较合适。</p><p>但是筹备婚礼也是讲究方法论的，整个筹备过程的时间比较长，很多事情需要反复确认，反复比较。</p><p>清晰有条理的记录和追踪是很重要的。</p><p>下面展示下我用notion做的完整的婚礼计划，相应的模板再notion模板库里面是可以找到的，按需定制即可。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625213315736-1656164003485.png" alt="wedding-planning"></p><p><strong>名单类的信息</strong>，天然是可以用表格来记录的，比如晚宴名单，宾客名单等。</p><p>以宾客名单为例，大概会包含的信息有这些：姓名，是否参加，大人数量，小孩数量，到达日期，是否住酒店，房型，备注。</p><p>大概数了下，至少9个字段，用notion制作成表，就可以看到下面的记录了（截图不全）。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625214656158-1656164821614.png" alt="The guest list"></p><p>记录清楚之后，就很方便统计酒席的桌数，以及预定住宿房间的数量和房型。</p><p>如果有些人不能立马确定怎么办呢？只能一遍一遍的去问去催了。</p><p>但是有清晰的记录，就不用每次家里几个人坐在一起掰着手指头数数了。</p><p>晚宴酒店的选择，这个没有太多好说的，多打听多去现场考察。</p><p>想知道酒席的饭好不好吃很简单，亲自去吃一顿就好了。</p><p>如果你确实想知道，又没时间去，就让朋友去，或者花钱请人去试吃也都是可以的。</p><p>婚礼酒店，看的时候一定要带上另一半，只是自己决定了是没有用的，必须要两个人都满意才可以。</p><p>以我为例，我妈选的婚礼酒店，最后就被我和小太阳一起临时换掉了，但也只是因为疫情期间，酒店闲置较多，婚礼场地还是建议提前半年选定。</p><p>此外，整个婚礼过程中，每个地方都是需要花钱的。对一些主要花费做一些记录，知道钱大概花哪里去了。</p><p>过于零碎的记录可以直接忽略。初步统计，我的整个婚礼花费11万左右。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625215414312-1656171334514.png" alt="bills"></p><p>婚礼上的一些细节，比如音乐，仪式流程，仪式细节，都是可以自行设计，自行添加，自行修改的。</p><p>再加上一些小灵感，亲手设计的婚礼才会感动自己，感动了自己才有可能感动别人。</p><p>特别提醒一下，如果有灵感，一定要立刻记录下来，然后尽自己努力让这些灵感出现在你的婚礼上。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220625222851114-1656167334972.png" alt="inspiration"></p><p>有朋友国庆结婚，就贴一下我们婚礼当天的大概流程供参考。</p><blockquote><ol><li>主持人登场</li><li>大姑爹唱歌暖场</li><li>新郎登场</li><li>新娘出场（父亲陪伴)</li><li>新郎迎接新娘（和父亲交接）</li><li>父亲退场休息</li><li>新人一起登场</li><li>新郎新娘誓言环节（伴娘送誓词卡）</li><li>婚戒（伴娘送戒指）</li><li>拥吻</li><li>主婚证婚（只要一个人，小舅）</li><li>父母登场</li><li>新郎感言（自己提前想一段）</li><li>改口茶</li><li>男方父亲致辞（用主持人的）</li><li>女方父亲致辞（自己写的）</li><li>抛捧花</li><li>同伴郎伴娘互动</li><li>礼成</li><li>纸飞机</li></ol></blockquote><h2 id="留住回忆"><a href="#留住回忆" class="headerlink" title="留住回忆"></a>留住回忆</h2><p>我参加过的婚礼不多，应该不超过五次。</p><p>除了我自己的婚礼之外，最打动我的就是2017年国庆在河南商丘参加<strong>大个</strong>的婚礼。</p><p>除了亲自布置的精美现场，就是他们的结婚誓词了，当时作为伴郎的我，站在新郎的旁边，第一次感觉到，爱情的结局原来也可以如此美妙。</p><p>在这里，记录一下我认为最重要的，也是最能打动人的誓词。</p><p>当初我和小太阳一致决定要亲自写婚礼现场的誓词，绝对不使用主持人提供的模板照着读。</p><p>最终，婚礼现场亲人们的泪水，小太阳的泪水以及我的泪水都让我们觉得，写这两份誓词熬夜的几个晚上，没有白费。</p><p>贴一下我的誓词</p><blockquote><p>致我的爱人朋友小太阳：</p><p>在正式的场合，我还是喜欢叫你小太阳。</p><p>前天晚上，我还在为这篇誓词苦思冥想，写了删，删了写。</p><p>如果婚姻是一场考试，第一道题就把我难倒了。</p><p>可明明是我给你写的第一封信，那封有九页纸的信，你才答应和我在一起。</p><p>但是一想到要在众人面前讲话我像是丧失了语言功能，怎么写都觉得很矫情。</p><p>和给外界的印象截然相反的是，在我们在一起的快三年的时间里，我都是吐露心声比较多的那个。</p><p>而你总是听的很认真，当然也不总是我说你听。</p><p>我们之间能聊的可太多了，旅行，文学、职业，还有那些关乎人生底色的议题，我们都有幸达成共识。</p><p>希望往后的日子里我们可以一直这么坦诚的沟通。</p><p>以前常常会想象我未来的另一半是什么样的人。</p><p>小太阳，你是一个善良敏锐，有正义感，有同情心，充满阳光的人</p><p>就像你的昵称小太阳一样，你会关怀身边，甚至于社会上的人，还常常听别人的遭遇愤愤不平。</p><p>看到拉萨山区里啃着冻土豆的老奶奶，会心里难过很久很久，然后捐款捐物。</p><p>我喜欢你的优点也常常被你所感染，希望我们能一直保持初心，一直生活下去。</p><p>我们有一只11斤的肥猫，旺财，他已经陪伴利们两年半了，俨然成为我们生命中的一部分。</p><p>今天在这里，我答应你，无论以后我们是去迪拜，去日本是去泰国，无论在哪里工作，我都会带上它，让它永远陪着你。</p><p>因为我知道在你心底里除了爸爸妈妈，最舍不得的就是它。</p><p>不管是什么事情，也无论有多么麻烦，只要你愿意，我都会努力去实现。</p><p>你和我说过有一段时间特别不喜欢特别害怕谈恋爱，因为你害怕两个人在一起就会很容易迷失了自己。</p><p>希望这几年过来你有感受到我对你的尊重。</p><p>就算今天我们更进一步走进婚姻，关系变得更密切，你还是能保持备你的尊严。</p><p>虽然这么说，其实我知道你也为了我们的相处付出了很多，改变了很多。</p><p>也谢谢小太阳的家人，因为你们的支持和包容，我们每一步都走得很坚定。</p><p>人生路上虽有暗夜，但有你亦如清晨！</p><p>如果明天看不见太阳，在最后一刻我会紧紧抱住你。</p><p>我们是爱侣一般的朋友，朋友一般的爱侣。</p><p>你是爱人，是馈赠</p><p>谢谢！ </p></blockquote><p>suncle誓词手稿链接：</p><ul><li><p><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204005_edit_24228973680677-1656169017810.jpg">suncle誓词手稿第一页</a></p></li><li><p><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204015_edit_24386830716590-1656169555877.jpg">suncle誓词手稿第二页</a></p></li></ul><p>再贴一下小太阳的誓词</p><blockquote><p>嗨～亲爱的陈先生</p><p>到今天为止，我们已经在一起度过了926天。</p><p>我觉得我是一个很幸运的人。</p><p>老天让我们共赴一场山海时，成为无话不谈的挚友。</p><p>在拉萨雪埋，死神叩问时，你几乎一夜未眠给我打了无数电话。</p><p>在过去两年里你陪伴在我身边，经历了我最无助的时刻。</p><p>我很感谢你看懂了我，却还一直陪伴在我身边度过这些挑战。</p><p>谢谢你总是迁就我，迁就我的工作和生活，从上海来到广州。</p><p>迁就我的小脾气，包容我的任性。</p><p>在遇到你之前我总觉得结婚这件事离我很遥远。</p><p>可是你的努力担当，你的善良果敢让我想要与你共度余生。</p><p>有幸与你相爱，</p><p>朝暮与年岁并往，</p><p>与你一起共至光年。</p><p>未来的路我们一起打卡金世界。</p><p>你好！我的老公。</p><p>周雨佳</p><p>2022.5.1</p></blockquote><p>小太阳誓词手稿链接：</p><ul><li><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204037_edit_24404787491067-1656169033781.jpg">小太阳誓词手稿第一页</a></li><li><a href="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/IMG_20220611_204041_edit_24413694007211-1656169442416.jpg">小太阳誓词手稿第二页</a></li></ul><p>除了誓词之外，还有由摄像师剪辑的婚礼视频，已经上传到西瓜视频，可以点击下方链接观看。</p><ul><li><a href="https://www.ixigua.com/7112067348714291742">婚礼花絮</a></li><li><a href="https://www.ixigua.com/7112457460094337544">接亲视频</a></li><li><a href="https://www.ixigua.com/7112217835320902158">婚礼现场视频</a></li></ul><p>如果你对筹备婚礼不知所措，或者对婚礼的一些细节不清楚，可以随时找我聊聊。</p><hr><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a><em>，欢迎</em><a href="https://suncle.zhubai.love/"><em>订阅</em></a><em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;3月底拍婚纱照，然后开始正式筹备，5月1号开始陆续接待客人，5月2号婚前双方亲人的晚宴，5月3号婚礼最重要的日子。&lt;/p&gt;
&lt;p&gt;一直到今天（6月25号），才完成婚礼视频的上传，整个婚礼圆满结束。&lt;/p&gt;
&lt;p&gt;我问了参加婚礼的亲戚朋友对这场婚礼的评价，他们的回答都是“这是</summary>
      
    
    
    
    <category term="newsletter" scheme="https://suncle.me/categories/newsletter/"/>
    
    
    <category term="newletter" scheme="https://suncle.me/tags/newletter/"/>
    
  </entry>
  
  <entry>
    <title>追求不舒适的地方，直到整个世界都是我的家 -#1</title>
    <link href="https://suncle.me/2022/03/11/%E8%BF%BD%E6%B1%82%E4%B8%8D%E8%88%92%E9%80%82%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E9%83%BD%E6%98%AF%E6%88%91%E7%9A%84%E5%AE%B6-1/"/>
    <id>https://suncle.me/2022/03/11/%E8%BF%BD%E6%B1%82%E4%B8%8D%E8%88%92%E9%80%82%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E9%83%BD%E6%98%AF%E6%88%91%E7%9A%84%E5%AE%B6-1/</id>
    <published>2022-03-11T07:57:37.000Z</published>
    <updated>2022-08-25T05:34:28.389Z</updated>
    
    <content type="html"><![CDATA[<p>这是 Suncle Lab 第一期，我会在这里更新 区块链、技术、金融、旅行相关的内容。每期都会同步发布在我<a href="https://suncle.me/">博客</a>，欢迎你<a href="https://suncle.zhubai.love/">邮箱订阅</a>，这样就可以第一时间收到更新推送。</p><p>我有个独立<a href="https://suncle.me/">博客</a>（可能需要科学上网），已经维护了五年了，但是更新频率并不高，不过陆陆续续还是有人在看，阅读数也在缓慢增长，这个博客主要是用来记录技术知识点，偶尔也会有一些所思所想。</p><p>对我自己来说，也会看一些独立博客，优质博客的rss也都有订阅，比如<a href="https://lxkaka.wang/">拉总的博客</a>，<a href="https://liriansu.com/">子岳的博客</a>。除了博客，日常会逛逛<strong>得到</strong>，<strong>极客时间</strong>这种知识付费型的app，学学专业知识，增长增长见识。</p><p>最近一年沉迷于区块链以及数字货币，在分布式内容创作平台<a href="https://mirror.xyz/">mirror</a>上也找到了很多优质的内容。慢慢的也就接触到了海外很火的newletter这种知识分享的方式。</p><p><strong>什么是newletter呢？</strong>先摘录一些维基百科的定义</p><blockquote><p>Newsletter（电子报）是社群或商家根据邮件列表发送给其相关对象的电子通讯刊物。</p></blockquote><p>对我来说，Newsletter 是一封准时抵达的信件，基于自己的兴趣和爱好。</p><h2 id="开始写newletter"><a href="#开始写newletter" class="headerlink" title="开始写newletter"></a>开始写newletter</h2><p>我陆陆续续在微信公众号上写过一些内容，也经常停更半年，甚至停更一年。不是不想更新，只是每写一篇文章都需要先深思熟虑彻底搞懂，然后提炼观点，像写一篇论文一样翻找资料，引经据典。这样的结果就是花费了大量的时间，写的知识都是已经完全内化了的，自己很难有成长，最后难以坚持。</p><p>接触到newsletter的时候，我大受震撼。原来世界上还有这样原始又有效的知识输出方式。我不再需要每一篇只写一个中心思想。我可以写我这一周学了什么，看了什么，听了什么，再从一周的生活里面提炼出一个核心观点，更真实，更时效。</p><p>以一周为单位来划分自己的时间，以一周为单位去总结自己的成长，吸引同频的人，也就够了。</p><p>对比了大量的newsletter平台，最终我选择了国内的一款产品<a href="https://suncle.zhubai.com/">竹白</a>，不需要科学上网，支持邮件和微信订阅。我还是倾向于大家使用邮件订阅的方式，如果哪一天中心化的竹白和微信都挂了，我还可以用最去中心化的邮件给你们发消息。</p><p>介绍一下我的newletter定位。只写自己感兴趣的，可以长期更新下去的内容，比如 <strong>区块链、技术、金融、旅行</strong>。每周一更，周五发布，每篇文章里面会分享最近一周看的一些文章链接还有听的播客链接。</p><p>今天是2022年3月11号，我从hago离职了，我的newsletter从今天开始诞生了，欢迎大家随缘订阅。</p><p>第一篇就结合这几天看的一篇文章写写我无限折腾的原因吧。</p><h2 id="全世界都是我的家"><a href="#全世界都是我的家" class="headerlink" title="全世界都是我的家"></a>全世界都是我的家</h2><blockquote><p>我强迫自己离开美国。离开我的舒适区。我考虑在美国境内寻找新的视角，生活在德克萨斯、路易斯安那、南卡罗来纳、新墨西哥和阿拉斯加。</p><p>但为什么是人为划定的边界？</p><p>为什么不是土耳其、尼日利亚、芬兰、印度尼西亚、以色列、中国和巴西？我想了解这些不同的生活方式。我希望它们也能有家的感觉。 所以我带着这个目标，向世界出发了。</p><p>搬到一个陌生的地方，直到感觉像家一样。不断地学习和成长。然后再做一次，追求不舒适的地方，直到整个世界都是我的家。</p></blockquote><p>这段话摘自于这周刚看的我很喜欢的作者<a href="https://sive.rs/">Derek Sivers</a>d的一篇文章<a href="https://sive.rs/left">Why I left America</a>。看这篇文章的时候，我想了很多。</p><p>我很庆幸高考报志愿的时候选择了计算机行业，工作了五年，虽然还远远没有暴富，但是这五年来，得益于IT行业的较高收入，工薪阶层的同龄人在为生活发愁省吃俭用的时候，我走遍了中国大多数地方。</p><p>很多人会说，你只是出去走马观花式的旅游，又能增长多少见识呢，还不如把钱省下来，留着以后买房买车娶老婆，周末宅在住处打打游戏多开心。这其中也包括我的爸妈。</p><p>同年毕业一起进税友的同事们，五年多的时间里没有出过远门，无论是见识还是视野，我想应该都会局限一些吧。</p><p>很多长辈的思想也和HR一样，劝你不要才干两三年就跳槽。换个角度想想，如果你打算一辈子为别人工作，那就找一个稳定职位待下去吧。</p><p>而我只有一个想法，<strong>找一个自己感兴趣的有高附加值的行业深耕下去</strong>。</p><p>这句话请再仔细逐字读一遍。<strong>找</strong>不是简单的投投简历，是要经过不断试错不断实践的，<strong>感兴趣</strong>不是说随便找一个大厂养老，而是自己想给这个世界创造点什么。<strong>高附加值</strong>意味着在这个行业干下去你会有一个美好的未来，即使你离开了某个特定的公司，但是只要还在行业内，显然再惠和Hago所在的行业并不符合这一条。<strong>深耕</strong>不是浅尝辄止而是专精和深度。</p><p>毕业五年，从西安到杭州，再到上海，之后来了广州，下一段旅程是迪拜。搬到一个陌生的地方，都像家一样的生活。</p><p>半年前（2021年9月5号）进入一个星球会员群的时候，发了一个自我介绍，给自己定了一个短期目标：进入区块链行业。半年之后就实现了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220311233607722-1647012967843-1647013649384.png" alt="image-20220311233607722"></p><p>毕业五年多了，你的未来在哪里？你还迷茫嘛？你该去向何方？</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/bigfish-1647011167822.jpg" alt="电影《大鱼》中的场景"></p><p><em>此图出自电影《<a href="https://en.wikipedia.org/wiki/Big_Fish">大鱼</a>》，主人公的旅程一开始，他找到了一个天堂，所有人都求他留下来，但他说：“对不起，我可能永远没办法再找到这么美好的地方，但我需要走出去到这个世界去冒险。”）</em></p><h1 id="最近看了什么"><a href="#最近看了什么" class="headerlink" title="最近看了什么"></a>最近看了什么</h1><ul><li><a href="https://sive.rs/plaintext">Write plain text files</a>- 用纯文本做效率软件，现在的笔记软件很多，问题也很多，何不回归最原始的方式呢</li><li><a href="https://mirror.xyz/0xc19be75B8B9152d884987e1B58b3F18A94875396/cd7dO7shcNZJmeniaTPoqotkI13mMGCuOCMBrQY-Gew">毁灭的技术｜预言家周报#160</a>- 动荡的世界，crypto才是不可毁灭的</li><li><a href="https://ecn.mirror.xyz/m7p1QQwT_0jRcfud0IY_FKvskFMQ4Hyk8fHXITEo1_E">到底什么是零知识证明 (ZKP)？</a>- 零知识证明在web3的作用</li><li><a href="https://mirror.xyz/jayjiang.eth/yyUkSV1Ih6ffuHTIFlpf6jr-HugGrCRsJq-mjIMWIqU">Web3 社交思考</a></li><li><a href="https://mirror.xyz/paulfinneyx.eth/jFt3EmRcGqNsEGynj5LnTXjo8Fa1epRUoPCD5VSIxrc">How to be an early user of Web3?</a>- 在web3的世界你可以做些什么</li><li><a href="https://www.preethikasireddy.com/post/a-normies-guide-to-rollups">A normie’s guide to rollups</a>- 一直在说以太坊rollup扩容，rollup到底是什么</li><li><a href="https://www.huxiu.com/article/492646.html">互联网为什么让我们越来越不开心？</a>- 一个让世界更好的互联网，不同寻常的创业思想</li><li><a href="https://judyhevenly.com/predictions/">2022 Predictions</a>- 朱迪海文利的2022预测</li><li><a href="https://www.btcstudy.org/2022/02/21/pow-cheapest/">没什么比 PoW 更便宜</a>- 费电吗？省电</li></ul><hr><p>借用方可成的这段 [描述](<a href="https://newslab2020.github.io/Collection/%E5%AA%92%E4%BD%93%E9%A3%9F%E8%B0%B1/[%E6%96%B0%E9%97%BB%E5%AE%9E%E9%AA%8C%E5%AE%A4]">https://newslab2020.github.io/Collection/媒体食谱/[新闻实验室]</a> - 2017-05-10 把你的邮箱调教成最好的新闻阅读器｜媒体食谱07.html)结束本篇：</p><blockquote><p>他们总是准时抵达，安静地躺在我的收件箱里，不搞标题党，不插入影响阅读的表情包，只以最朴素的方式把我需要的内容传递给我。在这个信息过载、垃圾泛滥的年代，最古老的电子邮件成了最好的避难所。</p></blockquote><p>希望<a href="https://suncle.zhubai.com/">Suncle Lab</a>能成为你万千订阅的newsletter之一。</p><blockquote><p><em>这里是</em> <a href="https://suncle.me/"><em>Suncle</em></a> <em>的</em> <a href="https://suncle.zhubai.love/"><em>newsletter</em></a><em>，欢迎</em><a href="https://suncle.zhubai.love/"><em>订阅</em></a><em>，如果觉得这篇文章对你有用，可以分享给好友</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是 Suncle Lab 第一期，我会在这里更新 区块链、技术、金融、旅行相关的内容。每期都会同步发布在我&lt;a href=&quot;https://suncle.me/&quot;&gt;博客&lt;/a&gt;，欢迎你&lt;a href=&quot;https://suncle.zhubai.love/&quot;&gt;邮箱订阅&lt;/</summary>
      
    
    
    
    <category term="newsletter" scheme="https://suncle.me/categories/newsletter/"/>
    
    
    <category term="newletter" scheme="https://suncle.me/tags/newletter/"/>
    
  </entry>
  
  <entry>
    <title>智能合约案例-众筹</title>
    <link href="https://suncle.me/2021/08/21/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A1%88%E4%BE%8B-%E4%BC%97%E7%AD%B9/"/>
    <id>https://suncle.me/2021/08/21/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A1%88%E4%BE%8B-%E4%BC%97%E7%AD%B9/</id>
    <published>2021-08-21T08:12:37.000Z</published>
    <updated>2022-08-25T03:44:45.450Z</updated>
    
    <content type="html"><![CDATA[<p>一个众筹的智能合约示例，来源于 <a href="https://learnxinyminutes.com/docs/solidity/">learnxinyminutes</a></p><p>主要是用来展示智能合约状态机（State machines）和函数修饰器（modifier）的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// CrowdFunder.sol<br>pragma solidity ^0.6.6;<br><br>/// @title CrowdFunder<br>/// @author nemild<br>contract CrowdFunder &#123;<br>    // Variables set on create by creator<br>    address public creator;<br>    address payable public fundRecipient; // creator may be different than recipient, and must be payable<br>    uint public minimumToRaise; // required to tip, else everyone gets refund<br>    string campaignUrl;<br>    byte version = &quot;1&quot;;<br><br>    // Data structures<br>    enum State &#123;<br>        Fundraising,<br>        ExpiredRefund,<br>        Successful<br>    &#125;<br>    struct Contribution &#123;<br>        uint amount;<br>        address payable contributor;<br>    &#125;<br><br>    // State variables<br>    State public state = State.Fundraising; // initialize on create<br>    uint public totalRaised;<br>    uint public raiseBy;<br>    uint public completeAt;<br>    Contribution[] contributions;<br><br>    event LogFundingReceived(address addr, uint amount, uint currentTotal);<br>    event LogWinnerPaid(address winnerAddress);<br><br>    modifier inState(State _state) &#123;<br>        require(state == _state);<br>        _;<br>    &#125;<br><br>    modifier isCreator() &#123;<br>        require(msg.sender == creator);<br>        _;<br>    &#125;<br><br>    // Wait 24 weeks after final contract state before allowing contract destruction<br>    modifier atEndOfLifecycle() &#123;<br>    require(((state == State.ExpiredRefund || state == State.Successful) &amp;&amp;<br>        completeAt + 24 weeks &lt; now));<br>        _;<br>    &#125;<br><br>    function crowdFund(<br>        uint timeInHoursForFundraising,<br>        string memory _campaignUrl,<br>        address payable _fundRecipient,<br>        uint _minimumToRaise)<br>        public<br>    &#123;<br>        creator = msg.sender;<br>        fundRecipient = _fundRecipient;<br>        campaignUrl = _campaignUrl;<br>        minimumToRaise = _minimumToRaise;<br>        raiseBy = now + (timeInHoursForFundraising * 1 hours);<br>    &#125;<br><br>    function contribute()<br>    public<br>    payable<br>    inState(State.Fundraising)<br>    returns(uint256 id)<br>    &#123;<br>        contributions.push(<br>            Contribution(&#123;<br>                amount: msg.value,<br>                contributor: msg.sender<br>            &#125;) // use array, so can iterate<br>        );<br>        totalRaised += msg.value;<br><br>        emit LogFundingReceived(msg.sender, msg.value, totalRaised);<br><br>        checkIfFundingCompleteOrExpired();<br>        return contributions.length - 1; // return id<br>    &#125;<br><br>    function checkIfFundingCompleteOrExpired()<br>    public<br>    &#123;<br>        if (totalRaised &gt; minimumToRaise) &#123;<br>            state = State.Successful;<br>            payOut();<br><br>            // could incentivize sender who initiated state change here<br>        &#125; else if ( now &gt; raiseBy )  &#123;<br>            state = State.ExpiredRefund; // backers can now collect refunds by calling getRefund(id)<br>        &#125;<br>        completeAt = now;<br>    &#125;<br><br>    function payOut()<br>    public<br>    inState(State.Successful)<br>    &#123;<br>        fundRecipient.transfer(address(this).balance);<br>        LogWinnerPaid(fundRecipient);<br>    &#125;<br><br>    function getRefund(uint256 id)<br>    inState(State.ExpiredRefund)<br>    public<br>    returns(bool)<br>    &#123;<br>        require(contributions.length &gt; id &amp;&amp; id &gt;= 0 &amp;&amp; contributions[id].amount != 0 );<br><br>        uint256 amountToRefund = contributions[id].amount;<br>        contributions[id].amount = 0;<br><br>        contributions[id].contributor.transfer(amountToRefund);<br><br>        return true;<br>    &#125;<br><br>    function removeContract()<br>    public<br>    isCreator()<br>    atEndOfLifecycle()<br>    &#123;<br>        selfdestruct(msg.sender);<br>        // creator gets all money that hasn&#x27;t be claimed<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h2><p>函数修饰器(Modifiers)可以用来改变一个函数的行为。比如用于在函数执行前检查某种前置条件。这个和python的修饰器(Decorators)的作用很类似，在python中，我们也经常使用装饰器对函数执行前后增加一些逻辑。下面是solidity修饰器的简单使用，在众筹支付前需要检查合约状态是否已完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function payOut() public inState(State.Successful) &#123;_;&#125;<br></code></pre></td></tr></table></figure><p>python中一个函数可以有多个装饰器，solidity中的函数也是可以有多个修饰器的。</p><p>如果同一个函数有多个修饰器，他们之间以空格隔开，修饰器会依次检查执行。</p><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p>状态State在合约中本质是一个合约的全局变量，在实际合约中，状态会有很多种，各个合约方法也会对State做修改，并且根据State执行不同的逻辑。对于多个State可以通过枚举管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">enum State &#123;<br>    Fundraising,// 筹款中<br>    ExpiredRefund,// 过期退款<br>    Successful// 众筹成功<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个众筹的智能合约示例，来源于 &lt;a href=&quot;https://learnxinyminutes.com/docs/solidity/&quot;&gt;learnxinyminutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是用来展示智能合约状态机（State machines）和函数修饰器（modifier）的使用&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs solidity&quot;&gt;// CrowdFunder.sol&lt;br&gt;pragma solidity ^0.6.6;&lt;br&gt;&lt;br&gt;/// @title CrowdFunder&lt;br&gt;/// @author nemild&lt;br&gt;contract CrowdFunder &amp;#123;&lt;br&gt;    // Variables set on create by creator&lt;br&gt;    address public creator;&lt;br&gt;    address payable public fundRecipient; // creator may be different than recipient, and must be payable&lt;br&gt;    uint public minimumToRaise; // required to tip, else everyone gets refund&lt;br&gt;    string campaignUrl;&lt;br&gt;    byte version = &amp;quot;1&amp;quot;;&lt;br&gt;&lt;br&gt;    // Data structures&lt;br&gt;    enum State &amp;#123;&lt;br&gt;        Fundraising,&lt;br&gt;        ExpiredRefund,&lt;br&gt;        Successful&lt;br&gt;    &amp;#125;&lt;br&gt;    struct Contribution &amp;#123;&lt;br&gt;        uint amount;&lt;br&gt;        address payable contributor;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    // State variables&lt;br&gt;    State public state = State.Fundraising; // initialize on create&lt;br&gt;    uint public totalRaised;&lt;br&gt;    uint public raiseBy;&lt;br&gt;    uint public completeAt;&lt;br&gt;    Contribution[] contributions;&lt;br&gt;&lt;br&gt;    event LogFundingReceived(address addr, uint amount, uint currentTotal);&lt;br&gt;    event LogWinnerPaid(address winnerAddress);&lt;br&gt;&lt;br&gt;    modifier inState(State _state) &amp;#123;&lt;br&gt;        require(state == _state);&lt;br&gt;        _;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    modifier isCreator() &amp;#123;&lt;br&gt;        require(msg.sender == creator);&lt;br&gt;        _;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    // Wait 24 weeks after final contract state before allowing contract destruction&lt;br&gt;    modifier atEndOfLifecycle() &amp;#123;&lt;br&gt;    require(((state == State.ExpiredRefund || state == State.Successful) &amp;amp;&amp;amp;&lt;br&gt;        completeAt + 24 weeks &amp;lt; now));&lt;br&gt;        _;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    function crowdFund(&lt;br&gt;        uint timeInHoursForFundraising,&lt;br&gt;        string memory _campaignUrl,&lt;br&gt;        address payable _fundRecipient,&lt;br&gt;        uint _minimumToRaise)&lt;br&gt;        public&lt;br&gt;    &amp;#123;&lt;br&gt;        creator = msg.sender;&lt;br&gt;        fundRecipient = _fundRecipient;&lt;br&gt;        campaignUrl = _campaignUrl;&lt;br&gt;        minimumToRaise = _minimumToRaise;&lt;br&gt;        raiseBy = now + (timeInHoursForFundraising * 1 hours);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    function contribute()&lt;br&gt;    public&lt;br&gt;    payable&lt;br&gt;    inState(State.Fundraising)&lt;br&gt;    returns(uint256 id)&lt;br&gt;    &amp;#123;&lt;br&gt;        contributions.push(&lt;br&gt;            Contribution(&amp;#123;&lt;br&gt;                amount: msg.value,&lt;br&gt;                contributor: msg.sender&lt;br&gt;            &amp;#125;) // use array, so can iterate&lt;br&gt;        );&lt;br&gt;        totalRaised += msg.value;&lt;br&gt;&lt;br&gt;        emit LogFundingReceived(msg.sender, msg.value, totalRaised);&lt;br&gt;&lt;br&gt;        checkIfFundingCompleteOrExpired();&lt;br&gt;        return contributions.length - 1; // return id&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    function checkIfFundingCompleteOrExpired()&lt;br&gt;    public&lt;br&gt;    &amp;#123;&lt;br&gt;        if (totalRaised &amp;gt; minimumToRaise) &amp;#123;&lt;br&gt;            state = State.Successful;&lt;br&gt;            payOut();&lt;br&gt;&lt;br&gt;            // could incentivize sender who initiated state change here&lt;br&gt;        &amp;#125; else if ( now &amp;gt; raiseBy )  &amp;#123;&lt;br&gt;            state = State.ExpiredRefund; // backers can now collect refunds by calling getRefund(id)&lt;br&gt;        &amp;#125;&lt;br&gt;        completeAt = now;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    function payOut()&lt;br&gt;    public&lt;br&gt;    inState(State.Successful)&lt;br&gt;    &amp;#123;&lt;br&gt;        fundRecipient.transfer(address(this).balance);&lt;br&gt;        LogWinnerPaid(fundRecipient);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    function getRefund(uint256 id)&lt;br&gt;    inState(State.ExpiredRefund)&lt;br&gt;    public&lt;br&gt;    returns(bool)&lt;br&gt;    &amp;#123;&lt;br&gt;        require(contributions.length &amp;gt; id &amp;amp;&amp;amp; id &amp;gt;= 0 &amp;amp;&amp;amp; contributions[id].amount != 0 );&lt;br&gt;&lt;br&gt;        uint256 amountToRefund = contributions[id].amount;&lt;br&gt;        contributions[id].amount = 0;&lt;br&gt;&lt;br&gt;        contributions[id].contributor.transfer(amountToRefund);&lt;br&gt;&lt;br&gt;        return true;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    function removeContract()&lt;br&gt;    public&lt;br&gt;    isCreator()&lt;br&gt;    atEndOfLifecycle()&lt;br&gt;    &amp;#123;&lt;br&gt;        selfdestruct(msg.sender);&lt;br&gt;        // creator gets all money that hasn&amp;#x27;t be claimed&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="区块链" scheme="https://suncle.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="Solidity" scheme="https://suncle.me/tags/Solidity/"/>
    
  </entry>
  
  <entry>
    <title>Golang Concurrent Write Problem</title>
    <link href="https://suncle.me/2021/08/16/golang-concurrent-write-problem/"/>
    <id>https://suncle.me/2021/08/16/golang-concurrent-write-problem/</id>
    <published>2021-08-16T11:34:34.000Z</published>
    <updated>2022-08-25T03:37:19.956Z</updated>
    
    <content type="html"><![CDATA[<p>分享几个golang并发写入的坑</p><h2 id="并发读写map"><a href="#并发读写map" class="headerlink" title="并发读写map"></a>并发读写map</h2><p>在golang的实际项目中经常需要并发写数据，并且将数据塞到一个map中作为一个整体返回。</p><p>分为2种情况：这两种情况都会造成panic</p><ol><li>并发读写map</li><li>并发写map</li></ol><p>并发读写map的示例代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> util<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行读取</span><br><span class="hljs-keyword">for</span> &#123;<br>_ = m[<span class="hljs-number">1</span>]<br>&#125;<br>&#125;()<br>  <br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码之后会报错：<code>fatal error: concurrent map read and map write</code></p><span id="more"></span><p>错误信息显示，并发的 map 读和 map 写，也就是说使用了两个并发函数不断地对 map 进行读和写而发生了竞态问题，map 内部会对这种并发操作进行检查并提前发现。</p><p>并发写map的示例代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 无限循环, 让并发程序在后台执行</span><br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码之后会报错：<code>fatal error: concurrent map writes</code></p><p>错误信息显示，并发的 map 写，也就是说使用了两个并发函数不断地对 map 进行写而发生了竞态问题</p><p>需要并发读写或者并发写时，一般的做法是加锁，但这样性能并不高，Go语言在 1.9 版本中提供了一种效率较高的并发安全的 sync.Map，sync.Map 和 map 不同，不是以语言原生形态提供，而是在 sync 包下的特殊结构。</p><p>sync.Map 有以下特性：</p><ul><li>无须初始化，直接声明即可。</li><li>sync.Map 不能使用 map 的方式进行取值和设置等操作，而是使用 sync.Map 的方法进行调用，Store 表示存储，Load 表示获取，Delete 表示删除。</li><li>使用 Range 配合一个回调函数进行遍历操作，通过回调函数返回内部遍历出来的值，Range 参数中回调函数的返回值在需要继续迭代遍历时，返回 true，终止迭代遍历时，返回 false。</li></ul><p>并发安全的 sync.Map 演示代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSyncMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> m sync.Map<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行写入</span><br><span class="hljs-keyword">for</span> &#123;<br>m.Store(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不停地对map进行读取</span><br><span class="hljs-keyword">for</span> &#123;<br>_, _ = m.Load(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;()<br><span class="hljs-comment">// 无限循环, 让并发程序在后台执行</span><br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码会无限循环，并且不会有并发读写的错误</p><p>sync.Map 没有提供获取 map 数量的方法，替代方法是在获取 sync.Map 时遍历自行计算数量，sync.Map 为了保证并发安全有一些性能损失，因此在非并发情况下，使用 map 相比使用 sync.Map 会有更好的性能。</p><h2 id="并发写slice"><a href="#并发写slice" class="headerlink" title="并发写slice"></a>并发写slice</h2><p>一般不太会有并发写slice的，因为slice和map不同，对加入的先后顺序是敏感的，因此目前的实际应用场景没有使用到并发读写slice</p><h2 id="并发写string"><a href="#并发写string" class="headerlink" title="并发写string"></a>并发写string</h2><p>string是Go的内建类型，但对它的读写操作并非线程安全的，原因在于它的内部实际上是通过struct存储的，我们可以在runtime&#x2F;string.go里面看到它的内部定义。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> stringStruct <span class="hljs-keyword">struct</span> &#123;<br>str unsafe.Pointer<br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringStructOf</span><span class="hljs-params">(sp *<span class="hljs-type">string</span>)</span></span> *stringStruct &#123;<br><span class="hljs-keyword">return</span> (*stringStruct)(unsafe.Pointer(sp))<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这样一个 struct ，go 无法保证原子性地完成赋值，因此可能会出现goroutine 1 刚修改完指针（str）、还没来得及修改长度（len），goroutine 2 就读取了这个string 的情况。</p><p>我们可以通过一个测试代码发现并发读写string的问题：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>s := <span class="hljs-string">&quot;0&quot;</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>s = <span class="hljs-string">&quot;0&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s = <span class="hljs-string">&quot;aa&quot;</span><br>&#125;<br>i++<br>time.Sleep(<span class="hljs-number">1</span> * time.Microsecond)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>b := s<br><span class="hljs-keyword">if</span> b != <span class="hljs-string">&quot;0&quot;</span> &amp;&amp; b != <span class="hljs-string">&quot;aa&quot;</span> &#123;<br>ch &lt;- b<br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;Got strange string: &quot;</span>, &lt;-ch)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行这个代码得到下面的输出结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=== RUN   TestString</span><br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  01<br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  01<br>Got strange string:  a<br>Got strange string:  a<br>Got strange string:  a<br><span class="hljs-bullet">--- </span>PASS: TestString (0.01s)<br></code></pre></td></tr></table></figure><p>通过<code>go tool compile -S</code>查看执行的汇编代码，可以发现，string的写入是分为写入长度和写入指针2个部分的。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/htZm5E-1629119549723.png"></p><p>因此在频繁的写入操作中，可能会出现写入了一部分数据就被读取出去了，自然就会读取到脏数据</p><p>仔细看上述示例代码，会发现在写入协程中有一个多余的sleep操作，如果把这个sleep去掉，运行的结果是永远读不到脏数据，这是为什么呢？原因在于编译器的优化。编译器优化之后会直接改写频繁赋值的逻辑，而不是持续写入长度和指针</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/image-20210816212544508-1629120344614-1629120356605.png" alt="image-20210816212544508"></p><h2 id="并发写interface"><a href="#并发写interface" class="headerlink" title="并发写interface"></a>并发写interface</h2><p>将上述并发写string代码中的类型改为interface就可以复现并发写interface的问题。</p><hr><p>了解上面4中并发读写会造成panic或者脏读的情况之后，在后续的日常开发中，需要十分注意这样的情况</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;分享几个golang并发写入的坑&lt;/p&gt;
&lt;h2 id=&quot;并发读写map&quot;&gt;&lt;a href=&quot;#并发读写map&quot; class=&quot;headerlink&quot; title=&quot;并发读写map&quot;&gt;&lt;/a&gt;并发读写map&lt;/h2&gt;&lt;p&gt;在golang的实际项目中经常需要并发写数据，并且将数据塞到一个map中作为一个整体返回。&lt;/p&gt;
&lt;p&gt;分为2种情况：这两种情况都会造成panic&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;并发读写map&lt;/li&gt;
&lt;li&gt;并发写map&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并发读写map的示例代码：&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs golang&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; util&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestMap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;	m := &lt;span class=&quot;hljs-built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-comment&quot;&gt;// 不停地对map进行写入&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;br&gt;			m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;()&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-comment&quot;&gt;// 不停地对map进行读取&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;br&gt;			_ = m[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;()&lt;br&gt;  &lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行代码之后会报错：&lt;code&gt;fatal error: concurrent map read and map write&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="https://suncle.me/categories/golang/"/>
    
    
    <category term="并发" scheme="https://suncle.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>仿MybatisGenerator：根据sql生成go struct</title>
    <link href="https://suncle.me/2021/07/27/%E4%BB%BFmybatisgenerator%EF%BC%9A%E6%A0%B9%E6%8D%AEsql%E7%94%9F%E6%88%90go-struct/"/>
    <id>https://suncle.me/2021/07/27/%E4%BB%BFmybatisgenerator%EF%BC%9A%E6%A0%B9%E6%8D%AEsql%E7%94%9F%E6%88%90go-struct/</id>
    <published>2021-07-27T07:36:52.000Z</published>
    <updated>2022-08-25T03:36:24.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="genstruct"><a href="#genstruct" class="headerlink" title="genstruct"></a>genstruct</h1><p>项目地址：<a href="https://github.com/suncle1993/genstruct">https://github.com/suncle1993/genstruct</a></p><p>根据mysql schema生成go struct，适用于习惯先写sql后写struct的同学</p><p>根据 <a href="https://github.com/fifsky/genstruct">https://github.com/fifsky/genstruct</a> 项目做了一些修改，更适用于目前的hago项目。在原版的基础上添加了以下功能：</p><ol><li>schema的生成（信奉sql和model放在一起的人喜欢这种方式），便于自动建表之内的操作</li><li>暴露的变量和方法注释的添加</li><li>通过表注释添加为struct的注释</li><li>对于生成的struct字段进行首字母缩写词的转换，总共38种，完全符合golint的检查规则</li></ol><span id="more"></span><h2 id="命令行版本"><a href="#命令行版本" class="headerlink" title="命令行版本"></a>命令行版本</h2><p>安装：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/suncle1993/genstruct<br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">genstruct</span> -h <span class="hljs-number">127.0.0.1</span> -u root -P <span class="hljs-number">123456</span> -p <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><ul><li><code>-h</code> default <code>localhost</code></li><li><code>-u</code> default <code>root</code></li><li><code>-p</code> default <code>3306</code></li></ul><p>演示见下面的 aciinema svg：</p><p><a href="https://asciinema.org/a/X5sk7TqrTTjF8AhN764K0Fc6m"><img src="https://asciinema.org/a/X5sk7TqrTTjF8AhN764K0Fc6m.svg" alt="asciicast"></a></p><h2 id="线上版本"><a href="#线上版本" class="headerlink" title="线上版本"></a>线上版本</h2><p>页面地址：<a href="https://genstruct.suncle.me/">https://genstruct.suncle.me/</a></p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/DV5XD3-1627372059061.png"></p><h2 id="接口版本"><a href="#接口版本" class="headerlink" title="接口版本"></a>接口版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;https://genstructapi.herokuapp.com/api/struct/generate&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \<br>--data-raw <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;tags&quot;: [&quot;db&quot;, &quot;json&quot;],</span><br><span class="hljs-string">    &quot;table&quot;: &quot;create table user_mine_info( id bigint(20) NOT NULL AUTO_INCREMENT, uid bigint(20) NOT NULL DEFAULT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>0<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>用户uid<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, mined_cnt bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>剩余挖矿次数<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, un_exchange_diamond bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>未兑换为挖矿次数的钻石<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, created_at bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>创建时间<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, updated_at bigint(20) NOT NULL COMMENT &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>更新时间<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, PRIMARY KEY (id), UNIQUE KEY uk_uid (uid) USING BTREE) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COMMENT = &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>用户挖矿剩余次数记录<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;;&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="示例模型"><a href="#示例模型" class="headerlink" title="示例模型"></a>示例模型</h2><p>建表数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user_mine_info(<br>  id bigint(20) NOT NULL AUTO_INCREMENT, <br>  UID bigint(20) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;用户uid&#x27;, <br>  mined_cnt bigint(20) NOT NULL COMMENT &#x27;剩余挖矿次数&#x27;, <br>  un_exchange_diamond bigint(20) NOT NULL COMMENT &#x27;未兑换为挖矿次数的钻石&#x27;, <br>  created_at bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;, <br>  updated_at bigint(20) NOT NULL COMMENT &#x27;更新时间&#x27;, <br>  PRIMARY KEY (id), <br>  UNIQUE KEY uk_uid (UID) USING BTREE<br>) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COMMENT = &#x27;用户挖矿剩余次数记录&#x27;;<br><br></code></pre></td></tr></table></figure><p>生成的模型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> user_mine_info<br><br><span class="hljs-comment">// UserMineInfo 用户挖矿剩余次数记录</span><br><span class="hljs-keyword">type</span> UserMineInfo <span class="hljs-keyword">struct</span> &#123;<br>ID                <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;id&quot; json:&quot;id&quot; `</span><br>UID               <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;uid&quot; json:&quot;uid&quot; `</span>                                 <span class="hljs-comment">// 用户uid</span><br>MinedCnt          <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;mined_cnt&quot; json:&quot;mined_cnt&quot; `</span>                     <span class="hljs-comment">// 剩余挖矿次数</span><br>UnExchangeDiamond <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;un_exchange_diamond&quot; json:&quot;un_exchange_diamond&quot; `</span> <span class="hljs-comment">// 未兑换为挖矿次数的钻石</span><br>CreatedAt         <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;created_at&quot; json:&quot;created_at&quot; `</span>                   <span class="hljs-comment">// 创建时间</span><br>UpdatedAt         <span class="hljs-type">int64</span> <span class="hljs-string">`db:&quot;updated_at&quot; json:&quot;updated_at&quot; `</span>                   <span class="hljs-comment">// 更新时间</span><br>&#125;<br><br><span class="hljs-comment">// TableName ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserMineInfo)</span></span> TableName() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user_mine_info&quot;</span> <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 如果分表需要修改</span><br>&#125;<br><br><span class="hljs-comment">// PK ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserMineInfo)</span></span> PK() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id&quot;</span><br>&#125;<br><br><span class="hljs-comment">// Schema ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserMineInfo)</span></span> Schema() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`(</span><br><span class="hljs-string">  id bigint NOT NULL AUTO_INCREMENT,</span><br><span class="hljs-string">  uid bigint NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;用户uid&#x27;,</span><br><span class="hljs-string">  mined_cnt bigint NOT NULL COMMENT &#x27;剩余挖矿次数&#x27;,</span><br><span class="hljs-string">  un_exchange_diamond bigint NOT NULL COMMENT &#x27;未兑换为挖矿次数的钻石&#x27;,</span><br><span class="hljs-string">  created_at bigint NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="hljs-string">  updated_at bigint NOT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="hljs-string">  PRIMARY KEY (id),</span><br><span class="hljs-string">  UNIQUE KEY uk_uid (uid) USING BTREE</span><br><span class="hljs-string">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;用户挖矿剩余次数记录&#x27;`</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;genstruct&quot;&gt;&lt;a href=&quot;#genstruct&quot; class=&quot;headerlink&quot; title=&quot;genstruct&quot;&gt;&lt;/a&gt;genstruct&lt;/h1&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/suncle1993/genstruct&quot;&gt;https://github.com/suncle1993/genstruct&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据mysql schema生成go struct，适用于习惯先写sql后写struct的同学&lt;/p&gt;
&lt;p&gt;根据 &lt;a href=&quot;https://github.com/fifsky/genstruct&quot;&gt;https://github.com/fifsky/genstruct&lt;/a&gt; 项目做了一些修改，更适用于目前的hago项目。在原版的基础上添加了以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;schema的生成（信奉sql和model放在一起的人喜欢这种方式），便于自动建表之内的操作&lt;/li&gt;
&lt;li&gt;暴露的变量和方法注释的添加&lt;/li&gt;
&lt;li&gt;通过表注释添加为struct的注释&lt;/li&gt;
&lt;li&gt;对于生成的struct字段进行首字母缩写词的转换，总共38种，完全符合golint的检查规则&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="golang" scheme="https://suncle.me/categories/golang/"/>
    
    
    <category term="genstruct" scheme="https://suncle.me/tags/genstruct/"/>
    
    <category term="generator" scheme="https://suncle.me/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>redis统计送礼人数</title>
    <link href="https://suncle.me/2021/07/27/redis%E7%BB%9F%E8%AE%A1%E9%80%81%E7%A4%BC%E4%BA%BA%E6%95%B0/"/>
    <id>https://suncle.me/2021/07/27/redis%E7%BB%9F%E8%AE%A1%E9%80%81%E7%A4%BC%E4%BA%BA%E6%95%B0/</id>
    <published>2021-07-27T06:56:47.000Z</published>
    <updated>2022-08-25T03:43:33.452Z</updated>
    
    <content type="html"><![CDATA[<p>在Hago的营收活动中， 我们经常要记录的一个数据是送礼用户数，作为活动对于用户的吸引程度的一个关键指标。</p><p>本文将介绍3种使用 Redis 对用户数量进行记录的方案， 这些方案虽然都可以对送礼用户的数量进行统计， 但每个方案都有一些自己特有的操作， 并且各个方案的性能特征以及资源消耗也各有不同。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/T3LYCH-1627956415425.png"></p><span id="more"></span><h2 id="方案-1-：使用集合"><a href="#方案-1-：使用集合" class="headerlink" title="方案 1 ：使用集合"></a>方案 1 ：使用集合</h2><p>如果产品需求除了需要记录送礼用户数量，还需要记录送礼用户的名单， 那么可以使用集合来达成这个目标。</p><p>可以执行以下 <a href="http://redisdoc.com/set/sadd.html">SADD</a> 命令， 将用户添加到送礼用户名单当中：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">SADD</span> <span class="hljs-string">&quot;users&quot;</span> &lt;uid&gt;<br></code></pre></td></tr></table></figure><p>通过使用 <a href="http://redisdoc.com/set/sismember.html">SISMEMBER</a> 命令， 我们可以检查一个指定的用户是否送过礼：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">SISMEMBER <span class="hljs-string">&quot;users&quot;</span> <span class="hljs-variable">&lt;uid&gt;</span><br></code></pre></td></tr></table></figure><p>而统计送礼用户则可以通过执行 <a href="http://redisdoc.com/set/scard.html">SCARD</a> 命令来完成：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">SCARD </span><span class="hljs-string">&quot;users&quot;</span><br></code></pre></td></tr></table></figure><p>通过集合运算操作， 我们可以像有序集合方案一样， 对不同时间段或者日期的送礼用户名单进行聚合计算。 比如说， 通过 <a href="http://redisdoc.com/set/sinter.html">SINTER</a> 或者 <a href="http://redisdoc.com/set/sinterstore.html">SINTERSTORE</a> 命令， 我们可以计算出一周之内连续送礼的用户：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">SINTER <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;day_7_users&quot;</span><br></code></pre></td></tr></table></figure><p>此外， 通过 <a href="http://redisdoc.com/set/sunion.html">SUNION</a> 命令或者 <a href="http://redisdoc.com/set/sunionstore.html">SUNIONSTORE</a> 命令， 我们可以计算出一周内连续送礼的用户总数量：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">SUNION <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;day_7_users&quot;</span><br></code></pre></td></tr></table></figure><p>而通过执行 <a href="http://redisdoc.com/set/sdiff.html">SDIFF</a> 命令或者 <a href="http://redisdoc.com/set/sdiffstore.html">SDIFFSTORE</a> 命令， 我们可以知道哪些用户今天送礼了， 但是昨天没有送礼：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SDIFF</span> <span class="hljs-string">&quot;today_users&quot;</span> <span class="hljs-string">&quot;yesterday_users&quot;</span><br></code></pre></td></tr></table></figure><p>又或者工作日送礼了， 但是假日没有送礼：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 计算工作日送礼名单</span><br>SINTERSTORE <span class="hljs-string">&quot;weekday_users&quot;</span> <span class="hljs-string">&quot;monday_users&quot;</span> <span class="hljs-string">&quot;tuesday_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;friday_users&quot;</span><br><span class="hljs-comment"># 计算假日送礼名单</span><br>SINTERSTORE <span class="hljs-string">&quot;holiday_users&quot;</span> <span class="hljs-string">&quot;saturday_users&quot;</span> <span class="hljs-string">&quot;sunday_users&quot;</span><br><span class="hljs-comment"># 计算工作日送礼但是假日未送礼的名单</span><br>SDIFF <span class="hljs-string">&quot;weekday_users&quot;</span> <span class="hljs-string">&quot;holiday_users&quot;</span><br></code></pre></td></tr></table></figure><p>etc.</p><h2 id="方案-2-：使用-HyperLogLog"><a href="#方案-2-：使用-HyperLogLog" class="headerlink" title="方案 2 ：使用 HyperLogLog"></a>方案 2 ：使用 HyperLogLog</h2><p>虽然集合能够很好的记录活动人数， 但以上这两个方案都有一个明显的缺点， 那就是， 这两个方案耗费的内存会随着被统计用户数量的增多而增多： 如果你的用户数量比较多， 又或者你需要记录多天&#x2F;多个时段的送礼用户名单并进行聚合计算， 那么这两个方案可能会消耗你大量内存。</p><p>另一方面， 在有些情况下， 我们只想要知道送礼用户的人数， 而不需要知道具体的送礼用户名单， 这时集合储存的信息就会显得多余了。</p><p>在需要尽可能地节约内存并且只需要知道送礼用户数量的情况下， 我们可以使用 HyperLogLog 来对送礼用户进行统计： HyperLogLog 是一个概率算法， 它可以对元素的基数进行估算， 并且每个 HyperLogLog 只需要耗费 12 KB 内存， 对于用户数量非常多但是内存却非常紧张的系统， 这一方案无疑是最佳之选。</p><p>在这一方案下， 我们使用 <a href="http://redisdoc.com/hyperloglog/pfadd.html">PFADD</a> 命令去记录在线的用户：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">PFADD <span class="hljs-string">&quot;users&quot;</span> <span class="hljs-variable">&lt;uid&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <a href="http://redisdoc.com/hyperloglog/pfcount.html">PFCOUNT</a> 命令获取在线人数：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">PFCOUNT</span> <span class="hljs-string">&quot;users&quot;</span><br></code></pre></td></tr></table></figure><p>因为 HyperLogLog 也提供了计算交集的 <a href="http://redisdoc.com/hyperloglog/pfmerge.html">PFMERGE</a> 命令， 所以我们也可以用这个命令计算出多个给定时间段或日期之内， 上线的总人数：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 统计 7 天之内总共有多少人上线了</span><br>PFMERGE <span class="hljs-string">&quot;7_days_both_users&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> <span class="hljs-string">...</span> <span class="hljs-string">&quot;day_7_users&quot;</span><br>PFCOUNT <span class="hljs-string">&quot;7_days_both_users&quot;</span><br></code></pre></td></tr></table></figure><h2 id="方案-3-：使用位图（bitmap）"><a href="#方案-3-：使用位图（bitmap）" class="headerlink" title="方案 3 ：使用位图（bitmap）"></a>方案 3 ：使用位图（bitmap）</h2><p>回顾上面介绍的2个方案， 我们可以得出以上结论：</p><ul><li>使用集合能够储存具体的送礼用户名单， 但是却需要消耗大量的内存；</li><li>而使用 HyperLogLog 虽然能够有效地减少统计送礼用户所需的内存， 但是它却没办法准确地记录具体的送礼用户名单。</li></ul><p>那么是否存在一种既能够获得送礼用户名单， 又可以尽量减少内存消耗的方法存在呢？ 这种方法的确存在 —— 使用 Redis 的位图就可以办到。</p><p>Redis 的位图就是一个由二进制位组成的数组， 通过将数组中的每个二进制位与用户 ID 进行一一对应， 我们可以使用位图去记录每个用户是否在线。</p><p>当一个用户上线时， 我们就使用 <a href="http://redisdoc.com/string/setbit.html">SETBIT</a> 命令， 将这个用户对应的二进制位设置为 1 ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 此处的 uid 必须为数字，因为它会被用作索引</span><br><span class="hljs-attribute">SETBIT</span> <span class="hljs-string">&quot;users&quot;</span> &lt;uid&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>通过使用 <a href="http://redisdoc.com/string/getbit.html">GETBIT</a> 命令去检查一个二进制位的值是否为 1 ， 我们可以知道指定的用户是否送过礼：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">GETBIT <span class="hljs-string">&quot;users&quot;</span> <span class="hljs-variable">&lt;uid&gt;</span><br></code></pre></td></tr></table></figure><p>而通过 <a href="http://redisdoc.com/string/bitcount.html">BITCOUNT</a> 命令， 我们可以统计出位图中有多少个二进制位被设置成了 1 ， 也即是有多少个用户送过礼：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BITCOUNT </span><span class="hljs-string">&quot;users&quot;</span><br></code></pre></td></tr></table></figure><p>跟集合一样， 用户也能够对多个位图进行聚合计算 —— 通过 <a href="http://redisdoc.com/string/bitop.html">BITOP</a> 命令， 用户可以对一个或多个位图执行逻辑并、逻辑或、逻辑异或或者逻辑非操作：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 计算出 7 天都送礼的用户</span><br><span class="hljs-keyword">BITOP </span><span class="hljs-string">&quot;AND&quot;</span> <span class="hljs-string">&quot;7_days_both_users&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> ... <span class="hljs-string">&quot;day_7_users&quot;</span><br><br><span class="hljs-comment"># 计算出 7 天的送礼用户总人数</span><br><span class="hljs-keyword">BITOP </span><span class="hljs-string">&quot;OR&quot;</span> <span class="hljs-string">&quot;7_days_total_users&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span> ... <span class="hljs-string">&quot;day_7_users&quot;</span><br><br><span class="hljs-comment"># 计算出两天当中只有其中一天送礼的用户</span><br><span class="hljs-keyword">BITOP </span><span class="hljs-string">&quot;XOR&quot;</span> <span class="hljs-string">&quot;only_one_day_sent&quot;</span> <span class="hljs-string">&quot;day_1_users&quot;</span> <span class="hljs-string">&quot;day_2_users&quot;</span><br></code></pre></td></tr></table></figure><p>位图方案记录一个用户是否在线需要花费 1 个二进制位， 对于用户数为 100 万的网站来说， 使用这一方案只需要耗费 125 KB 内存， 而对于用户数为 1000 万的网站来说， 使用这一方案也只需要花费 1.25 MB 内存。</p><p>虽然位图节约内存的效果不及 HyperLogLog 那么显著， 但是使用位图可以准确地判断一个用户是否上线， 并且能够像集合和有序集合一样， 对送礼用户名单进行聚合计算。 因此对于想要尽量节约内存， 但又需要准确地知道用户是否在线， 又或者需要对用户的在线名单进行聚合计算的应用来说， 使用位图可以说是最佳之选。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以下表格总结了以上3个方案的特点：</p><table><thead><tr><th align="left">方案</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">集合</td><td align="left">能够储存送礼用户的名单，也能够执行聚合计算，消耗的内存比有序集合少，但是跟有序集合一样，这个方案消耗的内存也会随着用户数量的增多而增多。</td></tr><tr><td align="left">HyperLogLog</td><td align="left">无论需要统计的用户有多少，只需要耗费 12 KB 内存，但由于概率算法的特性，只能给出在线人数的估算值，并且也无法获取准确的送礼用户名单。</td></tr><tr><td align="left">位图</td><td align="left">在尽可能节约内存的情况下，记录送礼用户的名单，并且能够对这些名单执行聚合操作。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Hago的营收活动中， 我们经常要记录的一个数据是送礼用户数，作为活动对于用户的吸引程度的一个关键指标。&lt;/p&gt;
&lt;p&gt;本文将介绍3种使用 Redis 对用户数量进行记录的方案， 这些方案虽然都可以对送礼用户的数量进行统计， 但每个方案都有一些自己特有的操作， 并且各个方案的性能特征以及资源消耗也各有不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://suncle-public.oss-cn-shenzhen.aliyuncs.com/uPic/T3LYCH-1627956415425.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工程实践" scheme="https://suncle.me/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="redis" scheme="https://suncle.me/tags/redis/"/>
    
    <category term="HyperLogLog" scheme="https://suncle.me/tags/HyperLogLog/"/>
    
  </entry>
  
  <entry>
    <title>坚持住啊，还在屎山中爬行的同事们</title>
    <link href="https://suncle.me/2020/12/14/%E5%9D%9A%E6%8C%81%E4%BD%8F%E5%95%8A%EF%BC%8C%E8%BF%98%E5%9C%A8%E5%B1%8E%E5%B1%B1%E4%B8%AD%E7%88%AC%E8%A1%8C%E7%9A%84%E5%90%8C%E4%BA%8B%E4%BB%AC/"/>
    <id>https://suncle.me/2020/12/14/%E5%9D%9A%E6%8C%81%E4%BD%8F%E5%95%8A%EF%BC%8C%E8%BF%98%E5%9C%A8%E5%B1%8E%E5%B1%B1%E4%B8%AD%E7%88%AC%E8%A1%8C%E7%9A%84%E5%90%8C%E4%BA%8B%E4%BB%AC/</id>
    <published>2020-12-14T11:46:46.000Z</published>
    <updated>2022-08-25T03:32:26.312Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“There are only two hard things in Computer Science: cache invalidation and naming things.”</p><p> — <a href="https://martinfowler.com/bliki/TwoHardThings.html">Phil Karlton</a></p></blockquote><p>在计算机领域只有两件艰难的事情：缓存失效和对象命名。</p><p>这还真不是一个笑话。写代码是比较容易的事情，但是阅读别人的代码，那就因人而异了。</p><p>好的工程师写出来的代码可读性很高，比如我上家公司的同事旭总。一般的工程师写出来的代码就像是一坨屎，比如之前某某几位同事。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/best-practice-shit-code/%E4%BD%A0%E7%8C%9C%E6%88%91%E7%9A%84%E6%9E%AA%E9%87%8C%E6%9C%89%E6%B2%A1%E6%9C%89%E5%AD%90%E5%BC%B9.jpg"></p><p>所以我会经常去格式化他们的代码。如果不幸轮到你继续在屎代码上面开发，那就是屎上堆屎了。心疼你。</p><p>当然有时候工期紧张，我自己也会写一些屎代码<code>shit code</code>，但是每次提交的时候都有一种强烈的愧疚感。希望这些代码最多存活一个月就消失，不要被人踩到了。</p><span id="more"></span><h2 id="屎代码是怎么产生的？"><a href="#屎代码是怎么产生的？" class="headerlink" title="屎代码是怎么产生的？"></a>屎代码是怎么产生的？</h2><p>要说怎么写屎代码，这个我就很拿手了。下面随便列举一些常见的屎代码产生方式：</p><ol><li>看不懂的命名</li><li>过长的类|函数</li><li>大段重复的代码</li><li>没有注释的Magic number</li><li>100多个参数的函数</li><li>一堆没有注释的if-else嵌套</li><li>业务过度耦合：支付订单和点餐订单能耦合在一起？谁重构谁痛苦</li><li>代码和文档分离：几年前的业务完全不知道是个啥</li><li>…</li></ol><p>很不幸，大多数人的项目中，这些常见的屎代码产生方式是随处可见的。</p><p>毕竟，几百个人写屎代码，就像几百个人堆积木。堆得歪歪扭扭，摇摇晃晃，乱七八糟，你千万不能抽里面的积木，指不定抽了一块就塌了。只能看见哪里觉得不牢靠不停的往那边填积木。只要不倒就好了。这也是大部分程序员的追求了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/best-practice-shit-code/%E6%8B%89%E5%B1%8E.jpg"></p><h2 id="不写屎代码从命名规范开始"><a href="#不写屎代码从命名规范开始" class="headerlink" title="不写屎代码从命名规范开始"></a>不写屎代码从命名规范开始</h2><p>如果想解决代码高耦合这坨屎，需要有比较好的顶层解耦设计，划分清楚各自服务的边界。</p><p>如果你一直都只是代码搬运工，传说中的cv工程师，那么到这一步还有一些内功需要你去修炼的。</p><p>但是好的命名规范确实每个人都可以做到的。不同的语言都有各自的规范，如果所有人都能正确理解那些规范，并且严格遵守，同时强制使用ci校验，就可以保证代码外表上是美观的。</p><p>这里就以Go语言的命名规范为例讲一下怎么写出人人都想闻的香代码。</p><p><code>go fmt</code>可以统一不同人的编码规范，却没有办法格式化出一个好的命名。但是在Go社区中其实一直都存在着一些成文的或者不成文的命名规则，比如：</p><ol><li>某个名称在包外是否可见，就取决于其首个字符是否为大写字母</li><li>使用驼峰命名而不是下划线</li><li>单个方法的接口名称应该是<code>InterfaceName = MethodName + er</code></li><li><code>Getter</code>方法的命名不需要包含<code>Get</code>，比如cat.Owner()方法不需要命名成cat.GetOwner()</li><li>首字母缩写词应该保持原有格式：应该使用userID而不是userId，应该使用userAPI而不是userApi</li><li>变量名需要尽可能的简单但是又能描述清楚</li><li>…</li></ol><p>总之，规则是有的。只是很多程序员选择直接忽视。比如前面的五条。</p><p>还有一些规则是被过渡滥用了。比如第6条，很多同事的命名沿用以前的老风格，在一个struct中大量使用单字符的的变量或者随心所欲的缩写。这样的代码是完全没有办法阅读的。所谓有追求的程序员，还是得追求一下代码的品味。</p><p>悲观的说，即使做到了这些也只是你一个人的代码是优雅的，但是你怎么能保证所有人都有这样的追求呢？作为个人，除了提建议之外，其实是没有太多有效的办法的。</p><h2 id="怎么才能根治屎上堆屎？"><a href="#怎么才能根治屎上堆屎？" class="headerlink" title="怎么才能根治屎上堆屎？"></a>怎么才能根治屎上堆屎？</h2><p>想根治这个问题，只靠某个程序员一直保持优雅代码是没什么用的。</p><p>你写10句优雅的代码，其他10个同事每个人都写10句屎代码。这样算起来，优雅代码的比例最多只有十分之一。</p><p>如果一个团队想要彻底解决屎上堆屎这个老大难问题，就需要贯彻执行下面两点方法：</p><ol><li>招高质量的程序员：code sense很重要，每个程序员都需要懂得奥卡姆剃刀原理：若无必要，勿增实体。</li><li>管理层需要有长远的视野而不仅仅是短期目标。</li></ol><p>深度悲观的说，这两个方法真正执行起来的时候也是难度重重，基本不可能完成。</p><p>高质量无论是不是在互联网行业，都意味着价格昂贵，但又有几家公司能给得雇佣的起这么多昂贵的程序员呢？</p><p>而长远的目标在资本的压力之下，也显得一文不值。代码规范提升10%的重要性和“明天上线”这个命令比起来，也是低到尘埃的的。然后日复一日，明天又将是明天，规范性最终消失殆尽，屎山越来越高。</p><p>说到底，这些都是钱的问题，也是最无解的问题，最终在某一天，屎山崩溃，一切回到原点。</p><p>最后，大胆猜测一下，昨天的Google服务崩溃也是因为屎太多了吧。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“There are only two hard things in Computer Science: cache invalidation and naming things.”&lt;/p&gt;
&lt;p&gt; — &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;Phil Karlton&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在计算机领域只有两件艰难的事情：缓存失效和对象命名。&lt;/p&gt;
&lt;p&gt;这还真不是一个笑话。写代码是比较容易的事情，但是阅读别人的代码，那就因人而异了。&lt;/p&gt;
&lt;p&gt;好的工程师写出来的代码可读性很高，比如我上家公司的同事旭总。一般的工程师写出来的代码就像是一坨屎，比如之前某某几位同事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/best-practice-shit-code/%E4%BD%A0%E7%8C%9C%E6%88%91%E7%9A%84%E6%9E%AA%E9%87%8C%E6%9C%89%E6%B2%A1%E6%9C%89%E5%AD%90%E5%BC%B9.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以我会经常去格式化他们的代码。如果不幸轮到你继续在屎代码上面开发，那就是屎上堆屎了。心疼你。&lt;/p&gt;
&lt;p&gt;当然有时候工期紧张，我自己也会写一些屎代码&lt;code&gt;shit code&lt;/code&gt;，但是每次提交的时候都有一种强烈的愧疚感。希望这些代码最多存活一个月就消失，不要被人踩到了。&lt;/p&gt;</summary>
    
    
    
    <category term="工程实践" scheme="https://suncle.me/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="shit code" scheme="https://suncle.me/tags/shit-code/"/>
    
    <category term="规范性" scheme="https://suncle.me/tags/%E8%A7%84%E8%8C%83%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>神兵利器推荐——你一定不能错过的mac alfred工作流</title>
    <link href="https://suncle.me/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84mac-alfred%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>https://suncle.me/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84mac-alfred%E5%B7%A5%E4%BD%9C%E6%B5%81/</id>
    <published>2020-12-09T04:44:56.000Z</published>
    <updated>2022-08-25T03:45:39.705Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/alfred4.jpg"></p><p>上一篇介绍了我日常高频使用的chrome插件，那就顺便介绍一下mac上最最最能提升效率的Alfred工作流吧。</p><span id="more"></span><p>以下是我常用的 Alfred workflow 列表：（几乎每天都会用到）</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/all-workflow.jpg" alt="自用 Alfred Workfolw"></p><p>不同的插件，可能有不同作者开发的版本，下面会给出我一直在用的版本，但是你完全可以去选择更适合自己的版本。比如像有道翻译，可以找到很多版本，选择自己喜欢的即可。</p><p>下面按照顺序一款一款的介绍下。</p><h2 id="CodeVar"><a href="#CodeVar" class="headerlink" title="CodeVar"></a>CodeVar</h2><blockquote><p>生成变量名，支持大小驼峰、常量、下划线，开发者必备的工作流</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/code-var.jpg"></p><p>下载地址：<a href="https://github.com/xudaolong/CodeVar">https://github.com/xudaolong/CodeVar</a></p><h2 id="Encode-x2F-Decode"><a href="#Encode-x2F-Decode" class="headerlink" title="Encode &#x2F; Decode"></a>Encode &#x2F; Decode</h2><blockquote><p>Base64 编解码</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/encode.jpg"></p><p>下载地址：<a href="https://github.com/willfarrell/alfred-encode-decode-workflow">https://github.com/willfarrell/alfred-encode-decode-workflow</a></p><h2 id="Fakeum"><a href="#Fakeum" class="headerlink" title="Fakeum"></a>Fakeum</h2><blockquote><p>生成各种假数据，比如姓名，城市，银行卡号等等</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/fake.jpg"></p><p>下载地址：<a href="https://github.com/deanishe/alfred-fakeum">https://github.com/deanishe/alfred-fakeum</a></p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><blockquote><p>快速查找项目&#x2F;用户</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/gh.jpg"></p><p>下载地址：<a href="https://github.com/gharlan/alfred-github-workflow">https://github.com/gharlan/alfred-github-workflow</a></p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><blockquote><p>支持各种hash算法的计算</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/hash.jpg"></p><p>下载地址：<a href="https://github.com/willfarrell/alfred-hash-workflow">https://github.com/willfarrell/alfred-hash-workflow</a></p><h2 id="Http-Status-Codes"><a href="#Http-Status-Codes" class="headerlink" title="Http Status Codes"></a>Http Status Codes</h2><blockquote><p>快速显示 http 状态码含义</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/http.jpg"></p><p>下载地址：<a href="https://www.packal.org/workflow/http-status-codes">https://www.packal.org/workflow/http-status-codes</a></p><h2 id="IP-Address"><a href="#IP-Address" class="headerlink" title="IP Address"></a>IP Address</h2><blockquote><p>快速查询本地ip和公网出口ip，再也不用到ipip.net上去查询了</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/ip.jpg"></p><p>下载地址：<a href="https://github.com/zenorocha/alfred-workflows/raw/master/ip-address/ip-address.alfredworkflow">https://github.com/zenorocha/alfred-workflows/raw/master/ip-address/ip-address.alfredworkflow</a></p><h2 id="Kill-Process"><a href="#Kill-Process" class="headerlink" title="Kill Process"></a>Kill Process</h2><blockquote><p>杀进程，不知道怎么处理卡死的程序？那就用kill process吧</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/kill.jpg"></p><p>下载地址：<a href="https://github.com/nathangreenstein/alfred-process-killer">https://github.com/nathangreenstein/alfred-process-killer</a></p><h2 id="Microsoft-ToDo"><a href="#Microsoft-ToDo" class="headerlink" title="Microsoft ToDo"></a>Microsoft ToDo</h2><blockquote><p>奇妙清单的升级版本就是Microsoft ToDo了，这个工作量可以快速记录todo事项</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/ms-todo.jpg"></p><p>下载地址：<a href="https://github.com/johandebeurs/alfred-mstodo-workflow">https://github.com/johandebeurs/alfred-mstodo-workflow</a></p><h2 id="Password-Generator"><a href="#Password-Generator" class="headerlink" title="Password Generator"></a>Password Generator</h2><blockquote><p>快速生成各种复杂度的密码，总有一款密码适合你</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/pwgen.jpg"></p><p>下载地址：<a href="https://github.com/deanishe/alfred-pwgen">https://github.com/deanishe/alfred-pwgen</a></p><h2 id="Terminal-Finder"><a href="#Terminal-Finder" class="headerlink" title="Terminal Finder"></a>Terminal Finder</h2><blockquote><p>mac上终端的目录并不像windows那么好找到，经常使用终端的开发者需要快速打开当前路径所在的finder目录</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/terminal-finder.jpg"></p><p>下载地址：<a href="https://github.com/LeEnno/alfred-terminalfinder">https://github.com/LeEnno/alfred-terminalfinder</a></p><h2 id="Wechat-Plugin"><a href="#Wechat-Plugin" class="headerlink" title="Wechat Plugin"></a>Wechat Plugin</h2><blockquote><p>mac版本的微信客户端插件，支持多种配色方案。支持微信多开以及小程序查看，还有消息防撤回功能。</p><p>微信插件分享就不贴图了，自行探索</p></blockquote><h2 id="Youdao-Translate"><a href="#Youdao-Translate" class="headerlink" title="Youdao Translate"></a>Youdao Translate</h2><blockquote><p>快速有道翻译，再也不用打开网页去查翻译结果了</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/yd.jpg"></p><p>下载地址：<a href="https://github.com/wensonsmith/YoudaoTranslate">https://github.com/wensonsmith/YoudaoTranslate</a></p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><blockquote><p>锁定屏幕，<code>alfred</code> 自带的功能，不需要付费即可使用</p></blockquote><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/lock.jpg"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>做一个懒人吧。善于使用各种工具，简化工作流，减少在重复的事情上浪费时间，使效率最大化。</p><p>附上一个Alfred workflow合集：<a href="https://github.com/zenorocha/alfred-workflows">https://github.com/zenorocha/alfred-workflows</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-alfred-workflow/alfred4.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇介绍了我日常高频使用的chrome插件，那就顺便介绍一下mac上最最最能提升效率的Alfred工作流吧。&lt;/p&gt;</summary>
    
    
    
    <category term="效率" scheme="https://suncle.me/categories/%E6%95%88%E7%8E%87/"/>
    
    
    <category term="工具" scheme="https://suncle.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="chrome" scheme="https://suncle.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>神兵利器推荐——你一定不能错过的chrome插件</title>
    <link href="https://suncle.me/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/"/>
    <id>https://suncle.me/2020/12/09/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E6%8E%A8%E8%8D%90%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%80%E5%AE%9A%E4%B8%8D%E8%83%BD%E9%94%99%E8%BF%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/</id>
    <published>2020-12-09T03:06:53.000Z</published>
    <updated>2022-08-25T03:45:39.705Z</updated>
    
    <content type="html"><![CDATA[<p>最近有朋友问我，有没有什么可以提升效率的chrome插件推荐一下。我看了一下我的插件库，好用的还真不少。既然要推荐给一个人，还不如整理出来，分享给所有需要的人。毕竟，极致利他才能最终利己嘛。</p><p>话不多说，下面一个一个的推荐，并且附上效果截图。（注意，一定要看完，图中隐藏着很多人梦寐以求的大杀器！！！）</p><h2 id="技术文章一键分发：openWrite助手"><a href="#技术文章一键分发：openWrite助手" class="headerlink" title="技术文章一键分发：openWrite助手"></a>技术文章一键分发：openWrite助手</h2><p>安全认证简书、博客园、知乎、开源中国、掘金、SegmentFault等平台，一键群发文章。</p><p>免费版只有有限的分发次数，但是为了效率，这点费用还是很值得的。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/open-write.jpg"></p><span id="more"></span><h2 id="公众号排版助手：壹伴"><a href="#公众号排版助手：壹伴" class="headerlink" title="公众号排版助手：壹伴"></a>公众号排版助手：壹伴</h2><p>简单好用的公众号效率工具。类似工具有秀米和135编辑器，可以按需使用。</p><p>只要配置好公众号的样式，之后所有的文章都可以一键排版，从而节省大量的时间。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/yiban.jpg"></p><h2 id="去掉烦人的youtube广告：Adblock-for-Youtube"><a href="#去掉烦人的youtube广告：Adblock-for-Youtube" class="headerlink" title="去掉烦人的youtube广告：Adblock for Youtube"></a>去掉烦人的youtube广告：Adblock for Youtube</h2><p>作为youtube重度用户，日常所有的看视频需求都会上youtube。虽然youtube秉承了google的不作恶原则，可以手动跳过大段的广告，观看5秒钟就可以。但是这5秒钟也非常影响观看体验。而这款插件就可以完美的解决这个痛点。</p><p>在下图的红框中可以看到有一段很不显眼的小字：”cleaned by Adblock for Youtube™ “。恭喜你，进入到没有广告的世界。</p><p>顺便推荐一下，我最最最喜欢的youtube频道<code>老高与小沫</code></p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/adblock-for-youtube.jpg"></p><h2 id="一键清除浏览器缓存：Clear-Cache"><a href="#一键清除浏览器缓存：Clear-Cache" class="headerlink" title="一键清除浏览器缓存：Clear Cache"></a>一键清除浏览器缓存：Clear Cache</h2><p>一键清除缓存和浏览器数据，再也不用按照<code>inspect -&gt; Application -&gt; Cache -&gt; delete</code>这样一条路走下来了。</p><p>对于经常需要清空浏览器缓存的前端同学来说，这个简直就是调试的春天。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/clear-cache.jpg"></p><h2 id="chrome标签页增强：Earth-View-from-Google-Earth"><a href="#chrome标签页增强：Earth-View-from-Google-Earth" class="headerlink" title="chrome标签页增强：Earth View from Google Earth"></a>chrome标签页增强：Earth View from Google Earth</h2><p>默认的chrome浏览器标签页实在是太普通，看多了就很腻。如果这时候来一个Google 地球的天空视角背景图，想来也会很开心吧，比如今天无意之间看到的这张图，West Lyons River的河流冲击区。看完之后，立马产生了去澳洲看看的念头。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/google-earth-view.jpeg"></p><h2 id="前端开发助手：FeHelper"><a href="#前端开发助手：FeHelper" class="headerlink" title="前端开发助手：FeHelper"></a>前端开发助手：FeHelper</h2><p>前端开发中使用到的各种工具的大合集，非常实用。比如常见的json美化，编解码，时间相关的等等。大部分后端也是用的上的。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/fe-helper.jpg"></p><h2 id="chrome插件分享利器：Get-CRX"><a href="#chrome插件分享利器：Get-CRX" class="headerlink" title="chrome插件分享利器：Get CRX"></a>chrome插件分享利器：Get CRX</h2><p>chrome插件商店里面安装的插件是很难找到存放位置的。比如上面安装的这些，在页面上没有保存为crx文件的按钮。这时候如果你有个朋友没法访问<code>chrome web store</code>，但是又有需要用的插件找你帮忙。这时候就只能想办法保存为离线的crx文件了。<code>Get CRX</code>这个工具就能解决你的这个问题，对着安装好的插件页面点击右键，就可以下载到你需要的crx文件了，非常好用。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/get-crx.jpg"></p><h2 id="网页Json格式自动美化：JSON-Formatter"><a href="#网页Json格式自动美化：JSON-Formatter" class="headerlink" title="网页Json格式自动美化：JSON Formatter"></a>网页Json格式自动美化：JSON Formatter</h2><p>某些网页或者接口返回的json数据，没有美化，就是扁平的字符串。这样会眼睛看着不是很方便。比如下面这个gist文件。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/json-formatter-example-raw.jpg"></p><p>装了这个插件之后，会自动将原始的json串进行pretty操作，就转换成了美化的，如下图</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/json-formatter-example-pretty.jpg"></p><h2 id="网页版以太坊钱包：MetaMask"><a href="#网页版以太坊钱包：MetaMask" class="headerlink" title="网页版以太坊钱包：MetaMask"></a>网页版以太坊钱包：MetaMask</h2><p>以太坊转账，或者基于以太坊的一些通证转账都是可以通过MetaMask而不需要登上以太坊交易所。此外，MetaMask的界面非常简洁，使用体验很好。</p><p>不过不管用什么工具，请记得保管好你的账号短语phrase。要不然像我一样，攒了很久的以太坊找不回来了。否则按照现在的虚拟货币的价格，可能已经发财了吧</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/metamask.jpg"></p><h2 id="多引擎以图搜图神器：NooBox（二箱）"><a href="#多引擎以图搜图神器：NooBox（二箱）" class="headerlink" title="多引擎以图搜图神器：NooBox（二箱）"></a>多引擎以图搜图神器：NooBox（二箱）</h2><p>以图搜图的功能能做什么就不多说了，从快播的远古时代生存到这个年代的老司机，肯定都是懂的。这款插件支持多种引擎，除了常用的baidu和google识图，还有俄罗斯的yandex和微软的必应。功能无比强大。不过，记得选好关键词<code>for teen</code>，少儿不宜的少看。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/NooBox.jpg"></p><h2 id="一键获取图片文本：One-click-Image-Reader-OCR"><a href="#一键获取图片文本：One-click-Image-Reader-OCR" class="headerlink" title="一键获取图片文本：One-click Image Reader (OCR)"></a>一键获取图片文本：One-click Image Reader (OCR)</h2><p>经常看网页pdf的打工人们，通常有一个困惑，就是很多pdf都不是文件版本的，而是扫描版本的。因此没有办法复制你需要的文字。这个工具就是为了解决这个问题。截取你需要转换成文字的区域，就可以自动转换成文字版本，而且支持一键复制。</p><p>除了网页pdf之外，还支持图片，视频。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/one-click-ocr.jpg"></p><h2 id="截取网页全屏：ScreenShot-Capture-amp-Editor-Tool"><a href="#截取网页全屏：ScreenShot-Capture-amp-Editor-Tool" class="headerlink" title="截取网页全屏：ScreenShot Capture &amp; Editor Tool"></a>截取网页全屏：ScreenShot Capture &amp; Editor Tool</h2><p>找一个短点的截图展示下效果，反正用过的都说好。就不多说了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/screenshot-carbon-now-sh-1607436737137.png"></p><h2 id="增强github浏览体验：Sourcegraph"><a href="#增强github浏览体验：Sourcegraph" class="headerlink" title="增强github浏览体验：Sourcegraph"></a>增强github浏览体验：Sourcegraph</h2><p>经常逛github的肯定有一个体验就是，绝大多数项目我只是看，又不想clone到本地，但是github的浏览体验挺不咋地的，这时候就需要插件辅助了。Sourcegraph就是其中美美的一个。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/sourcegraph.jpg"></p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p>一千个司机眼中有一千个油猴。油🐵的存在给了你的浏览器无限种可能。不过需要去找一些好用的脚本，或者自行折腾。</p><h2 id="键盘代替鼠标的神器：Vimium"><a href="#键盘代替鼠标的神器：Vimium" class="headerlink" title="键盘代替鼠标的神器：Vimium"></a>键盘代替鼠标的神器：Vimium</h2><p>假如我的鼠标坏了，我还是想用浏览器，那怎么办呢？Vimium本着Vim的精神为导航和控制提供键盘快捷键。</p><p>进入vim模式，按f键就可以给每一个按钮加一个键盘快捷键。这样就可以使用键盘进行跳转了。</p><p>除此之外，还有很多导航相关的快捷键可以使用。记住几个常用的，效率就会极大的提升。</p><p>不过，可惜的是，元旦我的成都之旅，大概率要凉凉了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/vimium.jpg"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>还有一些也不错，但是因为我的使用频率并没有那么高，所以没有在上面的列表中列举出来。</p><p>比如<code>Exstension Manager</code>，<code>Evernote Web Clipper</code>，<code>方片收集</code> 等等插件，都是能够提升效率的。</p><p>总之，善于使用浏览器的插件，会极大的提升效率、提升幸福感。希望大家都能享受这些插件带来的快感。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近有朋友问我，有没有什么可以提升效率的chrome插件推荐一下。我看了一下我的插件库，好用的还真不少。既然要推荐给一个人，还不如整理出来，分享给所有需要的人。毕竟，极致利他才能最终利己嘛。&lt;/p&gt;
&lt;p&gt;话不多说，下面一个一个的推荐，并且附上效果截图。（注意，一定要看完，图中隐藏着很多人梦寐以求的大杀器！！！）&lt;/p&gt;
&lt;h2 id=&quot;技术文章一键分发：openWrite助手&quot;&gt;&lt;a href=&quot;#技术文章一键分发：openWrite助手&quot; class=&quot;headerlink&quot; title=&quot;技术文章一键分发：openWrite助手&quot;&gt;&lt;/a&gt;技术文章一键分发：openWrite助手&lt;/h2&gt;&lt;p&gt;安全认证简书、博客园、知乎、开源中国、掘金、SegmentFault等平台，一键群发文章。&lt;/p&gt;
&lt;p&gt;免费版只有有限的分发次数，但是为了效率，这点费用还是很值得的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/efficiency-tools-chrome-extension/open-write.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="效率" scheme="https://suncle.me/categories/%E6%95%88%E7%8E%87/"/>
    
    
    <category term="工具" scheme="https://suncle.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="chrome" scheme="https://suncle.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>元旦去峨眉山吧，人间值得</title>
    <link href="https://suncle.me/2020/10/26/%E5%85%83%E6%97%A6%E5%8E%BB%E5%B3%A8%E7%9C%89%E5%B1%B1%E5%90%A7%EF%BC%8C%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/"/>
    <id>https://suncle.me/2020/10/26/%E5%85%83%E6%97%A6%E5%8E%BB%E5%B3%A8%E7%9C%89%E5%B1%B1%E5%90%A7%EF%BC%8C%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/</id>
    <published>2020-10-26T11:30:14.000Z</published>
    <updated>2022-08-25T03:40:23.796Z</updated>
    
    <content type="html"><![CDATA[<p>每年到了10月底11月初的时候，就会开始计划一年一度的大学室友聚会。</p><p>前几年关于目的地是没什么争议的，因为其中一个舍友，人称装逼王的<code>旭云</code>在成都电子科技大学读研究生，所以每年都是在成都以及周边聚聚，比如重庆，都江堰之类的。</p><p>今年比较特殊，装逼王要毕业了，时间很充裕，去哪儿都行。四人小团队第一次遇到在哪个城市聚会的问题。可能很多小伙伴元旦也开始计划元旦出行，但是又不知道去哪儿。那可以看下我们的决策方法，应该有一些借鉴意义。</p><h3 id="定决策方案"><a href="#定决策方案" class="headerlink" title="定决策方案"></a>定决策方案</h3><p>既然不知道干什么那就roll一下</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-1.jpg"></p><span id="more"></span><h3 id="定聚会目的"><a href="#定聚会目的" class="headerlink" title="定聚会目的"></a>定聚会目的</h3><p>一年没见了，检查下大家伙有没有啥变化</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-2.jpg"></p><h3 id="定目的省份"><a href="#定目的省份" class="headerlink" title="定目的省份"></a>定目的省份</h3><p>每人报3个想去的省份，然后从里面再roll。说出每个人的想法之后才知道还可以这么好玩？打猎的都有，牛逼普拉斯。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-3.jpg"></p><p>每个人都报完了之后，就有了以下这些城市了，吉林有两个人说了，所以就算2票</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-4.jpg"></p><p>见证奇迹的时刻到了，什么？是新疆？</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-5.jpg"></p><p>不对啊，喀什不是疫情很严重嘛，哥儿几个作为爱惜生命立志为国家工作50年的N好青年，那肯定不能身陷险境啊。那么就排除掉疫情高风险区，重新roll，这就出结果了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-6.jpg"></p><p>吉林，不对啊，吉林好像也是刚刚结束疫情，再考虑考虑。不过roll出来了还有效力的，得让大家表态了。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-7.jpg"></p><p>好，果断决定不去了，又得重新roll。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-8.jpg"></p><p>恩，是四川，一个熟悉的城市，虽然已经去过多次，但还是全票通过。</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-9.jpg"></p><p>毕竟，四川吃的好，喝的好，景色也好。确实没啥理由不去。</p><p>到这里，省份就定了，那么接下来需要定城市了。</p><h3 id="定目的城市"><a href="#定目的城市" class="headerlink" title="定目的城市"></a>定目的城市</h3><p>成都和都江堰群之前一次聚会去过，那么剩下可以选的有乐山（峨眉山）、色达、九寨沟，先看下距离</p><p><img src="https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-10.jpg"></p><p>元旦3天小假，在四川那样的地形情况下，直线距离200公里以上的都不太现实，用在路上的时间太久。那就选了乐山-峨眉山这条线。前段时间看乐山有不少特色美食，峨眉山也可以去爬一爬。</p><p>那就这么愉快的决定了。</p><hr><p>最后，目标真的能决定一切，自从将以后的方向定位成职场方向之后，对于摄影、户外的兴趣就相对应的下降了。来广州的几个月里面，没有去过一次白云山，也就不奇怪了，更多的喜欢休闲的方式。比如这次的聚会目的地也都是自带休闲属性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;每年到了10月底11月初的时候，就会开始计划一年一度的大学室友聚会。&lt;/p&gt;
&lt;p&gt;前几年关于目的地是没什么争议的，因为其中一个舍友，人称装逼王的&lt;code&gt;旭云&lt;/code&gt;在成都电子科技大学读研究生，所以每年都是在成都以及周边聚聚，比如重庆，都江堰之类的。&lt;/p&gt;
&lt;p&gt;今年比较特殊，装逼王要毕业了，时间很充裕，去哪儿都行。四人小团队第一次遇到在哪个城市聚会的问题。可能很多小伙伴元旦也开始计划元旦出行，但是又不知道去哪儿。那可以看下我们的决策方法，应该有一些借鉴意义。&lt;/p&gt;
&lt;h3 id=&quot;定决策方案&quot;&gt;&lt;a href=&quot;#定决策方案&quot; class=&quot;headerlink&quot; title=&quot;定决策方案&quot;&gt;&lt;/a&gt;定决策方案&lt;/h3&gt;&lt;p&gt;既然不知道干什么那就roll一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://suncle-public.oss-cn-shenzhen.aliyuncs.com/pics/article/2021-new-year-day/leshan-planning-1.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://suncle.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="旅游" scheme="https://suncle.me/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>git禁止在master分支push和commit</title>
    <link href="https://suncle.me/2020/09/25/git%E7%A6%81%E6%AD%A2%E5%9C%A8master%E5%88%86%E6%94%AFpush%E5%92%8Ccommit/"/>
    <id>https://suncle.me/2020/09/25/git%E7%A6%81%E6%AD%A2%E5%9C%A8master%E5%88%86%E6%94%AFpush%E5%92%8Ccommit/</id>
    <published>2020-09-25T05:25:35.000Z</published>
    <updated>2022-08-25T03:45:39.705Z</updated>
    
    <content type="html"><![CDATA[<p>作为管理者，在远端将master分支设为保护分支，可以从根源上杜绝直接推送到master的问题。dev分支同理。</p><p>作为开发者，在本地的git hook中加配置可以做到在commit和push操作时做对应的检查</p><span id="more"></span><h3 id="禁止在master分支上Commit"><a href="#禁止在master分支上Commit" class="headerlink" title="禁止在master分支上Commit"></a>禁止在master分支上Commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>current_branch=$(git rev-parse --symbolic --abbrev-ref HEAD)<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$current_branch</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.git/hooks: Do not commit to <span class="hljs-variable">$current_branch</span> branch&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="在master分支上Commit时提示"><a href="#在master分支上Commit时提示" class="headerlink" title="在master分支上Commit时提示"></a>在master分支上Commit时提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>current_branch=$(git rev-parse --symbolic --abbrev-ref HEAD)<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$current_branch</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;You&#x27;re about to commit to master, is that what you intended? [y|n] &quot;</span> -n 1 -r &lt;/dev/tty<br>  <span class="hljs-built_in">echo</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$REPLY</span>&quot;</span> | grep -E <span class="hljs-string">&#x27;^[Yy]$&#x27;</span> &gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 0 <span class="hljs-comment"># commit will execute</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">exit</span> 1 <span class="hljs-comment"># commit will not execute</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="禁止推送到master分支"><a href="#禁止推送到master分支" class="headerlink" title="禁止推送到master分支"></a>禁止推送到master分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>remote_branch_prefix=<span class="hljs-string">&quot;refs/heads/&quot;</span><br>protected_remote_branch=$remote_branch_prefix<span class="hljs-variable">$protected_branch</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> local_ref local_sha remote_ref remote_sha<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_remote_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$remote_ref</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.git/hooks: Do not commit to <span class="hljs-variable">$protected_branch</span> branch&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><h3 id="推送到master分支时提示"><a href="#推送到master分支时提示" class="headerlink" title="推送到master分支时提示"></a>推送到master分支时提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>protected_branch=<span class="hljs-string">&#x27;master&#x27;</span><br>remote_branch_prefix=<span class="hljs-string">&quot;refs/heads/&quot;</span><br>protected_remote_branch=$remote_branch_prefix<span class="hljs-variable">$protected_branch</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> local_ref local_sha remote_ref remote_sha<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$protected_remote_branch</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$remote_ref</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;You&#x27;re about to push master, is that what you intended? [y|n] &quot;</span> -n 1 -r &lt; /dev/tty<br>    <span class="hljs-built_in">echo</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$REPLY</span> | grep -E <span class="hljs-string">&#x27;^[Yy]$&#x27;</span> &gt; /dev/null<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">exit</span> 0 <span class="hljs-comment"># push will execute</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">exit</span> 1 <span class="hljs-comment"># push will not execute</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><blockquote><p>为什么需要循环读取？因为git一次可以push多个分支</p></blockquote><h3 id="推送时如果commit消息包含WIP则禁止推送"><a href="#推送时如果commit消息包含WIP则禁止推送" class="headerlink" title="推送时如果commit消息包含WIP则禁止推送"></a>推送时如果commit消息包含WIP则禁止推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>z40=0000000000000000000000000000000000000000<br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> local_ref local_sha remote_ref remote_sha; <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$local_sha</span>&quot;</span> = <span class="hljs-variable">$z40</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># Handle delete</span><br>    :<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$remote_sha</span>&quot;</span> = <span class="hljs-variable">$z40</span> ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-comment"># New branch, examine all commits</span><br>      range=<span class="hljs-string">&quot;<span class="hljs-variable">$local_sha</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-comment"># Update to existing branch, examine new commits</span><br>      range=<span class="hljs-string">&quot;<span class="hljs-variable">$remote_sha</span>..<span class="hljs-variable">$local_sha</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># Check for WIP commit</span><br>    commit=$(git rev-list -n 1 --grep <span class="hljs-string">&#x27;^feat: WIP&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$range</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$commit</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> &gt;&amp;2 <span class="hljs-string">&quot;Found WIP commit in <span class="hljs-variable">$local_ref</span>, not pushing&quot;</span><br>      <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><p>这时候，你可能会发现，你每一次clone项目之后都需要手动把commit和push的hook文件丢在<code>.git/hooks</code>目录下，是不是觉得不方便？别着急，有办法，我们可以让所有项目的hook操作统一到一个自定义目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/.git-hooks<span class="hljs-comment"># 创建一个存放hook的自定义目录</span><br>git config --global core.hookspath ~/.git-hooks<span class="hljs-comment"># 更改git配置指定hook目录到自定义，先别着急执行，往后看</span><br></code></pre></td></tr></table></figure><p>这样就可以实现统一管理所有项目的hooks操作了</p><blockquote><p>core.hookspath配置需要git版本在v2.9以上才行</p></blockquote><p>然后，你会觉得全局统一管理也太霸道了吧，比如说，公司的项目可以统一一套hooks操作，但是我不想把这一套hooks应用于个人github的项目啊。也就是说你需要在不同的目录下面执行不同的hooks操作，那么该怎么办呢？还是有办法：git配置是可以根据不同目录使用不同配置的</p><p>比如我只想统一管理<code>~/yy</code>目录下的所有项目，那就修改<code>~/.gitconfig</code>文件加入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[includeIf &quot;gitdir:~/yy/&quot;]</span><br>    <span class="hljs-attr">path</span> = .gitconfig-yy<br></code></pre></td></tr></table></figure><p>然后增加一个<code>~/.gitconfig-yy</code>文件，在这个文件中加入yy目录下面的独有配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br>    <span class="hljs-attr">hookspath</span> = ~/.git-hooks<br></code></pre></td></tr></table></figure><hr><p>参考：</p><ol><li><p><a href="https://stackoverflow.com/questions/42455506/in-pre-push-hook-get-git-push-command-full-content">https://stackoverflow.com/questions/42455506/in-pre-push-hook-get-git-push-command-full-content</a></p></li><li><p><a href="https://www.geek-share.com/detail/2776108340.html">https://www.geek-share.com/detail/2776108340.html</a></p></li></ol><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=38qhpnqeksg0g">https://cloud.tencent.com/developer/support-plan?invite_code=38qhpnqeksg0g</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为管理者，在远端将master分支设为保护分支，可以从根源上杜绝直接推送到master的问题。dev分支同理。&lt;/p&gt;
&lt;p&gt;作为开发者，在本地的git hook中加配置可以做到在commit和push操作时做对应的检查&lt;/p&gt;</summary>
    
    
    
    <category term="效率" scheme="https://suncle.me/categories/%E6%95%88%E7%8E%87/"/>
    
    
    <category term="hook" scheme="https://suncle.me/tags/hook/"/>
    
    <category term="git" scheme="https://suncle.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>你压力都这么大了，怎么还睡不好？</title>
    <link href="https://suncle.me/2020/09/07/%E4%BD%A0%E5%8E%8B%E5%8A%9B%E9%83%BD%E8%BF%99%E4%B9%88%E5%A4%A7%E4%BA%86%EF%BC%8C%E6%80%8E%E4%B9%88%E8%BF%98%E7%9D%A1%E4%B8%8D%E5%A5%BD%EF%BC%9F/"/>
    <id>https://suncle.me/2020/09/07/%E4%BD%A0%E5%8E%8B%E5%8A%9B%E9%83%BD%E8%BF%99%E4%B9%88%E5%A4%A7%E4%BA%86%EF%BC%8C%E6%80%8E%E4%B9%88%E8%BF%98%E7%9D%A1%E4%B8%8D%E5%A5%BD%EF%BC%9F/</id>
    <published>2020-09-06T18:22:53.000Z</published>
    <updated>2022-08-25T03:46:39.163Z</updated>
    
    <content type="html"><![CDATA[<p>在这个社会里面，每一个人压力都不小。特别是在大城市的小伙伴们，加班是常态。</p><p>面对着高消费和高房价这两座大山，随之而来的，就是焦虑，进而失眠。按照这个逻辑，应该是压力越大才会越容易失眠啊。</p><p>但我却不这么认为。你压力都这么大了，怎么还睡不好？难道不是一回到家倒头就睡的嘛，睡眠效率是100%才对啊，应该是远高于普通人的90%啊。</p><p>可是你为什么还是失眠了呢？</p><span id="more"></span><p>而我只有一种情况会失眠，那就是窗户没关，蚊子进来了，而我却以为关了窗户，但其实我只是拉了窗帘。</p><p>其他所有的时间我都能睡得很香，效率也很高，第二天也不会感觉到困。</p><p>记得今年5月走318线的时候，在新都桥露营营地的小河边扎下帐篷，海拔3300米，被子也不太够，其他人也都没有睡着，我还是睡得很香，即使外面河水哗啦啦的响。</p><h1 id="你越在乎睡眠，反倒越容易失眠"><a href="#你越在乎睡眠，反倒越容易失眠" class="headerlink" title="你越在乎睡眠，反倒越容易失眠"></a>你越在乎睡眠，反倒越容易失眠</h1><p>不要老是想今晚没睡够怎么办，躺下睡不着，我是不是身体出什么问题了？</p><p>别人都能睡八九个小时，我自己只能睡五六个小时，怎么办？</p><p>自己每天都睡不够，影响工作、学习怎么办？今天早上3点就醒过来睡不着了，怎么办？</p><p>这听起来有些反常理： 我对睡眠有要求，反而让我睡不好？</p><p>你仔细想想，是不是这样。</p><p>你心里面顾虑的事情太多， 顾虑工作，顾虑学习，顾虑考试，顾虑和别人的约会。</p><p>每次到了考试前，拼命的让自己睡觉，却失眠了，考试结果一塌糊涂。</p><p>然后就陷入了死循环。越担心睡不好结果越睡不好，越睡不好越担心。</p><p>要解开这个死结，需要降低自己对睡眠的短期预期。</p><p>就好像财富一样，不要老想着去挣钱，要去理解财富创造的规律，做正确的事，财富自然会发生。</p><h1 id="破除3个睡眠误区"><a href="#破除3个睡眠误区" class="headerlink" title="破除3个睡眠误区"></a>破除3个睡眠误区</h1><p><strong>误区一：每天必须睡够8小时。</strong> 高质量的睡眠不需要每晚睡够8小时，很多人觉得自己没睡好，只是没睡到自己设定的8小时而已。</p><p>有时候早上6点多醒了，好像也没有很困，但是算了下时间，离平时起床还有一个小时，这时候就很担心，这提前醒了可咋办啊，今天还有这么多事情要忙，又没睡好，好烦啊。</p><p>不过大可不必有这样的担心，8小时只是人这个物种每天晚上睡眠的一个平均数而已。</p><p>每个人睡眠时间的长短都是不一样的，没必要非得达到8小时，有自己的睡眠节奏就行了。</p><p><strong>误区二：喝酒能改善睡眠。</strong> 酒精虽然能助眠但是并不能提升睡眠效率，即使你喝了酒睡着了，第二天精神就真的会变好？多数情况下也并没有。</p><p>去年有一段时间，晚上下班我经常会去买两瓶RIO，有水蜜桃味白兰地的，也有蓝玫瑰味威士忌的。</p><p>但是我喝酒只是享受微醺的感觉，并不是为了助眠。喝完之后入睡确实很快。</p><p>第二天我并没有觉得精神比不喝酒更好，甚至有一些下降，白天出现了一丝丝困。</p><p>其实酒精会打断你的深度睡眠，酒喝多了，第二天会觉得全身疲乏，精神会更差。</p><p><strong>误区三：晚上没睡好中午还有午睡。</strong> 你越是睡不好越是不能午睡。在互联网公司上班，绝大多数同事都是有睡午觉的习惯的。可能是因为前一晚没睡好，需要午睡补一补。</p><p>也可能是因为下午还要工作，强迫自己休息，进而提高效率。</p><p>如果是为了提高下午的工作效率，那中午可以眯个十分钟。</p><p>但是如果是前一晚没睡好，那么并不建议中午休息。因为中午休息了，晚上又容易睡不着了，这样就进入了恶循环。</p><p>另外午睡不能超过30分钟，超过30分钟就容易进入深度睡眠。这时候被闹铃叫醒，只会觉得更困乏。</p><h1 id="提高睡眠效率的实用方法"><a href="#提高睡眠效率的实用方法" class="headerlink" title="提高睡眠效率的实用方法"></a>提高睡眠效率的实用方法</h1><p><strong>了解自己大概每天需要睡几个小时。</strong> 每个人每天需要的睡眠时长不一样。撒切尔夫人一天只需要睡四五个小时，而网球名将费德勒每天需要睡10个小时。</p><p>那么怎么找到自己的睡眠时长呢？有一个非常简单的方法。</p><blockquote><p>你可以找一个周天，完全不需要工作，按照喜欢的方式安排一定的事情，比如爬山、约会、看电影。到晚上觉得困的时候就睡觉，并且记录一下时间，第二天睡到自然醒，就可以知道自己需要的睡眠时间是几个小时了，也知道了几点开始睡觉，几点起床了。</p></blockquote><p>按照这个方法，我自己每天需要睡6个半小时，第二天就可以精力充沛了。</p><p>知道自己的睡眠时长和规律之后就按照这个节奏去实践吧。</p><p>而且早上一定要在同一时间点起床，不能赖床，立马跳到地上。晚上也是，不困就不上床，困了才去床上，去了就立马睡。</p><p>另外每天工作再忙，都找点时间出去晒晒太阳，整天待在恒温大楼里面，只能接触到人造光，蓝色光的成分太少。</p><p>我的IT同事们，愿意吃完饭去溜一圈的人寥寥无几。</p><p>中午尽量不睡觉，把困意留到晚上，就这样坚持下去，一定能收获好的睡眠。</p><p>当然最最最重要的一点是，睡眠，真的不需要太刻意。</p><p>好吧，到这里，你离好的睡眠应该更近了一步。那就慢慢改善吧，像我一样，到哪儿都能倒头就睡，睡眠效率100%。</p><p>毕竟，人生的失控，始于逐步推迟的睡眠。而人生的进步，始于高效率的睡眠。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在这个社会里面，每一个人压力都不小。特别是在大城市的小伙伴们，加班是常态。&lt;/p&gt;
&lt;p&gt;面对着高消费和高房价这两座大山，随之而来的，就是焦虑，进而失眠。按照这个逻辑，应该是压力越大才会越容易失眠啊。&lt;/p&gt;
&lt;p&gt;但我却不这么认为。你压力都这么大了，怎么还睡不好？难道不是一回到家倒头就睡的嘛，睡眠效率是100%才对啊，应该是远高于普通人的90%啊。&lt;/p&gt;
&lt;p&gt;可是你为什么还是失眠了呢？&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://suncle.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="职场" scheme="https://suncle.me/tags/%E8%81%8C%E5%9C%BA/"/>
    
    <category term="睡眠" scheme="https://suncle.me/tags/%E7%9D%A1%E7%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>程序员小哥教你秋招拿大厂offer</title>
    <link href="https://suncle.me/2020/08/30/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E5%93%A5%E6%95%99%E4%BD%A0%E7%A7%8B%E6%8B%9B%E6%8B%BF%E5%A4%A7%E5%8E%82offer/"/>
    <id>https://suncle.me/2020/08/30/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E5%93%A5%E6%95%99%E4%BD%A0%E7%A7%8B%E6%8B%9B%E6%8B%BF%E5%A4%A7%E5%8E%82offer/</id>
    <published>2020-08-30T08:35:30.000Z</published>
    <updated>2022-08-25T03:41:20.642Z</updated>
    
    <content type="html"><![CDATA[<p>快要到秋招了，对于应届生来说，秋招是一个特别重要的机会。对于社招同学来说，金九银十也是一个很好的跳槽窗口。</p><p>而我呢，因为是从上海到广州工作，就没有提前先把工作定下来。刚好也趁这个机会出去旅游了两个月。</p><p>旅游结束，等到要开始找工作的时候，发现很多知识点也都忘记的差不多了。说是从0开始准备面试似乎也不是那么过分。</p><p>但最终，大概花了3周时间，最终面试通过找到了一个薪资还不错的工作，入职广州仅有的几家大厂之一的YY欢聚时代，任职高级后端开发工程师。</p><span id="more"></span><h1 id="没有时间规划就没有offer"><a href="#没有时间规划就没有offer" class="headerlink" title="没有时间规划就没有offer"></a>没有时间规划就没有offer</h1><p>时间规划特别重要，前期你需要做的就是需要指定一个时间计划，我给自己定的面试准备时间是两周，充分准备之后才会投递简历。</p><p>一般来说，整个面试准备过程，主要分为4个部分，分别是准备简历，回顾曾经做过的项目，复习各种计算机相关理论和技术栈，还有刷算法题。</p><p>那我是怎么规划时间，将各个部分复习到位的呢？</p><p>首先，你要明白，你这次找工作是面向面试编程的。因此你得有一个意识，你不需要搞明白所有的东西，你只需要从繁杂的技术点里面剥离出面试中最可能被问到的每一个小点。</p><p>比如很多同学会花费大量时间，单独去复习自己日常使用的计算机语言。比如Python或者是Java，也可能是其他的。但其实这样性价比并没有多高。</p><p>一方面是因为你一定会刷算法题的，那么在刷算法题的时候语言相关的就顺带过一下就好了。另一方面是如果你真的要复习语言，那么只需要复习大概率会被问到的知识点就好了，并不需要单独时间。比如只需要复习Python的装饰器应用，Java的并发库实现，还有各个语言的垃圾回收机制等等。</p><p>这一步就是在做减法，给你的面试过程减负，有了这个意识，你就会觉得整个过程很轻松。</p><p>然后你需要合理的分配时间，我采用的是3+4+7的比例来分配这14天时间的。</p><p>3就是3天，用来准备简历还有回顾曾经的项目。简历要写得数据化而不是泛化，数据给面试官的冲击远远比一大堆笼统话语来得更直接。</p><p>4就是4天，用来复习各种计算机相关理论和技术栈。大后端的范畴内，考的知识点很泛，需要熟悉的方方面面很多。</p><p>比如运维开发相关，以docker+k8s为例来复习持续集成自动化部署相关。</p><p>比如大数据相关，搞清楚Hadoop生态圈主要组件的工作原理以及流程，当然也不要仅仅局限在这个圈。</p><p>此外，还有常用消息队列、关系型数据库、非关系型数据库、分布式设计的各种理论，熔断、限流、降级、秒杀，CAP理论等等。</p><p>最后的7就是7天，用来刷算法题。大厂面试必问算法，这是所有技术人员逃不过的关卡，也是大多数同学的最头疼的事情。</p><p>那么怎样才能高效顺利的攻破算法这一关呢？</p><h1 id="高效刷算法题的秘诀"><a href="#高效刷算法题的秘诀" class="headerlink" title="高效刷算法题的秘诀"></a>高效刷算法题的秘诀</h1><p>我上家公司的领导是传说中有着拉之微笑的拉总。毕竟是再惠公司唯一后端专家，技术能力没得说，广度如宇宙，深度似海洋，后端技术栈就没有拉总不知道的。</p><p>但我也经常看到拉总在LeetCode上刷题保持手感，最终拉总凭借自身强大的技术能力，再加上不断刷题保持算法的手感，成功入职哔哩哔哩。</p><p>大牛都需要刷题，更何况普通程序员。</p><p>现在大家基本都是在LeetCode上刷题，我们也只需要用好LeetCode这一个平台就够了。</p><p>开始之前，我们还是厘清我们的目的，我们是为了面试刷算法题，而不是刷着玩，也不会为了刷算法题在LeetCode上打榜争排名。</p><p>那么最高效的刷题方式还是分类刷题最好。你可能会问了，为什么不是把LeetCode一题一题的刷完呢？</p><p>首先，你并没有这么多的时间，LeetCode目前有1700多道算法题，要刷完需要大量的时间，但面试中并不会都问啊，那么我们就需要有针对性的去刷题。</p><p>此外，1700多道题目中有大量重复类型的题目。同类题目中只需要彻底搞清楚一稿题目的，举一反三就能解决这一类型的全部问题。</p><p>你有可能会问，这么多题目，我怎么知道哪些题目是一类的呢？别着急，已经有大牛为我们分门别类的整理好了LeetCode的刷题指南。</p><p>我自己刷过并且感觉有效的是github上的一个LeetCode题解仓库：</p><ul><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md</a></li></ul><p>然后按照分类，我用了一周的时间，针对性的刷了40多道各个类型的题目。这个仓库给出的是Java语言的题解。我最熟悉的是Python，自然用Python刷题了。</p><p>附上我的Python解法：公众号回复【刷算法题】，可以获得Python解法的代码包。</p><h1 id="不会不要慌，大胆给出你的猜测"><a href="#不会不要慌，大胆给出你的猜测" class="headerlink" title="不会不要慌，大胆给出你的猜测"></a>不会不要慌，大胆给出你的猜测</h1><p>分门别类的刷完题目之后，你的心里应该就更有底了，但是面试嘛，总有一些你没有准备到的技术点，总会被问到一些你完全不知道的角落。</p><p>遇到这种情况完全不用慌，大胆的告诉面试官：我不会，但是我猜是xxx这样的。</p><p>而且，只要你大胆的给出自己的猜测，只要是基于你的理解，基于你所掌握的基础理论，我相信你是可以猜到八九不离十的。</p><p>而且即使真的错了，面试官也可以从中看到你的自信，也能了解到你面向未知问题的分析思路。而这些也正是未来职场上真正需要的能力。</p><p>从我以前作为面试官的经历来看，我不喜欢面试者什么问题都能答得很流利，我更喜欢有一些关于未知的探讨，这样才能考察出面试者真正的底层能力。</p><p>从我这次作为面试者的经历来看，显然，我的大胆猜测给了面试官很好的印象。</p><hr><p>最后，这篇文章是从个人号Suncle迁移到职场亮哥这个企业号的第一篇文章，感谢之前的朋友的不离不弃，迁移过程中没有一个人取关，谢谢大家。</p><p>后续会有一篇文章解释为什么会去做这样的迁移，背后究竟经历了怎样的深思熟虑，又是否有职业规划上的方向性改变呢？公众号的定位又是什么呢？尽情期待吧！</p><p>还有新鲜出炉的留言功能，作为即将成长起来的头部大号的第一批用户的你们，请尽情的留言吧，哈哈哈！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快要到秋招了，对于应届生来说，秋招是一个特别重要的机会。对于社招同学来说，金九银十也是一个很好的跳槽窗口。&lt;/p&gt;
&lt;p&gt;而我呢，因为是从上海到广州工作，就没有提前先把工作定下来。刚好也趁这个机会出去旅游了两个月。&lt;/p&gt;
&lt;p&gt;旅游结束，等到要开始找工作的时候，发现很多知识点也都忘记的差不多了。说是从0开始准备面试似乎也不是那么过分。&lt;/p&gt;
&lt;p&gt;但最终，大概花了3周时间，最终面试通过找到了一个薪资还不错的工作，入职广州仅有的几家大厂之一的YY欢聚时代，任职高级后端开发工程师。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://suncle.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="面试" scheme="https://suncle.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="offer" scheme="https://suncle.me/tags/offer/"/>
    
  </entry>
  
  <entry>
    <title>2019年OKR</title>
    <link href="https://suncle.me/2019/12/31/2019%E5%B9%B4okr/"/>
    <id>https://suncle.me/2019/12/31/2019%E5%B9%B4okr/</id>
    <published>2019-12-31T15:59:59.000Z</published>
    <updated>2022-08-25T03:29:48.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/summary/2019-okr/IMG_20170404_055028.jpg"></p><p>2019 年计划</p><ul><li>什么是OKR</li><li>2019年OKR</li><li>个人准备</li></ul><span id="more"></span><h2 id="什么是OKR"><a href="#什么是OKR" class="headerlink" title="什么是OKR"></a>什么是OKR</h2><p>首先介绍一个概念，什么是 OKR？</p><p>OKR (Objectives and Key Results) 和 KPI (Key Performance Indicator) 不同，不属于绩效评估工具，而是一个目标管理工具。KPI是上级交代的任务指标，需要被迫的、顶着压力去完成；OKR是自己（个人或者企业）给自己设定的任务和指标，即便是我自己挖的坑自己也心甘情愿跳。</p><p>关于目标和关键结果的设立，主要有参考以下规则：</p><blockquote><p>Objectives：</p><ul><li>有野心的，较激进的</li><li>令人感觉有点紧张而不舒适的</li></ul><p>Key Results：</p><ul><li>明确的使Objectives可实现</li><li>可量化的</li></ul></blockquote><p>根据这些规则，可以制定出自己2019年的OKR。</p><h2 id="2019年OKR"><a href="#2019年OKR" class="headerlink" title="2019年OKR"></a>2019年OKR</h2><h3 id="目标一：完成2017年未完成的"><a href="#目标一：完成2017年未完成的" class="headerlink" title="目标一：完成2017年未完成的"></a>目标一：完成2017年未完成的</h3><ul><li>关键结果一：学完Google方法论</li></ul><h3 id="目标二：健身锻炼"><a href="#目标二：健身锻炼" class="headerlink" title="目标二：健身锻炼"></a>目标二：健身锻炼</h3><ul><li>关键结果一：每天饮水2000ml，坚持365天</li><li>关键结果二：健身房报名，全年在健身房健身次数达到120次</li><li>关键结果三：学会游泳，能狗爬式</li><li>关键结果四：全年跑步300公里</li></ul><h3 id="目标三：形象气质"><a href="#目标三：形象气质" class="headerlink" title="目标三：形象气质"></a>目标三：形象气质</h3><ul><li>关键结果一：学会化妆，不洗头不化妆参加聚会的次数不能超过2次</li><li>关键结果二：主动结实异性次数达到5次</li><li>关键结果三：被异性夸赞有形象改变的次数达到3次（认识的女生有限）</li><li>关键结果四：<del>开始考虑找个对象，写一篇关于过程的记录文</del></li></ul><h3 id="目标四：财务目标"><a href="#目标四：财务目标" class="headerlink" title="目标四：财务目标"></a>目标四：财务目标</h3><ul><li>关键结果一：第一季度结束前制定完适合自己的投资组合策略，并保持一年</li><li>关键结果二：提升自己的Passive income，目标数量保密</li><li>关键结果三：除工作外，有少量其他收入，具体来源保密</li></ul><h3 id="目标五：学习计划"><a href="#目标五：学习计划" class="headerlink" title="目标五：学习计划"></a>目标五：学习计划</h3><ul><li>关键结果一：在Coursera&#x2F;得到等平台上学习6门经济和艺术类的课程</li><li>关键结果二：看完10本书并写读后感</li><li>关键结果三：通过雅思考试，各项在6.5分以上，或者其他英语级别考试</li><li>关键结果四：使用Python和Java各写一个小项目</li><li>关键结果五：涉猎人工智能，开一个和金融相关的小项目</li></ul><blockquote><p>课程库：</p><ul><li>志玲姐姐的修养课</li><li>香帅的北大金融学课</li><li>薛兆丰的经济学课</li><li>熊逸-唐诗50讲</li><li>摄影-Coursera-透过摄影看世界-Sarah Meister-现代艺术博物馆</li><li>艺术-Coursera-Modern Art &amp; Ideas-现在艺术与思想-Lisa Mazzola-现代艺术博物馆</li><li>法律-Coursera-English Common Law: Structure and Principles-英国普通法：结构与原则-Professor Adam Gearey-伦敦大学</li></ul><p>书籍库：</p><ul><li>《人间失格》 太宰治</li><li>《双城记》狄更斯</li><li>《乞力马扎罗的雪》海明威</li><li>《傲慢与偏见》简·奥斯丁</li><li>《简爱》英文版</li><li>《乡关何处》野夫</li><li>《千年一叹》 余秋雨</li><li>《人生定位》 杰克·特劳特</li><li>《牛津通识读本：简明逻辑学（中文版）》 格雷厄姆•普里斯特 (Priest G.), 史正永, 韩守利</li><li>《了不起的盖茨比》菲茨杰拉德</li></ul></blockquote><h3 id="目标六：写作计划"><a href="#目标六：写作计划" class="headerlink" title="目标六：写作计划"></a>目标六：写作计划</h3><ul><li>关键目标一：完成40篇原创文章发布在博客上，重要的也发布在微信公众号上</li><li>关键目标二：完成20篇翻译</li></ul><h3 id="目标七：旅行和摄影"><a href="#目标七：旅行和摄影" class="headerlink" title="目标七：旅行和摄影"></a>目标七：旅行和摄影</h3><ul><li>关键结果一：去2个没有去过的国家</li><li>关键结果二：国内去2个偏远地区以及8个小一点的地方</li><li>关键结果三：制作3本影集（一本是2018年的欠下的，两本是2019年的）</li></ul><blockquote><p>参考 to go list:</p><ul><li>云南腾冲：热海，银杏村，樱花谷，叠水河</li><li>西藏：拉萨</li><li>泰国：曼谷和thassanawan</li><li>新疆：大西洋最后一滴眼泪，那拉提空中草原</li><li>俄罗斯西伯利亚大铁路：海参崴-贝加尔湖-叶卡捷琳堡-圣彼得堡-莫斯科-摩尔曼斯克</li><li>克罗地亚：扎达尔，杜布罗夫斯克</li><li>西北大环线：敦煌鸣沙山月牙泉</li><li>柬埔寨：暹粒，吴哥窟，西哈努克</li><li>伊朗：伊斯法罕</li></ul></blockquote><h2 id="个人准备"><a href="#个人准备" class="headerlink" title="个人准备"></a>个人准备</h2><p>人最大的命运首先是时代决定的，其次是阶层决定的，最后才是自己的努力决定的。了解自己所处的时代以及时代经济是很有必要的，因为这可以让你看清未来的方向，就像灯塔一样。然后采取适合自己的措施跟上时代步伐，减弱系统性风险。</p><p>芒格说过：</p><blockquote><p>漫长的一生，我都在期待麻烦的到来</p></blockquote><p>也就是说与其遇到麻烦不知所措，还不如准备好期待麻烦的到来。而吴军博士说过：</p><blockquote><p>上帝喜欢主动的人</p></blockquote><p>因此这个部分主要是给自己一个长远的警示，时刻主动准备着，顺便也打打气。</p><h3 id="未来经济"><a href="#未来经济" class="headerlink" title="未来经济"></a>未来经济</h3><p>接下来是一个什么样的时代：从世界范围看，或者从历史上看，中国的经济形势非常好，不会掉入中等收入陷阱。具体表现在：</p><ol><li>全世界不确定的因素基本消除，因为动荡的事情已经经历的太多从而有了预期</li><li>中国会稳定发展，变得更富有而且更加宜居。今后的中国大致还会有20年左右平稳的发展</li><li>接下来的五年中国的公司会更积极的参与全球化</li></ol><p>关于什么是中等收入陷阱以及为什么中国不会掉入中等收入陷阱这些问题可以参考吴军的硅谷来信以及万维钢的一些专栏，其中的部分观点我是比较赞同的。</p><h3 id="个人应对"><a href="#个人应对" class="headerlink" title="个人应对"></a>个人应对</h3><ol><li>主动而且专注的做事情，把握时机。不应该错过利用信息技术改造各种产业的大机会，所以需要捕获好的idea</li><li>如果要进入一个新领域，最好是找到一个能够发挥你特长的切入点，虽然不能确信能走多言，但是这可能是比较省力的方式</li><li>需要注意中国企业参与全球化的机会，可以关注一些中国走向世界的公司的前沿现状</li><li>毕业之后的前三年确实涨了不少见识，接近预期。今后五年的做事参考四条原则：看好未来，大步前进，稳健落脚，坚定信心</li></ol><hr><p>最后放一张毕业前的起飞照片</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/summary/2019-okr/mmexport1490543085073.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/summary/2019-okr/IMG_20170404_055028.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;2019 年计划&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是OKR&lt;/li&gt;
&lt;li&gt;2019年OKR&lt;/li&gt;
&lt;li&gt;个人准备&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="年度总结" scheme="https://suncle.me/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="2019" scheme="https://suncle.me/tags/2019/"/>
    
    <category term="OKR" scheme="https://suncle.me/tags/OKR/"/>
    
  </entry>
  
  <entry>
    <title>记录一次mybatis缓存和事务传播行为导致ut挂的排查过程</title>
    <link href="https://suncle.me/2019/12/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1mybatis%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E5%AF%BC%E8%87%B4ut%E6%8C%82%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/"/>
    <id>https://suncle.me/2019/12/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1mybatis%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E5%AF%BC%E8%87%B4ut%E6%8C%82%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/</id>
    <published>2019-12-19T11:42:19.000Z</published>
    <updated>2022-08-25T03:43:27.232Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次mybatis缓存和事务传播行为导致ut挂的排查过程</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>rhea项目有两个ut一直都是挂的，之前也经过几个同事排查过，但是都没有找到解决办法，慢慢的这个问题就搁置了。因为之前负责rhea项目的同事离职，我临时接手了这个项目，刚好最近来了一个新同事在做新的功能开发的时候遇到了这个问题，于是我就接了一个锅，最终证明这个锅很好玩。</p><p>rhea是一个典型的使用mybatis orm的springboot项目，我们使用h2内存数据库做单元测试，每个单元测试都在一个事务内，都由Transactional进行注解。testGetBGWechatAccountByOpenid这个ut的核心调用链如下</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/troubleshoot-a-problem-caused-by-mybatis-cache/call-chain.jpg" alt="调用链"></p><span id="more"></span><p>调用深度较深，并且有多处使用到了事务，其中<code>BasePlatformUserService.insert</code>这个方法用到了<code>Propagation.REQUIRES_NEW</code>，也就是图中最右边的这个链路中最终插入了一个PlatformUser</p><p>ut代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br><span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBGWechatAccountByOpenid</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">OpenidRo</span> <span class="hljs-variable">openidRo</span> <span class="hljs-operator">=</span> OpenidRo.builder()<br>          .openid(openidZmall)<br>          .appId(appIdZmall)<br>          .unionid(unionid)<br>          .openAppId(openAppId)<br>          .platformCategory(PlatformCategoriesEnum.Zmall.getValue())<br>          .service(ServicesEnum.Server.getValue())<br>          .serviceBusinessGroupId(serviceBusinessGroup2)<br>          .alived(<span class="hljs-literal">false</span>)<br>          .build();<br>      <span class="hljs-type">RheaAccount</span> <span class="hljs-variable">rheaAccount</span> <span class="hljs-operator">=</span> platformUserService.getAccountByOpenId(openidRo);<br>      Assert.assertEquals(rheaAccount.getPhone(), phone2);<br><br>      <span class="hljs-type">RheaPlatformUser</span> <span class="hljs-variable">platformUser</span> <span class="hljs-operator">=</span> platformUserMapper.getByOpenIdAndBG(<br>          openidZmall, appIdZmall, serviceBusinessGroup2, ServicesEnum.Server.getValue());<br>      Assert.assertEquals(rheaAccount.getId(), platformUser.getAccountId());<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>但是在ut里面使用getByOpenIdAndBG查询platformUser却是null导致最终platformUser.getAccountId()这个方法抛出了NPE。</p><h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>排查这个问题会用到以下两个知识点</p><ul><li>事务传播行为-Propagation</li><li>mybatis缓存</li><li>事务和mybatis Session的关联</li></ul><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><p>Springboot的Transactional的实现包含两部分，一个部分是事务传播行为，一个部分是数据库隔离级别，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Transactional &#123;<br>    <span class="hljs-meta">@AliasFor(&quot;transactionManager&quot;)</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br><br>    Isolation <span class="hljs-title function_">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT;<br>    <br>    ...<br></code></pre></td></tr></table></figure><p>数据库隔离级别默认是Isolation.DEFAULT，也就是使用数据库自身的隔离级别，Mysql的默认隔离级别是REPEATABLE_READ可重复读，Oracle的默认事务隔离级别是读已提交READ_COMMITTED。具体的隔离级别不在此讨论。我们需要关注事务的传播行为，也就是Propagation。Propagation实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Propagation</span> &#123;<br>    REQUIRED(<span class="hljs-number">0</span>),<br>    SUPPORTS(<span class="hljs-number">1</span>),<br>    MANDATORY(<span class="hljs-number">2</span>),<br>    REQUIRES_NEW(<span class="hljs-number">3</span>),<br>    NOT_SUPPORTED(<span class="hljs-number">4</span>),<br>    NEVER(<span class="hljs-number">5</span>),<br>    NESTED(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Propagation</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们只是用到了REQUIRED和REQUIRED_NEW，REQUIRED也是默认的传播行为，这两个传播行为的区别在于：</p><ul><li>REQUIRED：默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。所以这个级别通常<strong>能满足处理大多数的业务场景</strong>。</li><li>REQUIRED_NEW：从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。<ul><li>只有在被调用方法中的数据库操作需要保存到数据库中，而不管覆盖事务的结果如何时，才应该使用 <code>REQUIRES_NEW</code> 事务属性</li><li>举个栗子：假设尝试的所有股票交易都必须被记录在一个审计数据库中。出于验证错误、资金不足或其他原因，不管交易是否失败，这条信息都需要被持久化。如果没有对审计方法使用 <code>REQUIRES_NEW</code> 属性，审计记录就会连同尝试执行的交易一起回滚。使用 <code>REQUIRES_NEW</code> 属性可以确保不管初始事务的结果如何，审计数据都会被保存</li></ul></li></ul><h3 id="mybatis缓存"><a href="#mybatis缓存" class="headerlink" title="mybatis缓存"></a>mybatis缓存</h3><p>Mybatis-config.xml中可以配置mybatis的本地缓存范围localCacheScope。</p><p>mybatis官网解释：MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。</p><p>用白话解释：</p><ul><li>SESSION范围的缓存：在同一个SqlSession中多次查询会缓存的mapper中的方法，经过验证，key是单个查询方法<ul><li>连续查询则后续的查询会使用第一个查询的缓存结果——debug时无法找到查询的sql日志</li><li>间断的查询则会实际执行每个查询操作——可以找到每个查询的sql日志</li><li>连续的定义是：在当前Session中执行DML操作，或者开启了其他Session执行了DML操作，都认为是连续</li></ul></li><li>STATEMENT范围的缓存：本质是不使用缓存</li></ul><p>在新版本的mysql中数据库自身有自己的缓存，我们并不需要Mybatis的缓存，而且Mybatis不是最底层的缓存，因为多个Session的存在，往往导致一些问题。</p><p>修改mybatis的默认缓存范围可以在Mybatis-config.xml中加入以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置缓存作用域，它决定是否使用mybatis的缓存。 系统默认值是SESSION，为了不使用mybatis缓存，设置为STATEMENT --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STATEMENT&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>使用以下配置可以打印出mybatis执行时的操作log和sql语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事务和mybatis-Session的关联"><a href="#事务和mybatis-Session的关联" class="headerlink" title="事务和mybatis Session的关联"></a>事务和mybatis Session的关联</h3><p>开启一个新的事务并且在新的事务中首次执行mybatis操作时会开启新的mybatis Session，因此在<code>REQUIRES_NEW</code>中执行mybatis操作一定会开启新的Session</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol><li>确保mapper方法对应的sql是对的</li><li>将使用<code>REQUIRES_NEW</code>的方法改为默认的<code>REQUIRED</code>，发现能查询到platformUser</li><li>在ut中使用其他方法查询插入的platformUser，发现能查询到</li><li>mybatis配置加上日志，debug发现ut中的查询platformUserMapper.getByOpenIdAndBG发现没有打印sql</li><li>猜测可能是查询是用了mybatis缓存，取消缓存发现可以查询到真实记录</li><li>分析：<code>REQUIRES_NEW</code>开启的新事务中开启的新Session插入的记录并没有打破老Session缓存的查询结果，因此在老Session中使用相同的查询语句是查询不到真实记录的</li></ol><p>具体的debug日志如下：</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/troubleshoot-a-problem-caused-by-mybatis-cache/mybatis-sql-session-log.jpg"></p><p>红框中的就是最外层的事务开启的老session，绿色框是中间<code>REQUIRES_NEW</code>新事务中开启的新Session。所以对于红框这个Session而言，它并不知道已经发生了DML操作，因此在后续继续查询时会使用最开始的查询结果，也就是null。</p><p>这种问题通常发生在getOrCreate操作中。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>去掉Mybatis层面的缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置缓存作用域，它决定是否使用mybatis的缓存。 系统默认值是SESSION，为了不使用mybatis缓存，设置为STATEMENT --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STATEMENT&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>解决这个问题对于<code>REQUIRES_NEW</code>这个传播行为的理解就更深刻了。</p><hr><p>参考：</p><ol><li>了解事务陷阱：<a href="https://www.ibm.com/developerworks/cn/java/j-ts1.html">https://www.ibm.com/developerworks/cn/java/j-ts1.html</a></li><li>Spring五个事务隔离级别和七个事务传播行为：<a href="https://blog.csdn.net/caoxiaohong1005/article/details/79984912">https://blog.csdn.net/caoxiaohong1005/article/details/79984912</a></li><li>Innodb中的事务隔离级别和锁的关系：<a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">https://tech.meituan.com/2014/08/20/innodb-lock.html</a></li><li>Mybatis XML配置：<a href="https://mybatis.org/mybatis-3/zh/configuration.html">https://mybatis.org/mybatis-3/zh/configuration.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一次mybatis缓存和事务传播行为导致ut挂的排查过程&lt;/p&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;rhea项目有两个ut一直都是挂的，之前也经过几个同事排查过，但是都没有找到解决办法，慢慢的这个问题就搁置了。因为之前负责rhea项目的同事离职，我临时接手了这个项目，刚好最近来了一个新同事在做新的功能开发的时候遇到了这个问题，于是我就接了一个锅，最终证明这个锅很好玩。&lt;/p&gt;
&lt;p&gt;rhea是一个典型的使用mybatis orm的springboot项目，我们使用h2内存数据库做单元测试，每个单元测试都在一个事务内，都由Transactional进行注解。testGetBGWechatAccountByOpenid这个ut的核心调用链如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/troubleshoot-a-problem-caused-by-mybatis-cache/call-chain.jpg&quot; alt=&quot;调用链&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://suncle.me/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://suncle.me/tags/mybatis/"/>
    
    <category term="事务" scheme="https://suncle.me/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="缓存" scheme="https://suncle.me/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>从哈夫曼编码再出发：原理和现实</title>
    <link href="https://suncle.me/2019/11/26/%E4%BB%8E%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E5%86%8D%E5%87%BA%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E5%92%8C%E7%8E%B0%E5%AE%9E/"/>
    <id>https://suncle.me/2019/11/26/%E4%BB%8E%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E5%86%8D%E5%87%BA%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E5%92%8C%E7%8E%B0%E5%AE%9E/</id>
    <published>2019-11-26T02:36:51.000Z</published>
    <updated>2022-08-25T03:39:01.798Z</updated>
    
    <content type="html"><![CDATA[<p>对于计算机科班出身的人来说，在大学阶段几乎都学过信息论和算法这两门课，信息论都会讲到香农三大定理以及哈夫曼编码，算法课上会学习二叉树，甚至哈弗曼树。在介绍哈夫曼编码之前，先介绍一下什么是有效编码，以及香农第一定理的内容。</p><p>一个好的有效编码需要遵循两个基本原则：</p><ul><li>易辨识</li><li>有效性</li></ul><p>那么怎样才能做到有效编码呢？下面有一个问题：</p><p><strong>用10根手指头，能表达多少个数字？</strong></p><span id="more"></span><p>常见的回答有以下两种：</p><ol><li>能表达10个数字，因为小孩子数数的时候就是掰着指头数的。</li><li>能表达100个数字，因为我们平时能用一只手就能做出10个形状，也就是能数10个数，将两只手组合起来，一个表示十位，一个表示个位，就能表示从0到99共100个数字</li></ol><p>第一个回答最直观，第二个回答其实就利用了编码的知识。</p><p>但是这依然不是最有效的编码，如果我们考虑采用二进制，而不是十进制进行编码，则能表示1024个不同的数字。</p><p>具体的做法是这样的，把10个手指并排在一起，从左到右依次给手指编号，编码为0~9。每一个手指头都有伸出和收起两种状态。每一种状态对应于一位二进制，十个手指头就能表示10位二进制，也就是2的10次方，也就是1024种数字。</p><p>当然也有人觉得可以让每个手指具有伸开、半伸开、收缩三个状态，表示3的10次方也就是59049中数字。虽然这种想法也是正确的，但是过分强调有效性，而忽视了易辨识这个原则，凡事过犹不及。</p><p>常见的比较有效的编码有阿拉伯数字，莫尔斯电码以及计算机中根据电路状态演化的二进制编码。</p><p>一个有效的编码是否就是最优编码呢，答案当然是不一定。香农第一定理告诉我们编码长度是有理论最小值的，摘录信息论这本书中的公式如下：</p><p><strong>编码长度 ≥ 信息熵(信息量) &#x2F; 每一个码的信息量</strong></p><p>香农对此做出了严格的数学证明，同时还证明，只要编码系统设计得足够巧妙，上面的等号是成立的。</p><p>我们以二进制编码为例来说明这个公式，为了预测世界杯冠军，我们先对世界杯的32只球队编码，那如何编码才能使得编码长度最短呢？对于这样的n选1的问题，根据香农第一定理，32选1的信息熵为log32&#x3D;5比特（以2为底的对数），每个编码的信息量为1比特，根据公式最短编码长度为5。如果编码长度小于5，那么传递出去的信息就一定包含不确定性，也就是有损信息、失真信息。</p><p>至于信息熵的计算为什么是以2为底的对数，可以参考分治思想。</p><p>如果我们对经常出现的字母采用较短的编码，对不常见的字母采用较长的编码，根据常识，这样是能够降低编码的整体长度的。在莫尔斯电码中，我们会发现26个英文字母中的5个元音字母aeiou的编码长度是最短的。如果对英文26个字母采用等长度的编码，比如进行二进制编码，需要log26，就是5比特信息。而采用莫尔斯的编码方式，平均只需要3比特，这样效率就提升了很多。</p><p>在中国，北京和上海等重要城市的长途电话区位码就是两位，小城市就使用3位，比如北京是010，上海是021，而江苏常州是0519（所有都忽略掉前面的0），这样做的目的就是为了减少平均的编码长度。</p><p>那怎样才能找到最有效的二进制编码呢？哈夫曼在<em>《A Method for the Construction of Minimum-Redundancy Codes》</em>这篇论文中发表了基于自底向上的有序频率二叉树的编码方法，并很快证明了这个方法是最有效的。</p><p>关于哈夫曼树的构建过程可以参加文末的参考中的Wikipedia链接，此处只做一个简单描述：</p><p>假设我们要给一个英文单字**”F O R G E T”**进行哈夫曼编码，而每个英文字母出现的频率分别列在下图中。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Huffman-code-and-investment/Huffman-fig-1.jpg"></p><p>进行霍夫曼编码前，我们先创建一个霍夫曼树。</p><ol><li>将每个英文字母依照出现频率由小排到大，最小在左，如上图。</li><li>每个字母都代表一个终端节点（叶节点），比较<strong>F.O.R.G.E.T</strong>六个字母中每个字母的出现频率，将最小的两个字母频率相加合成一个新的节点。</li><li>比较<strong>5.R.G.E.T</strong>，发现<strong>R</strong>与<strong>G</strong>的频率最小，故相加4+4&#x3D;8。</li><li>比较<strong>5.8.E.T</strong>，发现<strong>5</strong>与<strong>E</strong>的频率最小，故相加5+5&#x3D;10。</li><li>比较<strong>8.10.T</strong>，发现<strong>8</strong>与<strong>T</strong>的频率最小，故相加8+7&#x3D;15。</li><li>最后剩<strong>10.15</strong>，没有可以比较的对象，相加10+15&#x3D;25。</li></ol><p>最后产生的树状图就是霍夫曼树，如下图。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Huffman-code-and-investment/Huffman_algorithm.gif"></p><p>给霍夫曼树的所有左节点’0’与右节点’1’，从树根至树叶依序记录所有字母的编码，如下图。</p><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/tech/Huffman-code-and-investment/Huffman-fig-3.jpg"></p><p>哈夫曼编码从本质上讲，是将最宝贵的资源（最短的编码）给出现概率最大的信息。我们可以在任何需要分配资源的工作中利用哈夫曼编码的思想。</p><p>在风险投资领域，利用哈夫曼编码原理投资就是一套比较有效的系统方法。假定你有一大笔钱可以用于风险投资，怎样投资效果最好？下面有三种做法：</p><ol><li>平均的投入到100个初创公司</li><li>利用自己的眼光投入到一家最可能的公司中</li><li>利用哈夫曼编码进行投资</li></ol><p>第一种方法，过于平均，基本上只能得到一个市场的平均回报。第二种方法，只投一家，其实这就是赌博，我的一些朋友购买股票时，会只买单只股票并且重仓，这种情况如果碰到了会有几倍收入，但是大多数情况下都是血本无归，这是极为糟糕的投资方式。第三种方法是利用哈夫曼编码的原理，可以先把钱逐级投下去，每一次投资的公司呈指数减少，而金额倍增，这样通常不会错失上市的那家。大部分资金都集中到了最后的上市或被收购的企业中，这种投资回报要远远高于前两种。</p><p>对于个人而言，利用哈夫曼编码进行投资也是适用的。美国有名的私立学校哈克学校的前校长尼克诺夫博士说过，在孩子小时候，要让他们尝试各种不同的爱好，但是最终他们要在一个点上实现突破。他将这比作圆规画圆，一方面有一个扎得很深的中心，另一方面有足够广的很浅的覆盖面。</p><p>在工作中，一方面需要成为某个方面的专家，做到足够的深入，比如在DevOps方面，另一方面也需要有足够的覆盖面，了解各个细分领域的设计思想，基本原理和简单实用。</p><p>对于我而言，我会尝试很多新的事情，不会去排斥，是因为不想失去机会，虽然结果是绝大部分失败了，但是至少也尝试过了，毕竟谋事在人成事在天。另一方面对于我花了一些精力，但是看样子也成不了的事情，我是坚决做减法退场止损。这条同样也适用于感情。</p><hr><p>参考：</p><ol><li>wiki：<a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81">https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81</a></li><li>dahuffman：<a href="https://github.com/soxofaan/dahuffman">https://github.com/soxofaan/dahuffman</a></li><li>哈夫曼树的调整：<a href="https://blog.csdn.net/fx677588/article/details/70767446">https://blog.csdn.net/fx677588/article/details/70767446</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于计算机科班出身的人来说，在大学阶段几乎都学过信息论和算法这两门课，信息论都会讲到香农三大定理以及哈夫曼编码，算法课上会学习二叉树，甚至哈弗曼树。在介绍哈夫曼编码之前，先介绍一下什么是有效编码，以及香农第一定理的内容。&lt;/p&gt;
&lt;p&gt;一个好的有效编码需要遵循两个基本原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易辨识&lt;/li&gt;
&lt;li&gt;有效性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么怎样才能做到有效编码呢？下面有一个问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用10根手指头，能表达多少个数字？&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://suncle.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="哈夫曼" scheme="https://suncle.me/tags/%E5%93%88%E5%A4%AB%E6%9B%BC/"/>
    
    <category term="编码" scheme="https://suncle.me/tags/%E7%BC%96%E7%A0%81/"/>
    
    <category term="投资" scheme="https://suncle.me/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>Grafana Dashboard 配置导入导出</title>
    <link href="https://suncle.me/2019/11/15/grafana-dashboard-%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>https://suncle.me/2019/11/15/grafana-dashboard-%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</id>
    <published>2019-11-15T08:57:54.000Z</published>
    <updated>2022-08-25T03:37:29.504Z</updated>
    
    <content type="html"><![CDATA[<p>我司最近的一件大事是AWS迁移阿里云，因此之前部署在AWS上的Prometheus监控系统需要迁移到Aliyun机器上，组件之一展示面板Grafana有很多自定义好的配置，而这些配置是存在于grafana.db中的，因此需要导出导入配置到新的db中。Grafana提供了丰富的api供用户使用，我们调用api导出</p><h2 id="导出配置"><a href="#导出配置" class="headerlink" title="导出配置"></a>导出配置</h2><p>首先获取Grafana的api_key：menu–configuration–api keys – add API key</p><p>然后安装jq：命令行下处理JSON 数据的工具，可以对json数据进行分片、过滤、映射和转换</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install jq<br></code></pre></td></tr></table></figure><p>导出脚本grafana-dashboard-exporter.sh参考：<a href="https://gist.github.com/crisidev/bd52bdcc7f029be2f295">https://gist.github.com/crisidev/bd52bdcc7f029be2f295</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># add the &quot;-x&quot; option to the shebang line if you want a more verbose output</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># set some colors for status OK, FAIL and titles</span><br>SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[0;32m&quot;</span><br>SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \\033[0;39m&quot;</span><br>SETCOLOR_TITLE_PURPLE=<span class="hljs-string">&quot;echo -en \\033[0;35m&quot;</span> <span class="hljs-comment"># purple</span><br><br><span class="hljs-comment"># usage log &quot;string to log&quot; &quot;color option&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_success</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[<span class="hljs-variable">$&#123;timestamp&#125;</span>] <span class="hljs-variable">$1</span>\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_failure</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[<span class="hljs-variable">$&#123;timestamp&#125;</span>] <span class="hljs-variable">$1</span>\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_title</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       log_failure <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   <span class="hljs-variable">$&#123;SETCOLOR_TITLE_PURPLE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|<span class="hljs-variable">$1</span>|\n&quot;</span>;<br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">init</span></span>() &#123;<br>   <span class="hljs-comment"># Check if hostname and key are provided</span><br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> -lt 2 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       log_failure <span class="hljs-string">&quot;Not enough command line arguments! Expecting two: \$HOSTNAME and \$KEY. Recieved only <span class="hljs-variable">$1</span>.&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   DASH_DIR=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span> | awk -F[/:] <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span>)<br><br>   <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DASH_DIR&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DASH_DIR&#125;</span>&quot;</span><br>   <span class="hljs-keyword">else</span><br>   log_title <span class="hljs-string">&quot;----------------- A <span class="hljs-variable">$DASH_DIR</span> directory already exists! -----------------&quot;</span><br>   <span class="hljs-keyword">fi</span><br>&#125;<br><br><br>HOST=<span class="hljs-variable">$1</span><br>KEY=<span class="hljs-variable">$2</span><br>init <span class="hljs-variable">$#</span> <span class="hljs-variable">$HOST</span> <span class="hljs-variable">$KEY</span><br><br>counter=0<br><br><span class="hljs-keyword">for</span> dashboard_uid <span class="hljs-keyword">in</span> $(curl -sS -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$KEY</span>&quot;</span> <span class="hljs-variable">$HOST</span>/api/search\?query\=\&amp; | jq -r <span class="hljs-string">&#x27;.[] | select( .type | contains(&quot;dash-db&quot;)) | .uid&#x27;</span>); <span class="hljs-keyword">do</span><br><br>   counter=$((counter + <span class="hljs-number">1</span>))<br>   url=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span>/api/dashboards/uid/<span class="hljs-variable">$dashboard_uid</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\r&#x27;</span>`<br>   dashboard_json=$(curl -sS -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$KEY</span>&quot;</span> <span class="hljs-variable">$url</span>)<br>   dashboard_title=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> | jq -r <span class="hljs-string">&#x27;.dashboard | .title&#x27;</span> | sed -r <span class="hljs-string">&#x27;s/[ \/]+/_/g&#x27;</span> )<br>   dashboard_version=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> | jq -r <span class="hljs-string">&#x27;.dashboard | .version&#x27;</span>)<br>   folder_title=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> | jq -r <span class="hljs-string">&#x27;.meta | .folderTitle&#x27;</span>)<br><br>   <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>/<span class="hljs-variable">$folder_title</span>&quot;</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$dashboard_json</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>/<span class="hljs-variable">$folder_title</span>/<span class="hljs-variable">$&#123;dashboard_title&#125;</span>_v<span class="hljs-variable">$&#123;dashboard_version&#125;</span>.json&quot;</span><br><br>   log_success <span class="hljs-string">&quot;Dashboard has been saved\t\t title=\&quot;<span class="hljs-variable">$&#123;dashboard_title&#125;</span>\&quot;, uid=\&quot;<span class="hljs-variable">$&#123;dashboard_uid&#125;</span>\&quot;, path=\&quot;<span class="hljs-variable">$&#123;DASH_DIR&#125;</span>/<span class="hljs-variable">$folder_title</span>/<span class="hljs-variable">$&#123;dashboard_title&#125;</span>_v<span class="hljs-variable">$&#123;dashboard_version&#125;</span>.json\&quot;.&quot;</span><br><span class="hljs-keyword">done</span><br><br>log_title <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;counter&#125;</span> dashboards were saved&quot;</span>;<br><br>log_title <span class="hljs-string">&quot;------------------------------ FINISHED ---------------------------------&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>使用方式（已脱敏）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash grafana-dashboard-exporter.sh http://localhost:3000 eyJrIjoiZkhiQUVDczNFT0QyUVE4YkJwb1RBbHasfaefaefdDVXT1dkVlkiLCJuIjoiemFpaHVpX2FXkiLCJpZCI6MX0=<br></code></pre></td></tr></table></figure><h2 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h2><ul><li>老版本：使用api_key导入</li><li>新版本（v5.0之后）：使用dockprom的setup.sh启动时导入</li></ul><h3 id="使用api导入"><a href="#使用api导入" class="headerlink" title="使用api导入"></a>使用api导入</h3><p>如果在目标机器上的Grafana已经启动并且可以访问Dashboard拿到api_key，则可以按照以下方式导入配置</p><p>导入脚本grafana-dashboard-importer.sh参考：<a href="https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05">https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># add the &quot;-x&quot; option to the shebang line if you want a more verbose output</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br>OPTSPEC=<span class="hljs-string">&quot;:hp:t:k:&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">show_help</span></span>() &#123;<br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">Usage: $0 [-p PATH] [-t TARGET_HOST] [-k API_KEY]</span><br><span class="hljs-string">Script to import dashboards into Grafana</span><br><span class="hljs-string">    -p      Required. Root path containing JSON exports of the dashboards you want imported.</span><br><span class="hljs-string">    -t      Required. The full URL of the target host</span><br><span class="hljs-string">    -k      Required. The API key to use on the target host</span><br><span class="hljs-string"></span><br><span class="hljs-string">    -h      Display this help and exit.</span><br><span class="hljs-string">EOF</span><br>&#125;<br><br><span class="hljs-comment">###### Check script invocation options ######</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;<span class="hljs-variable">$OPTSPEC</span>&quot;</span> optchar; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$optchar</span>&quot;</span> <span class="hljs-keyword">in</span><br>        h)<br>            show_help<br>            <span class="hljs-built_in">exit</span><br>            ;;<br>        p)<br>            DASH_DIR=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        t)<br>            HOST=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        k)<br>            KEY=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span>;;<br>        \?)<br>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Invalid option: -<span class="hljs-variable">$OPTARG</span>&quot;</span> &gt;&amp;2<br>          <span class="hljs-built_in">exit</span> 1<br>          ;;<br>        :)<br>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option -<span class="hljs-variable">$OPTARG</span> requires an argument.&quot;</span> &gt;&amp;2<br>          <span class="hljs-built_in">exit</span> 1<br>          ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$HOST</span>&quot;</span> ] || [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$KEY</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    show_help<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># set some colors for status OK, FAIL and titles</span><br>SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[0;32m&quot;</span><br>SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \\033[0;39m&quot;</span><br>SETCOLOR_TITLE_PURPLE=<span class="hljs-string">&quot;echo -en \\033[0;35m&quot;</span> <span class="hljs-comment"># purple</span><br><br><span class="hljs-comment"># usage log &quot;string to log&quot; &quot;color option&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_success</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[%s] <span class="hljs-variable">$1</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$timestamp</span>&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_failure</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   timestamp=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S %Z&quot;</span>)<br><br>   <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[%s] <span class="hljs-variable">$1</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$timestamp</span>&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">log_title</span></span>() &#123;<br>   <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>       log_failure <span class="hljs-string">&quot;Not enough arguments for log function! Expecting 1 argument got <span class="hljs-variable">$#</span>&quot;</span><br>       <span class="hljs-built_in">exit</span> 1<br>   <span class="hljs-keyword">fi</span><br><br>   <span class="hljs-variable">$&#123;SETCOLOR_TITLE_PURPLE&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|%s|\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>;<br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;|-------------------------------------------------------------------------|\n&quot;</span><br>   <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>&#125;<br><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    DASH_LIST=$(find <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_DIR</span>&quot;</span> -mindepth 1 -name \*.json)<br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_LIST</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        log_title <span class="hljs-string">&quot;----------------- <span class="hljs-variable">$DASH_DIR</span> contains no JSON files! -----------------&quot;</span><br>        log_failure <span class="hljs-string">&quot;Directory <span class="hljs-variable">$DASH_DIR</span> does not appear to contain any JSON files for import. Check your path and try again.&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">else</span><br>        FILESTOTAL=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_LIST</span>&quot;</span> | <span class="hljs-built_in">wc</span> -l)<br>        log_title <span class="hljs-string">&quot;----------------- Starting import of <span class="hljs-variable">$FILESTOTAL</span> dashboards -----------------&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    log_title <span class="hljs-string">&quot;----------------- <span class="hljs-variable">$DASH_DIR</span> directory not found! -----------------&quot;</span><br>    log_failure <span class="hljs-string">&quot;Directory <span class="hljs-variable">$DASH_DIR</span> does not exist. Check your path and try again.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>NUMSUCCESS=0<br>NUMFAILURE=0<br>COUNTER=0<br><br><span class="hljs-keyword">for</span> DASH_FILE <span class="hljs-keyword">in</span> <span class="hljs-variable">$DASH_LIST</span>; <span class="hljs-keyword">do</span><br>    COUNTER=$((COUNTER + <span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Import <span class="hljs-variable">$COUNTER</span>/<span class="hljs-variable">$FILESTOTAL</span>: <span class="hljs-variable">$DASH_FILE</span>...&quot;</span><br>    RESULT=$(<span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DASH_FILE</span>&quot;</span> | jq <span class="hljs-string">&#x27;. * &#123;overwrite: true, dashboard: &#123;id: null&#125;&#125;&#x27;</span> | curl -s -X POST -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$KEY</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOST</span>&quot;</span>/api/dashboards/db -d @-)<br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$RESULT</span>&quot;</span> == *<span class="hljs-string">&quot;success&quot;</span>* ]]; <span class="hljs-keyword">then</span><br>        log_success <span class="hljs-string">&quot;<span class="hljs-variable">$RESULT</span>&quot;</span><br>        NUMSUCCESS=$((NUMSUCCESS + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span><br>        log_failure <span class="hljs-string">&quot;<span class="hljs-variable">$RESULT</span>&quot;</span><br>        NUMFAILURE=$((NUMFAILURE + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br>log_title <span class="hljs-string">&quot;Import complete. <span class="hljs-variable">$NUMSUCCESS</span> dashboards were successfully imported. <span class="hljs-variable">$NUMFAILURE</span> dashboard imports failed.&quot;</span>;<br>log_title <span class="hljs-string">&quot;------------------------------ FINISHED ---------------------------------&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>使用方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash grafana-dashboard-importer.sh -t http:localhost:3000 -k eyJrIjoiZkhiQUVDczNFT0QyUaouefohaoeihoaefhaoiefiomFpaHVpX2FwaV9rZXkiLCJpZCI6MX0= -p ~/grafana-dashboard<br></code></pre></td></tr></table></figure><h3 id="使用grafana-provision"><a href="#使用grafana-provision" class="headerlink" title="使用grafana provision"></a>使用grafana provision</h3><p>新版Grafana支持使用provision的方式通过yaml配置导入 <code>dashboards | datasources | notifiers</code> 这三种资源到Grafana db中。</p><p><code>/etc/grafana/grafana.ini</code>文件中需要配置provisioning的目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[paths]</span><br><span class="hljs-attr">data</span> = /var/lib/grafana/data<br><span class="hljs-attr">logs</span> = /var/log/grafana<br><span class="hljs-attr">plugins</span> = /var/lib/grafana/plugins<br><span class="hljs-attr">provisioning</span> = /etc/grafana/provisioning<br><span class="hljs-section">[smtp]</span><br><span class="hljs-attr">enabled</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">host</span> = smtp.exmail.qq.com:<span class="hljs-number">25</span><br>...<br></code></pre></td></tr></table></figure><p><code>/etc/grafana/provisioning</code>目录中新建<code>dashboards | datasources | notifiers</code> 这三个文件夹。</p><p>在dashboards目录下<code>provisioning/dashboards/dashboard-provider.yaml</code>需要配置好需要导入的dashboard的配置文件的path：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">providers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;default&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/General</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;k8s&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;k8s&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/k8s</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;celery&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;celery&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/celery</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;pulsar&#x27;</span><br>  <span class="hljs-attr">orgId:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">&#x27;pulsar&#x27;</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">disableDeletion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/grafana/dashboards/pulsar</span><br></code></pre></td></tr></table></figure><p>在datasources目录<code>provisioning/datasources/datasource.yaml</code>下需要配置好需要导入的datasources的配置文件的path：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">datasources:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Prometheus</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">http://prometheus:9090/</span><br>  <span class="hljs-attr">access:</span> <span class="hljs-string">proxy</span><br>  <span class="hljs-attr">isDefault:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>notifiers配置暂时没有用到，保留一个空目录即可</p><p>注意事项：</p><ol><li><code>/var/lib/grafana/dashboards/General</code>目录grafana默认的目录，因此export之后的General需要导入到default中</li><li>通过export导出的json配置文件需要做处理：<ol><li>只需要json中的dashboard信息，不需要meta信息</li><li>json配置需要保持字典序</li></ol></li></ol><p>grafana-dashboard-exporter.sh导出的代码可以通过一下python代码进行转换得到provision的配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>dirs = [<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/celery&quot;</span>,<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/General&quot;</span>,<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/k8s&quot;</span>,<br>    <span class="hljs-string">&quot;/home/suncle/dockprom/grafana/dashboards/pulsar&quot;</span>,<br>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dirs:<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(d):<br>            filename = <span class="hljs-string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d, f)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.endswith(<span class="hljs-string">&quot;.json&quot;</span>) <span class="hljs-keyword">or</span> f.startswith(<span class="hljs-string">&quot;.&quot;</span>):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;r+&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>                    json_data = fp.read()<br>                    data = json.loads(json_data)<br>                    fp.seek(<span class="hljs-number">0</span>)<br>                    fp.write(json.dumps(data[<span class="hljs-string">&quot;dashboard&quot;</span>], sort_keys=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 字母序</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;: success&quot;</span>.<span class="hljs-built_in">format</span>(filename))<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename, e))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><p>Dockprom: <a href="https://github.com/stefanprodan/dockprom">https://github.com/stefanprodan/dockprom</a></p></li><li><p>Grafana-dashboard-exporter: <a href="https://gist.github.com/crisidev/bd52bdcc7f029be2f295">https://gist.github.com/crisidev/bd52bdcc7f029be2f295</a></p></li><li><p>Grafana-dashboard-import: <a href="https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05">https://gist.github.com/thedoc31/628beeee934f9c84648c108d4ad89f05</a></p></li><li><p>Provisioning Grafana: <a href="https://grafana.com/docs/administration/provisioning/">https://grafana.com/docs/administration/provisioning/</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我司最近的一件大事是AWS迁移阿里云，因此之前部署在AWS上的Prometheus监控系统需要迁移到Aliyun机器上，组件之一展示面板Grafana有很多自定义好的配置，而这些配置是存在于grafana.db中的，因此需要导出导入配置到新的db中。Grafana提供了丰富的api供用户使用，我们调用api导出&lt;/p&gt;
&lt;h2 id=&quot;导出配置&quot;&gt;&lt;a href=&quot;#导出配置&quot; class=&quot;headerlink&quot; title=&quot;导出配置&quot;&gt;&lt;/a&gt;导出配置&lt;/h2&gt;&lt;p&gt;首先获取Grafana的api_key：menu–configuration–api keys – add API key&lt;/p&gt;
&lt;p&gt;然后安装jq：命令行下处理JSON 数据的工具，可以对json数据进行分片、过滤、映射和转换&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://suncle.me/categories/devops/"/>
    
    
    <category term="Grafana" scheme="https://suncle.me/tags/Grafana/"/>
    
    <category term="Prometheus" scheme="https://suncle.me/tags/Prometheus/"/>
    
    <category term="监控" scheme="https://suncle.me/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>陆蓉的行为金融学</title>
    <link href="https://suncle.me/2019/11/13/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6/"/>
    <id>https://suncle.me/2019/11/13/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6/</id>
    <published>2019-11-13T12:31:36.000Z</published>
    <updated>2022-08-25T03:57:24.529Z</updated>
    
    <content type="html"><![CDATA[<p>准备好这个思维导图都大半年了，一直没有时间发布一下，总觉得自己会再多写一写感悟，写一写自己的投资经历，但是发现积攒的todo list变得越来越长，有时候想说的其实并没有那么多，一些单纯的分享也挺好，不求每个人都能看懂，但是能给想看的人一个整体结构。</p><p>刚好国庆放假前需要在技术中台的几个后端工程师之间做个分享，但是要准备国庆出游的行程，完全没有时间准备技术分享，因此就选择了两个偏娱乐的主题供同事选择：</p><ol><li>男女间的一些小八卦，一些关于旅游的小趣事</li><li>陆蓉的行为金融学</li></ol><p>本来想划下水，随便分享一个就结束了。出乎意料的结果同事们对这两个主题都很感兴趣，不过也是，一个是感情八卦，一个是关于钱的。这个不管是谁应该都是想听的吧。而且整个分享的过程中气氛都特别好，嗯，自认为是一次成功的分享。</p><p>具体的行为金融学的知识就看下面的思维导图了，需要mindnode源文件的文末的链接。</p><span id="more"></span><p><img src="https://flowsnow.oss-cn-shanghai.aliyuncs.com/image/normal/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE.jpg"></p><hr><p>参考：</p><ol><li>陆蓉的行为金融学课：<a href="https://flowsnow.oss-cn-shanghai.aliyuncs.com/file/tech/blog/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE.zip">https://flowsnow.oss-cn-shanghai.aliyuncs.com/file/tech/blog/%E9%99%86%E8%93%89%E7%9A%84%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE.zip</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;准备好这个思维导图都大半年了，一直没有时间发布一下，总觉得自己会再多写一写感悟，写一写自己的投资经历，但是发现积攒的todo list变得越来越长，有时候想说的其实并没有那么多，一些单纯的分享也挺好，不求每个人都能看懂，但是能给想看的人一个整体结构。&lt;/p&gt;
&lt;p&gt;刚好国庆放假前需要在技术中台的几个后端工程师之间做个分享，但是要准备国庆出游的行程，完全没有时间准备技术分享，因此就选择了两个偏娱乐的主题供同事选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;男女间的一些小八卦，一些关于旅游的小趣事&lt;/li&gt;
&lt;li&gt;陆蓉的行为金融学&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本来想划下水，随便分享一个就结束了。出乎意料的结果同事们对这两个主题都很感兴趣，不过也是，一个是感情八卦，一个是关于钱的。这个不管是谁应该都是想听的吧。而且整个分享的过程中气氛都特别好，嗯，自认为是一次成功的分享。&lt;/p&gt;
&lt;p&gt;具体的行为金融学的知识就看下面的思维导图了，需要mindnode源文件的文末的链接。&lt;/p&gt;</summary>
    
    
    
    <category term="投资" scheme="https://suncle.me/categories/%E6%8A%95%E8%B5%84/"/>
    
    
    <category term="总结" scheme="https://suncle.me/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="行为金融学" scheme="https://suncle.me/tags/%E8%A1%8C%E4%B8%BA%E9%87%91%E8%9E%8D%E5%AD%A6/"/>
    
    <category term="陆蓉" scheme="https://suncle.me/tags/%E9%99%86%E8%93%89/"/>
    
  </entry>
  
</feed>
